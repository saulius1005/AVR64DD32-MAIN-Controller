
AVR64DD32-MAIN-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000346  00806000  00000c76  00000d0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00806346  00806346  00001050  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  000010e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c5a  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d04  00000000  00000000  00005f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015de  00000000  00000000  00008c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d4  00000000  00000000  0000a24c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000024ca  00000000  00000000  0000a720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011a8  00000000  00000000  0000cbea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000dd92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e7       	ldi	r29, 0x7F	; 127
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	13 e6       	ldi	r17, 0x63	; 99
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b0 e6       	ldi	r27, 0x60	; 96
  a2:	e6 e7       	ldi	r30, 0x76	; 118
  a4:	fc e0       	ldi	r31, 0x0C	; 12
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 34       	cpi	r26, 0x46	; 70
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	23 e6       	ldi	r18, 0x63	; 99
  b4:	a6 e4       	ldi	r26, 0x46	; 70
  b6:	b3 e6       	ldi	r27, 0x63	; 99
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 34       	cpi	r26, 0x4C	; 76
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <main>
  c6:	0c 94 39 06 	jmp	0xc72	; 0xc72 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <ADC0_init>:
 * - Prescaler: Division by 4
 * - Resolution: 12-bit
 * - Enables the ADC.
 */
void ADC0_init() {
    ADC0.CTRLB = ADC_SAMPNUM_ACC128_gc; // 1 measurements
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f6 e0       	ldi	r31, 0x06	; 6
  d2:	87 e0       	ldi	r24, 0x07	; 7
  d4:	81 83       	std	Z+1, r24	; 0x01
    ADC0.CTRLC = ADC_PRESC_DIV4_gc; // 24Mhz / 16 ADC speed
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	82 83       	std	Z+2, r24	; 0x02
    ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_12BIT_gc; // 12-bit resolution
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <ADC0_SetupJoystick>:
}


void ADC0_SetupJoystick(uint8_t axis) {
    VREF.ADC0REF = VREF_REFSEL_VDD_gc;
  de:	95 e0       	ldi	r25, 0x05	; 5
  e0:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    ADC0.MUXPOS = axis;
  e4:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
  e8:	08 95       	ret

000000ea <ADC0_read>:
 * appropriately.
 *
 * @return The ADC conversion result as a 12-bit value.
 */
uint16_t ADC0_read() {
    ADC0.COMMAND = ADC_STCONV_bm; // Start conversion
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7f060a>
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)); // Wait until result is ready
  f0:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7f060d>
  f4:	80 ff       	sbrs	r24, 0
  f6:	fc cf       	rjmp	.-8      	; 0xf0 <ADC0_read+0x6>
    ADC0.INTFLAGS = ADC_RESRDY_bm; // Clear result ready flag
  f8:	e0 e0       	ldi	r30, 0x00	; 0
  fa:	f6 e0       	ldi	r31, 0x06	; 6
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	85 87       	std	Z+13, r24	; 0x0d
    return ADC0.RES >> 4; // Shift result if accumulation is over 16
 100:	80 89       	ldd	r24, Z+16	; 0x10
 102:	91 89       	ldd	r25, Z+17	; 0x11
}
 104:	92 95       	swap	r25
 106:	82 95       	swap	r24
 108:	8f 70       	andi	r24, 0x0F	; 15
 10a:	89 27       	eor	r24, r25
 10c:	9f 70       	andi	r25, 0x0F	; 15
 10e:	89 27       	eor	r24, r25
 110:	08 95       	ret

00000112 <CLOCK_XOSCHF_clock_init>:
#include "Settings.h"

void CLOCK_XOSCHF_clock_init()
{
	/* Enable external (32 MHz) clock input */
	ccp_write_io((uint8_t *) &CLKCTRL.XOSCHFCTRLA, CLKCTRL_SELHF_EXTCLOCK_gc | CLKCTRL_FRQRANGE_24M_gc | CLKCTRL_ENABLE_bm);
 112:	6b e0       	ldi	r22, 0x0B	; 11
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 02 06 	call	0xc04	; 0xc04 <ccp_write_io>

	/* Set the main clock to use external clock as source */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc);
 11c:	63 e0       	ldi	r22, 0x03	; 3
 11e:	80 e6       	ldi	r24, 0x60	; 96
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 02 06 	call	0xc04	; 0xc04 <ccp_write_io>

	/* Wait for system oscillator change to complete */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm)
 126:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
 12a:	80 fd       	sbrc	r24, 0
 12c:	fc cf       	rjmp	.-8      	; 0x126 <CLOCK_XOSCHF_clock_init+0x14>
	{};
	/* Configuration complete;*/
 12e:	08 95       	ret

00000130 <GPIO_init>:

#include "Settings.h"

void GPIO_init(){
    // Configure USART0 and USART1 pin routing
    PORTMUX.USARTROUTEA = PORTMUX_USART0_ALT1_gc | PORTMUX_USART1_ALT2_gc; // Set USART0 to alternative pins set 1, USART1 to alternative pins set 2
 130:	e0 ee       	ldi	r30, 0xE0	; 224
 132:	f5 e0       	ldi	r31, 0x05	; 5
 134:	81 e1       	ldi	r24, 0x11	; 17
 136:	82 83       	std	Z+2, r24	; 0x02
    PORTMUX.TWIROUTEA = PORTMUX_TWI0_DEFAULT_gc; // Set TWI0 to default pins
 138:	16 82       	std	Z+6, r1	; 0x06

    // Configure Port A (PA) for RX LED, I2C SDA, SCL, USART0 TX, TX LED and XDIR
    PORTA.DIRSET = PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // Set PA2, PA3, PA4, PA7 as output (RX LED, I2C SDA, SCL, USART0 TX, TX LED, XDIR)
 13a:	e0 e0       	ldi	r30, 0x00	; 0
 13c:	f4 e0       	ldi	r31, 0x04	; 4
 13e:	8c ed       	ldi	r24, 0xDC	; 220
 140:	81 83       	std	Z+1, r24	; 0x01
    PORTA.DIRCLR = PIN1_bm | PIN5_bm; // Set  PA1 as Joystick button,  PA5 as input (USART0 RX)
 142:	82 e2       	ldi	r24, 0x22	; 34
 144:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA1 (Joystick button)
 146:	88 e0       	ldi	r24, 0x08	; 8
 148:	81 8b       	std	Z+17, r24	; 0x11
    PORTA.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA4 (I2C SCL)
 14a:	84 8b       	std	Z+20, r24	; 0x14
    PORTA.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA5 (USART0 RX)
 14c:	85 8b       	std	Z+21, r24	; 0x15

    // Configure ADC pins for Joystick x and y axis
    PORTC.PIN1CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC1 (X axis)
 14e:	e0 e4       	ldi	r30, 0x40	; 64
 150:	f4 e0       	ldi	r31, 0x04	; 4
 152:	81 89       	ldd	r24, Z+17	; 0x11
 154:	88 7f       	andi	r24, 0xF8	; 248
 156:	81 8b       	std	Z+17, r24	; 0x11
    PORTC.PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC1
 158:	81 89       	ldd	r24, Z+17	; 0x11
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	81 8b       	std	Z+17, r24	; 0x11
    //PORTC.PIN1CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC1

    PORTC.PIN2CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC2 (Y axis)
 15e:	82 89       	ldd	r24, Z+18	; 0x12
 160:	88 7f       	andi	r24, 0xF8	; 248
 162:	82 8b       	std	Z+18, r24	; 0x12
    PORTC.PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC2
 164:	82 89       	ldd	r24, Z+18	; 0x12
 166:	84 60       	ori	r24, 0x04	; 4
 168:	82 8b       	std	Z+18, r24	; 0x12
    //PORTC.PIN2CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC2

	PORTC.DIRSET = PIN0_bm; //Set PC0 as RX LED
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	81 83       	std	Z+1, r24	; 0x01

    // Configure Port D (PD) for USART1 TX and RX
    PORTD.DIRSET = PIN5_bm | PIN6_bm; //Set PD5 as output (Clock change command) and PD6 as output (USART1 TX)
 16e:	e0 e6       	ldi	r30, 0x60	; 96
 170:	f4 e0       	ldi	r31, 0x04	; 4
 172:	80 e6       	ldi	r24, 0x60	; 96
 174:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = PIN5_bm; // Set PD5 high (No action, to be controlled by software)
 176:	80 e2       	ldi	r24, 0x20	; 32
 178:	85 83       	std	Z+5, r24	; 0x05
    PORTD.OUTCLR = PIN7_bm; // Set PD7 as input (USART1 RX)
 17a:	80 e8       	ldi	r24, 0x80	; 128
 17c:	86 83       	std	Z+6, r24	; 0x06
    //PORTD.PIN6CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PD6 (USART1 TX)
    //PORTD.PIN7CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PD7 (USART1 RX)

    // Configure Port F (PF) for Keypad row and column control
    PORTF.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm; // Set PF0, PF1, PF2, PF3 as output (Keypad rows)
 17e:	e0 ea       	ldi	r30, 0xA0	; 160
 180:	f4 e0       	ldi	r31, 0x04	; 4
 182:	8f e0       	ldi	r24, 0x0F	; 15
 184:	81 83       	std	Z+1, r24	; 0x01
    PORTF.OUTSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm; // Set Keypad rows to high
 186:	85 83       	std	Z+5, r24	; 0x05
 188:	08 95       	ret

0000018a <I2C_init>:
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal to release the bus
    return data;
}
 18a:	e0 e0       	ldi	r30, 0x00	; 0
 18c:	f9 e0       	ldi	r31, 0x09	; 9
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	80 83       	st	Z, r24
 192:	85 e0       	ldi	r24, 0x05	; 5
 194:	86 83       	std	Z+6, r24	; 0x06
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	83 83       	std	Z+3, r24	; 0x03
 19a:	85 83       	std	Z+5, r24	; 0x05
 19c:	08 95       	ret

0000019e <TransmitAdd>:
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	86 2b       	or	r24, r22
 1a6:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7f0907>
 1aa:	40 e2       	ldi	r20, 0x20	; 32
 1ac:	51 ea       	ldi	r21, 0xA1	; 161
 1ae:	67 e0       	ldi	r22, 0x07	; 7
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	09 c0       	rjmp	.+18     	; 0x1c6 <TransmitAdd+0x28>
 1b4:	41 50       	subi	r20, 0x01	; 1
 1b6:	51 09       	sbc	r21, r1
 1b8:	61 09       	sbc	r22, r1
 1ba:	71 09       	sbc	r23, r1
 1bc:	21 f4       	brne	.+8      	; 0x1c6 <TransmitAdd+0x28>
 1be:	83 e0       	ldi	r24, 0x03	; 3
 1c0:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <TransmitAdd+0x32>
 1c6:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
 1ca:	80 7c       	andi	r24, 0xC0	; 192
 1cc:	99 f3       	breq	.-26     	; 0x1b4 <TransmitAdd+0x16>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
 1d4:	94 fd       	sbrc	r25, 4
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
 1dc:	9c 70       	andi	r25, 0x0C	; 12
 1de:	09 f0       	breq	.+2      	; 0x1e2 <TransmitAdd+0x44>
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	88 23       	and	r24, r24
 1e4:	19 f0       	breq	.+6      	; 0x1ec <TransmitAdd+0x4e>
 1e6:	93 e0       	ldi	r25, 0x03	; 3
 1e8:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
 1ec:	80 93 46 63 	sts	0x6346, r24	; 0x806346 <__data_end>
 1f0:	08 95       	ret

000001f2 <TransmitByte>:
 1f2:	28 2f       	mov	r18, r24
 1f4:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
 1f8:	94 fd       	sbrc	r25, 4
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <TransmitByte+0xe>
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <TransmitByte+0x10>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
 206:	9c 70       	andi	r25, 0x0C	; 12
 208:	09 f0       	breq	.+2      	; 0x20c <TransmitByte+0x1a>
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	88 23       	and	r24, r24
 20e:	19 f0       	breq	.+6      	; 0x216 <TransmitByte+0x24>
 210:	93 e0       	ldi	r25, 0x03	; 3
 212:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
 216:	81 11       	cpse	r24, r1
 218:	14 c0       	rjmp	.+40     	; 0x242 <TransmitByte+0x50>
 21a:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <__TEXT_REGION_LENGTH__+0x7f0908>
 21e:	40 e2       	ldi	r20, 0x20	; 32
 220:	51 ea       	ldi	r21, 0xA1	; 161
 222:	67 e0       	ldi	r22, 0x07	; 7
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	09 c0       	rjmp	.+18     	; 0x23a <TransmitByte+0x48>
 228:	41 50       	subi	r20, 0x01	; 1
 22a:	51 09       	sbc	r21, r1
 22c:	61 09       	sbc	r22, r1
 22e:	71 09       	sbc	r23, r1
 230:	21 f4       	brne	.+8      	; 0x23a <TransmitByte+0x48>
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
 238:	04 c0       	rjmp	.+8      	; 0x242 <TransmitByte+0x50>
 23a:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
 23e:	96 ff       	sbrs	r25, 6
 240:	f3 cf       	rjmp	.-26     	; 0x228 <TransmitByte+0x36>
 242:	80 93 46 63 	sts	0x6346, r24	; 0x806346 <__data_end>
 246:	08 95       	ret

00000248 <WriteToReg>:
 * @param reg Register address to write to.
 * @param data Data to write to the register.
 * 
 * This function writes the data to a specific register of an I2C device.
 */
void WriteToReg(uint8_t addr, uint8_t reg, uint8_t data) {
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	c6 2f       	mov	r28, r22
 24e:	d4 2f       	mov	r29, r20
    if (!TransmitAdd(addr, WRITE)) { // Transmit address for write
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	0e 94 cf 00 	call	0x19e	; 0x19e <TransmitAdd>
 256:	81 11       	cpse	r24, r1
 258:	08 c0       	rjmp	.+16     	; 0x26a <WriteToReg+0x22>
        if (!TransmitByte(reg)) { // Write register address
 25a:	8c 2f       	mov	r24, r28
 25c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <TransmitByte>
 260:	81 11       	cpse	r24, r1
 262:	03 c0       	rjmp	.+6      	; 0x26a <WriteToReg+0x22>
            TransmitByte(data); // Write the data with STOP
 264:	8d 2f       	mov	r24, r29
 266:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <TransmitByte>
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	f9 e0       	ldi	r31, 0x09	; 9
 26e:	84 81       	ldd	r24, Z+4	; 0x04
 270:	83 60       	ori	r24, 0x03	; 3
 272:	84 83       	std	Z+4, r24	; 0x04
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <ReadButton>:
 */ 
#include "Settings.h"
#include "JoystickVar.h"

uint8_t ReadButton(){
	return (PORTA.IN & PIN1_bm) == 0 ? 1 : 0;
 27a:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
 27e:	86 95       	lsr	r24
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	89 27       	eor	r24, r25
}
 284:	81 70       	andi	r24, 0x01	; 1
 286:	08 95       	ret

00000288 <ReadJoystickValues>:


void ReadJoystickValues(){
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
	ADC0_SetupJoystick(Joystick_X_axis_CH);
 290:	8d e1       	ldi	r24, 0x1D	; 29
 292:	0e 94 6f 00 	call	0xde	; 0xde <ADC0_SetupJoystick>
	Joystick.X_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps; // 5 steps total: -2,-1,0,1,2 (4096/1000 = 4,096)
 296:	0e 94 75 00 	call	0xea	; 0xea <ADC0_read>
 29a:	98 50       	subi	r25, 0x08	; 8
 29c:	04 ef       	ldi	r16, 0xF4	; 244
 29e:	11 e0       	ldi	r17, 0x01	; 1
 2a0:	b8 01       	movw	r22, r16
 2a2:	0e 94 1d 03 	call	0x63a	; 0x63a <__divmodhi4>
 2a6:	c7 e4       	ldi	r28, 0x47	; 71
 2a8:	d3 e6       	ldi	r29, 0x63	; 99
 2aa:	68 83       	st	Y, r22
 2ac:	79 83       	std	Y+1, r23	; 0x01
	ADC0_SetupJoystick(Joystick_Y_axis_CH);
 2ae:	8e e1       	ldi	r24, 0x1E	; 30
 2b0:	0e 94 6f 00 	call	0xde	; 0xde <ADC0_SetupJoystick>
	Joystick.Y_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps;
 2b4:	0e 94 75 00 	call	0xea	; 0xea <ADC0_read>
 2b8:	98 50       	subi	r25, 0x08	; 8
 2ba:	b8 01       	movw	r22, r16
 2bc:	0e 94 1d 03 	call	0x63a	; 0x63a <__divmodhi4>
 2c0:	6a 83       	std	Y+2, r22	; 0x02
 2c2:	7b 83       	std	Y+3, r23	; 0x03
	Joystick.Button = ReadButton();
 2c4:	0e 94 3d 01 	call	0x27a	; 0x27a <ReadButton>
 2c8:	8c 83       	std	Y+4, r24	; 0x04
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	08 95       	ret

000002d4 <main>:
#include "Settings.h"

int main(void)
{
    // Initialize system clock, GPIO, I2C, ADC, USART, and screen
    CLOCK_XOSCHF_clock_init();
 2d4:	0e 94 89 00 	call	0x112	; 0x112 <CLOCK_XOSCHF_clock_init>
    GPIO_init();
 2d8:	0e 94 98 00 	call	0x130	; 0x130 <GPIO_init>
    I2C_init();
 2dc:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_init>
    ADC0_init();
 2e0:	0e 94 67 00 	call	0xce	; 0xce <ADC0_init>
    USART0_init();
 2e4:	0e 94 05 03 	call	0x60a	; 0x60a <USART0_init>
    USART1_init();
 2e8:	0e 94 12 03 	call	0x624	; 0x624 <USART1_init>
    screen_init();
 2ec:	0e 94 ff 01 	call	0x3fe	; 0x3fe <screen_init>
    screen_clear(); // Clear the screen
 2f0:	0e 94 46 02 	call	0x48c	; 0x48c <screen_clear>

	//screen_write_formatted_text("Screen test:", 0, ALIGN_LEFT); //simple  screen test

    while (1) 
    {
		RS485_Led(RX_LED_ON); //RS485 RX TX LED test
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <RS485_Led>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	82 e5       	ldi	r24, 0x52	; 82
 2fe:	97 e0       	ldi	r25, 0x07	; 7
 300:	21 50       	subi	r18, 0x01	; 1
 302:	80 40       	sbci	r24, 0x00	; 0
 304:	90 40       	sbci	r25, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0x2c>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x36>
 30a:	00 00       	nop
		_delay_ms(100);
		RS485_Led(TX_LED_ON);
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <RS485_Led>
 312:	2f ef       	ldi	r18, 0xFF	; 255
 314:	82 e5       	ldi	r24, 0x52	; 82
 316:	97 e0       	ldi	r25, 0x07	; 7
 318:	21 50       	subi	r18, 0x01	; 1
 31a:	80 40       	sbci	r24, 0x00	; 0
 31c:	90 40       	sbci	r25, 0x00	; 0
 31e:	e1 f7       	brne	.-8      	; 0x318 <main+0x44>
 320:	00 c0       	rjmp	.+0      	; 0x322 <main+0x4e>
 322:	00 00       	nop
		_delay_ms(100);
		RS485_Led(RX_LED_OFF);
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 db 01 	call	0x3b6	; 0x3b6 <RS485_Led>
 32a:	2f ef       	ldi	r18, 0xFF	; 255
 32c:	82 e5       	ldi	r24, 0x52	; 82
 32e:	97 e0       	ldi	r25, 0x07	; 7
 330:	21 50       	subi	r18, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0x5c>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x66>
 33a:	00 00       	nop
		_delay_ms(100);
		RS485_Led(TX_LED_OFF);
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <RS485_Led>
 342:	2f ef       	ldi	r18, 0xFF	; 255
 344:	82 e5       	ldi	r24, 0x52	; 82
 346:	97 e0       	ldi	r25, 0x07	; 7
 348:	21 50       	subi	r18, 0x01	; 1
 34a:	80 40       	sbci	r24, 0x00	; 0
 34c:	90 40       	sbci	r25, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x74>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x7e>
 352:	00 00       	nop
		screen_write_formatted_text("%d", 3, ALIGN_LEFT, SensorData.ElMin);
		screen_write_formatted_text("%d", 3, ALIGN_RIGHT, SensorData.ElMax);
		screen_write_formatted_text("%d", 4, ALIGN_LEFT, SensorData.AzMin);
		screen_write_formatted_text("%d", 4, ALIGN_RIGHT, SensorData.AzMax);*/

		ReadJoystickValues(); //Joystick test
 354:	0e 94 44 01 	call	0x288	; 0x288 <ReadJoystickValues>
		screen_write_formatted_text("%3d", 0, ALIGN_CENTER, Joystick.X_Axis);
 358:	c7 e4       	ldi	r28, 0x47	; 71
 35a:	d3 e6       	ldi	r29, 0x63	; 99
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	8f 93       	push	r24
 360:	88 81       	ld	r24, Y
 362:	8f 93       	push	r24
 364:	11 e0       	ldi	r17, 0x01	; 1
 366:	1f 93       	push	r17
 368:	1f 92       	push	r1
 36a:	0f 2e       	mov	r0, r31
 36c:	ff e3       	ldi	r31, 0x3F	; 63
 36e:	ef 2e       	mov	r14, r31
 370:	f3 e6       	ldi	r31, 0x63	; 99
 372:	ff 2e       	mov	r15, r31
 374:	f0 2d       	mov	r31, r0
 376:	ff 92       	push	r15
 378:	ef 92       	push	r14
 37a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <screen_write_formatted_text>
		screen_write_formatted_text("%3d", 1, ALIGN_CENTER, Joystick.Y_Axis);
 37e:	8b 81       	ldd	r24, Y+3	; 0x03
 380:	8f 93       	push	r24
 382:	8a 81       	ldd	r24, Y+2	; 0x02
 384:	8f 93       	push	r24
 386:	1f 93       	push	r17
 388:	1f 93       	push	r17
 38a:	ff 92       	push	r15
 38c:	ef 92       	push	r14
 38e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <screen_write_formatted_text>
		screen_write_formatted_text("%d", 2, ALIGN_CENTER, Joystick.Button);
 392:	8c 81       	ldd	r24, Y+4	; 0x04
 394:	1f 92       	push	r1
 396:	8f 93       	push	r24
 398:	1f 93       	push	r17
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	8f 93       	push	r24
 39e:	83 e4       	ldi	r24, 0x43	; 67
 3a0:	93 e6       	ldi	r25, 0x63	; 99
 3a2:	9f 93       	push	r25
 3a4:	8f 93       	push	r24
 3a6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <screen_write_formatted_text>
 3aa:	8d b7       	in	r24, 0x3d	; 61
 3ac:	9e b7       	in	r25, 0x3e	; 62
 3ae:	42 96       	adiw	r24, 0x12	; 18
 3b0:	8d bf       	out	0x3d, r24	; 61
 3b2:	9e bf       	out	0x3e, r25	; 62
 3b4:	9f cf       	rjmp	.-194    	; 0x2f4 <main+0x20>

000003b6 <RS485_Led>:
 */ 
#include "Settings.h"

void RS485_Led(RS485_LED_t LED){

    switch (LED) {
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	51 f0       	breq	.+20     	; 0x3ce <RS485_Led+0x18>
 3ba:	28 f0       	brcs	.+10     	; 0x3c6 <RS485_Led+0x10>
 3bc:	82 30       	cpi	r24, 0x02	; 2
 3be:	59 f0       	breq	.+22     	; 0x3d6 <RS485_Led+0x20>
 3c0:	83 30       	cpi	r24, 0x03	; 3
 3c2:	69 f0       	breq	.+26     	; 0x3de <RS485_Led+0x28>
 3c4:	08 95       	ret
	    case RX_LED_ON:
			PORTC.OUTSET = PIN0_bm;
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f0445>
		break;
 3cc:	08 95       	ret
	    case RX_LED_OFF:
			PORTC.OUTCLR = PIN0_bm;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f0446>
		break;
 3d4:	08 95       	ret
	    case TX_LED_ON:
			PORTA.OUTSET = PIN6_bm;
 3d6:	80 e4       	ldi	r24, 0x40	; 64
 3d8:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f0405>
		break;
 3dc:	08 95       	ret
	    case TX_LED_OFF:
			PORTA.OUTCLR = PIN6_bm;
 3de:	80 e4       	ldi	r24, 0x40	; 64
 3e0:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f0406>
 3e4:	08 95       	ret

000003e6 <screen_command>:
    if (contrast > 0x3f) {
        contrast = 0x3f;  ///< Ensure contrast does not exceed maximum
    }
    screen_command(0x81);  ///< Send command to set contrast
    screen_command(contrast);  ///< Set the contrast value
}
 3e6:	48 2f       	mov	r20, r24
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	8c e3       	ldi	r24, 0x3C	; 60
 3ec:	0e 94 24 01 	call	0x248	; 0x248 <WriteToReg>
 3f0:	08 95       	ret

000003f2 <screen_data>:
 3f2:	48 2f       	mov	r20, r24
 3f4:	60 e4       	ldi	r22, 0x40	; 64
 3f6:	8c e3       	ldi	r24, 0x3C	; 60
 3f8:	0e 94 24 01 	call	0x248	; 0x248 <WriteToReg>
 3fc:	08 95       	ret

000003fe <screen_init>:
 3fe:	cf 93       	push	r28
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	8c e3       	ldi	r24, 0x3C	; 60
 404:	0e 94 cf 00 	call	0x19e	; 0x19e <TransmitAdd>
 408:	c0 e0       	ldi	r28, 0x00	; 0
 40a:	08 c0       	rjmp	.+16     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 40c:	ec 2f       	mov	r30, r28
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	eb 5d       	subi	r30, 0xDB	; 219
 412:	fc 49       	sbci	r31, 0x9C	; 156
 414:	80 81       	ld	r24, Z
 416:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <TransmitByte>
 41a:	cf 5f       	subi	r28, 0xFF	; 255
 41c:	ca 31       	cpi	r28, 0x1A	; 26
 41e:	b0 f3       	brcs	.-20     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <screen_draw_char>:
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	d8 2f       	mov	r29, r24
 42c:	80 ee       	ldi	r24, 0xE0	; 224
 42e:	8d 0f       	add	r24, r29
 430:	80 36       	cpi	r24, 0x60	; 96
 432:	28 f0       	brcs	.+10     	; 0x43e <screen_draw_char+0x1a>
 434:	d0 3b       	cpi	r29, 0xB0	; 176
 436:	19 f0       	breq	.+6      	; 0x43e <screen_draw_char+0x1a>
 438:	d0 3c       	cpi	r29, 0xC0	; 192
 43a:	08 f4       	brcc	.+2      	; 0x43e <screen_draw_char+0x1a>
 43c:	d0 e2       	ldi	r29, 0x20	; 32
 43e:	d0 3b       	cpi	r29, 0xB0	; 176
 440:	21 f0       	breq	.+8      	; 0x44a <screen_draw_char+0x26>
 442:	d0 3c       	cpi	r29, 0xC0	; 192
 444:	20 f4       	brcc	.+8      	; 0x44e <screen_draw_char+0x2a>
 446:	10 e2       	ldi	r17, 0x20	; 32
 448:	03 c0       	rjmp	.+6      	; 0x450 <screen_draw_char+0x2c>
 44a:	10 e5       	ldi	r17, 0x50	; 80
 44c:	01 c0       	rjmp	.+2      	; 0x450 <screen_draw_char+0x2c>
 44e:	1f e5       	ldi	r17, 0x5F	; 95
 450:	c0 e0       	ldi	r28, 0x00	; 0
 452:	13 c0       	rjmp	.+38     	; 0x47a <screen_draw_char+0x56>
 454:	8d 2f       	mov	r24, r29
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	81 1b       	sub	r24, r17
 45a:	91 09       	sbc	r25, r1
 45c:	fc 01       	movw	r30, r24
 45e:	ee 0f       	add	r30, r30
 460:	ff 1f       	adc	r31, r31
 462:	ee 0f       	add	r30, r30
 464:	ff 1f       	adc	r31, r31
 466:	e8 0f       	add	r30, r24
 468:	f9 1f       	adc	r31, r25
 46a:	e0 50       	subi	r30, 0x00	; 0
 46c:	f0 4a       	sbci	r31, 0xA0	; 160
 46e:	ec 0f       	add	r30, r28
 470:	f1 1d       	adc	r31, r1
 472:	80 81       	ld	r24, Z
 474:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <screen_data>
 478:	cf 5f       	subi	r28, 0xFF	; 255
 47a:	c5 30       	cpi	r28, 0x05	; 5
 47c:	58 f3       	brcs	.-42     	; 0x454 <screen_draw_char+0x30>
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <screen_data>
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	1f 91       	pop	r17
 48a:	08 95       	ret

0000048c <screen_clear>:
 * @brief Clears the ST7567S display.
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
    for (int page = 0; page < 8; page++) {
 494:	00 e0       	ldi	r16, 0x00	; 0
 496:	10 e0       	ldi	r17, 0x00	; 0
 498:	16 c0       	rjmp	.+44     	; 0x4c6 <screen_clear+0x3a>
        screen_command(0xB0 + page);  ///< Select page
 49a:	80 eb       	ldi	r24, 0xB0	; 176
 49c:	80 0f       	add	r24, r16
 49e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <screen_command>
        screen_command(0x00);  ///< Set column address
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <screen_command>
        screen_command(0x10);  ///< Set column address
 4a8:	80 e1       	ldi	r24, 0x10	; 16
 4aa:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <screen_command>

        for (int column = 0; column < 128; column++) {
 4ae:	c0 e0       	ldi	r28, 0x00	; 0
 4b0:	d0 e0       	ldi	r29, 0x00	; 0
 4b2:	04 c0       	rjmp	.+8      	; 0x4bc <screen_clear+0x30>
            screen_data(0x00);  ///< Clear each column
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <screen_data>
    for (int page = 0; page < 8; page++) {
        screen_command(0xB0 + page);  ///< Select page
        screen_command(0x00);  ///< Set column address
        screen_command(0x10);  ///< Set column address

        for (int column = 0; column < 128; column++) {
 4ba:	21 96       	adiw	r28, 0x01	; 1
 4bc:	c0 38       	cpi	r28, 0x80	; 128
 4be:	d1 05       	cpc	r29, r1
 4c0:	cc f3       	brlt	.-14     	; 0x4b4 <screen_clear+0x28>
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
    for (int page = 0; page < 8; page++) {
 4c2:	0f 5f       	subi	r16, 0xFF	; 255
 4c4:	1f 4f       	sbci	r17, 0xFF	; 255
 4c6:	08 30       	cpi	r16, 0x08	; 8
 4c8:	11 05       	cpc	r17, r1
 4ca:	3c f3       	brlt	.-50     	; 0x49a <screen_clear+0xe>
        for (int column = 0; column < 128; column++) {
            screen_data(0x00);  ///< Clear each column
        }
    }
    //screen_contrast(SSD1306_CONTRAST);  ///< Restore contrast
}
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	1f 91       	pop	r17
 4d2:	0f 91       	pop	r16
 4d4:	08 95       	ret

000004d6 <screen_draw_text>:
 * the maximum allowed characters are displayed.
 * 
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
 4d6:	0f 93       	push	r16
 4d8:	1f 93       	push	r17
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	8c 01       	movw	r16, r24
 4e0:	d6 2f       	mov	r29, r22
    uint8_t length = 0;
 4e2:	c0 e0       	ldi	r28, 0x00	; 0
    while (*text && length < max_length) {
 4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <screen_draw_text+0x1a>
        screen_draw_char(*text);  ///< Draw each character in the string
 4e6:	0e 94 12 02 	call	0x424	; 0x424 <screen_draw_char>
        text++;
 4ea:	0f 5f       	subi	r16, 0xFF	; 255
 4ec:	1f 4f       	sbci	r17, 0xFF	; 255
        length++;
 4ee:	cf 5f       	subi	r28, 0xFF	; 255
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
    uint8_t length = 0;
    while (*text && length < max_length) {
 4f0:	f8 01       	movw	r30, r16
 4f2:	80 81       	ld	r24, Z
 4f4:	88 23       	and	r24, r24
 4f6:	39 f0       	breq	.+14     	; 0x506 <screen_draw_text+0x30>
 4f8:	cd 17       	cp	r28, r29
 4fa:	a8 f3       	brcs	.-22     	; 0x4e6 <screen_draw_text+0x10>
 4fc:	04 c0       	rjmp	.+8      	; 0x506 <screen_draw_text+0x30>
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
        screen_draw_char(' ');  ///< Fill remaining space with spaces
 4fe:	80 e2       	ldi	r24, 0x20	; 32
 500:	0e 94 12 02 	call	0x424	; 0x424 <screen_draw_char>
        length++;
 504:	cf 5f       	subi	r28, 0xFF	; 255
    while (*text && length < max_length) {
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
 506:	cd 17       	cp	r28, r29
 508:	d0 f3       	brcs	.-12     	; 0x4fe <screen_draw_text+0x28>
        screen_draw_char(' ');  ///< Fill remaining space with spaces
        length++;
    }
}
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	08 95       	ret

00000514 <screen_write_text>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param start_pixel The starting pixel column for the text.
 */
void screen_write_text(char *text, uint8_t line, uint8_t start_pixel) {
 514:	0f 93       	push	r16
 516:	1f 93       	push	r17
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	8c 01       	movw	r16, r24
 51e:	26 2f       	mov	r18, r22
 520:	c4 2f       	mov	r28, r20
    uint8_t max_chars = (128 - start_pixel) / 6;  ///< Calculate max characters per line
 522:	80 e8       	ldi	r24, 0x80	; 128
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	84 1b       	sub	r24, r20
 528:	91 09       	sbc	r25, r1
 52a:	66 e0       	ldi	r22, 0x06	; 6
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	0e 94 1d 03 	call	0x63a	; 0x63a <__divmodhi4>
 532:	d6 2f       	mov	r29, r22
    screen_command(0xB0 | line);  ///< Set the page (line)
 534:	82 2f       	mov	r24, r18
 536:	80 6b       	ori	r24, 0xB0	; 176
 538:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <screen_command>
    screen_command(0x10 | (start_pixel >> 4));  ///< Set high byte of column address
 53c:	8c 2f       	mov	r24, r28
 53e:	82 95       	swap	r24
 540:	8f 70       	andi	r24, 0x0F	; 15
 542:	80 61       	ori	r24, 0x10	; 16
 544:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <screen_command>
    screen_command(0x00 | (start_pixel & 0x0F));  ///< Set low byte of column address
 548:	8c 2f       	mov	r24, r28
 54a:	8f 70       	andi	r24, 0x0F	; 15
 54c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <screen_command>
    screen_draw_text(text, max_chars);  ///< Draw the text
 550:	6d 2f       	mov	r22, r29
 552:	c8 01       	movw	r24, r16
 554:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <screen_draw_text>
}
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	1f 91       	pop	r17
 55e:	0f 91       	pop	r16
 560:	08 95       	ret

00000562 <calculate_start_pixel>:
 * @param max_length The maximum number of characters.
 * @param alignment The desired text alignment (left, center, right).
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
 562:	ac 01       	movw	r20, r24
    uint8_t text_length = 0;
 564:	90 e0       	ldi	r25, 0x00	; 0
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
 566:	01 c0       	rjmp	.+2      	; 0x56a <calculate_start_pixel+0x8>
        text_length++;
 568:	9f 5f       	subi	r25, 0xFF	; 255
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
    uint8_t text_length = 0;
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
 56a:	fa 01       	movw	r30, r20
 56c:	e9 0f       	add	r30, r25
 56e:	f1 1d       	adc	r31, r1
 570:	20 81       	ld	r18, Z
 572:	21 11       	cpse	r18, r1
 574:	f9 cf       	rjmp	.-14     	; 0x568 <calculate_start_pixel+0x6>
        text_length++;
    }

    uint8_t text_width = text_length * 6;  ///< Calculate the width of the text in pixels
 576:	89 2f       	mov	r24, r25
 578:	88 0f       	add	r24, r24
 57a:	98 0f       	add	r25, r24
 57c:	29 2f       	mov	r18, r25
 57e:	22 0f       	add	r18, r18
    switch (alignment) {
 580:	61 30       	cpi	r22, 0x01	; 1
 582:	19 f0       	breq	.+6      	; 0x58a <calculate_start_pixel+0x28>
 584:	62 30       	cpi	r22, 0x02	; 2
 586:	69 f0       	breq	.+26     	; 0x5a2 <calculate_start_pixel+0x40>
 588:	0f c0       	rjmp	.+30     	; 0x5a8 <calculate_start_pixel+0x46>
        case ALIGN_CENTER:
            return (128 - text_width) / 2;  ///< Center the text
 58a:	80 e8       	ldi	r24, 0x80	; 128
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	ac 01       	movw	r20, r24
 590:	42 1b       	sub	r20, r18
 592:	51 09       	sbc	r21, r1
 594:	ca 01       	movw	r24, r20
 596:	99 23       	and	r25, r25
 598:	0c f4       	brge	.+2      	; 0x59c <calculate_start_pixel+0x3a>
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	95 95       	asr	r25
 59e:	87 95       	ror	r24
 5a0:	08 95       	ret
        case ALIGN_RIGHT:
            return (128 - text_width);  ///< Right-align the text
 5a2:	80 e8       	ldi	r24, 0x80	; 128
 5a4:	82 1b       	sub	r24, r18
 5a6:	08 95       	ret
        case ALIGN_LEFT:
        default:
            return 0;  ///< Left-align the text
 5a8:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 5aa:	08 95       	ret

000005ac <screen_write_text_aligned>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_text_aligned(char *text, uint8_t line, alignment_t alignment) {
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	ec 01       	movw	r28, r24
 5b4:	16 2f       	mov	r17, r22
    uint8_t start_pixel = calculate_start_pixel(text, alignment);  ///< Calculate start pixel
 5b6:	64 2f       	mov	r22, r20
 5b8:	0e 94 b1 02 	call	0x562	; 0x562 <calculate_start_pixel>
   screen_write_text(text, line, start_pixel);
 5bc:	48 2f       	mov	r20, r24
 5be:	61 2f       	mov	r22, r17
 5c0:	ce 01       	movw	r24, r28
 5c2:	0e 94 8a 02 	call	0x514	; 0x514 <screen_write_text>
}
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	1f 91       	pop	r17
 5cc:	08 95       	ret

000005ce <screen_write_formatted_text>:
 * 
 * @param format The format string for the text.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_formatted_text(const char *format, uint8_t line, alignment_t alignment, ...) {
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	cd b7       	in	r28, 0x3d	; 61
 5d4:	de b7       	in	r29, 0x3e	; 62
 5d6:	e2 97       	sbiw	r28, 0x32	; 50
 5d8:	cd bf       	out	0x3d, r28	; 61
 5da:	de bf       	out	0x3e, r29	; 62
    char textStorage[MAX_TEXT_LENGTH];  ///< Buffer for storing formatted text
    va_list args;  ///< Variable argument list

    va_start(args, alignment);  ///< Start reading variable arguments
    vsnprintf(textStorage, MAX_TEXT_LENGTH, format, args);  ///< Format the text
 5dc:	9e 01       	movw	r18, r28
 5de:	25 5c       	subi	r18, 0xC5	; 197
 5e0:	3f 4f       	sbci	r19, 0xFF	; 255
 5e2:	4f a9       	ldd	r20, Y+55	; 0x37
 5e4:	58 ad       	ldd	r21, Y+56	; 0x38
 5e6:	62 e3       	ldi	r22, 0x32	; 50
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	ce 01       	movw	r24, r28
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	0e 94 45 03 	call	0x68a	; 0x68a <vsnprintf>
    va_end(args);  ///< End reading variable arguments

    screen_write_text_aligned(textStorage, line, alignment);  ///< Write formatted text to display
 5f2:	4a ad       	ldd	r20, Y+58	; 0x3a
 5f4:	69 ad       	ldd	r22, Y+57	; 0x39
 5f6:	ce 01       	movw	r24, r28
 5f8:	01 96       	adiw	r24, 0x01	; 1
 5fa:	0e 94 d6 02 	call	0x5ac	; 0x5ac <screen_write_text_aligned>
}
 5fe:	e2 96       	adiw	r28, 0x32	; 50
 600:	cd bf       	out	0x3d, r28	; 61
 602:	de bf       	out	0x3e, r29	; 62
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	08 95       	ret

0000060a <USART0_init>:
 * @return 0 on success.
 */
int USART0_printChar(char c, FILE *stream) {
	USART0_sendChar(c); // Send character
	return 0;
}
 60a:	e0 e0       	ldi	r30, 0x00	; 0
 60c:	f8 e0       	ldi	r31, 0x08	; 8
 60e:	80 e4       	ldi	r24, 0x40	; 64
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	80 87       	std	Z+8, r24	; 0x08
 614:	91 87       	std	Z+9, r25	; 0x09
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	85 83       	std	Z+5, r24	; 0x05
 61a:	82 ec       	ldi	r24, 0xC2	; 194
 61c:	86 83       	std	Z+6, r24	; 0x06
 61e:	83 e0       	ldi	r24, 0x03	; 3
 620:	87 83       	std	Z+7, r24	; 0x07
 622:	08 95       	ret

00000624 <USART1_init>:
 * 
 * This function configures USART1 for asynchronous communication, enabling both
 * transmission and reception at a baud rate of 2.5 Mbps with double-speed operation.
 */
void USART1_init() {
	USART1.BAUD = (uint16_t)USART1_BAUD_RATE(460800); // Set baud rate to 460.8 kbps
 624:	e0 e2       	ldi	r30, 0x20	; 32
 626:	f8 e0       	ldi	r31, 0x08	; 8
 628:	81 ea       	ldi	r24, 0xA1	; 161
 62a:	91 e0       	ldi	r25, 0x01	; 1
 62c:	80 87       	std	Z+8, r24	; 0x08
 62e:	91 87       	std	Z+9, r25	; 0x09
	USART1.CTRLB = USART_RXEN_bm /*| USART_TXEN_bm*/ | USART_RXMODE_CLK2X_gc; // Enable RX, TX, double speed mode
 630:	82 e8       	ldi	r24, 0x82	; 130
 632:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc; // Configure for 8-bit, no parity, 1 stop bit, asynchronous mode
 634:	83 e0       	ldi	r24, 0x03	; 3
 636:	87 83       	std	Z+7, r24	; 0x07
 638:	08 95       	ret

0000063a <__divmodhi4>:
 63a:	97 fb       	bst	r25, 7
 63c:	07 2e       	mov	r0, r23
 63e:	16 f4       	brtc	.+4      	; 0x644 <__divmodhi4+0xa>
 640:	00 94       	com	r0
 642:	07 d0       	rcall	.+14     	; 0x652 <__divmodhi4_neg1>
 644:	77 fd       	sbrc	r23, 7
 646:	09 d0       	rcall	.+18     	; 0x65a <__divmodhi4_neg2>
 648:	0e 94 31 03 	call	0x662	; 0x662 <__udivmodhi4>
 64c:	07 fc       	sbrc	r0, 7
 64e:	05 d0       	rcall	.+10     	; 0x65a <__divmodhi4_neg2>
 650:	3e f4       	brtc	.+14     	; 0x660 <__divmodhi4_exit>

00000652 <__divmodhi4_neg1>:
 652:	90 95       	com	r25
 654:	81 95       	neg	r24
 656:	9f 4f       	sbci	r25, 0xFF	; 255
 658:	08 95       	ret

0000065a <__divmodhi4_neg2>:
 65a:	70 95       	com	r23
 65c:	61 95       	neg	r22
 65e:	7f 4f       	sbci	r23, 0xFF	; 255

00000660 <__divmodhi4_exit>:
 660:	08 95       	ret

00000662 <__udivmodhi4>:
 662:	aa 1b       	sub	r26, r26
 664:	bb 1b       	sub	r27, r27
 666:	51 e1       	ldi	r21, 0x11	; 17
 668:	07 c0       	rjmp	.+14     	; 0x678 <__udivmodhi4_ep>

0000066a <__udivmodhi4_loop>:
 66a:	aa 1f       	adc	r26, r26
 66c:	bb 1f       	adc	r27, r27
 66e:	a6 17       	cp	r26, r22
 670:	b7 07       	cpc	r27, r23
 672:	10 f0       	brcs	.+4      	; 0x678 <__udivmodhi4_ep>
 674:	a6 1b       	sub	r26, r22
 676:	b7 0b       	sbc	r27, r23

00000678 <__udivmodhi4_ep>:
 678:	88 1f       	adc	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	5a 95       	dec	r21
 67e:	a9 f7       	brne	.-22     	; 0x66a <__udivmodhi4_loop>
 680:	80 95       	com	r24
 682:	90 95       	com	r25
 684:	bc 01       	movw	r22, r24
 686:	cd 01       	movw	r24, r26
 688:	08 95       	ret

0000068a <vsnprintf>:
 68a:	ae e0       	ldi	r26, 0x0E	; 14
 68c:	b0 e0       	ldi	r27, 0x00	; 0
 68e:	eb e4       	ldi	r30, 0x4B	; 75
 690:	f3 e0       	ldi	r31, 0x03	; 3
 692:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__prologue_saves__+0x1c>
 696:	8c 01       	movw	r16, r24
 698:	fa 01       	movw	r30, r20
 69a:	86 e0       	ldi	r24, 0x06	; 6
 69c:	8c 83       	std	Y+4, r24	; 0x04
 69e:	09 83       	std	Y+1, r16	; 0x01
 6a0:	1a 83       	std	Y+2, r17	; 0x02
 6a2:	77 ff       	sbrs	r23, 7
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <vsnprintf+0x20>
 6a6:	60 e0       	ldi	r22, 0x00	; 0
 6a8:	70 e8       	ldi	r23, 0x80	; 128
 6aa:	cb 01       	movw	r24, r22
 6ac:	01 97       	sbiw	r24, 0x01	; 1
 6ae:	8d 83       	std	Y+5, r24	; 0x05
 6b0:	9e 83       	std	Y+6, r25	; 0x06
 6b2:	a9 01       	movw	r20, r18
 6b4:	bf 01       	movw	r22, r30
 6b6:	ce 01       	movw	r24, r28
 6b8:	01 96       	adiw	r24, 0x01	; 1
 6ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vfprintf>
 6be:	4d 81       	ldd	r20, Y+5	; 0x05
 6c0:	5e 81       	ldd	r21, Y+6	; 0x06
 6c2:	57 fd       	sbrc	r21, 7
 6c4:	0a c0       	rjmp	.+20     	; 0x6da <vsnprintf+0x50>
 6c6:	2f 81       	ldd	r18, Y+7	; 0x07
 6c8:	38 85       	ldd	r19, Y+8	; 0x08
 6ca:	42 17       	cp	r20, r18
 6cc:	53 07       	cpc	r21, r19
 6ce:	0c f4       	brge	.+2      	; 0x6d2 <vsnprintf+0x48>
 6d0:	9a 01       	movw	r18, r20
 6d2:	f8 01       	movw	r30, r16
 6d4:	e2 0f       	add	r30, r18
 6d6:	f3 1f       	adc	r31, r19
 6d8:	10 82       	st	Z, r1
 6da:	2e 96       	adiw	r28, 0x0e	; 14
 6dc:	e4 e0       	ldi	r30, 0x04	; 4
 6de:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__epilogue_restores__+0x1c>

000006e2 <vfprintf>:
 6e2:	ab e0       	ldi	r26, 0x0B	; 11
 6e4:	b0 e0       	ldi	r27, 0x00	; 0
 6e6:	e7 e7       	ldi	r30, 0x77	; 119
 6e8:	f3 e0       	ldi	r31, 0x03	; 3
 6ea:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__prologue_saves__>
 6ee:	6c 01       	movw	r12, r24
 6f0:	7b 01       	movw	r14, r22
 6f2:	8a 01       	movw	r16, r20
 6f4:	fc 01       	movw	r30, r24
 6f6:	16 82       	std	Z+6, r1	; 0x06
 6f8:	17 82       	std	Z+7, r1	; 0x07
 6fa:	83 81       	ldd	r24, Z+3	; 0x03
 6fc:	81 ff       	sbrs	r24, 1
 6fe:	cc c1       	rjmp	.+920    	; 0xa98 <vfprintf+0x3b6>
 700:	ce 01       	movw	r24, r28
 702:	01 96       	adiw	r24, 0x01	; 1
 704:	3c 01       	movw	r6, r24
 706:	f6 01       	movw	r30, r12
 708:	93 81       	ldd	r25, Z+3	; 0x03
 70a:	f7 01       	movw	r30, r14
 70c:	93 fd       	sbrc	r25, 3
 70e:	85 91       	lpm	r24, Z+
 710:	93 ff       	sbrs	r25, 3
 712:	81 91       	ld	r24, Z+
 714:	7f 01       	movw	r14, r30
 716:	88 23       	and	r24, r24
 718:	09 f4       	brne	.+2      	; 0x71c <vfprintf+0x3a>
 71a:	ba c1       	rjmp	.+884    	; 0xa90 <vfprintf+0x3ae>
 71c:	85 32       	cpi	r24, 0x25	; 37
 71e:	39 f4       	brne	.+14     	; 0x72e <vfprintf+0x4c>
 720:	93 fd       	sbrc	r25, 3
 722:	85 91       	lpm	r24, Z+
 724:	93 ff       	sbrs	r25, 3
 726:	81 91       	ld	r24, Z+
 728:	7f 01       	movw	r14, r30
 72a:	85 32       	cpi	r24, 0x25	; 37
 72c:	29 f4       	brne	.+10     	; 0x738 <vfprintf+0x56>
 72e:	b6 01       	movw	r22, r12
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 736:	e7 cf       	rjmp	.-50     	; 0x706 <vfprintf+0x24>
 738:	91 2c       	mov	r9, r1
 73a:	21 2c       	mov	r2, r1
 73c:	31 2c       	mov	r3, r1
 73e:	ff e1       	ldi	r31, 0x1F	; 31
 740:	f3 15       	cp	r31, r3
 742:	d8 f0       	brcs	.+54     	; 0x77a <vfprintf+0x98>
 744:	8b 32       	cpi	r24, 0x2B	; 43
 746:	79 f0       	breq	.+30     	; 0x766 <vfprintf+0x84>
 748:	38 f4       	brcc	.+14     	; 0x758 <vfprintf+0x76>
 74a:	80 32       	cpi	r24, 0x20	; 32
 74c:	79 f0       	breq	.+30     	; 0x76c <vfprintf+0x8a>
 74e:	83 32       	cpi	r24, 0x23	; 35
 750:	a1 f4       	brne	.+40     	; 0x77a <vfprintf+0x98>
 752:	23 2d       	mov	r18, r3
 754:	20 61       	ori	r18, 0x10	; 16
 756:	1d c0       	rjmp	.+58     	; 0x792 <vfprintf+0xb0>
 758:	8d 32       	cpi	r24, 0x2D	; 45
 75a:	61 f0       	breq	.+24     	; 0x774 <vfprintf+0x92>
 75c:	80 33       	cpi	r24, 0x30	; 48
 75e:	69 f4       	brne	.+26     	; 0x77a <vfprintf+0x98>
 760:	23 2d       	mov	r18, r3
 762:	21 60       	ori	r18, 0x01	; 1
 764:	16 c0       	rjmp	.+44     	; 0x792 <vfprintf+0xb0>
 766:	83 2d       	mov	r24, r3
 768:	82 60       	ori	r24, 0x02	; 2
 76a:	38 2e       	mov	r3, r24
 76c:	e3 2d       	mov	r30, r3
 76e:	e4 60       	ori	r30, 0x04	; 4
 770:	3e 2e       	mov	r3, r30
 772:	2a c0       	rjmp	.+84     	; 0x7c8 <vfprintf+0xe6>
 774:	f3 2d       	mov	r31, r3
 776:	f8 60       	ori	r31, 0x08	; 8
 778:	1d c0       	rjmp	.+58     	; 0x7b4 <vfprintf+0xd2>
 77a:	37 fc       	sbrc	r3, 7
 77c:	2d c0       	rjmp	.+90     	; 0x7d8 <vfprintf+0xf6>
 77e:	20 ed       	ldi	r18, 0xD0	; 208
 780:	28 0f       	add	r18, r24
 782:	2a 30       	cpi	r18, 0x0A	; 10
 784:	40 f0       	brcs	.+16     	; 0x796 <vfprintf+0xb4>
 786:	8e 32       	cpi	r24, 0x2E	; 46
 788:	b9 f4       	brne	.+46     	; 0x7b8 <vfprintf+0xd6>
 78a:	36 fc       	sbrc	r3, 6
 78c:	81 c1       	rjmp	.+770    	; 0xa90 <vfprintf+0x3ae>
 78e:	23 2d       	mov	r18, r3
 790:	20 64       	ori	r18, 0x40	; 64
 792:	32 2e       	mov	r3, r18
 794:	19 c0       	rjmp	.+50     	; 0x7c8 <vfprintf+0xe6>
 796:	36 fe       	sbrs	r3, 6
 798:	06 c0       	rjmp	.+12     	; 0x7a6 <vfprintf+0xc4>
 79a:	8a e0       	ldi	r24, 0x0A	; 10
 79c:	98 9e       	mul	r9, r24
 79e:	20 0d       	add	r18, r0
 7a0:	11 24       	eor	r1, r1
 7a2:	92 2e       	mov	r9, r18
 7a4:	11 c0       	rjmp	.+34     	; 0x7c8 <vfprintf+0xe6>
 7a6:	ea e0       	ldi	r30, 0x0A	; 10
 7a8:	2e 9e       	mul	r2, r30
 7aa:	20 0d       	add	r18, r0
 7ac:	11 24       	eor	r1, r1
 7ae:	22 2e       	mov	r2, r18
 7b0:	f3 2d       	mov	r31, r3
 7b2:	f0 62       	ori	r31, 0x20	; 32
 7b4:	3f 2e       	mov	r3, r31
 7b6:	08 c0       	rjmp	.+16     	; 0x7c8 <vfprintf+0xe6>
 7b8:	8c 36       	cpi	r24, 0x6C	; 108
 7ba:	21 f4       	brne	.+8      	; 0x7c4 <vfprintf+0xe2>
 7bc:	83 2d       	mov	r24, r3
 7be:	80 68       	ori	r24, 0x80	; 128
 7c0:	38 2e       	mov	r3, r24
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <vfprintf+0xe6>
 7c4:	88 36       	cpi	r24, 0x68	; 104
 7c6:	41 f4       	brne	.+16     	; 0x7d8 <vfprintf+0xf6>
 7c8:	f7 01       	movw	r30, r14
 7ca:	93 fd       	sbrc	r25, 3
 7cc:	85 91       	lpm	r24, Z+
 7ce:	93 ff       	sbrs	r25, 3
 7d0:	81 91       	ld	r24, Z+
 7d2:	7f 01       	movw	r14, r30
 7d4:	81 11       	cpse	r24, r1
 7d6:	b3 cf       	rjmp	.-154    	; 0x73e <vfprintf+0x5c>
 7d8:	98 2f       	mov	r25, r24
 7da:	9f 7d       	andi	r25, 0xDF	; 223
 7dc:	95 54       	subi	r25, 0x45	; 69
 7de:	93 30       	cpi	r25, 0x03	; 3
 7e0:	28 f4       	brcc	.+10     	; 0x7ec <vfprintf+0x10a>
 7e2:	0c 5f       	subi	r16, 0xFC	; 252
 7e4:	1f 4f       	sbci	r17, 0xFF	; 255
 7e6:	9f e3       	ldi	r25, 0x3F	; 63
 7e8:	99 83       	std	Y+1, r25	; 0x01
 7ea:	0d c0       	rjmp	.+26     	; 0x806 <vfprintf+0x124>
 7ec:	83 36       	cpi	r24, 0x63	; 99
 7ee:	31 f0       	breq	.+12     	; 0x7fc <vfprintf+0x11a>
 7f0:	83 37       	cpi	r24, 0x73	; 115
 7f2:	71 f0       	breq	.+28     	; 0x810 <vfprintf+0x12e>
 7f4:	83 35       	cpi	r24, 0x53	; 83
 7f6:	09 f0       	breq	.+2      	; 0x7fa <vfprintf+0x118>
 7f8:	59 c0       	rjmp	.+178    	; 0x8ac <vfprintf+0x1ca>
 7fa:	21 c0       	rjmp	.+66     	; 0x83e <vfprintf+0x15c>
 7fc:	f8 01       	movw	r30, r16
 7fe:	80 81       	ld	r24, Z
 800:	89 83       	std	Y+1, r24	; 0x01
 802:	0e 5f       	subi	r16, 0xFE	; 254
 804:	1f 4f       	sbci	r17, 0xFF	; 255
 806:	88 24       	eor	r8, r8
 808:	83 94       	inc	r8
 80a:	91 2c       	mov	r9, r1
 80c:	53 01       	movw	r10, r6
 80e:	13 c0       	rjmp	.+38     	; 0x836 <vfprintf+0x154>
 810:	28 01       	movw	r4, r16
 812:	f2 e0       	ldi	r31, 0x02	; 2
 814:	4f 0e       	add	r4, r31
 816:	51 1c       	adc	r5, r1
 818:	f8 01       	movw	r30, r16
 81a:	a0 80       	ld	r10, Z
 81c:	b1 80       	ldd	r11, Z+1	; 0x01
 81e:	36 fe       	sbrs	r3, 6
 820:	03 c0       	rjmp	.+6      	; 0x828 <vfprintf+0x146>
 822:	69 2d       	mov	r22, r9
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	02 c0       	rjmp	.+4      	; 0x82c <vfprintf+0x14a>
 828:	6f ef       	ldi	r22, 0xFF	; 255
 82a:	7f ef       	ldi	r23, 0xFF	; 255
 82c:	c5 01       	movw	r24, r10
 82e:	0e 94 5d 05 	call	0xaba	; 0xaba <strnlen>
 832:	4c 01       	movw	r8, r24
 834:	82 01       	movw	r16, r4
 836:	f3 2d       	mov	r31, r3
 838:	ff 77       	andi	r31, 0x7F	; 127
 83a:	3f 2e       	mov	r3, r31
 83c:	16 c0       	rjmp	.+44     	; 0x86a <vfprintf+0x188>
 83e:	28 01       	movw	r4, r16
 840:	22 e0       	ldi	r18, 0x02	; 2
 842:	42 0e       	add	r4, r18
 844:	51 1c       	adc	r5, r1
 846:	f8 01       	movw	r30, r16
 848:	a0 80       	ld	r10, Z
 84a:	b1 80       	ldd	r11, Z+1	; 0x01
 84c:	36 fe       	sbrs	r3, 6
 84e:	03 c0       	rjmp	.+6      	; 0x856 <vfprintf+0x174>
 850:	69 2d       	mov	r22, r9
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	02 c0       	rjmp	.+4      	; 0x85a <vfprintf+0x178>
 856:	6f ef       	ldi	r22, 0xFF	; 255
 858:	7f ef       	ldi	r23, 0xFF	; 255
 85a:	c5 01       	movw	r24, r10
 85c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <strnlen_P>
 860:	4c 01       	movw	r8, r24
 862:	f3 2d       	mov	r31, r3
 864:	f0 68       	ori	r31, 0x80	; 128
 866:	3f 2e       	mov	r3, r31
 868:	82 01       	movw	r16, r4
 86a:	33 fc       	sbrc	r3, 3
 86c:	1b c0       	rjmp	.+54     	; 0x8a4 <vfprintf+0x1c2>
 86e:	82 2d       	mov	r24, r2
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	88 16       	cp	r8, r24
 874:	99 06       	cpc	r9, r25
 876:	b0 f4       	brcc	.+44     	; 0x8a4 <vfprintf+0x1c2>
 878:	b6 01       	movw	r22, r12
 87a:	80 e2       	ldi	r24, 0x20	; 32
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 882:	2a 94       	dec	r2
 884:	f4 cf       	rjmp	.-24     	; 0x86e <vfprintf+0x18c>
 886:	f5 01       	movw	r30, r10
 888:	37 fc       	sbrc	r3, 7
 88a:	85 91       	lpm	r24, Z+
 88c:	37 fe       	sbrs	r3, 7
 88e:	81 91       	ld	r24, Z+
 890:	5f 01       	movw	r10, r30
 892:	b6 01       	movw	r22, r12
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 89a:	21 10       	cpse	r2, r1
 89c:	2a 94       	dec	r2
 89e:	21 e0       	ldi	r18, 0x01	; 1
 8a0:	82 1a       	sub	r8, r18
 8a2:	91 08       	sbc	r9, r1
 8a4:	81 14       	cp	r8, r1
 8a6:	91 04       	cpc	r9, r1
 8a8:	71 f7       	brne	.-36     	; 0x886 <vfprintf+0x1a4>
 8aa:	e8 c0       	rjmp	.+464    	; 0xa7c <vfprintf+0x39a>
 8ac:	84 36       	cpi	r24, 0x64	; 100
 8ae:	11 f0       	breq	.+4      	; 0x8b4 <vfprintf+0x1d2>
 8b0:	89 36       	cpi	r24, 0x69	; 105
 8b2:	41 f5       	brne	.+80     	; 0x904 <vfprintf+0x222>
 8b4:	f8 01       	movw	r30, r16
 8b6:	37 fe       	sbrs	r3, 7
 8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <vfprintf+0x1e6>
 8ba:	60 81       	ld	r22, Z
 8bc:	71 81       	ldd	r23, Z+1	; 0x01
 8be:	82 81       	ldd	r24, Z+2	; 0x02
 8c0:	93 81       	ldd	r25, Z+3	; 0x03
 8c2:	0c 5f       	subi	r16, 0xFC	; 252
 8c4:	1f 4f       	sbci	r17, 0xFF	; 255
 8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <vfprintf+0x1f6>
 8c8:	60 81       	ld	r22, Z
 8ca:	71 81       	ldd	r23, Z+1	; 0x01
 8cc:	07 2e       	mov	r0, r23
 8ce:	00 0c       	add	r0, r0
 8d0:	88 0b       	sbc	r24, r24
 8d2:	99 0b       	sbc	r25, r25
 8d4:	0e 5f       	subi	r16, 0xFE	; 254
 8d6:	1f 4f       	sbci	r17, 0xFF	; 255
 8d8:	f3 2d       	mov	r31, r3
 8da:	ff 76       	andi	r31, 0x6F	; 111
 8dc:	3f 2e       	mov	r3, r31
 8de:	97 ff       	sbrs	r25, 7
 8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <vfprintf+0x212>
 8e2:	90 95       	com	r25
 8e4:	80 95       	com	r24
 8e6:	70 95       	com	r23
 8e8:	61 95       	neg	r22
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	f0 68       	ori	r31, 0x80	; 128
 8f2:	3f 2e       	mov	r3, r31
 8f4:	2a e0       	ldi	r18, 0x0A	; 10
 8f6:	30 e0       	ldi	r19, 0x00	; 0
 8f8:	a3 01       	movw	r20, r6
 8fa:	0e 94 a4 05 	call	0xb48	; 0xb48 <__ultoa_invert>
 8fe:	88 2e       	mov	r8, r24
 900:	86 18       	sub	r8, r6
 902:	45 c0       	rjmp	.+138    	; 0x98e <vfprintf+0x2ac>
 904:	85 37       	cpi	r24, 0x75	; 117
 906:	31 f4       	brne	.+12     	; 0x914 <vfprintf+0x232>
 908:	23 2d       	mov	r18, r3
 90a:	2f 7e       	andi	r18, 0xEF	; 239
 90c:	b2 2e       	mov	r11, r18
 90e:	2a e0       	ldi	r18, 0x0A	; 10
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	25 c0       	rjmp	.+74     	; 0x95e <vfprintf+0x27c>
 914:	93 2d       	mov	r25, r3
 916:	99 7f       	andi	r25, 0xF9	; 249
 918:	b9 2e       	mov	r11, r25
 91a:	8f 36       	cpi	r24, 0x6F	; 111
 91c:	c1 f0       	breq	.+48     	; 0x94e <vfprintf+0x26c>
 91e:	18 f4       	brcc	.+6      	; 0x926 <vfprintf+0x244>
 920:	88 35       	cpi	r24, 0x58	; 88
 922:	79 f0       	breq	.+30     	; 0x942 <vfprintf+0x260>
 924:	b5 c0       	rjmp	.+362    	; 0xa90 <vfprintf+0x3ae>
 926:	80 37       	cpi	r24, 0x70	; 112
 928:	19 f0       	breq	.+6      	; 0x930 <vfprintf+0x24e>
 92a:	88 37       	cpi	r24, 0x78	; 120
 92c:	21 f0       	breq	.+8      	; 0x936 <vfprintf+0x254>
 92e:	b0 c0       	rjmp	.+352    	; 0xa90 <vfprintf+0x3ae>
 930:	e9 2f       	mov	r30, r25
 932:	e0 61       	ori	r30, 0x10	; 16
 934:	be 2e       	mov	r11, r30
 936:	b4 fe       	sbrs	r11, 4
 938:	0d c0       	rjmp	.+26     	; 0x954 <vfprintf+0x272>
 93a:	fb 2d       	mov	r31, r11
 93c:	f4 60       	ori	r31, 0x04	; 4
 93e:	bf 2e       	mov	r11, r31
 940:	09 c0       	rjmp	.+18     	; 0x954 <vfprintf+0x272>
 942:	34 fe       	sbrs	r3, 4
 944:	0a c0       	rjmp	.+20     	; 0x95a <vfprintf+0x278>
 946:	29 2f       	mov	r18, r25
 948:	26 60       	ori	r18, 0x06	; 6
 94a:	b2 2e       	mov	r11, r18
 94c:	06 c0       	rjmp	.+12     	; 0x95a <vfprintf+0x278>
 94e:	28 e0       	ldi	r18, 0x08	; 8
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	05 c0       	rjmp	.+10     	; 0x95e <vfprintf+0x27c>
 954:	20 e1       	ldi	r18, 0x10	; 16
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	02 c0       	rjmp	.+4      	; 0x95e <vfprintf+0x27c>
 95a:	20 e1       	ldi	r18, 0x10	; 16
 95c:	32 e0       	ldi	r19, 0x02	; 2
 95e:	f8 01       	movw	r30, r16
 960:	b7 fe       	sbrs	r11, 7
 962:	07 c0       	rjmp	.+14     	; 0x972 <vfprintf+0x290>
 964:	60 81       	ld	r22, Z
 966:	71 81       	ldd	r23, Z+1	; 0x01
 968:	82 81       	ldd	r24, Z+2	; 0x02
 96a:	93 81       	ldd	r25, Z+3	; 0x03
 96c:	0c 5f       	subi	r16, 0xFC	; 252
 96e:	1f 4f       	sbci	r17, 0xFF	; 255
 970:	06 c0       	rjmp	.+12     	; 0x97e <vfprintf+0x29c>
 972:	60 81       	ld	r22, Z
 974:	71 81       	ldd	r23, Z+1	; 0x01
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 5f       	subi	r16, 0xFE	; 254
 97c:	1f 4f       	sbci	r17, 0xFF	; 255
 97e:	a3 01       	movw	r20, r6
 980:	0e 94 a4 05 	call	0xb48	; 0xb48 <__ultoa_invert>
 984:	88 2e       	mov	r8, r24
 986:	86 18       	sub	r8, r6
 988:	fb 2d       	mov	r31, r11
 98a:	ff 77       	andi	r31, 0x7F	; 127
 98c:	3f 2e       	mov	r3, r31
 98e:	36 fe       	sbrs	r3, 6
 990:	0d c0       	rjmp	.+26     	; 0x9ac <vfprintf+0x2ca>
 992:	23 2d       	mov	r18, r3
 994:	2e 7f       	andi	r18, 0xFE	; 254
 996:	a2 2e       	mov	r10, r18
 998:	89 14       	cp	r8, r9
 99a:	58 f4       	brcc	.+22     	; 0x9b2 <vfprintf+0x2d0>
 99c:	34 fe       	sbrs	r3, 4
 99e:	0b c0       	rjmp	.+22     	; 0x9b6 <vfprintf+0x2d4>
 9a0:	32 fc       	sbrc	r3, 2
 9a2:	09 c0       	rjmp	.+18     	; 0x9b6 <vfprintf+0x2d4>
 9a4:	83 2d       	mov	r24, r3
 9a6:	8e 7e       	andi	r24, 0xEE	; 238
 9a8:	a8 2e       	mov	r10, r24
 9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <vfprintf+0x2d4>
 9ac:	b8 2c       	mov	r11, r8
 9ae:	a3 2c       	mov	r10, r3
 9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <vfprintf+0x2d6>
 9b2:	b8 2c       	mov	r11, r8
 9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <vfprintf+0x2d6>
 9b6:	b9 2c       	mov	r11, r9
 9b8:	a4 fe       	sbrs	r10, 4
 9ba:	0f c0       	rjmp	.+30     	; 0x9da <vfprintf+0x2f8>
 9bc:	fe 01       	movw	r30, r28
 9be:	e8 0d       	add	r30, r8
 9c0:	f1 1d       	adc	r31, r1
 9c2:	80 81       	ld	r24, Z
 9c4:	80 33       	cpi	r24, 0x30	; 48
 9c6:	21 f4       	brne	.+8      	; 0x9d0 <vfprintf+0x2ee>
 9c8:	9a 2d       	mov	r25, r10
 9ca:	99 7e       	andi	r25, 0xE9	; 233
 9cc:	a9 2e       	mov	r10, r25
 9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <vfprintf+0x300>
 9d0:	a2 fe       	sbrs	r10, 2
 9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <vfprintf+0x2fe>
 9d4:	b3 94       	inc	r11
 9d6:	b3 94       	inc	r11
 9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <vfprintf+0x300>
 9da:	8a 2d       	mov	r24, r10
 9dc:	86 78       	andi	r24, 0x86	; 134
 9de:	09 f0       	breq	.+2      	; 0x9e2 <vfprintf+0x300>
 9e0:	b3 94       	inc	r11
 9e2:	a3 fc       	sbrc	r10, 3
 9e4:	11 c0       	rjmp	.+34     	; 0xa08 <vfprintf+0x326>
 9e6:	a0 fe       	sbrs	r10, 0
 9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <vfprintf+0x314>
 9ea:	b2 14       	cp	r11, r2
 9ec:	88 f4       	brcc	.+34     	; 0xa10 <vfprintf+0x32e>
 9ee:	28 0c       	add	r2, r8
 9f0:	92 2c       	mov	r9, r2
 9f2:	9b 18       	sub	r9, r11
 9f4:	0e c0       	rjmp	.+28     	; 0xa12 <vfprintf+0x330>
 9f6:	b2 14       	cp	r11, r2
 9f8:	60 f4       	brcc	.+24     	; 0xa12 <vfprintf+0x330>
 9fa:	b6 01       	movw	r22, r12
 9fc:	80 e2       	ldi	r24, 0x20	; 32
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a04:	b3 94       	inc	r11
 a06:	f7 cf       	rjmp	.-18     	; 0x9f6 <vfprintf+0x314>
 a08:	b2 14       	cp	r11, r2
 a0a:	18 f4       	brcc	.+6      	; 0xa12 <vfprintf+0x330>
 a0c:	2b 18       	sub	r2, r11
 a0e:	02 c0       	rjmp	.+4      	; 0xa14 <vfprintf+0x332>
 a10:	98 2c       	mov	r9, r8
 a12:	21 2c       	mov	r2, r1
 a14:	a4 fe       	sbrs	r10, 4
 a16:	10 c0       	rjmp	.+32     	; 0xa38 <vfprintf+0x356>
 a18:	b6 01       	movw	r22, r12
 a1a:	80 e3       	ldi	r24, 0x30	; 48
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a22:	a2 fe       	sbrs	r10, 2
 a24:	17 c0       	rjmp	.+46     	; 0xa54 <vfprintf+0x372>
 a26:	a1 fc       	sbrc	r10, 1
 a28:	03 c0       	rjmp	.+6      	; 0xa30 <vfprintf+0x34e>
 a2a:	88 e7       	ldi	r24, 0x78	; 120
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	02 c0       	rjmp	.+4      	; 0xa34 <vfprintf+0x352>
 a30:	88 e5       	ldi	r24, 0x58	; 88
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	b6 01       	movw	r22, r12
 a36:	0c c0       	rjmp	.+24     	; 0xa50 <vfprintf+0x36e>
 a38:	8a 2d       	mov	r24, r10
 a3a:	86 78       	andi	r24, 0x86	; 134
 a3c:	59 f0       	breq	.+22     	; 0xa54 <vfprintf+0x372>
 a3e:	a1 fe       	sbrs	r10, 1
 a40:	02 c0       	rjmp	.+4      	; 0xa46 <vfprintf+0x364>
 a42:	8b e2       	ldi	r24, 0x2B	; 43
 a44:	01 c0       	rjmp	.+2      	; 0xa48 <vfprintf+0x366>
 a46:	80 e2       	ldi	r24, 0x20	; 32
 a48:	a7 fc       	sbrc	r10, 7
 a4a:	8d e2       	ldi	r24, 0x2D	; 45
 a4c:	b6 01       	movw	r22, r12
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a54:	89 14       	cp	r8, r9
 a56:	38 f4       	brcc	.+14     	; 0xa66 <vfprintf+0x384>
 a58:	b6 01       	movw	r22, r12
 a5a:	80 e3       	ldi	r24, 0x30	; 48
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a62:	9a 94       	dec	r9
 a64:	f7 cf       	rjmp	.-18     	; 0xa54 <vfprintf+0x372>
 a66:	8a 94       	dec	r8
 a68:	f3 01       	movw	r30, r6
 a6a:	e8 0d       	add	r30, r8
 a6c:	f1 1d       	adc	r31, r1
 a6e:	80 81       	ld	r24, Z
 a70:	b6 01       	movw	r22, r12
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a78:	81 10       	cpse	r8, r1
 a7a:	f5 cf       	rjmp	.-22     	; 0xa66 <vfprintf+0x384>
 a7c:	22 20       	and	r2, r2
 a7e:	09 f4       	brne	.+2      	; 0xa82 <vfprintf+0x3a0>
 a80:	42 ce       	rjmp	.-892    	; 0x706 <vfprintf+0x24>
 a82:	b6 01       	movw	r22, r12
 a84:	80 e2       	ldi	r24, 0x20	; 32
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	0e 94 68 05 	call	0xad0	; 0xad0 <fputc>
 a8c:	2a 94       	dec	r2
 a8e:	f6 cf       	rjmp	.-20     	; 0xa7c <vfprintf+0x39a>
 a90:	f6 01       	movw	r30, r12
 a92:	86 81       	ldd	r24, Z+6	; 0x06
 a94:	97 81       	ldd	r25, Z+7	; 0x07
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <vfprintf+0x3ba>
 a98:	8f ef       	ldi	r24, 0xFF	; 255
 a9a:	9f ef       	ldi	r25, 0xFF	; 255
 a9c:	2b 96       	adiw	r28, 0x0b	; 11
 a9e:	e2 e1       	ldi	r30, 0x12	; 18
 aa0:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__epilogue_restores__>

00000aa4 <strnlen_P>:
 aa4:	fc 01       	movw	r30, r24
 aa6:	05 90       	lpm	r0, Z+
 aa8:	61 50       	subi	r22, 0x01	; 1
 aaa:	70 40       	sbci	r23, 0x00	; 0
 aac:	01 10       	cpse	r0, r1
 aae:	d8 f7       	brcc	.-10     	; 0xaa6 <strnlen_P+0x2>
 ab0:	80 95       	com	r24
 ab2:	90 95       	com	r25
 ab4:	8e 0f       	add	r24, r30
 ab6:	9f 1f       	adc	r25, r31
 ab8:	08 95       	ret

00000aba <strnlen>:
 aba:	fc 01       	movw	r30, r24
 abc:	61 50       	subi	r22, 0x01	; 1
 abe:	70 40       	sbci	r23, 0x00	; 0
 ac0:	01 90       	ld	r0, Z+
 ac2:	01 10       	cpse	r0, r1
 ac4:	d8 f7       	brcc	.-10     	; 0xabc <strnlen+0x2>
 ac6:	80 95       	com	r24
 ac8:	90 95       	com	r25
 aca:	8e 0f       	add	r24, r30
 acc:	9f 1f       	adc	r25, r31
 ace:	08 95       	ret

00000ad0 <fputc>:
 ad0:	0f 93       	push	r16
 ad2:	1f 93       	push	r17
 ad4:	cf 93       	push	r28
 ad6:	df 93       	push	r29
 ad8:	fb 01       	movw	r30, r22
 ada:	23 81       	ldd	r18, Z+3	; 0x03
 adc:	21 fd       	sbrc	r18, 1
 ade:	03 c0       	rjmp	.+6      	; 0xae6 <fputc+0x16>
 ae0:	8f ef       	ldi	r24, 0xFF	; 255
 ae2:	9f ef       	ldi	r25, 0xFF	; 255
 ae4:	2c c0       	rjmp	.+88     	; 0xb3e <fputc+0x6e>
 ae6:	22 ff       	sbrs	r18, 2
 ae8:	16 c0       	rjmp	.+44     	; 0xb16 <fputc+0x46>
 aea:	46 81       	ldd	r20, Z+6	; 0x06
 aec:	57 81       	ldd	r21, Z+7	; 0x07
 aee:	24 81       	ldd	r18, Z+4	; 0x04
 af0:	35 81       	ldd	r19, Z+5	; 0x05
 af2:	42 17       	cp	r20, r18
 af4:	53 07       	cpc	r21, r19
 af6:	44 f4       	brge	.+16     	; 0xb08 <fputc+0x38>
 af8:	a0 81       	ld	r26, Z
 afa:	b1 81       	ldd	r27, Z+1	; 0x01
 afc:	9d 01       	movw	r18, r26
 afe:	2f 5f       	subi	r18, 0xFF	; 255
 b00:	3f 4f       	sbci	r19, 0xFF	; 255
 b02:	20 83       	st	Z, r18
 b04:	31 83       	std	Z+1, r19	; 0x01
 b06:	8c 93       	st	X, r24
 b08:	26 81       	ldd	r18, Z+6	; 0x06
 b0a:	37 81       	ldd	r19, Z+7	; 0x07
 b0c:	2f 5f       	subi	r18, 0xFF	; 255
 b0e:	3f 4f       	sbci	r19, 0xFF	; 255
 b10:	26 83       	std	Z+6, r18	; 0x06
 b12:	37 83       	std	Z+7, r19	; 0x07
 b14:	14 c0       	rjmp	.+40     	; 0xb3e <fputc+0x6e>
 b16:	8b 01       	movw	r16, r22
 b18:	ec 01       	movw	r28, r24
 b1a:	fb 01       	movw	r30, r22
 b1c:	00 84       	ldd	r0, Z+8	; 0x08
 b1e:	f1 85       	ldd	r31, Z+9	; 0x09
 b20:	e0 2d       	mov	r30, r0
 b22:	09 95       	icall
 b24:	89 2b       	or	r24, r25
 b26:	e1 f6       	brne	.-72     	; 0xae0 <fputc+0x10>
 b28:	d8 01       	movw	r26, r16
 b2a:	16 96       	adiw	r26, 0x06	; 6
 b2c:	8d 91       	ld	r24, X+
 b2e:	9c 91       	ld	r25, X
 b30:	17 97       	sbiw	r26, 0x07	; 7
 b32:	01 96       	adiw	r24, 0x01	; 1
 b34:	16 96       	adiw	r26, 0x06	; 6
 b36:	8d 93       	st	X+, r24
 b38:	9c 93       	st	X, r25
 b3a:	17 97       	sbiw	r26, 0x07	; 7
 b3c:	ce 01       	movw	r24, r28
 b3e:	df 91       	pop	r29
 b40:	cf 91       	pop	r28
 b42:	1f 91       	pop	r17
 b44:	0f 91       	pop	r16
 b46:	08 95       	ret

00000b48 <__ultoa_invert>:
 b48:	fa 01       	movw	r30, r20
 b4a:	aa 27       	eor	r26, r26
 b4c:	28 30       	cpi	r18, 0x08	; 8
 b4e:	51 f1       	breq	.+84     	; 0xba4 <__ultoa_invert+0x5c>
 b50:	20 31       	cpi	r18, 0x10	; 16
 b52:	81 f1       	breq	.+96     	; 0xbb4 <__ultoa_invert+0x6c>
 b54:	e8 94       	clt
 b56:	6f 93       	push	r22
 b58:	6e 7f       	andi	r22, 0xFE	; 254
 b5a:	6e 5f       	subi	r22, 0xFE	; 254
 b5c:	7f 4f       	sbci	r23, 0xFF	; 255
 b5e:	8f 4f       	sbci	r24, 0xFF	; 255
 b60:	9f 4f       	sbci	r25, 0xFF	; 255
 b62:	af 4f       	sbci	r26, 0xFF	; 255
 b64:	b1 e0       	ldi	r27, 0x01	; 1
 b66:	3e d0       	rcall	.+124    	; 0xbe4 <__ultoa_invert+0x9c>
 b68:	b4 e0       	ldi	r27, 0x04	; 4
 b6a:	3c d0       	rcall	.+120    	; 0xbe4 <__ultoa_invert+0x9c>
 b6c:	67 0f       	add	r22, r23
 b6e:	78 1f       	adc	r23, r24
 b70:	89 1f       	adc	r24, r25
 b72:	9a 1f       	adc	r25, r26
 b74:	a1 1d       	adc	r26, r1
 b76:	68 0f       	add	r22, r24
 b78:	79 1f       	adc	r23, r25
 b7a:	8a 1f       	adc	r24, r26
 b7c:	91 1d       	adc	r25, r1
 b7e:	a1 1d       	adc	r26, r1
 b80:	6a 0f       	add	r22, r26
 b82:	71 1d       	adc	r23, r1
 b84:	81 1d       	adc	r24, r1
 b86:	91 1d       	adc	r25, r1
 b88:	a1 1d       	adc	r26, r1
 b8a:	20 d0       	rcall	.+64     	; 0xbcc <__ultoa_invert+0x84>
 b8c:	09 f4       	brne	.+2      	; 0xb90 <__ultoa_invert+0x48>
 b8e:	68 94       	set
 b90:	3f 91       	pop	r19
 b92:	2a e0       	ldi	r18, 0x0A	; 10
 b94:	26 9f       	mul	r18, r22
 b96:	11 24       	eor	r1, r1
 b98:	30 19       	sub	r19, r0
 b9a:	30 5d       	subi	r19, 0xD0	; 208
 b9c:	31 93       	st	Z+, r19
 b9e:	de f6       	brtc	.-74     	; 0xb56 <__ultoa_invert+0xe>
 ba0:	cf 01       	movw	r24, r30
 ba2:	08 95       	ret
 ba4:	46 2f       	mov	r20, r22
 ba6:	47 70       	andi	r20, 0x07	; 7
 ba8:	40 5d       	subi	r20, 0xD0	; 208
 baa:	41 93       	st	Z+, r20
 bac:	b3 e0       	ldi	r27, 0x03	; 3
 bae:	0f d0       	rcall	.+30     	; 0xbce <__ultoa_invert+0x86>
 bb0:	c9 f7       	brne	.-14     	; 0xba4 <__ultoa_invert+0x5c>
 bb2:	f6 cf       	rjmp	.-20     	; 0xba0 <__ultoa_invert+0x58>
 bb4:	46 2f       	mov	r20, r22
 bb6:	4f 70       	andi	r20, 0x0F	; 15
 bb8:	40 5d       	subi	r20, 0xD0	; 208
 bba:	4a 33       	cpi	r20, 0x3A	; 58
 bbc:	18 f0       	brcs	.+6      	; 0xbc4 <__ultoa_invert+0x7c>
 bbe:	49 5d       	subi	r20, 0xD9	; 217
 bc0:	31 fd       	sbrc	r19, 1
 bc2:	40 52       	subi	r20, 0x20	; 32
 bc4:	41 93       	st	Z+, r20
 bc6:	02 d0       	rcall	.+4      	; 0xbcc <__ultoa_invert+0x84>
 bc8:	a9 f7       	brne	.-22     	; 0xbb4 <__ultoa_invert+0x6c>
 bca:	ea cf       	rjmp	.-44     	; 0xba0 <__ultoa_invert+0x58>
 bcc:	b4 e0       	ldi	r27, 0x04	; 4
 bce:	a6 95       	lsr	r26
 bd0:	97 95       	ror	r25
 bd2:	87 95       	ror	r24
 bd4:	77 95       	ror	r23
 bd6:	67 95       	ror	r22
 bd8:	ba 95       	dec	r27
 bda:	c9 f7       	brne	.-14     	; 0xbce <__ultoa_invert+0x86>
 bdc:	00 97       	sbiw	r24, 0x00	; 0
 bde:	61 05       	cpc	r22, r1
 be0:	71 05       	cpc	r23, r1
 be2:	08 95       	ret
 be4:	9b 01       	movw	r18, r22
 be6:	ac 01       	movw	r20, r24
 be8:	0a 2e       	mov	r0, r26
 bea:	06 94       	lsr	r0
 bec:	57 95       	ror	r21
 bee:	47 95       	ror	r20
 bf0:	37 95       	ror	r19
 bf2:	27 95       	ror	r18
 bf4:	ba 95       	dec	r27
 bf6:	c9 f7       	brne	.-14     	; 0xbea <__ultoa_invert+0xa2>
 bf8:	62 0f       	add	r22, r18
 bfa:	73 1f       	adc	r23, r19
 bfc:	84 1f       	adc	r24, r20
 bfe:	95 1f       	adc	r25, r21
 c00:	a0 1d       	adc	r26, r0
 c02:	08 95       	ret

00000c04 <ccp_write_io>:
 c04:	dc 01       	movw	r26, r24
 c06:	28 ed       	ldi	r18, 0xD8	; 216
 c08:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f0034>
 c0c:	6c 93       	st	X, r22
 c0e:	08 95       	ret

00000c10 <__prologue_saves__>:
 c10:	2f 92       	push	r2
 c12:	3f 92       	push	r3
 c14:	4f 92       	push	r4
 c16:	5f 92       	push	r5
 c18:	6f 92       	push	r6
 c1a:	7f 92       	push	r7
 c1c:	8f 92       	push	r8
 c1e:	9f 92       	push	r9
 c20:	af 92       	push	r10
 c22:	bf 92       	push	r11
 c24:	cf 92       	push	r12
 c26:	df 92       	push	r13
 c28:	ef 92       	push	r14
 c2a:	ff 92       	push	r15
 c2c:	0f 93       	push	r16
 c2e:	1f 93       	push	r17
 c30:	cf 93       	push	r28
 c32:	df 93       	push	r29
 c34:	cd b7       	in	r28, 0x3d	; 61
 c36:	de b7       	in	r29, 0x3e	; 62
 c38:	ca 1b       	sub	r28, r26
 c3a:	db 0b       	sbc	r29, r27
 c3c:	cd bf       	out	0x3d, r28	; 61
 c3e:	de bf       	out	0x3e, r29	; 62
 c40:	09 94       	ijmp

00000c42 <__epilogue_restores__>:
 c42:	2a 88       	ldd	r2, Y+18	; 0x12
 c44:	39 88       	ldd	r3, Y+17	; 0x11
 c46:	48 88       	ldd	r4, Y+16	; 0x10
 c48:	5f 84       	ldd	r5, Y+15	; 0x0f
 c4a:	6e 84       	ldd	r6, Y+14	; 0x0e
 c4c:	7d 84       	ldd	r7, Y+13	; 0x0d
 c4e:	8c 84       	ldd	r8, Y+12	; 0x0c
 c50:	9b 84       	ldd	r9, Y+11	; 0x0b
 c52:	aa 84       	ldd	r10, Y+10	; 0x0a
 c54:	b9 84       	ldd	r11, Y+9	; 0x09
 c56:	c8 84       	ldd	r12, Y+8	; 0x08
 c58:	df 80       	ldd	r13, Y+7	; 0x07
 c5a:	ee 80       	ldd	r14, Y+6	; 0x06
 c5c:	fd 80       	ldd	r15, Y+5	; 0x05
 c5e:	0c 81       	ldd	r16, Y+4	; 0x04
 c60:	1b 81       	ldd	r17, Y+3	; 0x03
 c62:	aa 81       	ldd	r26, Y+2	; 0x02
 c64:	b9 81       	ldd	r27, Y+1	; 0x01
 c66:	ce 0f       	add	r28, r30
 c68:	d1 1d       	adc	r29, r1
 c6a:	cd bf       	out	0x3d, r28	; 61
 c6c:	de bf       	out	0x3e, r29	; 62
 c6e:	ed 01       	movw	r28, r26
 c70:	08 95       	ret

00000c72 <_exit>:
 c72:	f8 94       	cli

00000c74 <__stop_program>:
 c74:	ff cf       	rjmp	.-2      	; 0xc74 <__stop_program>
