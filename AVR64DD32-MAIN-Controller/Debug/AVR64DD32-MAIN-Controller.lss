
AVR64DD32-MAIN-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005a0  00806000  00002976  00002a0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002976  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  008065a0  008065a0  00002faa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002faa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003008  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  00003048  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008df5  00000000  00000000  000034a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003bfd  00000000  00000000  0000c295  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d7f  00000000  00000000  0000fe92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bfc  00000000  00000000  00012c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003224  00000000  00000000  00013810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e84  00000000  00000000  00016a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  000198b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e7       	ldi	r29, 0x7F	; 127
      9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
      9c:	15 e6       	ldi	r17, 0x65	; 101
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b0 e6       	ldi	r27, 0x60	; 96
      a2:	e6 e7       	ldi	r30, 0x76	; 118
      a4:	f9 e2       	ldi	r31, 0x29	; 41
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 3a       	cpi	r26, 0xA0	; 160
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	26 e6       	ldi	r18, 0x66	; 102
      b4:	a0 ea       	ldi	r26, 0xA0	; 160
      b6:	b5 e6       	ldi	r27, 0x65	; 101
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 31       	cpi	r26, 0x10	; 16
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <main>
      c6:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <normalize>:
#include "ActionsVar.h"


// Pagalbinë funkcija: normalizuoja kampà á [0,360)
int16_t normalize(int16_t angle) {
	angle %= 360;
      ce:	68 e6       	ldi	r22, 0x68	; 104
      d0:	71 e0       	ldi	r23, 0x01	; 1
      d2:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__divmodhi4>
	if (angle < 0) angle += 360;
      d6:	99 23       	and	r25, r25
      d8:	14 f4       	brge	.+4      	; 0xde <normalize+0x10>
      da:	88 59       	subi	r24, 0x98	; 152
      dc:	9e 4f       	sbci	r25, 0xFE	; 254
	return angle;
}
      de:	08 95       	ret

000000e0 <angle_diff>:

// Pagalbinë: apskaièiuoja maþiausià kampiná atstumà
int16_t angle_diff(int16_t a, int16_t b) {
	int16_t d = abs(a - b) % 360;
      e0:	9c 01       	movw	r18, r24
      e2:	26 1b       	sub	r18, r22
      e4:	37 0b       	sbc	r19, r23
      e6:	c9 01       	movw	r24, r18
      e8:	99 23       	and	r25, r25
      ea:	24 f4       	brge	.+8      	; 0xf4 <angle_diff+0x14>
      ec:	88 27       	eor	r24, r24
      ee:	99 27       	eor	r25, r25
      f0:	82 1b       	sub	r24, r18
      f2:	93 0b       	sbc	r25, r19
      f4:	68 e6       	ldi	r22, 0x68	; 104
      f6:	71 e0       	ldi	r23, 0x01	; 1
      f8:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__divmodhi4>
	return (d > 180) ? 360 - d : d;
      fc:	85 3b       	cpi	r24, 0xB5	; 181
      fe:	91 05       	cpc	r25, r1
     100:	34 f0       	brlt	.+12     	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
     102:	28 e6       	ldi	r18, 0x68	; 104
     104:	31 e0       	ldi	r19, 0x01	; 1
     106:	a9 01       	movw	r20, r18
     108:	48 1b       	sub	r20, r24
     10a:	59 0b       	sbc	r21, r25
     10c:	ca 01       	movw	r24, r20
}
     10e:	08 95       	ret

00000110 <get_safe_azimuth>:

void get_safe_azimuth() {
     110:	cf 92       	push	r12
     112:	df 92       	push	r13
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
	// Galimos saugios kryptys
	int16_t safe1 = normalize((WSData.winddirection * 45) + 90);
     120:	c0 91 e8 65 	lds	r28, 0x65E8	; 0x8065e8 <WSData+0x7>
     124:	2d e2       	ldi	r18, 0x2D	; 45
     126:	c2 9f       	mul	r28, r18
     128:	e0 01       	movw	r28, r0
     12a:	11 24       	eor	r1, r1
     12c:	ce 01       	movw	r24, r28
     12e:	86 5a       	subi	r24, 0xA6	; 166
     130:	9f 4f       	sbci	r25, 0xFF	; 255
     132:	0e 94 67 00 	call	0xce	; 0xce <normalize>
     136:	8c 01       	movw	r16, r24
	int16_t safe2 = normalize((WSData.winddirection * 45) - 90);
     138:	ce 01       	movw	r24, r28
     13a:	8a 55       	subi	r24, 0x5A	; 90
     13c:	91 09       	sbc	r25, r1
     13e:	0e 94 67 00 	call	0xce	; 0xce <normalize>
     142:	ec 01       	movw	r28, r24

	bool valid1 = (safe1 >= MIN_AZIMUTH && safe1 <= MAX_AZIMUTH);
     144:	c8 01       	movw	r24, r16
     146:	4e 97       	sbiw	r24, 0x1e	; 30
	bool valid2 = (safe2 >= MIN_AZIMUTH && safe2 <= MAX_AZIMUTH);
     148:	9e 01       	movw	r18, r28
     14a:	2e 51       	subi	r18, 0x1E	; 30
     14c:	31 09       	sbc	r19, r1

	if (valid1 && valid2) {
     14e:	8d 32       	cpi	r24, 0x2D	; 45
     150:	41 e0       	ldi	r20, 0x01	; 1
     152:	94 07       	cpc	r25, r20
     154:	e8 f4       	brcc	.+58     	; 0x190 <get_safe_azimuth+0x80>
     156:	2d 32       	cpi	r18, 0x2D	; 45
     158:	31 40       	sbci	r19, 0x01	; 1
     15a:	d0 f4       	brcc	.+52     	; 0x190 <get_safe_azimuth+0x80>
		int16_t d1 = angle_diff(SensorData.Azimuth, safe1);
     15c:	e0 90 a6 65 	lds	r14, 0x65A6	; 0x8065a6 <SensorData+0x4>
     160:	f0 90 a7 65 	lds	r15, 0x65A7	; 0x8065a7 <SensorData+0x5>
     164:	b8 01       	movw	r22, r16
     166:	c7 01       	movw	r24, r14
     168:	0e 94 70 00 	call	0xe0	; 0xe0 <angle_diff>
     16c:	6c 01       	movw	r12, r24
		int16_t d2 = angle_diff(SensorData.Azimuth, safe2);
     16e:	be 01       	movw	r22, r28
     170:	c7 01       	movw	r24, r14
     172:	0e 94 70 00 	call	0xe0	; 0xe0 <angle_diff>
		Target.azimuth = (d1 <= d2) ? safe1 : safe2;
     176:	8c 15       	cp	r24, r12
     178:	9d 05       	cpc	r25, r13
     17a:	1c f0       	brlt	.+6      	; 0x182 <get_safe_azimuth+0x72>
     17c:	90 2f       	mov	r25, r16
     17e:	81 2f       	mov	r24, r17
     180:	02 c0       	rjmp	.+4      	; 0x186 <get_safe_azimuth+0x76>
     182:	9c 2f       	mov	r25, r28
     184:	8d 2f       	mov	r24, r29
     186:	90 93 4f 60 	sts	0x604F, r25	; 0x80604f <Target+0x5>
     18a:	80 93 50 60 	sts	0x6050, r24	; 0x806050 <Target+0x6>
	int16_t safe2 = normalize((WSData.winddirection * 45) - 90);

	bool valid1 = (safe1 >= MIN_AZIMUTH && safe1 <= MAX_AZIMUTH);
	bool valid2 = (safe2 >= MIN_AZIMUTH && safe2 <= MAX_AZIMUTH);

	if (valid1 && valid2) {
     18e:	0c c0       	rjmp	.+24     	; 0x1a8 <get_safe_azimuth+0x98>
		int16_t d1 = angle_diff(SensorData.Azimuth, safe1);
		int16_t d2 = angle_diff(SensorData.Azimuth, safe2);
		Target.azimuth = (d1 <= d2) ? safe1 : safe2;
		} else if (valid1) {
     190:	8d 32       	cpi	r24, 0x2D	; 45
     192:	91 40       	sbci	r25, 0x01	; 1
     194:	28 f4       	brcc	.+10     	; 0x1a0 <get_safe_azimuth+0x90>
		Target.azimuth = safe1;
     196:	00 93 4f 60 	sts	0x604F, r16	; 0x80604f <Target+0x5>
     19a:	10 93 50 60 	sts	0x6050, r17	; 0x806050 <Target+0x6>
     19e:	04 c0       	rjmp	.+8      	; 0x1a8 <get_safe_azimuth+0x98>
		} else {
		Target.azimuth = safe2; // visada bus bent vienas tinkamas
     1a0:	c0 93 4f 60 	sts	0x604F, r28	; 0x80604f <Target+0x5>
     1a4:	d0 93 50 60 	sts	0x6050, r29	; 0x806050 <Target+0x6>
	}
}
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	1f 91       	pop	r17
     1ae:	0f 91       	pop	r16
     1b0:	ff 90       	pop	r15
     1b2:	ef 90       	pop	r14
     1b4:	df 90       	pop	r13
     1b6:	cf 90       	pop	r12
     1b8:	08 95       	ret

000001ba <MotorControl>:

//Motor control function wrtited based on void LinearMotorControl()
void MotorControl(MotorControlObj* m)
{
     1ba:	8f 92       	push	r8
     1bc:	9f 92       	push	r9
     1be:	af 92       	push	r10
     1c0:	bf 92       	push	r11
     1c2:	cf 92       	push	r12
     1c4:	df 92       	push	r13
     1c6:	ef 92       	push	r14
     1c8:	ff 92       	push	r15
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	ec 01       	movw	r28, r24
	// 1. FO jungtis
	if (SensorData.FO_lost_connecton_fault) {
     1d4:	80 91 b5 65 	lds	r24, 0x65B5	; 0x8065b5 <SensorData+0x13>
     1d8:	88 23       	and	r24, r24
     1da:	39 f0       	breq	.+14     	; 0x1ea <MotorControl+0x30>
		m->iface.stop();
     1dc:	ef 81       	ldd	r30, Y+7	; 0x07
     1de:	f8 85       	ldd	r31, Y+8	; 0x08
     1e0:	09 95       	icall
		m->iface.disable();
     1e2:	eb 81       	ldd	r30, Y+3	; 0x03
     1e4:	fc 81       	ldd	r31, Y+4	; 0x04
     1e6:	09 95       	icall
		return;
     1e8:	19 c1       	rjmp	.+562    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	}

	// 2. Tikslas pasiektas
	if (*m->sensor.position == *m->sensor.target) {
     1ea:	ef 85       	ldd	r30, Y+15	; 0x0f
     1ec:	f8 89       	ldd	r31, Y+16	; 0x10
     1ee:	20 81       	ld	r18, Z
     1f0:	31 81       	ldd	r19, Z+1	; 0x01
     1f2:	ef 89       	ldd	r30, Y+23	; 0x17
     1f4:	f8 8d       	ldd	r31, Y+24	; 0x18
     1f6:	80 81       	ld	r24, Z
     1f8:	91 81       	ldd	r25, Z+1	; 0x01
     1fa:	28 17       	cp	r18, r24
     1fc:	39 07       	cpc	r19, r25
     1fe:	81 f4       	brne	.+32     	; 0x220 <MotorControl+0x66>
		m->iface.stop();
     200:	ef 81       	ldd	r30, Y+7	; 0x07
     202:	f8 85       	ldd	r31, Y+8	; 0x08
     204:	09 95       	icall
		m->iface.disable();
     206:	eb 81       	ldd	r30, Y+3	; 0x03
     208:	fc 81       	ldd	r31, Y+4	; 0x04
     20a:	09 95       	icall
		*m->sensor.faultFlag = false;
     20c:	eb 89       	ldd	r30, Y+19	; 0x13
     20e:	fc 89       	ldd	r31, Y+20	; 0x14
     210:	10 82       	st	Z, r1
		*m->sensor.targetReached = true;
     212:	e9 8d       	ldd	r30, Y+25	; 0x19
     214:	fa 8d       	ldd	r31, Y+26	; 0x1a
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	80 83       	st	Z, r24
		m->stuckCount = 0;
     21a:	1b 8e       	std	Y+27, r1	; 0x1b
		m->noChangeCount = 0;
     21c:	1c 8e       	std	Y+28, r1	; 0x1c
		return;
     21e:	fe c0       	rjmp	.+508    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	}

	// 2.1  Nuskaitomi elektriniai parametrai
	*m->voltage = m->iface.read_voltage(); //read and save voltage
     220:	09 a1       	ldd	r16, Y+33	; 0x21
     222:	1a a1       	ldd	r17, Y+34	; 0x22
     224:	eb 85       	ldd	r30, Y+11	; 0x0b
     226:	fc 85       	ldd	r31, Y+12	; 0x0c
     228:	09 95       	icall
     22a:	f8 01       	movw	r30, r16
     22c:	80 83       	st	Z, r24
     22e:	91 83       	std	Z+1, r25	; 0x01
	*m->current = m->iface.read_current(); //read and save current
     230:	0b a1       	ldd	r16, Y+35	; 0x23
     232:	1c a1       	ldd	r17, Y+36	; 0x24
     234:	ed 85       	ldd	r30, Y+13	; 0x0d
     236:	fe 85       	ldd	r31, Y+14	; 0x0e
     238:	09 95       	icall
     23a:	f8 01       	movw	r30, r16
     23c:	80 83       	st	Z, r24
     23e:	91 83       	std	Z+1, r25	; 0x01

	// 3. Backlash logika
	bool inBacklash = (*m->sensor.position >= (*m->sensor.target - m->backlash)) &&
     240:	ef 85       	ldd	r30, Y+15	; 0x0f
     242:	f8 89       	ldd	r31, Y+16	; 0x10
     244:	80 81       	ld	r24, Z
     246:	91 81       	ldd	r25, Z+1	; 0x01
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	ef 89       	ldd	r30, Y+23	; 0x17
     24e:	f8 8d       	ldd	r31, Y+24	; 0x18
     250:	40 81       	ld	r20, Z
     252:	51 81       	ldd	r21, Z+1	; 0x01
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	0d 8d       	ldd	r16, Y+29	; 0x1d
     25a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     25c:	2f 8d       	ldd	r18, Y+31	; 0x1f
     25e:	38 a1       	ldd	r19, Y+32	; 0x20
     260:	6a 01       	movw	r12, r20
     262:	7b 01       	movw	r14, r22
     264:	c0 1a       	sub	r12, r16
     266:	d1 0a       	sbc	r13, r17
     268:	e2 0a       	sbc	r14, r18
     26a:	f3 0a       	sbc	r15, r19
     26c:	8c 15       	cp	r24, r12
     26e:	9d 05       	cpc	r25, r13
     270:	ae 05       	cpc	r26, r14
     272:	bf 05       	cpc	r27, r15
     274:	5c f0       	brlt	.+22     	; 0x28c <MotorControl+0xd2>
	(*m->sensor.position <= (*m->sensor.target + m->backlash));
     276:	40 0f       	add	r20, r16
     278:	51 1f       	adc	r21, r17
     27a:	62 1f       	adc	r22, r18
     27c:	73 1f       	adc	r23, r19
	// 2.1  Nuskaitomi elektriniai parametrai
	*m->voltage = m->iface.read_voltage(); //read and save voltage
	*m->current = m->iface.read_current(); //read and save current

	// 3. Backlash logika
	bool inBacklash = (*m->sensor.position >= (*m->sensor.target - m->backlash)) &&
     27e:	48 17       	cp	r20, r24
     280:	59 07       	cpc	r21, r25
     282:	6a 07       	cpc	r22, r26
     284:	7b 07       	cpc	r23, r27
     286:	24 f4       	brge	.+8      	; 0x290 <MotorControl+0xd6>
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	03 c0       	rjmp	.+6      	; 0x292 <MotorControl+0xd8>
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	01 c0       	rjmp	.+2      	; 0x292 <MotorControl+0xd8>
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	89 2f       	mov	r24, r25
     294:	81 70       	andi	r24, 0x01	; 1
	(*m->sensor.position <= (*m->sensor.target + m->backlash));

	if (!inBacklash || !*m->sensor.targetReached) {
     296:	29 f0       	breq	.+10     	; 0x2a2 <MotorControl+0xe8>
     298:	e9 8d       	ldd	r30, Y+25	; 0x19
     29a:	fa 8d       	ldd	r31, Y+26	; 0x1a
     29c:	80 81       	ld	r24, Z
     29e:	81 11       	cpse	r24, r1
     2a0:	09 c0       	rjmp	.+18     	; 0x2b4 <MotorControl+0xfa>
		m->iface.start();
     2a2:	ed 81       	ldd	r30, Y+5	; 0x05
     2a4:	fe 81       	ldd	r31, Y+6	; 0x06
     2a6:	09 95       	icall
		m->iface.enable();
     2a8:	e9 81       	ldd	r30, Y+1	; 0x01
     2aa:	fa 81       	ldd	r31, Y+2	; 0x02
     2ac:	09 95       	icall
		*m->sensor.targetReached = false;
     2ae:	e9 8d       	ldd	r30, Y+25	; 0x19
     2b0:	fa 8d       	ldd	r31, Y+26	; 0x1a
     2b2:	10 82       	st	Z, r1
	}

	// 4. Pokytis
	int32_t delta = (int32_t)(*m->sensor.positionFiltered) - (int32_t)(*m->sensor.lastPosition);
     2b4:	e9 89       	ldd	r30, Y+17	; 0x11
     2b6:	fa 89       	ldd	r31, Y+18	; 0x12
     2b8:	c0 80       	ld	r12, Z
     2ba:	d1 80       	ldd	r13, Z+1	; 0x01
     2bc:	e1 2c       	mov	r14, r1
     2be:	f1 2c       	mov	r15, r1
     2c0:	ed 89       	ldd	r30, Y+21	; 0x15
     2c2:	fe 89       	ldd	r31, Y+22	; 0x16
     2c4:	80 81       	ld	r24, Z
     2c6:	91 81       	ldd	r25, Z+1	; 0x01
     2c8:	c8 1a       	sub	r12, r24
     2ca:	d9 0a       	sbc	r13, r25
     2cc:	e1 08       	sbc	r14, r1
     2ce:	f1 08       	sbc	r15, r1
	if (delta > -SENSOR_DEADBAND && delta < SENSOR_DEADBAND) {
     2d0:	d7 01       	movw	r26, r14
     2d2:	c6 01       	movw	r24, r12
     2d4:	43 96       	adiw	r24, 0x13	; 19
     2d6:	a1 1d       	adc	r26, r1
     2d8:	b1 1d       	adc	r27, r1
     2da:	87 97       	sbiw	r24, 0x27	; 39
     2dc:	a1 05       	cpc	r26, r1
     2de:	b1 05       	cpc	r27, r1
     2e0:	18 f4       	brcc	.+6      	; 0x2e8 <MotorControl+0x12e>
		delta = 0;
     2e2:	c1 2c       	mov	r12, r1
     2e4:	d1 2c       	mov	r13, r1
     2e6:	76 01       	movw	r14, r12
	}

	// 5. Kryptis
	if (*m->sensor.position < *m->sensor.target) {
     2e8:	ef 85       	ldd	r30, Y+15	; 0x0f
     2ea:	f8 89       	ldd	r31, Y+16	; 0x10
     2ec:	20 81       	ld	r18, Z
     2ee:	31 81       	ldd	r19, Z+1	; 0x01
     2f0:	ef 89       	ldd	r30, Y+23	; 0x17
     2f2:	f8 8d       	ldd	r31, Y+24	; 0x18
     2f4:	80 81       	ld	r24, Z
     2f6:	91 81       	ldd	r25, Z+1	; 0x01
     2f8:	28 17       	cp	r18, r24
     2fa:	39 07       	cpc	r19, r25
     2fc:	28 f4       	brcc	.+10     	; 0x308 <MotorControl+0x14e>
		m->iface.set_direction(1);
     2fe:	e9 85       	ldd	r30, Y+9	; 0x09
     300:	fa 85       	ldd	r31, Y+10	; 0x0a
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	09 95       	icall
     306:	07 c0       	rjmp	.+14     	; 0x316 <MotorControl+0x15c>
		} else if (*m->sensor.position > *m->sensor.target) {
     308:	82 17       	cp	r24, r18
     30a:	93 07       	cpc	r25, r19
     30c:	20 f4       	brcc	.+8      	; 0x316 <MotorControl+0x15c>
		m->iface.set_direction(0);
     30e:	e9 85       	ldd	r30, Y+9	; 0x09
     310:	fa 85       	ldd	r31, Y+10	; 0x0a
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	09 95       	icall
	}

	// 6. Uþstrigimo tikrinimas (neteisinga kryptis)
	if (*m->sensor.position < (*m->sensor.target - m->backlash)) {
     316:	ef 85       	ldd	r30, Y+15	; 0x0f
     318:	f8 89       	ldd	r31, Y+16	; 0x10
     31a:	80 81       	ld	r24, Z
     31c:	91 81       	ldd	r25, Z+1	; 0x01
     31e:	a0 e0       	ldi	r26, 0x00	; 0
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	ef 89       	ldd	r30, Y+23	; 0x17
     324:	f8 8d       	ldd	r31, Y+24	; 0x18
     326:	40 81       	ld	r20, Z
     328:	51 81       	ldd	r21, Z+1	; 0x01
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	0d 8d       	ldd	r16, Y+29	; 0x1d
     330:	1e 8d       	ldd	r17, Y+30	; 0x1e
     332:	2f 8d       	ldd	r18, Y+31	; 0x1f
     334:	38 a1       	ldd	r19, Y+32	; 0x20
     336:	4a 01       	movw	r8, r20
     338:	5b 01       	movw	r10, r22
     33a:	80 1a       	sub	r8, r16
     33c:	91 0a       	sbc	r9, r17
     33e:	a2 0a       	sbc	r10, r18
     340:	b3 0a       	sbc	r11, r19
     342:	88 15       	cp	r24, r8
     344:	99 05       	cpc	r25, r9
     346:	aa 05       	cpc	r26, r10
     348:	bb 05       	cpc	r27, r11
     34a:	fc f4       	brge	.+62     	; 0x38a <MotorControl+0x1d0>
		if (delta < -SENSOR_DEADBAND && ++m->stuckCount >= STUCK_LIMIT) {
     34c:	fc ee       	ldi	r31, 0xEC	; 236
     34e:	cf 16       	cp	r12, r31
     350:	ff ef       	ldi	r31, 0xFF	; 255
     352:	df 06       	cpc	r13, r31
     354:	ef 06       	cpc	r14, r31
     356:	ff 06       	cpc	r15, r31
     358:	84 f4       	brge	.+32     	; 0x37a <MotorControl+0x1c0>
     35a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     35c:	8f 5f       	subi	r24, 0xFF	; 255
     35e:	8b 8f       	std	Y+27, r24	; 0x1b
     360:	82 30       	cpi	r24, 0x02	; 2
     362:	58 f0       	brcs	.+22     	; 0x37a <MotorControl+0x1c0>
			*m->sensor.faultFlag = true;
     364:	eb 89       	ldd	r30, Y+19	; 0x13
     366:	fc 89       	ldd	r31, Y+20	; 0x14
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	80 83       	st	Z, r24
			m->iface.stop();
     36c:	ef 81       	ldd	r30, Y+7	; 0x07
     36e:	f8 85       	ldd	r31, Y+8	; 0x08
     370:	09 95       	icall
			m->iface.disable();
     372:	eb 81       	ldd	r30, Y+3	; 0x03
     374:	fc 81       	ldd	r31, Y+4	; 0x04
     376:	09 95       	icall
     378:	2f c0       	rjmp	.+94     	; 0x3d8 <MotorControl+0x21e>
			} else if (delta > SENSOR_DEADBAND) {
     37a:	85 e1       	ldi	r24, 0x15	; 21
     37c:	c8 16       	cp	r12, r24
     37e:	d1 04       	cpc	r13, r1
     380:	e1 04       	cpc	r14, r1
     382:	f1 04       	cpc	r15, r1
     384:	4c f1       	brlt	.+82     	; 0x3d8 <MotorControl+0x21e>
			m->stuckCount = 0;
     386:	1b 8e       	std	Y+27, r1	; 0x1b
     388:	27 c0       	rjmp	.+78     	; 0x3d8 <MotorControl+0x21e>
		}
		} else if (*m->sensor.position > (*m->sensor.target + m->backlash)) {
     38a:	40 0f       	add	r20, r16
     38c:	51 1f       	adc	r21, r17
     38e:	62 1f       	adc	r22, r18
     390:	73 1f       	adc	r23, r19
     392:	48 17       	cp	r20, r24
     394:	59 07       	cpc	r21, r25
     396:	6a 07       	cpc	r22, r26
     398:	7b 07       	cpc	r23, r27
     39a:	f4 f4       	brge	.+60     	; 0x3d8 <MotorControl+0x21e>
		if (delta > SENSOR_DEADBAND && ++m->stuckCount >= STUCK_LIMIT) {
     39c:	e5 e1       	ldi	r30, 0x15	; 21
     39e:	ce 16       	cp	r12, r30
     3a0:	d1 04       	cpc	r13, r1
     3a2:	e1 04       	cpc	r14, r1
     3a4:	f1 04       	cpc	r15, r1
     3a6:	84 f0       	brlt	.+32     	; 0x3c8 <MotorControl+0x20e>
     3a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3aa:	8f 5f       	subi	r24, 0xFF	; 255
     3ac:	8b 8f       	std	Y+27, r24	; 0x1b
     3ae:	82 30       	cpi	r24, 0x02	; 2
     3b0:	58 f0       	brcs	.+22     	; 0x3c8 <MotorControl+0x20e>
			*m->sensor.faultFlag = true;
     3b2:	eb 89       	ldd	r30, Y+19	; 0x13
     3b4:	fc 89       	ldd	r31, Y+20	; 0x14
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	80 83       	st	Z, r24
			m->iface.stop();
     3ba:	ef 81       	ldd	r30, Y+7	; 0x07
     3bc:	f8 85       	ldd	r31, Y+8	; 0x08
     3be:	09 95       	icall
			m->iface.disable();
     3c0:	eb 81       	ldd	r30, Y+3	; 0x03
     3c2:	fc 81       	ldd	r31, Y+4	; 0x04
     3c4:	09 95       	icall
     3c6:	08 c0       	rjmp	.+16     	; 0x3d8 <MotorControl+0x21e>
			} else if (delta < -SENSOR_DEADBAND) {
     3c8:	fc ee       	ldi	r31, 0xEC	; 236
     3ca:	cf 16       	cp	r12, r31
     3cc:	ff ef       	ldi	r31, 0xFF	; 255
     3ce:	df 06       	cpc	r13, r31
     3d0:	ef 06       	cpc	r14, r31
     3d2:	ff 06       	cpc	r15, r31
     3d4:	0c f4       	brge	.+2      	; 0x3d8 <MotorControl+0x21e>
			m->stuckCount = 0;
     3d6:	1b 8e       	std	Y+27, r1	; 0x1b
		}
	}

	// 7. Uþstrigimas vietoje
	if (delta == 0 && !*m->sensor.targetReached) {
     3d8:	cd 28       	or	r12, r13
     3da:	ce 28       	or	r12, r14
     3dc:	cf 28       	or	r12, r15
     3de:	a9 f4       	brne	.+42     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3e0:	e9 8d       	ldd	r30, Y+25	; 0x19
     3e2:	fa 8d       	ldd	r31, Y+26	; 0x1a
     3e4:	80 81       	ld	r24, Z
     3e6:	81 11       	cpse	r24, r1
     3e8:	10 c0       	rjmp	.+32     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		if (++m->noChangeCount >= STUCK_LIMIT) {
     3ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3ec:	8f 5f       	subi	r24, 0xFF	; 255
     3ee:	8c 8f       	std	Y+28, r24	; 0x1c
     3f0:	82 30       	cpi	r24, 0x02	; 2
     3f2:	60 f0       	brcs	.+24     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			*m->sensor.faultFlag = true;
     3f4:	eb 89       	ldd	r30, Y+19	; 0x13
     3f6:	fc 89       	ldd	r31, Y+20	; 0x14
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	80 83       	st	Z, r24
			m->iface.stop();
     3fc:	ef 81       	ldd	r30, Y+7	; 0x07
     3fe:	f8 85       	ldd	r31, Y+8	; 0x08
     400:	09 95       	icall
			m->iface.disable();
     402:	eb 81       	ldd	r30, Y+3	; 0x03
     404:	fc 81       	ldd	r31, Y+4	; 0x04
     406:	09 95       	icall
     408:	01 c0       	rjmp	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		}
		} else {
		m->noChangeCount = 0;
     40a:	1c 8e       	std	Y+28, r1	; 0x1c
	}

	// 8. Atnaujinam paskutinæ reikðmæ
	*m->sensor.lastPosition = *m->sensor.positionFiltered;
     40c:	ed 89       	ldd	r30, Y+21	; 0x15
     40e:	fe 89       	ldd	r31, Y+22	; 0x16
     410:	a9 89       	ldd	r26, Y+17	; 0x11
     412:	ba 89       	ldd	r27, Y+18	; 0x12
     414:	8d 91       	ld	r24, X+
     416:	9c 91       	ld	r25, X
     418:	80 83       	st	Z, r24
     41a:	91 83       	std	Z+1, r25	; 0x01
}
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	ef 90       	pop	r14
     428:	df 90       	pop	r13
     42a:	cf 90       	pop	r12
     42c:	bf 90       	pop	r11
     42e:	af 90       	pop	r10
     430:	9f 90       	pop	r9
     432:	8f 90       	pop	r8
     434:	08 95       	ret

00000436 <work>:

void work(){
	if(Joystick.LatchSwitch){ //Manual mode
     436:	80 91 d4 65 	lds	r24, 0x65D4	; 0x8065d4 <Joystick+0x6>
     43a:	88 23       	and	r24, r24
     43c:	b9 f1       	breq	.+110    	; 0x4ac <work+0x76>
		if( (Target.azimuth + Joystick.X_Axis) >= MIN_AZIMUTH && (Target.azimuth + Joystick.X_Axis) <= MAX_AZIMUTH ) {
     43e:	80 91 4f 60 	lds	r24, 0x604F	; 0x80604f <Target+0x5>
     442:	90 91 50 60 	lds	r25, 0x6050	; 0x806050 <Target+0x6>
     446:	20 91 ce 65 	lds	r18, 0x65CE	; 0x8065ce <Joystick>
     44a:	30 91 cf 65 	lds	r19, 0x65CF	; 0x8065cf <Joystick+0x1>
     44e:	82 0f       	add	r24, r18
     450:	93 1f       	adc	r25, r19
     452:	9c 01       	movw	r18, r24
     454:	2e 51       	subi	r18, 0x1E	; 30
     456:	31 09       	sbc	r19, r1
     458:	2d 32       	cpi	r18, 0x2D	; 45
     45a:	31 40       	sbci	r19, 0x01	; 1
     45c:	20 f4       	brcc	.+8      	; 0x466 <work+0x30>
			Target.azimuth += Joystick.X_Axis;
     45e:	80 93 4f 60 	sts	0x604F, r24	; 0x80604f <Target+0x5>
     462:	90 93 50 60 	sts	0x6050, r25	; 0x806050 <Target+0x6>
		}
		if( (Target.elevation - Joystick.Y_Axis) >= MIN_ELEVATION && (Target.elevation - Joystick.Y_Axis) <= MAX_ELEVATION ) {
     466:	80 91 4a 60 	lds	r24, 0x604A	; 0x80604a <Target>
     46a:	90 91 4b 60 	lds	r25, 0x604B	; 0x80604b <Target+0x1>
     46e:	20 91 d0 65 	lds	r18, 0x65D0	; 0x8065d0 <Joystick+0x2>
     472:	30 91 d1 65 	lds	r19, 0x65D1	; 0x8065d1 <Joystick+0x3>
     476:	82 1b       	sub	r24, r18
     478:	93 0b       	sbc	r25, r19
     47a:	8b 35       	cpi	r24, 0x5B	; 91
     47c:	91 05       	cpc	r25, r1
     47e:	20 f4       	brcc	.+8      	; 0x488 <work+0x52>
			Target.elevation -= Joystick.Y_Axis;
     480:	80 93 4a 60 	sts	0x604A, r24	; 0x80604a <Target>
     484:	90 93 4b 60 	sts	0x604B, r25	; 0x80604b <Target+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     488:	8f ef       	ldi	r24, 0xFF	; 255
     48a:	95 ea       	ldi	r25, 0xA5	; 165
     48c:	2e e0       	ldi	r18, 0x0E	; 14
     48e:	81 50       	subi	r24, 0x01	; 1
     490:	90 40       	sbci	r25, 0x00	; 0
     492:	20 40       	sbci	r18, 0x00	; 0
     494:	e1 f7       	brne	.-8      	; 0x48e <work+0x58>
     496:	00 c0       	rjmp	.+0      	; 0x498 <work+0x62>
     498:	00 00       	nop
		}
		_delay_ms(200);
		MotorControl(&LinearMotorCtrl);
     49a:	85 e2       	ldi	r24, 0x25	; 37
     49c:	90 e6       	ldi	r25, 0x60	; 96
     49e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MotorControl>
		MotorControl(&StepperMotorCtrl);
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	90 e6       	ldi	r25, 0x60	; 96
     4a6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MotorControl>
     4aa:	08 95       	ret
	}
	else{//Auto mode
		if(WSData.windspeed > MAX_WIND){
     4ac:	80 91 e7 65 	lds	r24, 0x65E7	; 0x8065e7 <WSData+0x6>
     4b0:	80 31       	cpi	r24, 0x10	; 16
     4b2:	48 f0       	brcs	.+18     	; 0x4c6 <work+0x90>
			get_safe_azimuth();
     4b4:	0e 94 88 00 	call	0x110	; 0x110 <get_safe_azimuth>
		Target.elevation = SAFE_ELEVATION;
     4b8:	84 e1       	ldi	r24, 0x14	; 20
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	80 93 4a 60 	sts	0x604A, r24	; 0x80604a <Target>
     4c0:	90 93 4b 60 	sts	0x604B, r25	; 0x80604b <Target+0x1>
     4c4:	08 95       	ret
			}
			else{ // if not go to best day position (early morning, late at evening, or just dark day)
				Target.azimuth = 180; //South
				Target.elevation = WSData.topelevation; //day top elevation
			}		 
			Target.azimuth = WSData.azimuth;
     4c6:	a1 ee       	ldi	r26, 0xE1	; 225
     4c8:	b5 e6       	ldi	r27, 0x65	; 101
     4ca:	8d 91       	ld	r24, X+
     4cc:	9c 91       	ld	r25, X
     4ce:	11 97       	sbiw	r26, 0x01	; 1
     4d0:	ea e4       	ldi	r30, 0x4A	; 74
     4d2:	f0 e6       	ldi	r31, 0x60	; 96
     4d4:	85 83       	std	Z+5, r24	; 0x05
     4d6:	96 83       	std	Z+6, r25	; 0x06
			Target.elevation = WSData.elevation;
     4d8:	12 96       	adiw	r26, 0x02	; 2
     4da:	8d 91       	ld	r24, X+
     4dc:	9c 91       	ld	r25, X
     4de:	13 97       	sbiw	r26, 0x03	; 3
     4e0:	80 83       	st	Z, r24
     4e2:	91 83       	std	Z+1, r25	; 0x01
			MotorControl(&LinearMotorCtrl);
     4e4:	85 e2       	ldi	r24, 0x25	; 37
     4e6:	90 e6       	ldi	r25, 0x60	; 96
     4e8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MotorControl>
			MotorControl(&StepperMotorCtrl);
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e6       	ldi	r25, 0x60	; 96
     4f0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MotorControl>
     4f4:	08 95       	ret

000004f6 <ADC0_init>:
 * - Prescaler: Division by 4
 * - Resolution: 12-bit
 * - Enables the ADC.
 */
void ADC0_init() {
    ADC0.CTRLB = ADC_SAMPNUM_ACC128_gc; // 1 measurements
     4f6:	e0 e0       	ldi	r30, 0x00	; 0
     4f8:	f6 e0       	ldi	r31, 0x06	; 6
     4fa:	87 e0       	ldi	r24, 0x07	; 7
     4fc:	81 83       	std	Z+1, r24	; 0x01
    ADC0.CTRLC = ADC_PRESC_DIV4_gc; // 24Mhz / 16 ADC speed
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	82 83       	std	Z+2, r24	; 0x02
    ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_12BIT_gc; // 12-bit resolution
     502:	80 83       	st	Z, r24
     504:	08 95       	ret

00000506 <ADC0_SetupJoystick>:
}


void ADC0_SetupJoystick(uint8_t axis) {
    VREF.ADC0REF = VREF_REFSEL_VDD_gc;
     506:	95 e0       	ldi	r25, 0x05	; 5
     508:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    ADC0.MUXPOS = axis;
     50c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     510:	08 95       	ret

00000512 <ADC0_SetupLinearMotor>:

}

void ADC0_SetupLinearMotor(uint8_t parameter) {
	switch (parameter)
     512:	81 30       	cpi	r24, 0x01	; 1
     514:	39 f4       	brne	.+14     	; 0x524 <ADC0_SetupLinearMotor+0x12>
	{
		case 1: //I
			VREF.ADC0REF = VREF_REFSEL_4V096_gc; // up to 9,21A (if MCU Vcc== 4.096V)| 0A= 0.4096V| 4.096- 0.4096 = 3,6864V/0,4 = 9.21A | max current at normal working conditions for linear motor is ~4A			
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
			ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc; //PD1
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
		break;
     522:	08 95       	ret
		default://U
			VREF.ADC0REF = VREF_REFSEL_2V048_gc; //AMC1311 full range is 2.0V for linear motor 2.0V = 30.0V (300k)
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
			ADC0.MUXPOS = ADC_MUXPOS_AIN31_gc; //PC3
     52a:	8f e1       	ldi	r24, 0x1F	; 31
     52c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     530:	08 95       	ret

00000532 <ADC0_SetupStepper>:
	}

}

void ADC0_SetupStepper(uint8_t parameter) {
	switch (parameter)
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	39 f4       	brne	.+14     	; 0x544 <ADC0_SetupStepper+0x12>
	{
		case 1: //I
			VREF.ADC0REF = VREF_REFSEL_4V096_gc; // up to 9,21A (if MCU Vcc== 4.096V)| 0A= 0.4096V| 4.096- 0.4096 = 3,6864V/0,4 = 9.21A | max current at normal working conditions for stepper motor is ~6A
     536:	82 e0       	ldi	r24, 0x02	; 2
     538:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
			ADC0.MUXPOS = ADC_MUXPOS_AIN16_gc; //PF0
     53c:	80 e1       	ldi	r24, 0x10	; 16
     53e:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
		break;
     542:	08 95       	ret
		default://U
			VREF.ADC0REF = VREF_REFSEL_2V048_gc; //AMC1311 full range is 2.0V for stepper 2.0V = 71.0V (710k)
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
			ADC0.MUXPOS = ADC_MUXPOS_AIN6_gc; //PD6
     54a:	86 e0       	ldi	r24, 0x06	; 6
     54c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     550:	08 95       	ret

00000552 <ADC0_SetupSysVoltage>:
	}

}

void ADC0_SetupSysVoltage(){
	VREF.ADC0REF = VREF_REFSEL_1V024_gc; // 1.024V = 4096| 1.024 = 10.24V|
     552:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
	ADC0.MUXPOS = ADC_MUXPOS_VDDDIV10_gc; //5V = 0.5V
     556:	84 e4       	ldi	r24, 0x44	; 68
     558:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     55c:	08 95       	ret

0000055e <ADC0_read>:
 * appropriately.
 *
 * @return The ADC conversion result as a 12-bit value.
 */
uint16_t ADC0_read() {
    ADC0.COMMAND = ADC_STCONV_bm; // Start conversion
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7f060a>
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)); // Wait until result is ready
     564:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7f060d>
     568:	80 ff       	sbrs	r24, 0
     56a:	fc cf       	rjmp	.-8      	; 0x564 <ADC0_read+0x6>
    ADC0.INTFLAGS = ADC_RESRDY_bm; // Clear result ready flag
     56c:	e0 e0       	ldi	r30, 0x00	; 0
     56e:	f6 e0       	ldi	r31, 0x06	; 6
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	85 87       	std	Z+13, r24	; 0x0d
    return ADC0.RES >> 4; // Shift result if accumulation is over 16
     574:	80 89       	ldd	r24, Z+16	; 0x10
     576:	91 89       	ldd	r25, Z+17	; 0x11
}
     578:	92 95       	swap	r25
     57a:	82 95       	swap	r24
     57c:	8f 70       	andi	r24, 0x0F	; 15
     57e:	89 27       	eor	r24, r25
     580:	9f 70       	andi	r25, 0x0F	; 15
     582:	89 27       	eor	r24, r25
     584:	08 95       	ret

00000586 <Read_MCU_Voltge>:

uint16_t Read_MCU_Voltge(){
ADC0_SetupSysVoltage();
     586:	0e 94 a9 02 	call	0x552	; 0x552 <ADC0_SetupSysVoltage>
return ADC0_read()*0.25; //ADC value * 10.26V (full adc range) / 4096 (Full adc range steps) exp: 1856 * 0.25 = 464 (4.64V)
     58a:	0e 94 af 02 	call	0x55e	; 0x55e <ADC0_read>
     58e:	bc 01       	movw	r22, r24
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__floatunsisf>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e8       	ldi	r20, 0x80	; 128
     59e:	5e e3       	ldi	r21, 0x3E	; 62
     5a0:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <__mulsf3>
     5a4:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__fixunssfsi>
}
     5a8:	cb 01       	movw	r24, r22
     5aa:	08 95       	ret

000005ac <CLOCK_XOSCHF_clock_init>:
#include "Settings.h"

void CLOCK_XOSCHF_clock_init()
{
	/* Enable external (32 MHz) clock input */
	ccp_write_io((uint8_t *) &CLKCTRL.XOSCHFCTRLA, CLKCTRL_SELHF_EXTCLOCK_gc | CLKCTRL_FRQRANGE_24M_gc | CLKCTRL_ENABLE_bm);
     5ac:	6b e0       	ldi	r22, 0x0B	; 11
     5ae:	80 e8       	ldi	r24, 0x80	; 128
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 67 14 	call	0x28ce	; 0x28ce <ccp_write_io>

	/* Set the main clock to use external clock as source */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc);
     5b6:	63 e0       	ldi	r22, 0x03	; 3
     5b8:	80 e6       	ldi	r24, 0x60	; 96
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 67 14 	call	0x28ce	; 0x28ce <ccp_write_io>

	/* Wait for system oscillator change to complete */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm)
     5c0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
     5c4:	80 fd       	sbrc	r24, 0
     5c6:	fc cf       	rjmp	.-8      	; 0x5c0 <CLOCK_XOSCHF_clock_init+0x14>
	{};
	/* Configuration complete;*/
}
     5c8:	08 95       	ret

000005ca <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
     5ca:	2f 92       	push	r2
     5cc:	3f 92       	push	r3
     5ce:	4f 92       	push	r4
     5d0:	5f 92       	push	r5
     5d2:	6f 92       	push	r6
     5d4:	7f 92       	push	r7
     5d6:	8f 92       	push	r8
     5d8:	9f 92       	push	r9
     5da:	af 92       	push	r10
     5dc:	bf 92       	push	r11
     5de:	cf 92       	push	r12
     5e0:	df 92       	push	r13
     5e2:	ef 92       	push	r14
     5e4:	ff 92       	push	r15
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	2b 97       	sbiw	r28, 0x0b	; 11
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	c2 2e       	mov	r12, r18
     5fa:	b3 2e       	mov	r11, r19
     5fc:	a4 2e       	mov	r10, r20
     5fe:	95 2e       	mov	r9, r21
     600:	86 2e       	mov	r8, r22
     602:	77 2e       	mov	r7, r23
     604:	68 2e       	mov	r6, r24
     606:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
     608:	f2 2e       	mov	r15, r18
     60a:	03 2f       	mov	r16, r19
     60c:	14 2f       	mov	r17, r20
     60e:	5a 87       	std	Y+10, r21	; 0x0a
     610:	69 83       	std	Y+1, r22	; 0x01
     612:	b7 2f       	mov	r27, r23
     614:	d8 2e       	mov	r13, r24
     616:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
     618:	e0 e0       	ldi	r30, 0x00	; 0
     61a:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     61c:	14 c0       	rjmp	.+40     	; 0x646 <crc8_cdma2000+0x7c>
        length++;
     61e:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
     620:	2f 2d       	mov	r18, r15
     622:	30 2f       	mov	r19, r16
     624:	41 2f       	mov	r20, r17
     626:	5a 85       	ldd	r21, Y+10	; 0x0a
     628:	69 81       	ldd	r22, Y+1	; 0x01
     62a:	7b 2f       	mov	r23, r27
     62c:	8d 2d       	mov	r24, r13
     62e:	9e 2d       	mov	r25, r14
     630:	08 e0       	ldi	r16, 0x08	; 8
     632:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__lshrdi3>
     636:	f2 2e       	mov	r15, r18
     638:	03 2f       	mov	r16, r19
     63a:	14 2f       	mov	r17, r20
     63c:	5a 87       	std	Y+10, r21	; 0x0a
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	b7 2f       	mov	r27, r23
     642:	d8 2e       	mov	r13, r24
     644:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     646:	2f 2d       	mov	r18, r15
     648:	30 2f       	mov	r19, r16
     64a:	41 2f       	mov	r20, r17
     64c:	5a 85       	ldd	r21, Y+10	; 0x0a
     64e:	69 81       	ldd	r22, Y+1	; 0x01
     650:	7b 2f       	mov	r23, r27
     652:	8d 2d       	mov	r24, r13
     654:	9e 2d       	mov	r25, r14
     656:	a0 e0       	ldi	r26, 0x00	; 0
     658:	0e 94 06 10 	call	0x200c	; 0x200c <__cmpdi2_s8>
     65c:	01 f7       	brne	.-64     	; 0x61e <crc8_cdma2000+0x54>
     65e:	8f ef       	ldi	r24, 0xFF	; 255
     660:	8a 87       	std	Y+10, r24	; 0x0a
     662:	cb 86       	std	Y+11, r12	; 0x0b
     664:	b9 82       	std	Y+1, r11	; 0x01
     666:	4a 2c       	mov	r4, r10
     668:	39 2c       	mov	r3, r9
     66a:	28 2c       	mov	r2, r8
     66c:	1a c0       	rjmp	.+52     	; 0x6a2 <crc8_cdma2000+0xd8>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
     66e:	8d 01       	movw	r16, r26
     670:	00 0f       	add	r16, r16
     672:	11 1f       	adc	r17, r17
     674:	00 0f       	add	r16, r16
     676:	11 1f       	adc	r17, r17
     678:	00 0f       	add	r16, r16
     67a:	11 1f       	adc	r17, r17
     67c:	2b 85       	ldd	r18, Y+11	; 0x0b
     67e:	39 81       	ldd	r19, Y+1	; 0x01
     680:	44 2d       	mov	r20, r4
     682:	53 2d       	mov	r21, r3
     684:	62 2d       	mov	r22, r2
     686:	77 2d       	mov	r23, r7
     688:	86 2d       	mov	r24, r6
     68a:	95 2d       	mov	r25, r5
     68c:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__lshrdi3>
     690:	8a 84       	ldd	r8, Y+10	; 0x0a
     692:	82 26       	eor	r8, r18
     694:	91 2c       	mov	r9, r1
     696:	f4 01       	movw	r30, r8
     698:	e3 54       	subi	r30, 0x43	; 67
     69a:	fc 49       	sbci	r31, 0x9C	; 156
     69c:	80 81       	ld	r24, Z
     69e:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
     6a0:	fd 01       	movw	r30, r26
     6a2:	df 01       	movw	r26, r30
     6a4:	11 97       	sbiw	r26, 0x01	; 1
     6a6:	ef 2b       	or	r30, r31
     6a8:	11 f7       	brne	.-60     	; 0x66e <crc8_cdma2000+0xa4>
     6aa:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
     6ac:	2b 96       	adiw	r28, 0x0b	; 11
     6ae:	cd bf       	out	0x3d, r28	; 61
     6b0:	de bf       	out	0x3e, r29	; 62
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	df 90       	pop	r13
     6c0:	cf 90       	pop	r12
     6c2:	bf 90       	pop	r11
     6c4:	af 90       	pop	r10
     6c6:	9f 90       	pop	r9
     6c8:	8f 90       	pop	r8
     6ca:	7f 90       	pop	r7
     6cc:	6f 90       	pop	r6
     6ce:	5f 90       	pop	r5
     6d0:	4f 90       	pop	r4
     6d2:	3f 90       	pop	r3
     6d4:	2f 90       	pop	r2
     6d6:	08 95       	ret

000006d8 <verify_crc8_cdma2000>:
 * without the CRC byte. Otherwise, it returns 0 to indicate a mismatch.
 * 
 * @param data_with_crc The input data with the CRC byte appended.
 * @return The data without the CRC byte if the checksum is valid, or 0 if invalid.
 */
uint8_t verify_crc8_cdma2000(uint64_t data_without_crc, uint8_t crc) {
     6d8:	0f 93       	push	r16
     6da:	cf 93       	push	r28
     6dc:	c2 2f       	mov	r28, r18

	return crc8_cdma2000(data_without_crc) == crc ?  data_without_crc : 0;
     6de:	0e 94 e5 02 	call	0x5ca	; 0x5ca <crc8_cdma2000>
     6e2:	80 13       	cpse	r24, r16
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <verify_crc8_cdma2000+0x12>
     6e6:	8c 2f       	mov	r24, r28
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <verify_crc8_cdma2000+0x14>
     6ea:	80 e0       	ldi	r24, 0x00	; 0

     6ec:	cf 91       	pop	r28
     6ee:	0f 91       	pop	r16
     6f0:	08 95       	ret

000006f2 <hexToUint64>:
 *  Author: Saulius
 */ 
#include "Settings.h"
#include "FOUSARTVar.h"

uint64_t hexToUint64(const char *str) {
     6f2:	0f 93       	push	r16
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	fc 01       	movw	r30, r24
	uint64_t result = 0;
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	90 e0       	ldi	r25, 0x00	; 0
	char c;

	while ((c = *str++)) {
     70a:	3a c0       	rjmp	.+116    	; 0x780 <hexToUint64+0x8e>
		result <<= 4; // kiekvienas hex simbolis = 4 bitai
     70c:	04 e0       	ldi	r16, 0x04	; 4
     70e:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__ashldi3>

		if (c >= '0' && c <= '9') {
     712:	e0 ed       	ldi	r30, 0xD0	; 208
     714:	ec 0f       	add	r30, r28
     716:	ea 30       	cpi	r30, 0x0A	; 10
     718:	70 f4       	brcc	.+28     	; 0x736 <hexToUint64+0x44>
			result |= (uint64_t)(c - '0');
     71a:	d0 e0       	ldi	r29, 0x00	; 0
     71c:	e0 97       	sbiw	r28, 0x30	; 48
     71e:	ed 2f       	mov	r30, r29
     720:	ee 0f       	add	r30, r30
     722:	ee 0b       	sbc	r30, r30
     724:	2c 2b       	or	r18, r28
     726:	3d 2b       	or	r19, r29
     728:	4e 2b       	or	r20, r30
     72a:	5e 2b       	or	r21, r30
     72c:	6e 2b       	or	r22, r30
     72e:	7e 2b       	or	r23, r30
     730:	8e 2b       	or	r24, r30
     732:	9e 2b       	or	r25, r30
     734:	24 c0       	rjmp	.+72     	; 0x77e <hexToUint64+0x8c>
			} else if (c >= 'A' && c <= 'F') {
     736:	ef eb       	ldi	r30, 0xBF	; 191
     738:	ec 0f       	add	r30, r28
     73a:	e6 30       	cpi	r30, 0x06	; 6
     73c:	70 f4       	brcc	.+28     	; 0x75a <hexToUint64+0x68>
			result |= (uint64_t)(c - 'A' + 10);
     73e:	d0 e0       	ldi	r29, 0x00	; 0
     740:	e7 97       	sbiw	r28, 0x37	; 55
     742:	ed 2f       	mov	r30, r29
     744:	ee 0f       	add	r30, r30
     746:	ee 0b       	sbc	r30, r30
     748:	2c 2b       	or	r18, r28
     74a:	3d 2b       	or	r19, r29
     74c:	4e 2b       	or	r20, r30
     74e:	5e 2b       	or	r21, r30
     750:	6e 2b       	or	r22, r30
     752:	7e 2b       	or	r23, r30
     754:	8e 2b       	or	r24, r30
     756:	9e 2b       	or	r25, r30
     758:	12 c0       	rjmp	.+36     	; 0x77e <hexToUint64+0x8c>
			} else if (c >= 'a' && c <= 'f') {
     75a:	ef e9       	ldi	r30, 0x9F	; 159
     75c:	ec 0f       	add	r30, r28
     75e:	e6 30       	cpi	r30, 0x06	; 6
     760:	a8 f4       	brcc	.+42     	; 0x78c <hexToUint64+0x9a>
			result |= (uint64_t)(c - 'a' + 10);
     762:	d0 e0       	ldi	r29, 0x00	; 0
     764:	c7 55       	subi	r28, 0x57	; 87
     766:	d1 09       	sbc	r29, r1
     768:	ed 2f       	mov	r30, r29
     76a:	ee 0f       	add	r30, r30
     76c:	ee 0b       	sbc	r30, r30
     76e:	2c 2b       	or	r18, r28
     770:	3d 2b       	or	r19, r29
     772:	4e 2b       	or	r20, r30
     774:	5e 2b       	or	r21, r30
     776:	6e 2b       	or	r22, r30
     778:	7e 2b       	or	r23, r30
     77a:	8e 2b       	or	r24, r30
     77c:	9e 2b       	or	r25, r30
     77e:	fd 01       	movw	r30, r26

uint64_t hexToUint64(const char *str) {
	uint64_t result = 0;
	char c;

	while ((c = *str++)) {
     780:	df 01       	movw	r26, r30
     782:	11 96       	adiw	r26, 0x01	; 1
     784:	c0 81       	ld	r28, Z
     786:	c1 11       	cpse	r28, r1
     788:	c1 cf       	rjmp	.-126    	; 0x70c <hexToUint64+0x1a>
     78a:	08 c0       	rjmp	.+16     	; 0x79c <hexToUint64+0xaa>
			result |= (uint64_t)(c - 'A' + 10);
			} else if (c >= 'a' && c <= 'f') {
			result |= (uint64_t)(c - 'a' + 10);
			} else {
			// netinkamas simbolis
			return 0;
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return result;
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret

000007a4 <FODataSplitter>:

void FODataSplitter(char *command) {
     7a4:	7f 92       	push	r7
     7a6:	8f 92       	push	r8
     7a8:	9f 92       	push	r9
     7aa:	af 92       	push	r10
     7ac:	bf 92       	push	r11
     7ae:	cf 92       	push	r12
     7b0:	df 92       	push	r13
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	a0 97       	sbiw	r28, 0x20	; 32
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	6c 01       	movw	r12, r24
	if (strncmp(command, "00000000000000", 14) == 0) { //if elevation angle, azimuth angle, solar cells voltage and current = 0 meaning it is FO optic fault: bad signal
     7ca:	4e e0       	ldi	r20, 0x0E	; 14
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	6d eb       	ldi	r22, 0xBD	; 189
     7d0:	74 e6       	ldi	r23, 0x64	; 100
     7d2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <strncmp>
     7d6:	89 2b       	or	r24, r25
     7d8:	21 f4       	brne	.+8      	; 0x7e2 <FODataSplitter+0x3e>
		SensorData.FO_bad_signal_fault = true; //exp. hard bended fo
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	80 93 b2 65 	sts	0x65B2, r24	; 0x8065b2 <SensorData+0x10>
     7e0:	dc c0       	rjmp	.+440    	; 0x99a <FODataSplitter+0x1f6>
	}
	else{
		const uint8_t lengths[] = {4, 4, 3, 3, 1, 2};
     7e2:	86 e0       	ldi	r24, 0x06	; 6
     7e4:	e3 e9       	ldi	r30, 0x93	; 147
     7e6:	f3 e6       	ldi	r31, 0x63	; 99
     7e8:	de 01       	movw	r26, r28
     7ea:	5b 96       	adiw	r26, 0x1b	; 27
     7ec:	01 90       	ld	r0, Z+
     7ee:	0d 92       	st	X+, r0
     7f0:	8a 95       	dec	r24
     7f2:	e1 f7       	brne	.-8      	; 0x7ec <FODataSplitter+0x48>
		char temp[16];

		strncpy(temp, command, 15);
     7f4:	4f e0       	ldi	r20, 0x0F	; 15
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	b6 01       	movw	r22, r12
     7fa:	ce 01       	movw	r24, r28
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	0e 94 71 11 	call	0x22e2	; 0x22e2 <strncpy>
		temp[15] = '\0';
     802:	18 8a       	std	Y+16, r1	; 0x10
		uint64_t datatocheck = hexToUint64(temp);
     804:	ce 01       	movw	r24, r28
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	0e 94 79 03 	call	0x6f2	; 0x6f2 <hexToUint64>
     80c:	72 2e       	mov	r7, r18
     80e:	83 2e       	mov	r8, r19
     810:	94 2e       	mov	r9, r20
     812:	a5 2e       	mov	r10, r21
     814:	b6 2e       	mov	r11, r22
     816:	e7 2e       	mov	r14, r23
     818:	f8 2e       	mov	r15, r24
     81a:	19 2f       	mov	r17, r25
		strncpy(temp, command + 15, 2); 
     81c:	42 e0       	ldi	r20, 0x02	; 2
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	b6 01       	movw	r22, r12
     822:	61 5f       	subi	r22, 0xF1	; 241
     824:	7f 4f       	sbci	r23, 0xFF	; 255
     826:	ce 01       	movw	r24, r28
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	0e 94 71 11 	call	0x22e2	; 0x22e2 <strncpy>
		temp[2] = '\0';
     82e:	1b 82       	std	Y+3, r1	; 0x03
		uint8_t crctocheck = (uint8_t)strtol(temp, NULL, 16);
     830:	40 e1       	ldi	r20, 0x10	; 16
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	ce 01       	movw	r24, r28
     83a:	01 96       	adiw	r24, 0x01	; 1
     83c:	0e 94 26 10 	call	0x204c	; 0x204c <strtol>

		if(verify_crc8_cdma2000(datatocheck, crctocheck)){ //if data valid update it
     840:	06 2f       	mov	r16, r22
     842:	27 2d       	mov	r18, r7
     844:	38 2d       	mov	r19, r8
     846:	49 2d       	mov	r20, r9
     848:	5a 2d       	mov	r21, r10
     84a:	6b 2d       	mov	r22, r11
     84c:	7e 2d       	mov	r23, r14
     84e:	8f 2d       	mov	r24, r15
     850:	91 2f       	mov	r25, r17
     852:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <verify_crc8_cdma2000>
     856:	81 11       	cpse	r24, r1
     858:	69 c0       	rjmp	.+210    	; 0x92c <FODataSplitter+0x188>
     85a:	9c c0       	rjmp	.+312    	; 0x994 <FODataSplitter+0x1f0>
			//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
			const char *p = command;
			uint8_t EndSwitchesValue = 0;

			for (uint8_t i = 0; i < 6; i++) {
				char token[10] = {0};
     85c:	5e 01       	movw	r10, r28
     85e:	81 e1       	ldi	r24, 0x11	; 17
     860:	a8 0e       	add	r10, r24
     862:	b1 1c       	adc	r11, r1
     864:	8a e0       	ldi	r24, 0x0A	; 10
     866:	f5 01       	movw	r30, r10
     868:	11 92       	st	Z+, r1
     86a:	8a 95       	dec	r24
     86c:	e9 f7       	brne	.-6      	; 0x868 <FODataSplitter+0xc4>

				memcpy(token, p, lengths[i]);
     86e:	eb e1       	ldi	r30, 0x1B	; 27
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	ec 0f       	add	r30, r28
     874:	fd 1f       	adc	r31, r29
     876:	e1 0f       	add	r30, r17
     878:	f1 1d       	adc	r31, r1
     87a:	e0 80       	ld	r14, Z
     87c:	f1 2c       	mov	r15, r1
     87e:	a7 01       	movw	r20, r14
     880:	b6 01       	movw	r22, r12
     882:	c5 01       	movw	r24, r10
     884:	0e 94 4a 11 	call	0x2294	; 0x2294 <memcpy>
				token[lengths[i]] = '\0';
     888:	f5 01       	movw	r30, r10
     88a:	ee 0d       	add	r30, r14
     88c:	ff 1d       	adc	r31, r15
     88e:	10 82       	st	Z, r1

				switch (i) {
     890:	12 30       	cpi	r17, 0x02	; 2
     892:	29 f1       	breq	.+74     	; 0x8de <FODataSplitter+0x13a>
     894:	28 f4       	brcc	.+10     	; 0x8a0 <FODataSplitter+0xfc>
     896:	11 23       	and	r17, r17
     898:	41 f0       	breq	.+16     	; 0x8aa <FODataSplitter+0x106>
     89a:	11 30       	cpi	r17, 0x01	; 1
     89c:	99 f0       	breq	.+38     	; 0x8c4 <FODataSplitter+0x120>
     89e:	42 c0       	rjmp	.+132    	; 0x924 <FODataSplitter+0x180>
     8a0:	13 30       	cpi	r17, 0x03	; 3
     8a2:	51 f1       	breq	.+84     	; 0x8f8 <FODataSplitter+0x154>
     8a4:	14 30       	cpi	r17, 0x04	; 4
     8a6:	a9 f1       	breq	.+106    	; 0x912 <FODataSplitter+0x16e>
     8a8:	3d c0       	rjmp	.+122    	; 0x924 <FODataSplitter+0x180>
					case 0: SensorData.HPElevation   = (uint16_t)strtol(token, NULL, 16); break;
     8aa:	40 e1       	ldi	r20, 0x10	; 16
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	ce 01       	movw	r24, r28
     8b4:	41 96       	adiw	r24, 0x11	; 17
     8b6:	0e 94 26 10 	call	0x204c	; 0x204c <strtol>
     8ba:	60 93 a4 65 	sts	0x65A4, r22	; 0x8065a4 <SensorData+0x2>
     8be:	70 93 a5 65 	sts	0x65A5, r23	; 0x8065a5 <SensorData+0x3>
     8c2:	30 c0       	rjmp	.+96     	; 0x924 <FODataSplitter+0x180>
					case 1: SensorData.HPAzimuth     = (uint16_t)strtol(token, NULL, 16); break;
     8c4:	40 e1       	ldi	r20, 0x10	; 16
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	ce 01       	movw	r24, r28
     8ce:	41 96       	adiw	r24, 0x11	; 17
     8d0:	0e 94 26 10 	call	0x204c	; 0x204c <strtol>
     8d4:	60 93 a8 65 	sts	0x65A8, r22	; 0x8065a8 <SensorData+0x6>
     8d8:	70 93 a9 65 	sts	0x65A9, r23	; 0x8065a9 <SensorData+0x7>
     8dc:	23 c0       	rjmp	.+70     	; 0x924 <FODataSplitter+0x180>
					case 2: SensorData.PVU         = (uint16_t)strtol(token, NULL, 16)/ U_I_Precizion; break;
     8de:	40 e1       	ldi	r20, 0x10	; 16
     8e0:	50 e0       	ldi	r21, 0x00	; 0
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	ce 01       	movw	r24, r28
     8e8:	41 96       	adiw	r24, 0x11	; 17
     8ea:	0e 94 26 10 	call	0x204c	; 0x204c <strtol>
     8ee:	60 93 aa 65 	sts	0x65AA, r22	; 0x8065aa <SensorData+0x8>
     8f2:	70 93 ab 65 	sts	0x65AB, r23	; 0x8065ab <SensorData+0x9>
     8f6:	16 c0       	rjmp	.+44     	; 0x924 <FODataSplitter+0x180>
					case 3: SensorData.PVI         = (uint16_t)strtol(token, NULL, 16)/ U_I_Precizion; break;
     8f8:	40 e1       	ldi	r20, 0x10	; 16
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	ce 01       	movw	r24, r28
     902:	41 96       	adiw	r24, 0x11	; 17
     904:	0e 94 26 10 	call	0x204c	; 0x204c <strtol>
     908:	60 93 ac 65 	sts	0x65AC, r22	; 0x8065ac <SensorData+0xa>
     90c:	70 93 ad 65 	sts	0x65AD, r23	; 0x8065ad <SensorData+0xb>
     910:	09 c0       	rjmp	.+18     	; 0x924 <FODataSplitter+0x180>
					case 4: EndSwitchesValue       = (uint8_t)strtol(token, NULL, 16); break; //common end switches value
     912:	40 e1       	ldi	r20, 0x10	; 16
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	ce 01       	movw	r24, r28
     91c:	41 96       	adiw	r24, 0x11	; 17
     91e:	0e 94 26 10 	call	0x204c	; 0x204c <strtol>
     922:	06 2f       	mov	r16, r22
				}

				p += lengths[i];
     924:	ce 0c       	add	r12, r14
     926:	df 1c       	adc	r13, r15
		if(verify_crc8_cdma2000(datatocheck, crctocheck)){ //if data valid update it
			//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
			const char *p = command;
			uint8_t EndSwitchesValue = 0;

			for (uint8_t i = 0; i < 6; i++) {
     928:	1f 5f       	subi	r17, 0xFF	; 255
     92a:	02 c0       	rjmp	.+4      	; 0x930 <FODataSplitter+0x18c>
     92c:	10 e0       	ldi	r17, 0x00	; 0
     92e:	00 e0       	ldi	r16, 0x00	; 0
     930:	16 30       	cpi	r17, 0x06	; 6
     932:	08 f4       	brcc	.+2      	; 0x936 <FODataSplitter+0x192>
     934:	93 cf       	rjmp	.-218    	; 0x85c <FODataSplitter+0xb8>
					case 4: EndSwitchesValue       = (uint8_t)strtol(token, NULL, 16); break; //common end switches value
				}

				p += lengths[i];
			}
			SensorData.Elevation = SensorData.HPElevation / Angle_Precizion;
     936:	e2 ea       	ldi	r30, 0xA2	; 162
     938:	f5 e6       	ldi	r31, 0x65	; 101
     93a:	22 81       	ldd	r18, Z+2	; 0x02
     93c:	33 81       	ldd	r19, Z+3	; 0x03
     93e:	36 95       	lsr	r19
     940:	27 95       	ror	r18
     942:	36 95       	lsr	r19
     944:	27 95       	ror	r18
     946:	ab e7       	ldi	r26, 0x7B	; 123
     948:	b4 e1       	ldi	r27, 0x14	; 20
     94a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
     94e:	96 95       	lsr	r25
     950:	87 95       	ror	r24
     952:	80 83       	st	Z, r24
     954:	91 83       	std	Z+1, r25	; 0x01
			SensorData.Azimuth = SensorData.HPAzimuth / Angle_Precizion;
     956:	26 81       	ldd	r18, Z+6	; 0x06
     958:	37 81       	ldd	r19, Z+7	; 0x07
     95a:	36 95       	lsr	r19
     95c:	27 95       	ror	r18
     95e:	36 95       	lsr	r19
     960:	27 95       	ror	r18
     962:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
     966:	96 95       	lsr	r25
     968:	87 95       	ror	r24
     96a:	84 83       	std	Z+4, r24	; 0x04
     96c:	95 83       	std	Z+5, r25	; 0x05
			//spliting end switch value to separate end switch value according to axis
			SensorData.ElMin = (EndSwitchesValue & 0x01) ? 1 : 0;
     96e:	80 2f       	mov	r24, r16
     970:	81 70       	andi	r24, 0x01	; 1
     972:	84 87       	std	Z+12, r24	; 0x0c
			SensorData.ElMax = (EndSwitchesValue & 0x02) ? 1 : 0;
     974:	01 fb       	bst	r16, 1
     976:	88 27       	eor	r24, r24
     978:	80 f9       	bld	r24, 0
     97a:	85 87       	std	Z+13, r24	; 0x0d
			SensorData.AzMin = (EndSwitchesValue & 0x04) ? 1 : 0;
     97c:	02 fb       	bst	r16, 2
     97e:	88 27       	eor	r24, r24
     980:	80 f9       	bld	r24, 0
     982:	86 87       	std	Z+14, r24	; 0x0e
			SensorData.AzMax = (EndSwitchesValue & 0x08) ? 1 : 0;
     984:	03 fb       	bst	r16, 3
     986:	00 27       	eor	r16, r16
     988:	00 f9       	bld	r16, 0
     98a:	07 87       	std	Z+15, r16	; 0x0f
			SensorData.FO_bad_signal_fault = false; //reset error
     98c:	10 8a       	std	Z+16, r1	; 0x10
			SensorData.FO_data_fault = false; //reset error
     98e:	12 8a       	std	Z+18, r1	; 0x12
			SensorData.FO_lost_signal_fault = false; //reset error
     990:	11 8a       	std	Z+17, r1	; 0x11
     992:	03 c0       	rjmp	.+6      	; 0x99a <FODataSplitter+0x1f6>

		}
		else{
			//uncomment if nedded
			//screen_write_formatted_text("data is corupted!", 1, ALIGN_CENTER); // bad crc
			SensorData.FO_data_fault = true;
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	80 93 b4 65 	sts	0x65B4, r24	; 0x8065b4 <SensorData+0x12>
		}	
	}
}
     99a:	a0 96       	adiw	r28, 0x20	; 32
     99c:	cd bf       	out	0x3d, r28	; 61
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	bf 90       	pop	r11
     9b2:	af 90       	pop	r10
     9b4:	9f 90       	pop	r9
     9b6:	8f 90       	pop	r8
     9b8:	7f 90       	pop	r7
     9ba:	08 95       	ret

000009bc <FOReceiver>:
 * This function continuously reads incoming data via USART, processes the data, 
 * and executes the appropriate command. If an error occurs or a warning is set, 
 * it handles the corresponding state. The function handles both normal command 
 * processing and error recovery.
 */
void FOReceiver() {
     9bc:	ff 92       	push	r15
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	64 97       	sbiw	r28, 0x14	; 20
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	de bf       	out	0x3e, r29	; 62
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
     9d0:	fe 01       	movw	r30, r28
     9d2:	31 96       	adiw	r30, 0x01	; 1
     9d4:	84 e1       	ldi	r24, 0x14	; 20
     9d6:	df 01       	movw	r26, r30
     9d8:	1d 92       	st	X+, r1
     9da:	8a 95       	dec	r24
     9dc:	e9 f7       	brne	.-6      	; 0x9d8 <FOReceiver+0x1c>
    uint8_t start = 0;
	uint8_t timeout = 0;
	SensorData.FO_lost_signal_fault = false;// usart1 while loop exit
     9de:	e2 ea       	ldi	r30, 0xA2	; 162
     9e0:	f5 e6       	ldi	r31, 0x65	; 101
     9e2:	11 8a       	std	Z+17, r1	; 0x11
	SensorData.FO_lost_connecton_fault = false; // while lop exit below
     9e4:	13 8a       	std	Z+19, r1	; 0x13
 */
void FOReceiver() {
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
    uint8_t start = 0;
	uint8_t timeout = 0;
     9e6:	10 e0       	ldi	r17, 0x00	; 0
 * processing and error recovery.
 */
void FOReceiver() {
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
    uint8_t start = 0;
     9e8:	f1 2c       	mov	r15, r1
 * and executes the appropriate command. If an error occurs or a warning is set, 
 * it handles the corresponding state. The function handles both normal command 
 * processing and error recovery.
 */
void FOReceiver() {
    uint8_t index = 0;
     9ea:	00 e0       	ldi	r16, 0x00	; 0
     9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <FOReceiver+0x38>
            } else if (index < MESSAGE_LENGTH_FO) {
                command[index++] = c; // Store received character in command array
            }
        }
        if (c == '<') { // If received data start symbol
            start = 1;
     9ee:	ff 24       	eor	r15, r15
     9f0:	f3 94       	inc	r15
            index = 0;
     9f2:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t timeout = 0;
	SensorData.FO_lost_signal_fault = false;// usart1 while loop exit
	SensorData.FO_lost_connecton_fault = false; // while lop exit below

    while (1) {
        char c = USART1_readChar(); // Reading a character from USART
     9f4:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <USART1_readChar>

		if(SensorData.FO_lost_signal_fault){
     9f8:	90 91 b3 65 	lds	r25, 0x65B3	; 0x8065b3 <SensorData+0x11>
     9fc:	99 23       	and	r25, r25
     9fe:	39 f0       	breq	.+14     	; 0xa0e <FOReceiver+0x52>
			if (++timeout == CountForError_FO) { // Timeout condition if usart1 reading is halted
     a00:	1f 5f       	subi	r17, 0xFF	; 255
     a02:	13 30       	cpi	r17, 0x03	; 3
     a04:	21 f4       	brne	.+8      	; 0xa0e <FOReceiver+0x52>
				SensorData.FO_lost_connecton_fault = true;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 b5 65 	sts	0x65B5, r24	; 0x8065b5 <SensorData+0x13>
				break;
     a0c:	2c c0       	rjmp	.+88     	; 0xa66 <FOReceiver+0xaa>
			}
		}
        if (start) {
     a0e:	ff 20       	and	r15, r15
     a10:	39 f1       	breq	.+78     	; 0xa60 <FOReceiver+0xa4>
			
            if (c == '>') { // If received data end symbol			
     a12:	8e 33       	cpi	r24, 0x3E	; 62
     a14:	d9 f4       	brne	.+54     	; 0xa4c <FOReceiver+0x90>
				start = 0;
				command[index] = '\0';
     a16:	e1 e0       	ldi	r30, 0x01	; 1
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	ec 0f       	add	r30, r28
     a1c:	fd 1f       	adc	r31, r29
     a1e:	e0 0f       	add	r30, r16
     a20:	f1 1d       	adc	r31, r1
     a22:	10 82       	st	Z, r1
				index = 0;
				if (strcmp(command, SensorData.FreshDataPack) != 0){ //only if message is different
     a24:	69 eb       	ldi	r22, 0xB9	; 185
     a26:	75 e6       	ldi	r23, 0x65	; 101
     a28:	ce 01       	movw	r24, r28
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	0e 94 53 11 	call	0x22a6	; 0x22a6 <strcmp>
     a30:	89 2b       	or	r24, r25
     a32:	21 f0       	breq	.+8      	; 0xa3c <FOReceiver+0x80>
					FODataSplitter(command); // Execute the received command //comment when testing lines below
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <FODataSplitter>
				}
				strcpy(SensorData.FreshDataPack, command); // prevents from same message data splitting
     a3c:	be 01       	movw	r22, r28
     a3e:	6f 5f       	subi	r22, 0xFF	; 255
     a40:	7f 4f       	sbci	r23, 0xFF	; 255
     a42:	89 eb       	ldi	r24, 0xB9	; 185
     a44:	95 e6       	ldi	r25, 0x65	; 101
     a46:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strcpy>
				break;
     a4a:	0d c0       	rjmp	.+26     	; 0xa66 <FOReceiver+0xaa>
            } else if (index < MESSAGE_LENGTH_FO) {
     a4c:	04 31       	cpi	r16, 0x14	; 20
     a4e:	40 f4       	brcc	.+16     	; 0xa60 <FOReceiver+0xa4>
                command[index++] = c; // Store received character in command array
     a50:	e1 e0       	ldi	r30, 0x01	; 1
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	ec 0f       	add	r30, r28
     a56:	fd 1f       	adc	r31, r29
     a58:	e0 0f       	add	r30, r16
     a5a:	f1 1d       	adc	r31, r1
     a5c:	80 83       	st	Z, r24
     a5e:	0f 5f       	subi	r16, 0xFF	; 255
            }
        }
        if (c == '<') { // If received data start symbol
     a60:	8c 33       	cpi	r24, 0x3C	; 60
     a62:	41 f6       	brne	.-112    	; 0x9f4 <FOReceiver+0x38>
     a64:	c4 cf       	rjmp	.-120    	; 0x9ee <FOReceiver+0x32>
            start = 1;
            index = 0;
        }
    }
}
     a66:	64 96       	adiw	r28, 0x14	; 20
     a68:	cd bf       	out	0x3d, r28	; 61
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	ff 90       	pop	r15
     a76:	08 95       	ret

00000a78 <GPIO_init>:

#include "Settings.h"

void GPIO_init(){
    // Configure USART0 and USART1 pin routing
    PORTMUX.USARTROUTEA = PORTMUX_USART0_ALT1_gc | PORTMUX_USART1_ALT2_gc; // Set USART0 to alternative pins set 1, USART1 to alternative pins set 2
     a78:	e0 ee       	ldi	r30, 0xE0	; 224
     a7a:	f5 e0       	ldi	r31, 0x05	; 5
     a7c:	81 e1       	ldi	r24, 0x11	; 17
     a7e:	82 83       	std	Z+2, r24	; 0x02
    PORTMUX.TWIROUTEA = PORTMUX_TWI0_DEFAULT_gc; // Set TWI0 to default pins
     a80:	16 82       	std	Z+6, r1	; 0x06
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;
     a82:	83 e0       	ldi	r24, 0x03	; 3
     a84:	87 83       	std	Z+7, r24	; 0x07
	PORTMUX.TCDROUTEA = PORTMUX_TCD0_ALT2_gc; ///< Select alternative WOC pin variant 2
     a86:	82 e0       	ldi	r24, 0x02	; 2
     a88:	81 87       	std	Z+9, r24	; 0x09


    // Configure Port A (PA) for RX LED, I2C SDA, SCL, USART0 TX, TX LED and XDIR
    PORTA.DIRSET = PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // Set PA2, PA3, PA4, PA7 as output (RX LED, I2C SDA, SCL, USART0 TX, TX LED, XDIR)
     a8a:	e0 e0       	ldi	r30, 0x00	; 0
     a8c:	f4 e0       	ldi	r31, 0x04	; 4
     a8e:	8c ed       	ldi	r24, 0xDC	; 220
     a90:	81 83       	std	Z+1, r24	; 0x01
    PORTA.DIRCLR = PIN1_bm | PIN5_bm; // Set  PA1 as Joystick button,  PA5 as input (USART0 RX)
     a92:	82 e2       	ldi	r24, 0x22	; 34
     a94:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA1 (Joystick button)
     a96:	88 e0       	ldi	r24, 0x08	; 8
     a98:	81 8b       	std	Z+17, r24	; 0x11
    PORTA.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA4 (I2C SCL)
     a9a:	84 8b       	std	Z+20, r24	; 0x14
    PORTA.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA5 (USART0 RX)
     a9c:	85 8b       	std	Z+21, r24	; 0x15

    // Configure ADC pins for Joystick x and y axis
    PORTC.PIN1CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC1 (X axis)
     a9e:	e0 e4       	ldi	r30, 0x40	; 64
     aa0:	f4 e0       	ldi	r31, 0x04	; 4
     aa2:	91 89       	ldd	r25, Z+17	; 0x11
     aa4:	98 7f       	andi	r25, 0xF8	; 248
     aa6:	91 8b       	std	Z+17, r25	; 0x11
    PORTC.PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC1
     aa8:	91 89       	ldd	r25, Z+17	; 0x11
     aaa:	94 60       	ori	r25, 0x04	; 4
     aac:	91 8b       	std	Z+17, r25	; 0x11
    PORTC.PIN1CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC1
     aae:	91 89       	ldd	r25, Z+17	; 0x11
     ab0:	97 7f       	andi	r25, 0xF7	; 247
     ab2:	91 8b       	std	Z+17, r25	; 0x11

    PORTC.PIN2CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC2 (Y axis)
     ab4:	92 89       	ldd	r25, Z+18	; 0x12
     ab6:	98 7f       	andi	r25, 0xF8	; 248
     ab8:	92 8b       	std	Z+18, r25	; 0x12
    PORTC.PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC2
     aba:	92 89       	ldd	r25, Z+18	; 0x12
     abc:	94 60       	ori	r25, 0x04	; 4
     abe:	92 8b       	std	Z+18, r25	; 0x12
    PORTC.PIN2CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC2
     ac0:	92 89       	ldd	r25, Z+18	; 0x12
     ac2:	97 7f       	andi	r25, 0xF7	; 247
     ac4:	92 8b       	std	Z+18, r25	; 0x12

	PORTC.DIRSET = PIN0_bm; //Set PC0 as RX LED
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	91 83       	std	Z+1, r25	; 0x01

    // Configure Port D (PD) for USART1 TX and RX
    PORTD.DIRSET = PIN2_bm | PIN3_bm | PIN5_bm; //Set PD2 as linear motor disable pin, PD3 as PWM, PD5 as direction
     aca:	9c e2       	ldi	r25, 0x2C	; 44
     acc:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f0461>
	//PORTD.DIRCLR = PIN4_bm; //Linear motor driver TLE9201SG error flag pin

	PORTF.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm; //Set PF1 as enable, PF2 as pulse, PIN3 as direction signals output for HBS86 driver
     ad0:	e0 ea       	ldi	r30, 0xA0	; 160
     ad2:	f4 e0       	ldi	r31, 0x04	; 4
     ad4:	9e e0       	ldi	r25, 0x0E	; 14
     ad6:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRCLR = PIN4_bm | PIN5_bm; //Set PF4 as alarm and PF5 as Pend signals inputs from HBS86 driver
     ad8:	90 e3       	ldi	r25, 0x30	; 48
     ada:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PF4
     adc:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PF5
     ade:	85 8b       	std	Z+21, r24	; 0x15
     ae0:	08 95       	ret

00000ae2 <I2C_init>:
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal to release the bus
    return data;
}
     ae2:	e0 e0       	ldi	r30, 0x00	; 0
     ae4:	f9 e0       	ldi	r31, 0x09	; 9
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	80 83       	st	Z, r24
     aea:	85 e0       	ldi	r24, 0x05	; 5
     aec:	86 83       	std	Z+6, r24	; 0x06
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	83 83       	std	Z+3, r24	; 0x03
     af2:	85 83       	std	Z+5, r24	; 0x05
     af4:	08 95       	ret

00000af6 <TransmitAdd>:
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	86 2b       	or	r24, r22
     afe:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7f0907>
     b02:	48 e8       	ldi	r20, 0x88	; 136
     b04:	53 e1       	ldi	r21, 0x13	; 19
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	09 c0       	rjmp	.+18     	; 0xb1e <TransmitAdd+0x28>
     b0c:	41 50       	subi	r20, 0x01	; 1
     b0e:	51 09       	sbc	r21, r1
     b10:	61 09       	sbc	r22, r1
     b12:	71 09       	sbc	r23, r1
     b14:	21 f4       	brne	.+8      	; 0xb1e <TransmitAdd+0x28>
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <TransmitAdd+0x32>
     b1e:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b22:	80 7c       	andi	r24, 0xC0	; 192
     b24:	99 f3       	breq	.-26     	; 0xb0c <TransmitAdd+0x16>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b2c:	94 fd       	sbrc	r25, 4
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b34:	9c 70       	andi	r25, 0x0C	; 12
     b36:	09 f0       	breq	.+2      	; 0xb3a <TransmitAdd+0x44>
     b38:	82 e0       	ldi	r24, 0x02	; 2
     b3a:	88 23       	and	r24, r24
     b3c:	19 f0       	breq	.+6      	; 0xb44 <TransmitAdd+0x4e>
     b3e:	93 e0       	ldi	r25, 0x03	; 3
     b40:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     b44:	80 93 cd 65 	sts	0x65CD, r24	; 0x8065cd <I2C>
     b48:	08 95       	ret

00000b4a <TransmitByte>:
     b4a:	28 2f       	mov	r18, r24
     b4c:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b50:	94 fd       	sbrc	r25, 4
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <TransmitByte+0xe>
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	01 c0       	rjmp	.+2      	; 0xb5a <TransmitByte+0x10>
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b5e:	9c 70       	andi	r25, 0x0C	; 12
     b60:	09 f0       	breq	.+2      	; 0xb64 <TransmitByte+0x1a>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	88 23       	and	r24, r24
     b66:	19 f0       	breq	.+6      	; 0xb6e <TransmitByte+0x24>
     b68:	93 e0       	ldi	r25, 0x03	; 3
     b6a:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     b6e:	81 11       	cpse	r24, r1
     b70:	14 c0       	rjmp	.+40     	; 0xb9a <TransmitByte+0x50>
     b72:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <__TEXT_REGION_LENGTH__+0x7f0908>
     b76:	48 e8       	ldi	r20, 0x88	; 136
     b78:	53 e1       	ldi	r21, 0x13	; 19
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <TransmitByte+0x48>
     b80:	41 50       	subi	r20, 0x01	; 1
     b82:	51 09       	sbc	r21, r1
     b84:	61 09       	sbc	r22, r1
     b86:	71 09       	sbc	r23, r1
     b88:	21 f4       	brne	.+8      	; 0xb92 <TransmitByte+0x48>
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     b90:	04 c0       	rjmp	.+8      	; 0xb9a <TransmitByte+0x50>
     b92:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b96:	96 ff       	sbrs	r25, 6
     b98:	f3 cf       	rjmp	.-26     	; 0xb80 <TransmitByte+0x36>
     b9a:	80 93 cd 65 	sts	0x65CD, r24	; 0x8065cd <I2C>
     b9e:	08 95       	ret

00000ba0 <WriteToReg>:
 * @param reg Register address to write to.
 * @param data Data to write to the register.
 * 
 * This function writes the data to a specific register of an I2C device.
 */
void WriteToReg(uint8_t addr, uint8_t reg, uint8_t data) {
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	c6 2f       	mov	r28, r22
     ba6:	d4 2f       	mov	r29, r20
    if (!TransmitAdd(addr, WRITE)) { // Transmit address for write
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TransmitAdd>
     bae:	81 11       	cpse	r24, r1
     bb0:	08 c0       	rjmp	.+16     	; 0xbc2 <WriteToReg+0x22>
        if (!TransmitByte(reg)) { // Write register address
     bb2:	8c 2f       	mov	r24, r28
     bb4:	0e 94 a5 05 	call	0xb4a	; 0xb4a <TransmitByte>
     bb8:	81 11       	cpse	r24, r1
     bba:	03 c0       	rjmp	.+6      	; 0xbc2 <WriteToReg+0x22>
            TransmitByte(data); // Write the data with STOP
     bbc:	8d 2f       	mov	r24, r29
     bbe:	0e 94 a5 05 	call	0xb4a	; 0xb4a <TransmitByte>
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal
     bc2:	e0 e0       	ldi	r30, 0x00	; 0
     bc4:	f9 e0       	ldi	r31, 0x09	; 9
     bc6:	84 81       	ldd	r24, Z+4	; 0x04
     bc8:	83 60       	ori	r24, 0x03	; 3
     bca:	84 83       	std	Z+4, r24	; 0x04
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <ReadButton>:
 */ 
#include "Settings.h"
#include "JoystickVar.h"

uint8_t ReadButton(){
	return !(PORTA.IN & PIN1_bm);
     bd2:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
     bd6:	86 95       	lsr	r24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	89 27       	eor	r24, r25
}
     bdc:	81 70       	andi	r24, 0x01	; 1
     bde:	08 95       	ret

00000be0 <LatchSwitcher>:

void LatchSwitcher(){
	if (ReadButton()){
     be0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <ReadButton>
     be4:	88 23       	and	r24, r24
     be6:	61 f0       	breq	.+24     	; 0xc00 <LatchSwitcher+0x20>
		if(!Joystick.LastState){
     be8:	80 91 d3 65 	lds	r24, 0x65D3	; 0x8065d3 <Joystick+0x5>
     bec:	81 11       	cpse	r24, r1
     bee:	0d c0       	rjmp	.+26     	; 0xc0a <LatchSwitcher+0x2a>
			Joystick.LatchSwitch ^= 1;
     bf0:	ee ec       	ldi	r30, 0xCE	; 206
     bf2:	f5 e6       	ldi	r31, 0x65	; 101
     bf4:	86 81       	ldd	r24, Z+6	; 0x06
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	89 27       	eor	r24, r25
     bfa:	86 83       	std	Z+6, r24	; 0x06
			Joystick.LastState = true;
     bfc:	95 83       	std	Z+5, r25	; 0x05
     bfe:	08 95       	ret
		}
	}
	else{
		if(Joystick.LastState){
     c00:	80 91 d3 65 	lds	r24, 0x65D3	; 0x8065d3 <Joystick+0x5>
     c04:	81 11       	cpse	r24, r1
			Joystick.LastState = false;
     c06:	10 92 d3 65 	sts	0x65D3, r1	; 0x8065d3 <Joystick+0x5>
     c0a:	08 95       	ret

00000c0c <ReadJoystickValues>:
		}
	}
}

void ReadJoystickValues(){
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
	ADC0_SetupJoystick(Joystick_X_axis_CH);
     c14:	8e e1       	ldi	r24, 0x1E	; 30
     c16:	0e 94 83 02 	call	0x506	; 0x506 <ADC0_SetupJoystick>
	Joystick.X_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps; // 5 steps total: -2,-1,0,1,2 (4096/1000 = 4,096)
     c1a:	0e 94 af 02 	call	0x55e	; 0x55e <ADC0_read>
     c1e:	98 50       	subi	r25, 0x08	; 8
     c20:	04 ef       	ldi	r16, 0xF4	; 244
     c22:	11 e0       	ldi	r17, 0x01	; 1
     c24:	b8 01       	movw	r22, r16
     c26:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__divmodhi4>
     c2a:	ce ec       	ldi	r28, 0xCE	; 206
     c2c:	d5 e6       	ldi	r29, 0x65	; 101
     c2e:	68 83       	st	Y, r22
     c30:	79 83       	std	Y+1, r23	; 0x01
	ADC0_SetupJoystick(Joystick_Y_axis_CH);
     c32:	8d e1       	ldi	r24, 0x1D	; 29
     c34:	0e 94 83 02 	call	0x506	; 0x506 <ADC0_SetupJoystick>
	Joystick.Y_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps;
     c38:	0e 94 af 02 	call	0x55e	; 0x55e <ADC0_read>
     c3c:	98 50       	subi	r25, 0x08	; 8
     c3e:	b8 01       	movw	r22, r16
     c40:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__divmodhi4>
     c44:	6a 83       	std	Y+2, r22	; 0x02
     c46:	7b 83       	std	Y+3, r23	; 0x03
	Joystick.Button = ReadButton();
     c48:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <ReadButton>
     c4c:	8c 83       	std	Y+4, r24	; 0x04
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	08 95       	ret

00000c58 <SelectWindow>:


void SelectWindow(){
	if(Joystick.Y_Axis >= 1)
     c58:	80 91 d0 65 	lds	r24, 0x65D0	; 0x8065d0 <Joystick+0x2>
     c5c:	90 91 d1 65 	lds	r25, 0x65D1	; 0x8065d1 <Joystick+0x3>
     c60:	18 16       	cp	r1, r24
     c62:	19 06       	cpc	r1, r25
     c64:	1c f4       	brge	.+6      	; 0xc6c <SelectWindow+0x14>
		show.window = 1;
     c66:	21 e0       	ldi	r18, 0x01	; 1
     c68:	20 93 f6 65 	sts	0x65F6, r18	; 0x8065f6 <show>
	if(Joystick.Y_Axis <= -1)
     c6c:	99 23       	and	r25, r25
     c6e:	14 f4       	brge	.+4      	; 0xc74 <SelectWindow+0x1c>
		show.window = 0;
     c70:	10 92 f6 65 	sts	0x65F6, r1	; 0x8065f6 <show>
     c74:	08 95       	ret

00000c76 <LinearMotor_enable>:
	PORTD.OUTSET = PIN2_bm; //set output disabled for TLE9201SG
};

bool Read_LinearMotor_EF(){ // false if driver has a error (overheat, linear motor stuck and so on)
	return PORTD.IN & PIN4_bm;
}
     c76:	80 91 d9 65 	lds	r24, 0x65D9	; 0x8065d9 <LinearMotor+0x3>
     c7a:	81 11       	cpse	r24, r1
     c7c:	0b c0       	rjmp	.+22     	; 0xc94 <LinearMotor_enable+0x1e>
     c7e:	84 e0       	ldi	r24, 0x04	; 4
     c80:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
     c84:	88 e2       	ldi	r24, 0x28	; 40
     c86:	8a 95       	dec	r24
     c88:	f1 f7       	brne	.-4      	; 0xc86 <LinearMotor_enable+0x10>
     c8a:	e6 ed       	ldi	r30, 0xD6	; 214
     c8c:	f5 e6       	ldi	r31, 0x65	; 101
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	83 83       	std	Z+3, r24	; 0x03
     c92:	14 82       	std	Z+4, r1	; 0x04
     c94:	08 95       	ret

00000c96 <LinearMotor_disable>:
     c96:	80 91 da 65 	lds	r24, 0x65DA	; 0x8065da <LinearMotor+0x4>
     c9a:	81 11       	cpse	r24, r1
     c9c:	0b c0       	rjmp	.+22     	; 0xcb4 <LinearMotor_disable+0x1e>
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     ca4:	88 e2       	ldi	r24, 0x28	; 40
     ca6:	8a 95       	dec	r24
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <LinearMotor_disable+0x10>
     caa:	e6 ed       	ldi	r30, 0xD6	; 214
     cac:	f5 e6       	ldi	r31, 0x65	; 101
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	84 83       	std	Z+4, r24	; 0x04
     cb2:	13 82       	std	Z+3, r1	; 0x03
     cb4:	08 95       	ret

00000cb6 <LinearMotor_start>:
     cb6:	80 91 d7 65 	lds	r24, 0x65D7	; 0x8065d7 <LinearMotor+0x1>
     cba:	81 11       	cpse	r24, r1
     cbc:	0d c0       	rjmp	.+26     	; 0xcd8 <LinearMotor_start+0x22>
     cbe:	e0 e0       	ldi	r30, 0x00	; 0
     cc0:	fa e0       	ldi	r31, 0x0A	; 10
     cc2:	81 81       	ldd	r24, Z+1	; 0x01
     cc4:	80 61       	ori	r24, 0x10	; 16
     cc6:	81 83       	std	Z+1, r24	; 0x01
     cc8:	80 81       	ld	r24, Z
     cca:	81 60       	ori	r24, 0x01	; 1
     ccc:	80 83       	st	Z, r24
     cce:	e6 ed       	ldi	r30, 0xD6	; 214
     cd0:	f5 e6       	ldi	r31, 0x65	; 101
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	81 83       	std	Z+1, r24	; 0x01
     cd6:	12 82       	std	Z+2, r1	; 0x02
     cd8:	08 95       	ret

00000cda <LinearMotor_stop>:
     cda:	80 91 d8 65 	lds	r24, 0x65D8	; 0x8065d8 <LinearMotor+0x2>
     cde:	81 11       	cpse	r24, r1
     ce0:	19 c0       	rjmp	.+50     	; 0xd14 <LinearMotor_stop+0x3a>
     ce2:	e0 e0       	ldi	r30, 0x00	; 0
     ce4:	fa e0       	ldi	r31, 0x0A	; 10
     ce6:	81 81       	ldd	r24, Z+1	; 0x01
     ce8:	8f 7e       	andi	r24, 0xEF	; 239
     cea:	81 83       	std	Z+1, r24	; 0x01
     cec:	80 81       	ld	r24, Z
     cee:	8e 7f       	andi	r24, 0xFE	; 254
     cf0:	80 83       	st	Z, r24
     cf2:	88 e0       	ldi	r24, 0x08	; 8
     cf4:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
     cf8:	2f ef       	ldi	r18, 0xFF	; 255
     cfa:	8e e9       	ldi	r24, 0x9E	; 158
     cfc:	94 e2       	ldi	r25, 0x24	; 36
     cfe:	21 50       	subi	r18, 0x01	; 1
     d00:	80 40       	sbci	r24, 0x00	; 0
     d02:	90 40       	sbci	r25, 0x00	; 0
     d04:	e1 f7       	brne	.-8      	; 0xcfe <LinearMotor_stop+0x24>
     d06:	00 c0       	rjmp	.+0      	; 0xd08 <LinearMotor_stop+0x2e>
     d08:	00 00       	nop
     d0a:	e6 ed       	ldi	r30, 0xD6	; 214
     d0c:	f5 e6       	ldi	r31, 0x65	; 101
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	82 83       	std	Z+2, r24	; 0x02
     d12:	11 82       	std	Z+1, r1	; 0x01
     d14:	08 95       	ret

00000d16 <LinearMotor_set_direction>:
     d16:	cf 93       	push	r28
     d18:	90 91 d6 65 	lds	r25, 0x65D6	; 0x8065d6 <LinearMotor>
     d1c:	98 17       	cp	r25, r24
     d1e:	99 f0       	breq	.+38     	; 0xd46 <LinearMotor_set_direction+0x30>
     d20:	c8 2f       	mov	r28, r24
     d22:	0e 94 6d 06 	call	0xcda	; 0xcda <LinearMotor_stop>
     d26:	cc 23       	and	r28, r28
     d28:	21 f0       	breq	.+8      	; 0xd32 <LinearMotor_set_direction+0x1c>
     d2a:	80 e2       	ldi	r24, 0x20	; 32
     d2c:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     d30:	03 c0       	rjmp	.+6      	; 0xd38 <LinearMotor_set_direction+0x22>
     d32:	80 e2       	ldi	r24, 0x20	; 32
     d34:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
     d38:	88 e2       	ldi	r24, 0x28	; 40
     d3a:	8a 95       	dec	r24
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <LinearMotor_set_direction+0x24>
     d3e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LinearMotor_start>
     d42:	c0 93 d6 65 	sts	0x65D6, r28	; 0x8065d6 <LinearMotor>
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <LinearMotor_init>:
     d4a:	62 e3       	ldi	r22, 0x32	; 50
     d4c:	80 e2       	ldi	r24, 0x20	; 32
     d4e:	9e e4       	ldi	r25, 0x4E	; 78
     d50:	0e 94 52 09 	call	0x12a4	; 0x12a4 <TCA0_init_linear_PWM>
     d54:	84 e0       	ldi	r24, 0x04	; 4
     d56:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     d5a:	08 95       	ret

00000d5c <Read_LinearMotor_Voltage>:

uint16_t Read_LinearMotor_Voltage(){
	ADC0_SetupLinearMotor(0);
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	0e 94 89 02 	call	0x512	; 0x512 <ADC0_SetupLinearMotor>
	return (ADC0_read() * 0.075) * LinearMotor_Voltage_Compensation_koef; // same as ADC read/2000 * 30V (300k) / 2V(AMC1131 full range) )
     d62:	0e 94 af 02 	call	0x55e	; 0x55e <ADC0_read>
     d66:	bc 01       	movw	r22, r24
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__floatunsisf>
     d70:	2a e9       	ldi	r18, 0x9A	; 154
     d72:	39 e9       	ldi	r19, 0x99	; 153
     d74:	49 e9       	ldi	r20, 0x99	; 153
     d76:	5d e3       	ldi	r21, 0x3D	; 61
     d78:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <__mulsf3>
     d7c:	23 e8       	ldi	r18, 0x83	; 131
     d7e:	3d ed       	ldi	r19, 0xDD	; 221
     d80:	4c e7       	ldi	r20, 0x7C	; 124
     d82:	5f e3       	ldi	r21, 0x3F	; 63
     d84:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <__mulsf3>
     d88:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__fixunssfsi>
}
     d8c:	cb 01       	movw	r24, r22
     d8e:	08 95       	ret

00000d90 <Read_LinearMotor_Current>:

int16_t Read_LinearMotor_Current(){
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
	ADC0_SetupLinearMotor(1);
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	0e 94 89 02 	call	0x512	; 0x512 <ADC0_SetupLinearMotor>
	return ((int16_t)ADC0_read() - (int16_t)Read_MCU_Voltge())/4;
     d9a:	0e 94 af 02 	call	0x55e	; 0x55e <ADC0_read>
     d9e:	ec 01       	movw	r28, r24
     da0:	0e 94 c3 02 	call	0x586	; 0x586 <Read_MCU_Voltge>
     da4:	9e 01       	movw	r18, r28
     da6:	28 1b       	sub	r18, r24
     da8:	39 0b       	sbc	r19, r25
     daa:	c9 01       	movw	r24, r18
     dac:	99 23       	and	r25, r25
     dae:	0c f4       	brge	.+2      	; 0xdb2 <Read_LinearMotor_Current+0x22>
     db0:	03 96       	adiw	r24, 0x03	; 3
     db2:	95 95       	asr	r25
     db4:	87 95       	ror	r24
     db6:	95 95       	asr	r25
     db8:	87 95       	ror	r24
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	08 95       	ret

00000dc0 <main>:

#include "Settings.h"

int main(void)
{
    CLOCK_XOSCHF_clock_init();
     dc0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <CLOCK_XOSCHF_clock_init>
    GPIO_init();
     dc4:	0e 94 3c 05 	call	0xa78	; 0xa78 <GPIO_init>
	LinearMotor_init();
     dc8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <LinearMotor_init>
	Stepper_init();
     dcc:	0e 94 18 09 	call	0x1230	; 0x1230 <Stepper_init>
    I2C_init();
     dd0:	0e 94 71 05 	call	0xae2	; 0xae2 <I2C_init>
    ADC0_init();
     dd4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <ADC0_init>
    USART0_init();
     dd8:	0e 94 41 0a 	call	0x1482	; 0x1482 <USART0_init>
    USART1_init();
     ddc:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <USART1_init>
    screen_init();
     de0:	0e 94 af 07 	call	0xf5e	; 0xf5e <screen_init>
    screen_clear();
     de4:	0e 94 f6 07 	call	0xfec	; 0xfec <screen_clear>
    while (1) 
    {
		RS485Receiver(); //RS485 communication
     de8:	0e 94 57 07 	call	0xeae	; 0xeae <RS485Receiver>
		FOReceiver(); // Received Fiber optic data
     dec:	0e 94 de 04 	call	0x9bc	; 0x9bc <FOReceiver>
		work();//Actions with motors
     df0:	0e 94 1b 02 	call	0x436	; 0x436 <work>
		windows();
     df4:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <windows>
     df8:	f7 cf       	rjmp	.-18     	; 0xde8 <main+0x28>

00000dfa <RS485_Led>:
 */ 
#include "Settings.h"

void RS485_Led(RS485_LED_t LED){

    switch (LED) {
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	51 f0       	breq	.+20     	; 0xe12 <RS485_Led+0x18>
     dfe:	28 f0       	brcs	.+10     	; 0xe0a <RS485_Led+0x10>
     e00:	82 30       	cpi	r24, 0x02	; 2
     e02:	59 f0       	breq	.+22     	; 0xe1a <RS485_Led+0x20>
     e04:	83 30       	cpi	r24, 0x03	; 3
     e06:	69 f0       	breq	.+26     	; 0xe22 <RS485_Led+0x28>
     e08:	08 95       	ret
	    case RX_LED_ON:
			PORTC.OUTSET = PIN0_bm;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f0445>
		break;
     e10:	08 95       	ret
	    case RX_LED_OFF:
			PORTC.OUTCLR = PIN0_bm;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f0446>
		break;
     e18:	08 95       	ret
	    case TX_LED_ON:
			PORTA.OUTSET = PIN6_bm;
     e1a:	80 e4       	ldi	r24, 0x40	; 64
     e1c:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f0405>
		break;
     e20:	08 95       	ret
	    case TX_LED_OFF:
			PORTA.OUTCLR = PIN6_bm;
     e22:	80 e4       	ldi	r24, 0x40	; 64
     e24:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f0406>
     e28:	08 95       	ret

00000e2a <RS485DataSplitter>:
 *  Author: Saulius
 */ 
#include "Settings.h"
#include "RS485USARTVar.h"

void RS485DataSplitter(char *command) {
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	2c 97       	sbiw	r28, 0x0c	; 12
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	de bf       	out	0x3e, r29	; 62
	uint16_t *fields[] = {
     e3e:	2c e0       	ldi	r18, 0x0C	; 12
     e40:	e9 e9       	ldi	r30, 0x99	; 153
     e42:	f3 e6       	ldi	r31, 0x63	; 99
     e44:	de 01       	movw	r26, r28
     e46:	11 96       	adiw	r26, 0x01	; 1
     e48:	01 90       	ld	r0, Z+
     e4a:	0d 92       	st	X+, r0
     e4c:	2a 95       	dec	r18
     e4e:	e1 f7       	brne	.-8      	; 0xe48 <RS485DataSplitter+0x1e>
		(uint16_t*)&WSData.windspeed,
		(uint16_t*)&WSData.winddirection,
		&WSData.lightlevel
	};

	char *token = strtok(command, "|");
     e50:	6c ec       	ldi	r22, 0xCC	; 204
     e52:	74 e6       	ldi	r23, 0x64	; 100
     e54:	0e 94 45 11 	call	0x228a	; 0x228a <strtok>
	for (uint8_t i = 0; token != NULL && i < 6; i++) {
     e58:	10 e0       	ldi	r17, 0x00	; 0
     e5a:	1c c0       	rjmp	.+56     	; 0xe94 <RS485DataSplitter+0x6a>
		*fields[i] = (uint16_t)strtol(token, NULL, 10);
     e5c:	e1 2f       	mov	r30, r17
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	ee 0f       	add	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	21 e0       	ldi	r18, 0x01	; 1
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	2c 0f       	add	r18, r28
     e6a:	3d 1f       	adc	r19, r29
     e6c:	e2 0f       	add	r30, r18
     e6e:	f3 1f       	adc	r31, r19
     e70:	e0 80       	ld	r14, Z
     e72:	f1 80       	ldd	r15, Z+1	; 0x01
     e74:	4a e0       	ldi	r20, 0x0A	; 10
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	0e 94 26 10 	call	0x204c	; 0x204c <strtol>
     e80:	f7 01       	movw	r30, r14
     e82:	60 83       	st	Z, r22
     e84:	71 83       	std	Z+1, r23	; 0x01
		token = strtok(NULL, "|");
     e86:	6c ec       	ldi	r22, 0xCC	; 204
     e88:	74 e6       	ldi	r23, 0x64	; 100
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 45 11 	call	0x228a	; 0x228a <strtok>
		(uint16_t*)&WSData.winddirection,
		&WSData.lightlevel
	};

	char *token = strtok(command, "|");
	for (uint8_t i = 0; token != NULL && i < 6; i++) {
     e92:	1f 5f       	subi	r17, 0xFF	; 255
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	11 f0       	breq	.+4      	; 0xe9c <RS485DataSplitter+0x72>
     e98:	16 30       	cpi	r17, 0x06	; 6
     e9a:	00 f3       	brcs	.-64     	; 0xe5c <RS485DataSplitter+0x32>
		*fields[i] = (uint16_t)strtol(token, NULL, 10);
		token = strtok(NULL, "|");
	}

}
     e9c:	2c 96       	adiw	r28, 0x0c	; 12
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
     eac:	08 95       	ret

00000eae <RS485Receiver>:

void RS485Receiver() {
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	6b 97       	sbiw	r28, 0x1b	; 27
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	de bf       	out	0x3e, r29	; 62
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
     ec4:	fe 01       	movw	r30, r28
     ec6:	31 96       	adiw	r30, 0x01	; 1
     ec8:	8b e1       	ldi	r24, 0x1B	; 27
     eca:	df 01       	movw	r26, r30
     ecc:	1d 92       	st	X+, r1
     ece:	8a 95       	dec	r24
     ed0:	e9 f7       	brne	.-6      	; 0xecc <RS485Receiver+0x1e>
	uint8_t start = 0;
	uint16_t timeout = RS485_TIMEOUT_COUNTER;
     ed2:	08 ee       	ldi	r16, 0xE8	; 232
     ed4:	13 e0       	ldi	r17, 0x03	; 3
}

void RS485Receiver() {
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
	uint8_t start = 0;
     ed6:	e1 2c       	mov	r14, r1
	}

}

void RS485Receiver() {
	uint8_t index = 0;
     ed8:	f1 2c       	mov	r15, r1
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
	uint8_t start = 0;
	uint16_t timeout = RS485_TIMEOUT_COUNTER;

	while (1) {
		char c = USART0_readChar(); // Reading a character from USART	
     eda:	0e 94 4e 0a 	call	0x149c	; 0x149c <USART0_readChar>
		if (--timeout == 0) { // Timeout condition
     ede:	01 50       	subi	r16, 0x01	; 1
     ee0:	11 09       	sbc	r17, r1
     ee2:	39 f1       	breq	.+78     	; 0xf32 <RS485Receiver+0x84>
			break;
		}
		if (start) {
     ee4:	ee 20       	and	r14, r14
     ee6:	e1 f0       	breq	.+56     	; 0xf20 <RS485Receiver+0x72>
			if (c == '}') { // If received data end symbol
     ee8:	8d 37       	cpi	r24, 0x7D	; 125
     eea:	79 f4       	brne	.+30     	; 0xf0a <RS485Receiver+0x5c>
				RS485_Led(RX_LED_OFF);
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	0e 94 fd 06 	call	0xdfa	; 0xdfa <RS485_Led>
				start = 0;
				command[index] = '\0';
     ef2:	e1 e0       	ldi	r30, 0x01	; 1
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	ec 0f       	add	r30, r28
     ef8:	fd 1f       	adc	r31, r29
     efa:	ef 0d       	add	r30, r15
     efc:	f1 1d       	adc	r31, r1
     efe:	10 82       	st	Z, r1
				index = 0;
				RS485DataSplitter(command); // Execute the received command //comment when testing lines below
     f00:	ce 01       	movw	r24, r28
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	0e 94 15 07 	call	0xe2a	; 0xe2a <RS485DataSplitter>
				break;
     f08:	14 c0       	rjmp	.+40     	; 0xf32 <RS485Receiver+0x84>
				} else if (index < MESSAGE_LENGTH_RS485) {
     f0a:	ba e1       	ldi	r27, 0x1A	; 26
     f0c:	bf 15       	cp	r27, r15
     f0e:	40 f0       	brcs	.+16     	; 0xf20 <RS485Receiver+0x72>
				command[index++] = c; // Store received character in command array
     f10:	e1 e0       	ldi	r30, 0x01	; 1
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	ec 0f       	add	r30, r28
     f16:	fd 1f       	adc	r31, r29
     f18:	ef 0d       	add	r30, r15
     f1a:	f1 1d       	adc	r31, r1
     f1c:	80 83       	st	Z, r24
     f1e:	f3 94       	inc	r15
			}
		}
		if (c == '{') { // If received data start symbol
     f20:	8b 37       	cpi	r24, 0x7B	; 123
     f22:	d9 f6       	brne	.-74     	; 0xeda <RS485Receiver+0x2c>
			start = 1;
			index = 0;
			RS485_Led(RX_LED_ON);
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	0e 94 fd 06 	call	0xdfa	; 0xdfa <RS485_Led>
				} else if (index < MESSAGE_LENGTH_RS485) {
				command[index++] = c; // Store received character in command array
			}
		}
		if (c == '{') { // If received data start symbol
			start = 1;
     f2a:	ee 24       	eor	r14, r14
     f2c:	e3 94       	inc	r14
			index = 0;
     f2e:	f1 2c       	mov	r15, r1
     f30:	d4 cf       	rjmp	.-88     	; 0xeda <RS485Receiver+0x2c>
			RS485_Led(RX_LED_ON);
		}
	}
     f32:	6b 96       	adiw	r28, 0x1b	; 27
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	08 95       	ret

00000f46 <screen_command>:
    if (contrast > 0x3f) {
        contrast = 0x3f;  ///< Ensure contrast does not exceed maximum
    }
    screen_command(0x81);  ///< Send command to set contrast
    screen_command(contrast);  ///< Set the contrast value
}
     f46:	48 2f       	mov	r20, r24
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	8c e3       	ldi	r24, 0x3C	; 60
     f4c:	0e 94 d0 05 	call	0xba0	; 0xba0 <WriteToReg>
     f50:	08 95       	ret

00000f52 <screen_data>:
     f52:	48 2f       	mov	r20, r24
     f54:	60 e4       	ldi	r22, 0x40	; 64
     f56:	8c e3       	ldi	r24, 0x3C	; 60
     f58:	0e 94 d0 05 	call	0xba0	; 0xba0 <WriteToReg>
     f5c:	08 95       	ret

00000f5e <screen_init>:
     f5e:	cf 93       	push	r28
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	8c e3       	ldi	r24, 0x3C	; 60
     f64:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TransmitAdd>
     f68:	c0 e0       	ldi	r28, 0x00	; 0
     f6a:	08 c0       	rjmp	.+16     	; 0xf7c <screen_init+0x1e>
     f6c:	ec 2f       	mov	r30, r28
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	e7 58       	subi	r30, 0x87	; 135
     f72:	fc 49       	sbci	r31, 0x9C	; 156
     f74:	80 81       	ld	r24, Z
     f76:	0e 94 a5 05 	call	0xb4a	; 0xb4a <TransmitByte>
     f7a:	cf 5f       	subi	r28, 0xFF	; 255
     f7c:	ca 31       	cpi	r28, 0x1A	; 26
     f7e:	b0 f3       	brcs	.-20     	; 0xf6c <screen_init+0xe>
     f80:	cf 91       	pop	r28
     f82:	08 95       	ret

00000f84 <screen_draw_char>:
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	d8 2f       	mov	r29, r24
     f8c:	80 ee       	ldi	r24, 0xE0	; 224
     f8e:	8d 0f       	add	r24, r29
     f90:	80 36       	cpi	r24, 0x60	; 96
     f92:	28 f0       	brcs	.+10     	; 0xf9e <screen_draw_char+0x1a>
     f94:	d0 3b       	cpi	r29, 0xB0	; 176
     f96:	19 f0       	breq	.+6      	; 0xf9e <screen_draw_char+0x1a>
     f98:	d0 3c       	cpi	r29, 0xC0	; 192
     f9a:	08 f4       	brcc	.+2      	; 0xf9e <screen_draw_char+0x1a>
     f9c:	d0 e2       	ldi	r29, 0x20	; 32
     f9e:	d0 3b       	cpi	r29, 0xB0	; 176
     fa0:	21 f0       	breq	.+8      	; 0xfaa <screen_draw_char+0x26>
     fa2:	d0 3c       	cpi	r29, 0xC0	; 192
     fa4:	20 f4       	brcc	.+8      	; 0xfae <screen_draw_char+0x2a>
     fa6:	10 e2       	ldi	r17, 0x20	; 32
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <screen_draw_char+0x2c>
     faa:	10 e5       	ldi	r17, 0x50	; 80
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <screen_draw_char+0x2c>
     fae:	1f e5       	ldi	r17, 0x5F	; 95
     fb0:	c0 e0       	ldi	r28, 0x00	; 0
     fb2:	13 c0       	rjmp	.+38     	; 0xfda <screen_draw_char+0x56>
     fb4:	8d 2f       	mov	r24, r29
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	81 1b       	sub	r24, r17
     fba:	91 09       	sbc	r25, r1
     fbc:	fc 01       	movw	r30, r24
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	e8 0f       	add	r30, r24
     fc8:	f9 1f       	adc	r31, r25
     fca:	ec 5a       	subi	r30, 0xAC	; 172
     fcc:	ff 49       	sbci	r31, 0x9F	; 159
     fce:	ec 0f       	add	r30, r28
     fd0:	f1 1d       	adc	r31, r1
     fd2:	80 81       	ld	r24, Z
     fd4:	0e 94 a9 07 	call	0xf52	; 0xf52 <screen_data>
     fd8:	cf 5f       	subi	r28, 0xFF	; 255
     fda:	c5 30       	cpi	r28, 0x05	; 5
     fdc:	58 f3       	brcs	.-42     	; 0xfb4 <screen_draw_char+0x30>
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	0e 94 a9 07 	call	0xf52	; 0xf52 <screen_data>
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	08 95       	ret

00000fec <screen_clear>:
 * @brief Clears the ST7567S display.
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
    for (int page = 0; page < 8; page++) {
     ff4:	00 e0       	ldi	r16, 0x00	; 0
     ff6:	10 e0       	ldi	r17, 0x00	; 0
     ff8:	16 c0       	rjmp	.+44     	; 0x1026 <screen_clear+0x3a>
        screen_command(0xB0 + page);  ///< Select page
     ffa:	80 eb       	ldi	r24, 0xB0	; 176
     ffc:	80 0f       	add	r24, r16
     ffe:	0e 94 a3 07 	call	0xf46	; 0xf46 <screen_command>
        screen_command(0x00);  ///< Set column address
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	0e 94 a3 07 	call	0xf46	; 0xf46 <screen_command>
        screen_command(0x10);  ///< Set column address
    1008:	80 e1       	ldi	r24, 0x10	; 16
    100a:	0e 94 a3 07 	call	0xf46	; 0xf46 <screen_command>

        for (int column = 0; column < 128; column++) {
    100e:	c0 e0       	ldi	r28, 0x00	; 0
    1010:	d0 e0       	ldi	r29, 0x00	; 0
    1012:	04 c0       	rjmp	.+8      	; 0x101c <screen_clear+0x30>
            screen_data(0x00);  ///< Clear each column
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	0e 94 a9 07 	call	0xf52	; 0xf52 <screen_data>
    for (int page = 0; page < 8; page++) {
        screen_command(0xB0 + page);  ///< Select page
        screen_command(0x00);  ///< Set column address
        screen_command(0x10);  ///< Set column address

        for (int column = 0; column < 128; column++) {
    101a:	21 96       	adiw	r28, 0x01	; 1
    101c:	c0 38       	cpi	r28, 0x80	; 128
    101e:	d1 05       	cpc	r29, r1
    1020:	cc f3       	brlt	.-14     	; 0x1014 <screen_clear+0x28>
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
    for (int page = 0; page < 8; page++) {
    1022:	0f 5f       	subi	r16, 0xFF	; 255
    1024:	1f 4f       	sbci	r17, 0xFF	; 255
    1026:	08 30       	cpi	r16, 0x08	; 8
    1028:	11 05       	cpc	r17, r1
    102a:	3c f3       	brlt	.-50     	; 0xffa <screen_clear+0xe>
        for (int column = 0; column < 128; column++) {
            screen_data(0x00);  ///< Clear each column
        }
    }
    //screen_contrast(SSD1306_CONTRAST);  ///< Restore contrast
}
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	08 95       	ret

00001036 <screen_draw_text>:
 * the maximum allowed characters are displayed.
 * 
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	8c 01       	movw	r16, r24
    1040:	d6 2f       	mov	r29, r22
    uint8_t length = 0;
    1042:	c0 e0       	ldi	r28, 0x00	; 0
    while (*text && length < max_length) {
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <screen_draw_text+0x1a>
        screen_draw_char(*text);  ///< Draw each character in the string
    1046:	0e 94 c2 07 	call	0xf84	; 0xf84 <screen_draw_char>
        text++;
    104a:	0f 5f       	subi	r16, 0xFF	; 255
    104c:	1f 4f       	sbci	r17, 0xFF	; 255
        length++;
    104e:	cf 5f       	subi	r28, 0xFF	; 255
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
    uint8_t length = 0;
    while (*text && length < max_length) {
    1050:	f8 01       	movw	r30, r16
    1052:	80 81       	ld	r24, Z
    1054:	88 23       	and	r24, r24
    1056:	39 f0       	breq	.+14     	; 0x1066 <screen_draw_text+0x30>
    1058:	cd 17       	cp	r28, r29
    105a:	a8 f3       	brcs	.-22     	; 0x1046 <screen_draw_text+0x10>
    105c:	04 c0       	rjmp	.+8      	; 0x1066 <screen_draw_text+0x30>
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
        screen_draw_char(' ');  ///< Fill remaining space with spaces
    105e:	80 e2       	ldi	r24, 0x20	; 32
    1060:	0e 94 c2 07 	call	0xf84	; 0xf84 <screen_draw_char>
        length++;
    1064:	cf 5f       	subi	r28, 0xFF	; 255
    while (*text && length < max_length) {
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
    1066:	cd 17       	cp	r28, r29
    1068:	d0 f3       	brcs	.-12     	; 0x105e <screen_draw_text+0x28>
        screen_draw_char(' ');  ///< Fill remaining space with spaces
        length++;
    }
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	08 95       	ret

00001074 <screen_write_text>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param start_pixel The starting pixel column for the text.
 */
void screen_write_text(char *text, uint8_t line, uint8_t start_pixel) {
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	8c 01       	movw	r16, r24
    107e:	26 2f       	mov	r18, r22
    1080:	c4 2f       	mov	r28, r20
    uint8_t max_chars = (128 - start_pixel) / 6;  ///< Calculate max characters per line
    1082:	80 e8       	ldi	r24, 0x80	; 128
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	84 1b       	sub	r24, r20
    1088:	91 09       	sbc	r25, r1
    108a:	66 e0       	ldi	r22, 0x06	; 6
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__divmodhi4>
    1092:	d6 2f       	mov	r29, r22
    screen_command(0xB0 | line);  ///< Set the page (line)
    1094:	82 2f       	mov	r24, r18
    1096:	80 6b       	ori	r24, 0xB0	; 176
    1098:	0e 94 a3 07 	call	0xf46	; 0xf46 <screen_command>
    screen_command(0x10 | (start_pixel >> 4));  ///< Set high byte of column address
    109c:	8c 2f       	mov	r24, r28
    109e:	82 95       	swap	r24
    10a0:	8f 70       	andi	r24, 0x0F	; 15
    10a2:	80 61       	ori	r24, 0x10	; 16
    10a4:	0e 94 a3 07 	call	0xf46	; 0xf46 <screen_command>
    screen_command(0x00 | (start_pixel & 0x0F));  ///< Set low byte of column address
    10a8:	8c 2f       	mov	r24, r28
    10aa:	8f 70       	andi	r24, 0x0F	; 15
    10ac:	0e 94 a3 07 	call	0xf46	; 0xf46 <screen_command>
    screen_draw_text(text, max_chars);  ///< Draw the text
    10b0:	6d 2f       	mov	r22, r29
    10b2:	c8 01       	movw	r24, r16
    10b4:	0e 94 1b 08 	call	0x1036	; 0x1036 <screen_draw_text>
}
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	08 95       	ret

000010c2 <calculate_start_pixel>:
 * @param max_length The maximum number of characters.
 * @param alignment The desired text alignment (left, center, right).
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
    10c2:	ac 01       	movw	r20, r24
    uint8_t text_length = 0;
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <calculate_start_pixel+0x8>
        text_length++;
    10c8:	9f 5f       	subi	r25, 0xFF	; 255
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
    uint8_t text_length = 0;
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
    10ca:	fa 01       	movw	r30, r20
    10cc:	e9 0f       	add	r30, r25
    10ce:	f1 1d       	adc	r31, r1
    10d0:	20 81       	ld	r18, Z
    10d2:	21 11       	cpse	r18, r1
    10d4:	f9 cf       	rjmp	.-14     	; 0x10c8 <calculate_start_pixel+0x6>
        text_length++;
    }

    uint8_t text_width = text_length * 6;  ///< Calculate the width of the text in pixels
    10d6:	89 2f       	mov	r24, r25
    10d8:	88 0f       	add	r24, r24
    10da:	98 0f       	add	r25, r24
    10dc:	29 2f       	mov	r18, r25
    10de:	22 0f       	add	r18, r18
    switch (alignment) {
    10e0:	61 30       	cpi	r22, 0x01	; 1
    10e2:	19 f0       	breq	.+6      	; 0x10ea <calculate_start_pixel+0x28>
    10e4:	62 30       	cpi	r22, 0x02	; 2
    10e6:	69 f0       	breq	.+26     	; 0x1102 <calculate_start_pixel+0x40>
    10e8:	0f c0       	rjmp	.+30     	; 0x1108 <calculate_start_pixel+0x46>
        case ALIGN_CENTER:
            return (128 - text_width) / 2;  ///< Center the text
    10ea:	80 e8       	ldi	r24, 0x80	; 128
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	ac 01       	movw	r20, r24
    10f0:	42 1b       	sub	r20, r18
    10f2:	51 09       	sbc	r21, r1
    10f4:	ca 01       	movw	r24, r20
    10f6:	99 23       	and	r25, r25
    10f8:	0c f4       	brge	.+2      	; 0x10fc <calculate_start_pixel+0x3a>
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	95 95       	asr	r25
    10fe:	87 95       	ror	r24
    1100:	08 95       	ret
        case ALIGN_RIGHT:
            return (128 - text_width);  ///< Right-align the text
    1102:	80 e8       	ldi	r24, 0x80	; 128
    1104:	82 1b       	sub	r24, r18
    1106:	08 95       	ret
        case ALIGN_LEFT:
        default:
            return 0;  ///< Left-align the text
    1108:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    110a:	08 95       	ret

0000110c <screen_write_text_aligned>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_text_aligned(char *text, uint8_t line, alignment_t alignment) {
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	ec 01       	movw	r28, r24
    1114:	16 2f       	mov	r17, r22
    uint8_t start_pixel = calculate_start_pixel(text, alignment);  ///< Calculate start pixel
    1116:	64 2f       	mov	r22, r20
    1118:	0e 94 61 08 	call	0x10c2	; 0x10c2 <calculate_start_pixel>
   screen_write_text(text, line, start_pixel);
    111c:	48 2f       	mov	r20, r24
    111e:	61 2f       	mov	r22, r17
    1120:	ce 01       	movw	r24, r28
    1122:	0e 94 3a 08 	call	0x1074	; 0x1074 <screen_write_text>
}
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	08 95       	ret

0000112e <screen_write_formatted_text>:
 * 
 * @param format The format string for the text.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_formatted_text(const char *format, uint8_t line, alignment_t alignment, ...) {
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	e2 97       	sbiw	r28, 0x32	; 50
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	de bf       	out	0x3e, r29	; 62
    char textStorage[MAX_TEXT_LENGTH];  ///< Buffer for storing formatted text
    va_list args;  ///< Variable argument list

    va_start(args, alignment);  ///< Start reading variable arguments
    vsnprintf(textStorage, MAX_TEXT_LENGTH, format, args);  ///< Format the text
    113c:	9e 01       	movw	r18, r28
    113e:	25 5c       	subi	r18, 0xC5	; 197
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	4f a9       	ldd	r20, Y+55	; 0x37
    1144:	58 ad       	ldd	r21, Y+56	; 0x38
    1146:	62 e3       	ldi	r22, 0x32	; 50
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	ce 01       	movw	r24, r28
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	0e 94 a7 11 	call	0x234e	; 0x234e <vsnprintf>
    va_end(args);  ///< End reading variable arguments

    screen_write_text_aligned(textStorage, line, alignment);  ///< Write formatted text to display
    1152:	4a ad       	ldd	r20, Y+58	; 0x3a
    1154:	69 ad       	ldd	r22, Y+57	; 0x39
    1156:	ce 01       	movw	r24, r28
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	0e 94 86 08 	call	0x110c	; 0x110c <screen_write_text_aligned>
}
    115e:	e2 96       	adiw	r28, 0x32	; 50
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	08 95       	ret

0000116a <Stepper_enable>:
	return !(PORTF.IN & PIN5_bm);
}

bool Read_Stepper_ALM(){ // true if driver has a error (overheat, stepepr stuck and so on)
	return !(PORTF.IN & PIN4_bm);
}
    116a:	80 91 ee 65 	lds	r24, 0x65EE	; 0x8065ee <StepperMotor+0x3>
    116e:	81 11       	cpse	r24, r1
    1170:	11 c0       	rjmp	.+34     	; 0x1194 <Stepper_enable+0x2a>
    1172:	82 e0       	ldi	r24, 0x02	; 2
    1174:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
    1178:	2f ef       	ldi	r18, 0xFF	; 255
    117a:	8b e4       	ldi	r24, 0x4B	; 75
    117c:	9d e1       	ldi	r25, 0x1D	; 29
    117e:	21 50       	subi	r18, 0x01	; 1
    1180:	80 40       	sbci	r24, 0x00	; 0
    1182:	90 40       	sbci	r25, 0x00	; 0
    1184:	e1 f7       	brne	.-8      	; 0x117e <Stepper_enable+0x14>
    1186:	00 c0       	rjmp	.+0      	; 0x1188 <Stepper_enable+0x1e>
    1188:	00 00       	nop
    118a:	eb ee       	ldi	r30, 0xEB	; 235
    118c:	f5 e6       	ldi	r31, 0x65	; 101
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	83 83       	std	Z+3, r24	; 0x03
    1192:	14 82       	std	Z+4, r1	; 0x04
    1194:	08 95       	ret

00001196 <Stepper_disable>:
    1196:	80 91 ef 65 	lds	r24, 0x65EF	; 0x8065ef <StepperMotor+0x4>
    119a:	81 11       	cpse	r24, r1
    119c:	08 c0       	rjmp	.+16     	; 0x11ae <Stepper_disable+0x18>
    119e:	82 e0       	ldi	r24, 0x02	; 2
    11a0:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f04a5>
    11a4:	eb ee       	ldi	r30, 0xEB	; 235
    11a6:	f5 e6       	ldi	r31, 0x65	; 101
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	84 83       	std	Z+4, r24	; 0x04
    11ac:	13 82       	std	Z+3, r1	; 0x03
    11ae:	08 95       	ret

000011b0 <Stepper_start>:
    11b0:	80 91 ec 65 	lds	r24, 0x65EC	; 0x8065ec <StepperMotor+0x1>
    11b4:	81 11       	cpse	r24, r1
    11b6:	0e c0       	rjmp	.+28     	; 0x11d4 <Stepper_start+0x24>
    11b8:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
    11bc:	80 ff       	sbrs	r24, 0
    11be:	fc cf       	rjmp	.-8      	; 0x11b8 <Stepper_start+0x8>
    11c0:	e0 e8       	ldi	r30, 0x80	; 128
    11c2:	fb e0       	ldi	r31, 0x0B	; 11
    11c4:	80 81       	ld	r24, Z
    11c6:	81 60       	ori	r24, 0x01	; 1
    11c8:	80 83       	st	Z, r24
    11ca:	eb ee       	ldi	r30, 0xEB	; 235
    11cc:	f5 e6       	ldi	r31, 0x65	; 101
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	81 83       	std	Z+1, r24	; 0x01
    11d2:	12 82       	std	Z+2, r1	; 0x02
    11d4:	08 95       	ret

000011d6 <Stepper_stop>:
    11d6:	80 91 ed 65 	lds	r24, 0x65ED	; 0x8065ed <StepperMotor+0x2>
    11da:	81 11       	cpse	r24, r1
    11dc:	0e c0       	rjmp	.+28     	; 0x11fa <Stepper_stop+0x24>
    11de:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
    11e2:	80 ff       	sbrs	r24, 0
    11e4:	fc cf       	rjmp	.-8      	; 0x11de <Stepper_stop+0x8>
    11e6:	e0 e8       	ldi	r30, 0x80	; 128
    11e8:	fb e0       	ldi	r31, 0x0B	; 11
    11ea:	80 81       	ld	r24, Z
    11ec:	8e 7f       	andi	r24, 0xFE	; 254
    11ee:	80 83       	st	Z, r24
    11f0:	eb ee       	ldi	r30, 0xEB	; 235
    11f2:	f5 e6       	ldi	r31, 0x65	; 101
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	82 83       	std	Z+2, r24	; 0x02
    11f8:	11 82       	std	Z+1, r1	; 0x01
    11fa:	08 95       	ret

000011fc <Stepper_set_direction>:
    11fc:	cf 93       	push	r28
    11fe:	90 91 eb 65 	lds	r25, 0x65EB	; 0x8065eb <StepperMotor>
    1202:	98 17       	cp	r25, r24
    1204:	99 f0       	breq	.+38     	; 0x122c <Stepper_set_direction+0x30>
    1206:	c8 2f       	mov	r28, r24
    1208:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <Stepper_stop>
    120c:	cc 23       	and	r28, r28
    120e:	21 f0       	breq	.+8      	; 0x1218 <Stepper_set_direction+0x1c>
    1210:	88 e0       	ldi	r24, 0x08	; 8
    1212:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f04a5>
    1216:	03 c0       	rjmp	.+6      	; 0x121e <Stepper_set_direction+0x22>
    1218:	88 e0       	ldi	r24, 0x08	; 8
    121a:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
    121e:	80 e2       	ldi	r24, 0x20	; 32
    1220:	8a 95       	dec	r24
    1222:	f1 f7       	brne	.-4      	; 0x1220 <Stepper_set_direction+0x24>
    1224:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <Stepper_start>
    1228:	c0 93 eb 65 	sts	0x65EB, r28	; 0x8065eb <StepperMotor>
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <Stepper_init>:
    1230:	42 e3       	ldi	r20, 0x32	; 50
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	79 e1       	ldi	r23, 0x19	; 25
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <TCD0_init_stepper_PWM>
    123e:	08 95       	ret

00001240 <Read_Stepper_Voltage>:

uint16_t Read_Stepper_Voltage(){
	ADC0_SetupStepper(0);
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	0e 94 99 02 	call	0x532	; 0x532 <ADC0_SetupStepper>
	return (ADC0_read() * 0.1775) * Stepper_Voltage_Compensation_koef;
    1246:	0e 94 af 02 	call	0x55e	; 0x55e <ADC0_read>
    124a:	bc 01       	movw	r22, r24
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__floatunsisf>
    1254:	2f e8       	ldi	r18, 0x8F	; 143
    1256:	32 ec       	ldi	r19, 0xC2	; 194
    1258:	45 e3       	ldi	r20, 0x35	; 53
    125a:	5e e3       	ldi	r21, 0x3E	; 62
    125c:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <__mulsf3>
    1260:	26 e6       	ldi	r18, 0x66	; 102
    1262:	36 e6       	ldi	r19, 0x66	; 102
    1264:	46 e8       	ldi	r20, 0x86	; 134
    1266:	5f e3       	ldi	r21, 0x3F	; 63
    1268:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <__mulsf3>
    126c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__fixunssfsi>
}
    1270:	cb 01       	movw	r24, r22
    1272:	08 95       	ret

00001274 <Read_Stepper_Current>:

int16_t Read_Stepper_Current(){
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
	ADC0_SetupStepper(1);
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	0e 94 99 02 	call	0x532	; 0x532 <ADC0_SetupStepper>
	return ((int16_t)ADC0_read() - (int16_t)Read_MCU_Voltge())/4;
    127e:	0e 94 af 02 	call	0x55e	; 0x55e <ADC0_read>
    1282:	ec 01       	movw	r28, r24
    1284:	0e 94 c3 02 	call	0x586	; 0x586 <Read_MCU_Voltge>
    1288:	9e 01       	movw	r18, r28
    128a:	28 1b       	sub	r18, r24
    128c:	39 0b       	sbc	r19, r25
    128e:	c9 01       	movw	r24, r18
    1290:	99 23       	and	r25, r25
    1292:	0c f4       	brge	.+2      	; 0x1296 <Read_Stepper_Current+0x22>
    1294:	03 96       	adiw	r24, 0x03	; 3
    1296:	95 95       	asr	r25
    1298:	87 95       	ror	r24
    129a:	95 95       	asr	r25
    129c:	87 95       	ror	r24
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	08 95       	ret

000012a4 <TCA0_init_linear_PWM>:
 *  Author: Saulius
 */ 
#include "Settings.h"

void TCA0_init_linear_PWM(uint16_t freq_hz, uint8_t duty_percent) //Auto TCA prescaler selection, that give us Frequency range: ~366Hz - ~93kHz. TLE9201SG max 20kHz
{
    12a4:	8f 92       	push	r8
    12a6:	9f 92       	push	r9
    12a8:	af 92       	push	r10
    12aa:	bf 92       	push	r11
    12ac:	cf 92       	push	r12
    12ae:	df 92       	push	r13
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	68 97       	sbiw	r28, 0x18	; 24
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	7c 01       	movw	r14, r24
    12c8:	c6 2e       	mov	r12, r22
	const uint16_t prescalers[] = {1, 2, 4, 8, 16, 64, 256, 1024};
    12ca:	80 e1       	ldi	r24, 0x10	; 16
    12cc:	e5 ea       	ldi	r30, 0xA5	; 165
    12ce:	f3 e6       	ldi	r31, 0x63	; 99
    12d0:	de 01       	movw	r26, r28
    12d2:	11 96       	adiw	r26, 0x01	; 1
    12d4:	01 90       	ld	r0, Z+
    12d6:	0d 92       	st	X+, r0
    12d8:	8a 95       	dec	r24
    12da:	e1 f7       	brne	.-8      	; 0x12d4 <TCA0_init_linear_PWM+0x30>
	const uint8_t clk_select[] = {
    12dc:	88 e0       	ldi	r24, 0x08	; 8
    12de:	e5 eb       	ldi	r30, 0xB5	; 181
    12e0:	f3 e6       	ldi	r31, 0x63	; 99
    12e2:	de 01       	movw	r26, r28
    12e4:	51 96       	adiw	r26, 0x11	; 17
    12e6:	01 90       	ld	r0, Z+
    12e8:	0d 92       	st	X+, r0
    12ea:	8a 95       	dec	r24
    12ec:	e1 f7       	brne	.-8      	; 0x12e6 <TCA0_init_linear_PWM+0x42>

	uint8_t chosen_clk = 0;
	uint8_t period = 0;

	// surandam tinkamà prescaler
	for (uint8_t i = 0; i < 8; i++) {
    12ee:	d1 2c       	mov	r13, r1
    12f0:	38 c0       	rjmp	.+112    	; 0x1362 <TCA0_init_linear_PWM+0xbe>
		uint32_t f_timer = F_CPU / prescalers[i];
    12f2:	0d 2d       	mov	r16, r13
    12f4:	10 e0       	ldi	r17, 0x00	; 0
    12f6:	f8 01       	movw	r30, r16
    12f8:	ee 0f       	add	r30, r30
    12fa:	ff 1f       	adc	r31, r31
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	8c 0f       	add	r24, r28
    1302:	9d 1f       	adc	r25, r29
    1304:	e8 0f       	add	r30, r24
    1306:	f9 1f       	adc	r31, r25
    1308:	20 81       	ld	r18, Z
    130a:	31 81       	ldd	r19, Z+1	; 0x01
    130c:	40 e0       	ldi	r20, 0x00	; 0
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	76 e3       	ldi	r23, 0x36	; 54
    1314:	8e e6       	ldi	r24, 0x6E	; 110
    1316:	91 e0       	ldi	r25, 0x01	; 1
    1318:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__divmodsi4>
		uint32_t tmp_period = (f_timer / freq_hz) - 1;
    131c:	47 01       	movw	r8, r14
    131e:	a1 2c       	mov	r10, r1
    1320:	b1 2c       	mov	r11, r1
    1322:	ca 01       	movw	r24, r20
    1324:	b9 01       	movw	r22, r18
    1326:	a5 01       	movw	r20, r10
    1328:	94 01       	movw	r18, r8
    132a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__udivmodsi4>
    132e:	da 01       	movw	r26, r20
    1330:	c9 01       	movw	r24, r18
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	a1 09       	sbc	r26, r1
    1336:	b1 09       	sbc	r27, r1

		if (tmp_period <= 255 && tmp_period >= 1) {
    1338:	ba 01       	movw	r22, r20
    133a:	a9 01       	movw	r20, r18
    133c:	42 50       	subi	r20, 0x02	; 2
    133e:	51 09       	sbc	r21, r1
    1340:	61 09       	sbc	r22, r1
    1342:	71 09       	sbc	r23, r1
    1344:	4f 3f       	cpi	r20, 0xFF	; 255
    1346:	51 05       	cpc	r21, r1
    1348:	61 05       	cpc	r22, r1
    134a:	71 05       	cpc	r23, r1
    134c:	48 f4       	brcc	.+18     	; 0x1360 <TCA0_init_linear_PWM+0xbc>
			period = (uint8_t)tmp_period;
    134e:	f8 2e       	mov	r15, r24
			chosen_clk = clk_select[i];
    1350:	e1 e1       	ldi	r30, 0x11	; 17
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	ec 0f       	add	r30, r28
    1356:	fd 1f       	adc	r31, r29
    1358:	e0 0f       	add	r30, r16
    135a:	f1 1f       	adc	r31, r17
    135c:	10 81       	ld	r17, Z
			break; // radom maþiausià tinkamà prescaler
    135e:	06 c0       	rjmp	.+12     	; 0x136c <TCA0_init_linear_PWM+0xc8>

	uint8_t chosen_clk = 0;
	uint8_t period = 0;

	// surandam tinkamà prescaler
	for (uint8_t i = 0; i < 8; i++) {
    1360:	d3 94       	inc	r13
    1362:	97 e0       	ldi	r25, 0x07	; 7
    1364:	9d 15       	cp	r25, r13
    1366:	28 f6       	brcc	.-118    	; 0x12f2 <TCA0_init_linear_PWM+0x4e>
		TCA_SINGLE_CLKSEL_DIV256_gc,
		TCA_SINGLE_CLKSEL_DIV1024_gc
	};

	uint8_t chosen_clk = 0;
	uint8_t period = 0;
    1368:	f1 2c       	mov	r15, r1
		TCA_SINGLE_CLKSEL_DIV64_gc,
		TCA_SINGLE_CLKSEL_DIV256_gc,
		TCA_SINGLE_CLKSEL_DIV1024_gc
	};

	uint8_t chosen_clk = 0;
    136a:	10 e0       	ldi	r17, 0x00	; 0
			break; // radom maþiausià tinkamà prescaler
		}
	}

	// duty skaièiavimas
	uint8_t duty = (uint32_t)period * duty_percent / 100;
    136c:	2f 2d       	mov	r18, r15
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	ac 2d       	mov	r26, r12
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
    1378:	24 e6       	ldi	r18, 0x64	; 100
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__udivmodsi4>
	if (duty > period) duty = period;
    1384:	f2 16       	cp	r15, r18
    1386:	08 f4       	brcc	.+2      	; 0x138a <TCA0_init_linear_PWM+0xe6>
    1388:	2f 2d       	mov	r18, r15

	// konfigûracija
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;  // WOx ant PORTD
    138a:	83 e0       	ldi	r24, 0x03	; 3
    138c:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <__TEXT_REGION_LENGTH__+0x7f05e7>

	TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;   // Split mode
    1390:	e0 e0       	ldi	r30, 0x00	; 0
    1392:	fa e0       	ldi	r31, 0x0A	; 10
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	83 83       	std	Z+3, r24	; 0x03
	TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm;    // enable WO3 (HCMP0 ? PD3)
    1398:	80 e1       	ldi	r24, 0x10	; 16
    139a:	81 83       	std	Z+1, r24	; 0x01

	TCA0.SPLIT.HPER  = period;
    139c:	f7 a2       	std	Z+39, r15	; 0x27
	TCA0.SPLIT.HCMP0 = duty;
    139e:	21 a7       	std	Z+41, r18	; 0x29

	TCA0.SPLIT.CTRLA = chosen_clk | TCA_SPLIT_ENABLE_bm; // paleidþiam su pasirinktu prescaler
    13a0:	11 60       	ori	r17, 0x01	; 1
    13a2:	10 83       	st	Z, r17
}
    13a4:	68 96       	adiw	r28, 0x18	; 24
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	ff 90       	pop	r15
    13b4:	ef 90       	pop	r14
    13b6:	df 90       	pop	r13
    13b8:	cf 90       	pop	r12
    13ba:	bf 90       	pop	r11
    13bc:	af 90       	pop	r10
    13be:	9f 90       	pop	r9
    13c0:	8f 90       	pop	r8
    13c2:	08 95       	ret

000013c4 <TCD0_init_stepper_PWM>:
 * @date 2025-01-09
 */

#include "Settings.h"

void TCD0_init_stepper_PWM(uint32_t freq_hz, uint8_t duty_percent) {
    13c4:	cf 92       	push	r12
    13c6:	df 92       	push	r13
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	14 2f       	mov	r17, r20

	// Calculate compare registers
	uint16_t cmpbclr = (F_CPU / (4 * freq_hz * 2)) - 1;
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	aa 1f       	adc	r26, r26
    13e0:	bb 1f       	adc	r27, r27
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	aa 1f       	adc	r26, r26
    13e8:	bb 1f       	adc	r27, r27
    13ea:	9c 01       	movw	r18, r24
    13ec:	ad 01       	movw	r20, r26
    13ee:	22 0f       	add	r18, r18
    13f0:	33 1f       	adc	r19, r19
    13f2:	44 1f       	adc	r20, r20
    13f4:	55 1f       	adc	r21, r21
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	76 e3       	ldi	r23, 0x36	; 54
    13fa:	8e e6       	ldi	r24, 0x6E	; 110
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__udivmodsi4>
    1402:	e9 01       	movw	r28, r18
    1404:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t cmpaset = (uint16_t)(cmpbclr * (duty_percent / 100.0)) + 1;
    1406:	61 2f       	mov	r22, r17
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__floatsisf>
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	48 ec       	ldi	r20, 0xC8	; 200
    1418:	52 e4       	ldi	r21, 0x42	; 66
    141a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__divsf3>
    141e:	6b 01       	movw	r12, r22
    1420:	7c 01       	movw	r14, r24
    1422:	be 01       	movw	r22, r28
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__floatunsisf>
    142c:	a7 01       	movw	r20, r14
    142e:	96 01       	movw	r18, r12
    1430:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <__mulsf3>
    1434:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__fixunssfsi>
    1438:	6f 5f       	subi	r22, 0xFF	; 255
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t cmpbset = cmpbclr - cmpaset - 1;
    143c:	ce 01       	movw	r24, r28
    143e:	86 1b       	sub	r24, r22
    1440:	97 0b       	sbc	r25, r23
    1442:	01 97       	sbiw	r24, 0x01	; 1

	// Set TCD compare registers
	TCD0.CMPBCLR = cmpbclr;
    1444:	00 e8       	ldi	r16, 0x80	; 128
    1446:	1b e0       	ldi	r17, 0x0B	; 11
    1448:	f8 01       	movw	r30, r16
    144a:	c6 a7       	std	Z+46, r28	; 0x2e
    144c:	d7 a7       	std	Z+47, r29	; 0x2f
	TCD0.CMPBSET = cmpbset;
    144e:	84 a7       	std	Z+44, r24	; 0x2c
    1450:	95 a7       	std	Z+45, r25	; 0x2d
	TCD0.CMPASET = cmpaset;
    1452:	60 a7       	std	Z+40, r22	; 0x28
    1454:	71 a7       	std	Z+41, r23	; 0x29

	ccp_write_io((uint8_t *) &TCD0.FAULTCTRL, TCD_CMPCEN_bm); ///< Enable WOC on PF2
    1456:	60 e4       	ldi	r22, 0x40	; 64
    1458:	82 e9       	ldi	r24, 0x92	; 146
    145a:	9b e0       	ldi	r25, 0x0B	; 11
    145c:	0e 94 67 14 	call	0x28ce	; 0x28ce <ccp_write_io>
	TCD0.CTRLB = TCD_WGMODE_DS_gc; ///< Set waveform mode to double slope
    1460:	83 e0       	ldi	r24, 0x03	; 3
    1462:	f8 01       	movw	r30, r16
    1464:	81 83       	std	Z+1, r24	; 0x01
	// Ájungiam WOC iðëjimà
	//TCD0.FAULTCTRL = TCD_CMPAEN_bm | TCD_CMPBEN_bm | TCD_CMPCEN_bm;

	// Paleidþiam su prescaler = 4
	//TCD0.CTRLA = TCD_CLKSEL_CLKPER_gc | TCD_CNTPRES_DIV4_gc;
	ccp_write_io((uint8_t *) &TCD0.CTRLA, TCD_CLKSEL_CLKPER_gc | TCD_CNTPRES_DIV4_gc);
    1466:	68 e6       	ldi	r22, 0x68	; 104
    1468:	80 e8       	ldi	r24, 0x80	; 128
    146a:	9b e0       	ldi	r25, 0x0B	; 11
    146c:	0e 94 67 14 	call	0x28ce	; 0x28ce <ccp_write_io>
	// Palaukti, kol sinchronizuosis
	//while (!(TCD0.STATUS & TCD_ENRDY_bm));
/*
			while (!(TCD0.STATUS & TCD_ENRDY_bm));
			TCD0.CTRLA |= TCD_ENABLE_bm;*/
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	1f 91       	pop	r17
    1476:	0f 91       	pop	r16
    1478:	ff 90       	pop	r15
    147a:	ef 90       	pop	r14
    147c:	df 90       	pop	r13
    147e:	cf 90       	pop	r12
    1480:	08 95       	ret

00001482 <USART0_init>:
 * @return 0 on success.
 */
int USART1_printChar(char c, FILE *stream) {
	USART1_sendChar(c); // Send character
	return 0;
}
    1482:	e0 e0       	ldi	r30, 0x00	; 0
    1484:	f8 e0       	ldi	r31, 0x08	; 8
    1486:	83 e8       	ldi	r24, 0x83	; 131
    1488:	96 e0       	ldi	r25, 0x06	; 6
    148a:	80 87       	std	Z+8, r24	; 0x08
    148c:	91 87       	std	Z+9, r25	; 0x09
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	85 83       	std	Z+5, r24	; 0x05
    1492:	82 ec       	ldi	r24, 0xC2	; 194
    1494:	86 83       	std	Z+6, r24	; 0x06
    1496:	83 e0       	ldi	r24, 0x03	; 3
    1498:	87 83       	std	Z+7, r24	; 0x07
    149a:	08 95       	ret

0000149c <USART0_readChar>:
    149c:	80 e8       	ldi	r24, 0x80	; 128
    149e:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    14a2:	88 ee       	ldi	r24, 0xE8	; 232
    14a4:	93 e0       	ldi	r25, 0x03	; 3
    14a6:	a0 e0       	ldi	r26, 0x00	; 0
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	04 c0       	rjmp	.+8      	; 0x14b4 <USART0_readChar+0x18>
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	a1 09       	sbc	r26, r1
    14b0:	b1 09       	sbc	r27, r1
    14b2:	21 f0       	breq	.+8      	; 0x14bc <USART0_readChar+0x20>
    14b4:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    14b8:	22 23       	and	r18, r18
    14ba:	c4 f7       	brge	.-16     	; 0x14ac <USART0_readChar+0x10>
    14bc:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
    14c0:	08 95       	ret

000014c2 <USART1_init>:
    14c2:	e0 e2       	ldi	r30, 0x20	; 32
    14c4:	f8 e0       	ldi	r31, 0x08	; 8
    14c6:	81 ea       	ldi	r24, 0xA1	; 161
    14c8:	91 e0       	ldi	r25, 0x01	; 1
    14ca:	80 87       	std	Z+8, r24	; 0x08
    14cc:	91 87       	std	Z+9, r25	; 0x09
    14ce:	82 e8       	ldi	r24, 0x82	; 130
    14d0:	86 83       	std	Z+6, r24	; 0x06
    14d2:	83 e0       	ldi	r24, 0x03	; 3
    14d4:	87 83       	std	Z+7, r24	; 0x07
    14d6:	08 95       	ret

000014d8 <USART1_readChar>:
 * If a timeout occurs, it returns a predefined warning.
 * 
 * @return The received character.
 */
char USART1_readChar() {
	USART1.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    14d8:	80 e8       	ldi	r24, 0x80	; 128
    14da:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f0824>
	uint32_t timeout_counter = FO_TIMEOUT_COUNTER; // Set a timeout counter
    14de:	80 e9       	ldi	r24, 0x90	; 144
    14e0:	90 ed       	ldi	r25, 0xD0	; 208
    14e2:	a3 e0       	ldi	r26, 0x03	; 3
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
	while (!(USART1.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
    14e6:	08 c0       	rjmp	.+16     	; 0x14f8 <USART1_readChar+0x20>
		if (--timeout_counter == 0) { // Timeout condition
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	a1 09       	sbc	r26, r1
    14ec:	b1 09       	sbc	r27, r1
    14ee:	21 f4       	brne	.+8      	; 0x14f8 <USART1_readChar+0x20>
			//screen_write_formatted_text("USART1 timeout", 0, ALIGN_LEFT);// uncomment for timeout number finding, when timeout number is set corectly this line should not to be visible at all. if timeout is to small you will see this line 
			//_delay_ms(100);
			//screen_write_formatted_text("              ", 0, ALIGN_LEFT);
			SensorData.FO_lost_signal_fault = true;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	80 93 b3 65 	sts	0x65B3, r24	; 0x8065b3 <SensorData+0x11>
			break; //just exit from this while cycle
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <USART1_readChar+0x28>
 * @return The received character.
 */
char USART1_readChar() {
	USART1.STATUS = USART_RXCIF_bm; // Clear buffer before reading
	uint32_t timeout_counter = FO_TIMEOUT_COUNTER; // Set a timeout counter
	while (!(USART1.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
    14f8:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f0824>
    14fc:	22 23       	and	r18, r18
    14fe:	a4 f7       	brge	.-24     	; 0x14e8 <USART1_readChar+0x10>
			SensorData.FO_lost_signal_fault = true;
			break; //just exit from this while cycle

		}
	}
	return USART1.RXDATAL; // Return received character
    1500:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f0820>
}
    1504:	08 95       	ret

00001506 <screenUpdater>:
 */

#include "Settings.h"
#include "windowsVar.h"

bool screenUpdater(uint8_t window){ //update window data if any changes only
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	66 97       	sbiw	r28, 0x16	; 22
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	18 2f       	mov	r17, r24
	uint16_t values[MAX_VARS]={0};
    1518:	fe 01       	movw	r30, r28
    151a:	31 96       	adiw	r30, 0x01	; 1
    151c:	86 e1       	ldi	r24, 0x16	; 22
    151e:	df 01       	movw	r26, r30
    1520:	1d 92       	st	X+, r1
    1522:	8a 95       	dec	r24
    1524:	e9 f7       	brne	.-6      	; 0x1520 <screenUpdater+0x1a>
	bool update = false;

	if(show.lastWindow != window)
    1526:	80 91 f7 65 	lds	r24, 0x65F7	; 0x8065f7 <show+0x1>
    152a:	81 13       	cpse	r24, r17
		screen_clear();
    152c:	0e 94 f6 07 	call	0xfec	; 0xfec <screen_clear>
	switch (window){
    1530:	11 23       	and	r17, r17
    1532:	21 f0       	breq	.+8      	; 0x153c <screenUpdater+0x36>
    1534:	11 30       	cpi	r17, 0x01	; 1
    1536:	09 f4       	brne	.+2      	; 0x153a <screenUpdater+0x34>
    1538:	6b c0       	rjmp	.+214    	; 0x1610 <screenUpdater+0x10a>
    153a:	c2 c0       	rjmp	.+388    	; 0x16c0 <screenUpdater+0x1ba>
		case 0:
			values[0] = Target.elevation;
    153c:	aa e4       	ldi	r26, 0x4A	; 74
    153e:	b0 e6       	ldi	r27, 0x60	; 96
    1540:	8d 91       	ld	r24, X+
    1542:	9c 91       	ld	r25, X
    1544:	11 97       	sbiw	r26, 0x01	; 1
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	9a 83       	std	Y+2, r25	; 0x02
			values[1] = SensorData.Elevation;
    154a:	e2 ea       	ldi	r30, 0xA2	; 162
    154c:	f5 e6       	ldi	r31, 0x65	; 101
    154e:	80 81       	ld	r24, Z
    1550:	91 81       	ldd	r25, Z+1	; 0x01
    1552:	8b 83       	std	Y+3, r24	; 0x03
    1554:	9c 83       	std	Y+4, r25	; 0x04
			values[2] = Target.azimuth;
    1556:	15 96       	adiw	r26, 0x05	; 5
    1558:	8d 91       	ld	r24, X+
    155a:	9c 91       	ld	r25, X
    155c:	16 97       	sbiw	r26, 0x06	; 6
    155e:	8d 83       	std	Y+5, r24	; 0x05
    1560:	9e 83       	std	Y+6, r25	; 0x06
			values[3] = SensorData.Azimuth;
    1562:	84 81       	ldd	r24, Z+4	; 0x04
    1564:	95 81       	ldd	r25, Z+5	; 0x05
    1566:	8f 83       	std	Y+7, r24	; 0x07
    1568:	98 87       	std	Y+8, r25	; 0x08
			values[4] = Joystick.LatchSwitch;
    156a:	80 91 d4 65 	lds	r24, 0x65D4	; 0x8065d4 <Joystick+0x6>
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	89 87       	std	Y+9, r24	; 0x09
    1572:	9a 87       	std	Y+10, r25	; 0x0a
			values[5] = SensorData.FO_data_fault;
    1574:	82 89       	ldd	r24, Z+18	; 0x12
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	8b 87       	std	Y+11, r24	; 0x0b
    157a:	9c 87       	std	Y+12, r25	; 0x0c
			values[6] = SensorData.FO_bad_signal_fault;
    157c:	80 89       	ldd	r24, Z+16	; 0x10
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	8d 87       	std	Y+13, r24	; 0x0d
    1582:	9e 87       	std	Y+14, r25	; 0x0e
			values[7] = SensorData.FO_lost_connecton_fault;
    1584:	83 89       	ldd	r24, Z+19	; 0x13
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	8f 87       	std	Y+15, r24	; 0x0f
    158a:	98 8b       	std	Y+16, r25	; 0x10
			values[8] = SensorData.FO_elevation_sensor_fault;
    158c:	84 89       	ldd	r24, Z+20	; 0x14
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	89 8b       	std	Y+17, r24	; 0x11
    1592:	9a 8b       	std	Y+18, r25	; 0x12
			values[9] = SensorData.FO_azimuth_sensor_fault;
    1594:	85 89       	ldd	r24, Z+21	; 0x15
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	8b 8b       	std	Y+19, r24	; 0x13
    159a:	9c 8b       	std	Y+20, r25	; 0x14
			for (uint8_t i=0; i<10; i++){
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	18 c0       	rjmp	.+48     	; 0x15d0 <screenUpdater+0xca>
				if(show.lastValues[i] != values[i]){
    15a0:	82 2f       	mov	r24, r18
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	fc 01       	movw	r30, r24
    15a6:	31 96       	adiw	r30, 0x01	; 1
    15a8:	ee 0f       	add	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	ea 50       	subi	r30, 0x0A	; 10
    15ae:	fa 49       	sbci	r31, 0x9A	; 154
    15b0:	40 81       	ld	r20, Z
    15b2:	51 81       	ldd	r21, Z+1	; 0x01
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	e1 e0       	ldi	r30, 0x01	; 1
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	ec 0f       	add	r30, r28
    15be:	fd 1f       	adc	r31, r29
    15c0:	e8 0f       	add	r30, r24
    15c2:	f9 1f       	adc	r31, r25
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
    15c8:	48 17       	cp	r20, r24
    15ca:	59 07       	cpc	r21, r25
    15cc:	29 f4       	brne	.+10     	; 0x15d8 <screenUpdater+0xd2>
			values[5] = SensorData.FO_data_fault;
			values[6] = SensorData.FO_bad_signal_fault;
			values[7] = SensorData.FO_lost_connecton_fault;
			values[8] = SensorData.FO_elevation_sensor_fault;
			values[9] = SensorData.FO_azimuth_sensor_fault;
			for (uint8_t i=0; i<10; i++){
    15ce:	2f 5f       	subi	r18, 0xFF	; 255
    15d0:	2a 30       	cpi	r18, 0x0A	; 10
    15d2:	30 f3       	brcs	.-52     	; 0x15a0 <screenUpdater+0x9a>
#include "Settings.h"
#include "windowsVar.h"

bool screenUpdater(uint8_t window){ //update window data if any changes only
	uint16_t values[MAX_VARS]={0};
	bool update = false;
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	01 c0       	rjmp	.+2      	; 0x15da <screenUpdater+0xd4>
			values[7] = SensorData.FO_lost_connecton_fault;
			values[8] = SensorData.FO_elevation_sensor_fault;
			values[9] = SensorData.FO_azimuth_sensor_fault;
			for (uint8_t i=0; i<10; i++){
				if(show.lastValues[i] != values[i]){
				update = true;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
				break;
				}
			}
			for (uint8_t i=0; i<10; i++){
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	16 c0       	rjmp	.+44     	; 0x160a <screenUpdater+0x104>
				show.lastValues[i] = values[i];
    15de:	29 2f       	mov	r18, r25
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	f9 01       	movw	r30, r18
    15e4:	ee 0f       	add	r30, r30
    15e6:	ff 1f       	adc	r31, r31
    15e8:	41 e0       	ldi	r20, 0x01	; 1
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	4c 0f       	add	r20, r28
    15ee:	5d 1f       	adc	r21, r29
    15f0:	e4 0f       	add	r30, r20
    15f2:	f5 1f       	adc	r31, r21
    15f4:	40 81       	ld	r20, Z
    15f6:	51 81       	ldd	r21, Z+1	; 0x01
    15f8:	f9 01       	movw	r30, r18
    15fa:	31 96       	adiw	r30, 0x01	; 1
    15fc:	ee 0f       	add	r30, r30
    15fe:	ff 1f       	adc	r31, r31
    1600:	ea 50       	subi	r30, 0x0A	; 10
    1602:	fa 49       	sbci	r31, 0x9A	; 154
    1604:	40 83       	st	Z, r20
    1606:	51 83       	std	Z+1, r21	; 0x01
				if(show.lastValues[i] != values[i]){
				update = true;
				break;
				}
			}
			for (uint8_t i=0; i<10; i++){
    1608:	9f 5f       	subi	r25, 0xFF	; 255
    160a:	9a 30       	cpi	r25, 0x0A	; 10
    160c:	40 f3       	brcs	.-48     	; 0x15de <screenUpdater+0xd8>
    160e:	59 c0       	rjmp	.+178    	; 0x16c2 <screenUpdater+0x1bc>
				show.lastValues[i] = values[i];
			}
		break;
		case 1:
			values[0] = SensorData.PVU;
    1610:	e2 ea       	ldi	r30, 0xA2	; 162
    1612:	f5 e6       	ldi	r31, 0x65	; 101
    1614:	80 85       	ldd	r24, Z+8	; 0x08
    1616:	91 85       	ldd	r25, Z+9	; 0x09
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	9a 83       	std	Y+2, r25	; 0x02
			values[1] = SensorData.PVI;
    161c:	82 85       	ldd	r24, Z+10	; 0x0a
    161e:	93 85       	ldd	r25, Z+11	; 0x0b
    1620:	8b 83       	std	Y+3, r24	; 0x03
    1622:	9c 83       	std	Y+4, r25	; 0x04
			values[2] = StepperMotor.measuredVoltage;
    1624:	eb ee       	ldi	r30, 0xEB	; 235
    1626:	f5 e6       	ldi	r31, 0x65	; 101
    1628:	85 81       	ldd	r24, Z+5	; 0x05
    162a:	96 81       	ldd	r25, Z+6	; 0x06
    162c:	8d 83       	std	Y+5, r24	; 0x05
    162e:	9e 83       	std	Y+6, r25	; 0x06
			values[3] = StepperMotor.measuredCurrent;
    1630:	87 81       	ldd	r24, Z+7	; 0x07
    1632:	90 85       	ldd	r25, Z+8	; 0x08
    1634:	8f 83       	std	Y+7, r24	; 0x07
    1636:	98 87       	std	Y+8, r25	; 0x08
			values[4] = LinearMotor.measuredVoltage;
    1638:	e6 ed       	ldi	r30, 0xD6	; 214
    163a:	f5 e6       	ldi	r31, 0x65	; 101
    163c:	85 81       	ldd	r24, Z+5	; 0x05
    163e:	96 81       	ldd	r25, Z+6	; 0x06
    1640:	89 87       	std	Y+9, r24	; 0x09
    1642:	9a 87       	std	Y+10, r25	; 0x0a
			values[5] = LinearMotor.measuredCurrent;
    1644:	87 81       	ldd	r24, Z+7	; 0x07
    1646:	90 85       	ldd	r25, Z+8	; 0x08
    1648:	8b 87       	std	Y+11, r24	; 0x0b
    164a:	9c 87       	std	Y+12, r25	; 0x0c
			for (uint8_t i=0; i<6; i++){
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	18 c0       	rjmp	.+48     	; 0x1680 <screenUpdater+0x17a>
				if(show.lastValues[i] != values[i]){
    1650:	82 2f       	mov	r24, r18
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	fc 01       	movw	r30, r24
    1656:	31 96       	adiw	r30, 0x01	; 1
    1658:	ee 0f       	add	r30, r30
    165a:	ff 1f       	adc	r31, r31
    165c:	ea 50       	subi	r30, 0x0A	; 10
    165e:	fa 49       	sbci	r31, 0x9A	; 154
    1660:	40 81       	ld	r20, Z
    1662:	51 81       	ldd	r21, Z+1	; 0x01
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	e1 e0       	ldi	r30, 0x01	; 1
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	ec 0f       	add	r30, r28
    166e:	fd 1f       	adc	r31, r29
    1670:	e8 0f       	add	r30, r24
    1672:	f9 1f       	adc	r31, r25
    1674:	80 81       	ld	r24, Z
    1676:	91 81       	ldd	r25, Z+1	; 0x01
    1678:	48 17       	cp	r20, r24
    167a:	59 07       	cpc	r21, r25
    167c:	29 f4       	brne	.+10     	; 0x1688 <screenUpdater+0x182>
			values[1] = SensorData.PVI;
			values[2] = StepperMotor.measuredVoltage;
			values[3] = StepperMotor.measuredCurrent;
			values[4] = LinearMotor.measuredVoltage;
			values[5] = LinearMotor.measuredCurrent;
			for (uint8_t i=0; i<6; i++){
    167e:	2f 5f       	subi	r18, 0xFF	; 255
    1680:	26 30       	cpi	r18, 0x06	; 6
    1682:	30 f3       	brcs	.-52     	; 0x1650 <screenUpdater+0x14a>
#include "Settings.h"
#include "windowsVar.h"

bool screenUpdater(uint8_t window){ //update window data if any changes only
	uint16_t values[MAX_VARS]={0};
	bool update = false;
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	01 c0       	rjmp	.+2      	; 0x168a <screenUpdater+0x184>
			values[3] = StepperMotor.measuredCurrent;
			values[4] = LinearMotor.measuredVoltage;
			values[5] = LinearMotor.measuredCurrent;
			for (uint8_t i=0; i<6; i++){
				if(show.lastValues[i] != values[i]){
				update = true;
    1688:	81 e0       	ldi	r24, 0x01	; 1
				break;
				}
			}
			for (uint8_t i=0; i<6; i++){
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	16 c0       	rjmp	.+44     	; 0x16ba <screenUpdater+0x1b4>
				show.lastValues[i] = values[i];
    168e:	29 2f       	mov	r18, r25
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	f9 01       	movw	r30, r18
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	a1 e0       	ldi	r26, 0x01	; 1
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	ac 0f       	add	r26, r28
    169e:	bd 1f       	adc	r27, r29
    16a0:	ea 0f       	add	r30, r26
    16a2:	fb 1f       	adc	r31, r27
    16a4:	40 81       	ld	r20, Z
    16a6:	51 81       	ldd	r21, Z+1	; 0x01
    16a8:	f9 01       	movw	r30, r18
    16aa:	31 96       	adiw	r30, 0x01	; 1
    16ac:	ee 0f       	add	r30, r30
    16ae:	ff 1f       	adc	r31, r31
    16b0:	ea 50       	subi	r30, 0x0A	; 10
    16b2:	fa 49       	sbci	r31, 0x9A	; 154
    16b4:	40 83       	st	Z, r20
    16b6:	51 83       	std	Z+1, r21	; 0x01
				if(show.lastValues[i] != values[i]){
				update = true;
				break;
				}
			}
			for (uint8_t i=0; i<6; i++){
    16b8:	9f 5f       	subi	r25, 0xFF	; 255
    16ba:	96 30       	cpi	r25, 0x06	; 6
    16bc:	40 f3       	brcs	.-48     	; 0x168e <screenUpdater+0x188>
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <screenUpdater+0x1bc>
#include "Settings.h"
#include "windowsVar.h"

bool screenUpdater(uint8_t window){ //update window data if any changes only
	uint16_t values[MAX_VARS]={0};
	bool update = false;
    16c0:	80 e0       	ldi	r24, 0x00	; 0
			for (uint8_t i=0; i<6; i++){
				show.lastValues[i] = values[i];
			}
		break;
	}
	show.lastWindow = window;
    16c2:	10 93 f7 65 	sts	0x65F7, r17	; 0x8065f7 <show+0x1>
	return update;
}
    16c6:	66 96       	adiw	r28, 0x16	; 22
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	1f 91       	pop	r17
    16d2:	08 95       	ret

000016d4 <windows>:

void windows() {
    16d4:	cf 92       	push	r12
    16d6:	df 92       	push	r13
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29

	ReadJoystickValues(); //Joystick read
    16e4:	0e 94 06 06 	call	0xc0c	; 0xc0c <ReadJoystickValues>

	if(!Joystick.LatchSwitch){//windows changing works if control is set as Auto.
    16e8:	80 91 d4 65 	lds	r24, 0x65D4	; 0x8065d4 <Joystick+0x6>
    16ec:	81 11       	cpse	r24, r1
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <windows+0x20>
		SelectWindow();
    16f0:	0e 94 2c 06 	call	0xc58	; 0xc58 <SelectWindow>
	}
	LatchSwitcher();
    16f4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LatchSwitcher>
	switch (show.window){
    16f8:	80 91 f6 65 	lds	r24, 0x65F6	; 0x8065f6 <show>
    16fc:	88 23       	and	r24, r24
    16fe:	21 f0       	breq	.+8      	; 0x1708 <windows+0x34>
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	09 f4       	brne	.+2      	; 0x1706 <windows+0x32>
    1704:	c4 c0       	rjmp	.+392    	; 0x188e <windows+0x1ba>
    1706:	42 c2       	rjmp	.+1156   	; 0x1b8c <windows+0x4b8>
		case 0:
			if(screenUpdater(0)){
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	0e 94 83 0a 	call	0x1506	; 0x1506 <screenUpdater>
    170e:	88 23       	and	r24, r24
    1710:	09 f4       	brne	.+2      	; 0x1714 <windows+0x40>
    1712:	3c c2       	rjmp	.+1144   	; 0x1b8c <windows+0x4b8>
				screen_write_formatted_text("%s", 0, ALIGN_CENTER, Joystick.LatchSwitch ? "Manual mode": " Auto mode ");			
    1714:	80 91 d4 65 	lds	r24, 0x65D4	; 0x8065d4 <Joystick+0x6>
    1718:	88 23       	and	r24, r24
    171a:	19 f0       	breq	.+6      	; 0x1722 <windows+0x4e>
    171c:	8e ec       	ldi	r24, 0xCE	; 206
    171e:	94 e6       	ldi	r25, 0x64	; 100
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <windows+0x52>
    1722:	8a ed       	ldi	r24, 0xDA	; 218
    1724:	94 e6       	ldi	r25, 0x64	; 100
    1726:	9f 93       	push	r25
    1728:	8f 93       	push	r24
    172a:	c1 e0       	ldi	r28, 0x01	; 1
    172c:	cf 93       	push	r28
    172e:	1f 92       	push	r1
    1730:	8c e1       	ldi	r24, 0x1C	; 28
    1732:	95 e6       	ldi	r25, 0x65	; 101
    1734:	9f 93       	push	r25
    1736:	8f 93       	push	r24
    1738:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("---------------------", 1, ALIGN_CENTER);
    173c:	cf 93       	push	r28
    173e:	cf 93       	push	r28
    1740:	8a ef       	ldi	r24, 0xFA	; 250
    1742:	94 e6       	ldi	r25, 0x64	; 100
    1744:	9f 93       	push	r25
    1746:	8f 93       	push	r24
    1748:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				//2. Bad signal fro FO coses FO_bad_signal_fault (receiving 000.. with good crc)
				//3. USATR1 not receiving messages FO_lost_signal_fault meaning FO optic cut or Top controller fault, or onboard Attiny212 fault
				//3a. FO_lost_signal_fault 3 times in row leads to lost connection fault FO_lost_connecton_fault
				//4. Elevation sensor stuck or bad data returns FO_elevation_sensor_fault error
				//5. Azimuth sensor fault FO_azimuth_sensor_fault
				screen_write_formatted_text("%s %s %s %s %s", 2, ALIGN_LEFT, SensorData.FO_data_fault ? "CE": "  ", SensorData.FO_bad_signal_fault ? "FOE": "   ", SensorData.FO_lost_connecton_fault ? "LCE": "   ", SensorData.FO_elevation_sensor_fault ? "ESE": "   ", SensorData.FO_azimuth_sensor_fault ? "ASE": "   ");
    174c:	80 91 b7 65 	lds	r24, 0x65B7	; 0x8065b7 <SensorData+0x15>
    1750:	2d b7       	in	r18, 0x3d	; 61
    1752:	3e b7       	in	r19, 0x3e	; 62
    1754:	26 5f       	subi	r18, 0xF6	; 246
    1756:	3f 4f       	sbci	r19, 0xFF	; 255
    1758:	2d bf       	out	0x3d, r18	; 61
    175a:	3e bf       	out	0x3e, r19	; 62
    175c:	88 23       	and	r24, r24
    175e:	19 f0       	breq	.+6      	; 0x1766 <windows+0x92>
    1760:	e6 ee       	ldi	r30, 0xE6	; 230
    1762:	f4 e6       	ldi	r31, 0x64	; 100
    1764:	02 c0       	rjmp	.+4      	; 0x176a <windows+0x96>
    1766:	ea ee       	ldi	r30, 0xEA	; 234
    1768:	f4 e6       	ldi	r31, 0x64	; 100
    176a:	80 91 b6 65 	lds	r24, 0x65B6	; 0x8065b6 <SensorData+0x14>
    176e:	88 23       	and	r24, r24
    1770:	19 f0       	breq	.+6      	; 0x1778 <windows+0xa4>
    1772:	6e ee       	ldi	r22, 0xEE	; 238
    1774:	74 e6       	ldi	r23, 0x64	; 100
    1776:	02 c0       	rjmp	.+4      	; 0x177c <windows+0xa8>
    1778:	6a ee       	ldi	r22, 0xEA	; 234
    177a:	74 e6       	ldi	r23, 0x64	; 100
    177c:	80 91 b5 65 	lds	r24, 0x65B5	; 0x8065b5 <SensorData+0x13>
    1780:	88 23       	and	r24, r24
    1782:	19 f0       	breq	.+6      	; 0x178a <windows+0xb6>
    1784:	42 ef       	ldi	r20, 0xF2	; 242
    1786:	54 e6       	ldi	r21, 0x64	; 100
    1788:	02 c0       	rjmp	.+4      	; 0x178e <windows+0xba>
    178a:	4a ee       	ldi	r20, 0xEA	; 234
    178c:	54 e6       	ldi	r21, 0x64	; 100
    178e:	80 91 b2 65 	lds	r24, 0x65B2	; 0x8065b2 <SensorData+0x10>
    1792:	88 23       	and	r24, r24
    1794:	19 f0       	breq	.+6      	; 0x179c <windows+0xc8>
    1796:	26 ef       	ldi	r18, 0xF6	; 246
    1798:	34 e6       	ldi	r19, 0x64	; 100
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <windows+0xcc>
    179c:	2a ee       	ldi	r18, 0xEA	; 234
    179e:	34 e6       	ldi	r19, 0x64	; 100
    17a0:	80 91 b4 65 	lds	r24, 0x65B4	; 0x8065b4 <SensorData+0x12>
    17a4:	88 23       	and	r24, r24
    17a6:	19 f0       	breq	.+6      	; 0x17ae <windows+0xda>
    17a8:	83 ef       	ldi	r24, 0xF3	; 243
    17aa:	94 e6       	ldi	r25, 0x64	; 100
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <windows+0xde>
    17ae:	8b ee       	ldi	r24, 0xEB	; 235
    17b0:	94 e6       	ldi	r25, 0x64	; 100
    17b2:	ff 93       	push	r31
    17b4:	ef 93       	push	r30
    17b6:	7f 93       	push	r23
    17b8:	6f 93       	push	r22
    17ba:	5f 93       	push	r21
    17bc:	4f 93       	push	r20
    17be:	3f 93       	push	r19
    17c0:	2f 93       	push	r18
    17c2:	9f 93       	push	r25
    17c4:	8f 93       	push	r24
    17c6:	1f 92       	push	r1
    17c8:	68 94       	set
    17ca:	dd 24       	eor	r13, r13
    17cc:	d1 f8       	bld	r13, 1
    17ce:	df 92       	push	r13
    17d0:	80 e1       	ldi	r24, 0x10	; 16
    17d2:	95 e6       	ldi	r25, 0x65	; 101
    17d4:	9f 93       	push	r25
    17d6:	8f 93       	push	r24
    17d8:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("---------------------", 3, ALIGN_CENTER);
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	8f 93       	push	r24
    17e0:	83 e0       	ldi	r24, 0x03	; 3
    17e2:	8f 93       	push	r24
    17e4:	8a ef       	ldi	r24, 0xFA	; 250
    17e6:	94 e6       	ldi	r25, 0x64	; 100
    17e8:	9f 93       	push	r25
    17ea:	8f 93       	push	r24
    17ec:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("Elevation:", 4, ALIGN_LEFT);
    17f0:	1f 92       	push	r1
    17f2:	c4 e0       	ldi	r28, 0x04	; 4
    17f4:	cf 93       	push	r28
    17f6:	8f e1       	ldi	r24, 0x1F	; 31
    17f8:	95 e6       	ldi	r25, 0x65	; 101
    17fa:	9f 93       	push	r25
    17fc:	8f 93       	push	r24
    17fe:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("%3d/ %3d", 4, ALIGN_RIGHT, Target.elevation, SensorData.Elevation);
    1802:	0f 2e       	mov	r0, r31
    1804:	f2 ea       	ldi	r31, 0xA2	; 162
    1806:	ef 2e       	mov	r14, r31
    1808:	f5 e6       	ldi	r31, 0x65	; 101
    180a:	ff 2e       	mov	r15, r31
    180c:	f0 2d       	mov	r31, r0
    180e:	d7 01       	movw	r26, r14
    1810:	11 96       	adiw	r26, 0x01	; 1
    1812:	8c 91       	ld	r24, X
    1814:	11 97       	sbiw	r26, 0x01	; 1
    1816:	8f 93       	push	r24
    1818:	8c 91       	ld	r24, X
    181a:	8f 93       	push	r24
    181c:	0a e4       	ldi	r16, 0x4A	; 74
    181e:	10 e6       	ldi	r17, 0x60	; 96
    1820:	f8 01       	movw	r30, r16
    1822:	81 81       	ldd	r24, Z+1	; 0x01
    1824:	8f 93       	push	r24
    1826:	80 81       	ld	r24, Z
    1828:	8f 93       	push	r24
    182a:	df 92       	push	r13
    182c:	cf 93       	push	r28
    182e:	ca e2       	ldi	r28, 0x2A	; 42
    1830:	d5 e6       	ldi	r29, 0x65	; 101
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("Azimuth:", 5, ALIGN_LEFT);
    183a:	1f 92       	push	r1
    183c:	0f 2e       	mov	r0, r31
    183e:	f5 e0       	ldi	r31, 0x05	; 5
    1840:	cf 2e       	mov	r12, r31
    1842:	f0 2d       	mov	r31, r0
    1844:	cf 92       	push	r12
    1846:	83 e3       	ldi	r24, 0x33	; 51
    1848:	95 e6       	ldi	r25, 0x65	; 101
    184a:	9f 93       	push	r25
    184c:	8f 93       	push	r24
    184e:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("%3d/ %3d", 5, ALIGN_RIGHT, Target.azimuth, SensorData.Azimuth);
    1852:	8d b7       	in	r24, 0x3d	; 61
    1854:	9e b7       	in	r25, 0x3e	; 62
    1856:	82 96       	adiw	r24, 0x22	; 34
    1858:	8d bf       	out	0x3d, r24	; 61
    185a:	9e bf       	out	0x3e, r25	; 62
    185c:	d7 01       	movw	r26, r14
    185e:	15 96       	adiw	r26, 0x05	; 5
    1860:	8c 91       	ld	r24, X
    1862:	15 97       	sbiw	r26, 0x05	; 5
    1864:	8f 93       	push	r24
    1866:	14 96       	adiw	r26, 0x04	; 4
    1868:	8c 91       	ld	r24, X
    186a:	8f 93       	push	r24
    186c:	f8 01       	movw	r30, r16
    186e:	86 81       	ldd	r24, Z+6	; 0x06
    1870:	8f 93       	push	r24
    1872:	85 81       	ldd	r24, Z+5	; 0x05
    1874:	8f 93       	push	r24
    1876:	df 92       	push	r13
    1878:	cf 92       	push	r12
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
    1882:	8d b7       	in	r24, 0x3d	; 61
    1884:	9e b7       	in	r25, 0x3e	; 62
    1886:	08 96       	adiw	r24, 0x08	; 8
    1888:	8d bf       	out	0x3d, r24	; 61
    188a:	9e bf       	out	0x3e, r25	; 62
    188c:	7f c1       	rjmp	.+766    	; 0x1b8c <windows+0x4b8>
			}
		break;
		case 1:
			if(screenUpdater(1)){
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	0e 94 83 0a 	call	0x1506	; 0x1506 <screenUpdater>
    1894:	88 23       	and	r24, r24
    1896:	09 f4       	brne	.+2      	; 0x189a <windows+0x1c6>
    1898:	79 c1       	rjmp	.+754    	; 0x1b8c <windows+0x4b8>
				//Solar panels electrical information
				screen_write_formatted_text("S.P. Voltage", 0, ALIGN_LEFT);
    189a:	1f 92       	push	r1
    189c:	1f 92       	push	r1
    189e:	8c e3       	ldi	r24, 0x3C	; 60
    18a0:	95 e6       	ldi	r25, 0x65	; 101
    18a2:	9f 93       	push	r25
    18a4:	8f 93       	push	r24
    18a6:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%01d", 0, ALIGN_RIGHT, SensorData.PVU/10, SensorData.PVU%10);
    18aa:	c2 ea       	ldi	r28, 0xA2	; 162
    18ac:	d5 e6       	ldi	r29, 0x65	; 101
    18ae:	48 85       	ldd	r20, Y+8	; 0x08
    18b0:	59 85       	ldd	r21, Y+9	; 0x09
    18b2:	9a 01       	movw	r18, r20
    18b4:	ad ec       	ldi	r26, 0xCD	; 205
    18b6:	bc ec       	ldi	r27, 0xCC	; 204
    18b8:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
    18bc:	96 95       	lsr	r25
    18be:	87 95       	ror	r24
    18c0:	96 95       	lsr	r25
    18c2:	87 95       	ror	r24
    18c4:	96 95       	lsr	r25
    18c6:	87 95       	ror	r24
    18c8:	9c 01       	movw	r18, r24
    18ca:	22 0f       	add	r18, r18
    18cc:	33 1f       	adc	r19, r19
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	82 0f       	add	r24, r18
    18dc:	93 1f       	adc	r25, r19
    18de:	da 01       	movw	r26, r20
    18e0:	a8 1b       	sub	r26, r24
    18e2:	b9 0b       	sbc	r27, r25
    18e4:	cd 01       	movw	r24, r26
    18e6:	9f 93       	push	r25
    18e8:	af 93       	push	r26
    18ea:	9a 01       	movw	r18, r20
    18ec:	ad ec       	ldi	r26, 0xCD	; 205
    18ee:	bc ec       	ldi	r27, 0xCC	; 204
    18f0:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
    18f4:	96 95       	lsr	r25
    18f6:	87 95       	ror	r24
    18f8:	96 95       	lsr	r25
    18fa:	87 95       	ror	r24
    18fc:	96 95       	lsr	r25
    18fe:	87 95       	ror	r24
    1900:	9f 93       	push	r25
    1902:	8f 93       	push	r24
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	8f 93       	push	r24
    1908:	1f 92       	push	r1
    190a:	89 e4       	ldi	r24, 0x49	; 73
    190c:	95 e6       	ldi	r25, 0x65	; 101
    190e:	9f 93       	push	r25
    1910:	8f 93       	push	r24
    1912:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("S.P Current:", 1, ALIGN_LEFT);
    1916:	1f 92       	push	r1
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	8f 93       	push	r24
    191c:	82 e5       	ldi	r24, 0x52	; 82
    191e:	95 e6       	ldi	r25, 0x65	; 101
    1920:	9f 93       	push	r25
    1922:	8f 93       	push	r24
    1924:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%02d", 1, ALIGN_RIGHT, SensorData.PVI/100, abs(SensorData.PVI%100));
    1928:	4a 85       	ldd	r20, Y+10	; 0x0a
    192a:	5b 85       	ldd	r21, Y+11	; 0x0b
    192c:	9a 01       	movw	r18, r20
    192e:	36 95       	lsr	r19
    1930:	27 95       	ror	r18
    1932:	36 95       	lsr	r19
    1934:	27 95       	ror	r18
    1936:	ab e7       	ldi	r26, 0x7B	; 123
    1938:	b4 e1       	ldi	r27, 0x14	; 20
    193a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
    193e:	96 95       	lsr	r25
    1940:	87 95       	ror	r24
    1942:	64 e6       	ldi	r22, 0x64	; 100
    1944:	68 9f       	mul	r22, r24
    1946:	90 01       	movw	r18, r0
    1948:	69 9f       	mul	r22, r25
    194a:	30 0d       	add	r19, r0
    194c:	11 24       	eor	r1, r1
    194e:	ca 01       	movw	r24, r20
    1950:	82 1b       	sub	r24, r18
    1952:	93 0b       	sbc	r25, r19
    1954:	9c 01       	movw	r18, r24
    1956:	22 f4       	brpl	.+8      	; 0x1960 <windows+0x28c>
    1958:	22 27       	eor	r18, r18
    195a:	33 27       	eor	r19, r19
    195c:	28 1b       	sub	r18, r24
    195e:	39 0b       	sbc	r19, r25
    1960:	3f 93       	push	r19
    1962:	2f 93       	push	r18
    1964:	9a 01       	movw	r18, r20
    1966:	36 95       	lsr	r19
    1968:	27 95       	ror	r18
    196a:	36 95       	lsr	r19
    196c:	27 95       	ror	r18
    196e:	ab e7       	ldi	r26, 0x7B	; 123
    1970:	b4 e1       	ldi	r27, 0x14	; 20
    1972:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
    1976:	96 95       	lsr	r25
    1978:	87 95       	ror	r24
    197a:	9f 93       	push	r25
    197c:	8f 93       	push	r24
    197e:	c2 e0       	ldi	r28, 0x02	; 2
    1980:	cf 93       	push	r28
    1982:	d1 e0       	ldi	r29, 0x01	; 1
    1984:	df 93       	push	r29
    1986:	8f e5       	ldi	r24, 0x5F	; 95
    1988:	95 e6       	ldi	r25, 0x65	; 101
    198a:	9f 93       	push	r25
    198c:	8f 93       	push	r24
    198e:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("---------------------", 2, ALIGN_CENTER);
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	8a ef       	ldi	r24, 0xFA	; 250
    1998:	94 e6       	ldi	r25, 0x64	; 100
    199a:	9f 93       	push	r25
    199c:	8f 93       	push	r24
    199e:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				//Azimuth (Stepper) motor electrical information
				screen_write_formatted_text("St.M. Voltage", 3, ALIGN_LEFT);
    19a2:	1f 92       	push	r1
    19a4:	d3 e0       	ldi	r29, 0x03	; 3
    19a6:	df 93       	push	r29
    19a8:	88 e6       	ldi	r24, 0x68	; 104
    19aa:	95 e6       	ldi	r25, 0x65	; 101
    19ac:	9f 93       	push	r25
    19ae:	8f 93       	push	r24
    19b0:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%01d", 3, ALIGN_RIGHT, StepperMotor.measuredVoltage/10, StepperMotor.measuredVoltage%10);
    19b4:	0b ee       	ldi	r16, 0xEB	; 235
    19b6:	15 e6       	ldi	r17, 0x65	; 101
    19b8:	f8 01       	movw	r30, r16
    19ba:	45 81       	ldd	r20, Z+5	; 0x05
    19bc:	56 81       	ldd	r21, Z+6	; 0x06
    19be:	2d b7       	in	r18, 0x3d	; 61
    19c0:	3e b7       	in	r19, 0x3e	; 62
    19c2:	20 5e       	subi	r18, 0xE0	; 224
    19c4:	3f 4f       	sbci	r19, 0xFF	; 255
    19c6:	2d bf       	out	0x3d, r18	; 61
    19c8:	3e bf       	out	0x3e, r19	; 62
    19ca:	9a 01       	movw	r18, r20
    19cc:	ad ec       	ldi	r26, 0xCD	; 205
    19ce:	bc ec       	ldi	r27, 0xCC	; 204
    19d0:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
    19d4:	96 95       	lsr	r25
    19d6:	87 95       	ror	r24
    19d8:	96 95       	lsr	r25
    19da:	87 95       	ror	r24
    19dc:	96 95       	lsr	r25
    19de:	87 95       	ror	r24
    19e0:	9c 01       	movw	r18, r24
    19e2:	22 0f       	add	r18, r18
    19e4:	33 1f       	adc	r19, r19
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	82 0f       	add	r24, r18
    19f4:	93 1f       	adc	r25, r19
    19f6:	da 01       	movw	r26, r20
    19f8:	a8 1b       	sub	r26, r24
    19fa:	b9 0b       	sbc	r27, r25
    19fc:	cd 01       	movw	r24, r26
    19fe:	9f 93       	push	r25
    1a00:	af 93       	push	r26
    1a02:	9a 01       	movw	r18, r20
    1a04:	ad ec       	ldi	r26, 0xCD	; 205
    1a06:	bc ec       	ldi	r27, 0xCC	; 204
    1a08:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
    1a0c:	96 95       	lsr	r25
    1a0e:	87 95       	ror	r24
    1a10:	96 95       	lsr	r25
    1a12:	87 95       	ror	r24
    1a14:	96 95       	lsr	r25
    1a16:	87 95       	ror	r24
    1a18:	9f 93       	push	r25
    1a1a:	8f 93       	push	r24
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	89 e4       	ldi	r24, 0x49	; 73
    1a22:	95 e6       	ldi	r25, 0x65	; 101
    1a24:	9f 93       	push	r25
    1a26:	8f 93       	push	r24
    1a28:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("St.M. Current:", 4, ALIGN_LEFT);
    1a2c:	1f 92       	push	r1
    1a2e:	84 e0       	ldi	r24, 0x04	; 4
    1a30:	8f 93       	push	r24
    1a32:	86 e7       	ldi	r24, 0x76	; 118
    1a34:	95 e6       	ldi	r25, 0x65	; 101
    1a36:	9f 93       	push	r25
    1a38:	8f 93       	push	r24
    1a3a:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%02d", 4, ALIGN_RIGHT, StepperMotor.measuredCurrent/100, abs(StepperMotor.measuredCurrent%100));
    1a3e:	d8 01       	movw	r26, r16
    1a40:	17 96       	adiw	r26, 0x07	; 7
    1a42:	ed 91       	ld	r30, X+
    1a44:	fc 91       	ld	r31, X
    1a46:	18 97       	sbiw	r26, 0x08	; 8
    1a48:	cf 01       	movw	r24, r30
    1a4a:	64 e6       	ldi	r22, 0x64	; 100
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__divmodhi4>
    1a52:	9c 01       	movw	r18, r24
    1a54:	99 23       	and	r25, r25
    1a56:	24 f4       	brge	.+8      	; 0x1a60 <windows+0x38c>
    1a58:	22 27       	eor	r18, r18
    1a5a:	33 27       	eor	r19, r19
    1a5c:	28 1b       	sub	r18, r24
    1a5e:	39 0b       	sbc	r19, r25
    1a60:	3f 93       	push	r19
    1a62:	2f 93       	push	r18
    1a64:	c4 e6       	ldi	r28, 0x64	; 100
    1a66:	d0 e0       	ldi	r29, 0x00	; 0
    1a68:	cf 01       	movw	r24, r30
    1a6a:	be 01       	movw	r22, r28
    1a6c:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__divmodhi4>
    1a70:	7f 93       	push	r23
    1a72:	6f 93       	push	r22
    1a74:	68 94       	set
    1a76:	ee 24       	eor	r14, r14
    1a78:	e1 f8       	bld	r14, 1
    1a7a:	ef 92       	push	r14
    1a7c:	84 e0       	ldi	r24, 0x04	; 4
    1a7e:	8f 93       	push	r24
    1a80:	8f e5       	ldi	r24, 0x5F	; 95
    1a82:	95 e6       	ldi	r25, 0x65	; 101
    1a84:	9f 93       	push	r25
    1a86:	8f 93       	push	r24
    1a88:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("---------------------", 5, ALIGN_CENTER);
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	8f 93       	push	r24
    1a90:	85 e0       	ldi	r24, 0x05	; 5
    1a92:	8f 93       	push	r24
    1a94:	8a ef       	ldi	r24, 0xFA	; 250
    1a96:	94 e6       	ldi	r25, 0x64	; 100
    1a98:	9f 93       	push	r25
    1a9a:	8f 93       	push	r24
    1a9c:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				//Elevation (Linear) motor electical information
				screen_write_formatted_text("L.M. Voltage", 6, ALIGN_LEFT);
    1aa0:	1f 92       	push	r1
    1aa2:	0f 2e       	mov	r0, r31
    1aa4:	f6 e0       	ldi	r31, 0x06	; 6
    1aa6:	ff 2e       	mov	r15, r31
    1aa8:	f0 2d       	mov	r31, r0
    1aaa:	ff 92       	push	r15
    1aac:	85 e8       	ldi	r24, 0x85	; 133
    1aae:	95 e6       	ldi	r25, 0x65	; 101
    1ab0:	9f 93       	push	r25
    1ab2:	8f 93       	push	r24
    1ab4:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%01d", 6, ALIGN_RIGHT, LinearMotor.measuredVoltage/10, LinearMotor.measuredVoltage%10);
    1ab8:	06 ed       	ldi	r16, 0xD6	; 214
    1aba:	15 e6       	ldi	r17, 0x65	; 101
    1abc:	f8 01       	movw	r30, r16
    1abe:	45 81       	ldd	r20, Z+5	; 0x05
    1ac0:	56 81       	ldd	r21, Z+6	; 0x06
    1ac2:	9a 01       	movw	r18, r20
    1ac4:	ad ec       	ldi	r26, 0xCD	; 205
    1ac6:	bc ec       	ldi	r27, 0xCC	; 204
    1ac8:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
    1acc:	96 95       	lsr	r25
    1ace:	87 95       	ror	r24
    1ad0:	96 95       	lsr	r25
    1ad2:	87 95       	ror	r24
    1ad4:	96 95       	lsr	r25
    1ad6:	87 95       	ror	r24
    1ad8:	9c 01       	movw	r18, r24
    1ada:	22 0f       	add	r18, r18
    1adc:	33 1f       	adc	r19, r19
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	82 0f       	add	r24, r18
    1aec:	93 1f       	adc	r25, r19
    1aee:	9a 01       	movw	r18, r20
    1af0:	28 1b       	sub	r18, r24
    1af2:	39 0b       	sbc	r19, r25
    1af4:	c9 01       	movw	r24, r18
    1af6:	9f 93       	push	r25
    1af8:	2f 93       	push	r18
    1afa:	9a 01       	movw	r18, r20
    1afc:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
    1b00:	96 95       	lsr	r25
    1b02:	87 95       	ror	r24
    1b04:	96 95       	lsr	r25
    1b06:	87 95       	ror	r24
    1b08:	96 95       	lsr	r25
    1b0a:	87 95       	ror	r24
    1b0c:	9f 93       	push	r25
    1b0e:	8f 93       	push	r24
    1b10:	ef 92       	push	r14
    1b12:	ff 92       	push	r15
    1b14:	89 e4       	ldi	r24, 0x49	; 73
    1b16:	95 e6       	ldi	r25, 0x65	; 101
    1b18:	9f 93       	push	r25
    1b1a:	8f 93       	push	r24
    1b1c:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("L.M. Current:", 7, ALIGN_LEFT);
    1b20:	8d b7       	in	r24, 0x3d	; 61
    1b22:	9e b7       	in	r25, 0x3e	; 62
    1b24:	84 96       	adiw	r24, 0x24	; 36
    1b26:	8d bf       	out	0x3d, r24	; 61
    1b28:	9e bf       	out	0x3e, r25	; 62
    1b2a:	1f 92       	push	r1
    1b2c:	87 e0       	ldi	r24, 0x07	; 7
    1b2e:	8f 93       	push	r24
    1b30:	82 e9       	ldi	r24, 0x92	; 146
    1b32:	95 e6       	ldi	r25, 0x65	; 101
    1b34:	9f 93       	push	r25
    1b36:	8f 93       	push	r24
    1b38:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%02d", 7, ALIGN_RIGHT, LinearMotor.measuredCurrent/100, abs(LinearMotor.measuredCurrent%100));
    1b3c:	d8 01       	movw	r26, r16
    1b3e:	17 96       	adiw	r26, 0x07	; 7
    1b40:	ed 91       	ld	r30, X+
    1b42:	fc 91       	ld	r31, X
    1b44:	18 97       	sbiw	r26, 0x08	; 8
    1b46:	cf 01       	movw	r24, r30
    1b48:	be 01       	movw	r22, r28
    1b4a:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__divmodhi4>
    1b4e:	9c 01       	movw	r18, r24
    1b50:	99 23       	and	r25, r25
    1b52:	24 f4       	brge	.+8      	; 0x1b5c <windows+0x488>
    1b54:	22 27       	eor	r18, r18
    1b56:	33 27       	eor	r19, r19
    1b58:	28 1b       	sub	r18, r24
    1b5a:	39 0b       	sbc	r19, r25
    1b5c:	3f 93       	push	r19
    1b5e:	2f 93       	push	r18
    1b60:	cf 01       	movw	r24, r30
    1b62:	64 e6       	ldi	r22, 0x64	; 100
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__divmodhi4>
    1b6a:	7f 93       	push	r23
    1b6c:	6f 93       	push	r22
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	8f 93       	push	r24
    1b72:	87 e0       	ldi	r24, 0x07	; 7
    1b74:	8f 93       	push	r24
    1b76:	8f e5       	ldi	r24, 0x5F	; 95
    1b78:	95 e6       	ldi	r25, 0x65	; 101
    1b7a:	9f 93       	push	r25
    1b7c:	8f 93       	push	r24
    1b7e:	0e 94 97 08 	call	0x112e	; 0x112e <screen_write_formatted_text>
    1b82:	ed b7       	in	r30, 0x3d	; 61
    1b84:	fe b7       	in	r31, 0x3e	; 62
    1b86:	3c 96       	adiw	r30, 0x0c	; 12
    1b88:	ed bf       	out	0x3d, r30	; 61
    1b8a:	fe bf       	out	0x3e, r31	; 62
			}
		break;
	}
	

    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	ff 90       	pop	r15
    1b96:	ef 90       	pop	r14
    1b98:	df 90       	pop	r13
    1b9a:	cf 90       	pop	r12
    1b9c:	08 95       	ret

00001b9e <__divsf3>:
    1b9e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divsf3x>
    1ba2:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__fp_round>
    1ba6:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fp_pscB>
    1baa:	58 f0       	brcs	.+22     	; 0x1bc2 <__divsf3+0x24>
    1bac:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__fp_pscA>
    1bb0:	40 f0       	brcs	.+16     	; 0x1bc2 <__divsf3+0x24>
    1bb2:	29 f4       	brne	.+10     	; 0x1bbe <__divsf3+0x20>
    1bb4:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb6:	29 f0       	breq	.+10     	; 0x1bc2 <__divsf3+0x24>
    1bb8:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_inf>
    1bbc:	51 11       	cpse	r21, r1
    1bbe:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__fp_szero>
    1bc2:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__fp_nan>

00001bc6 <__divsf3x>:
    1bc6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__fp_split3>
    1bca:	68 f3       	brcs	.-38     	; 0x1ba6 <__divsf3+0x8>

00001bcc <__divsf3_pse>:
    1bcc:	99 23       	and	r25, r25
    1bce:	b1 f3       	breq	.-20     	; 0x1bbc <__divsf3+0x1e>
    1bd0:	55 23       	and	r21, r21
    1bd2:	91 f3       	breq	.-28     	; 0x1bb8 <__divsf3+0x1a>
    1bd4:	95 1b       	sub	r25, r21
    1bd6:	55 0b       	sbc	r21, r21
    1bd8:	bb 27       	eor	r27, r27
    1bda:	aa 27       	eor	r26, r26
    1bdc:	62 17       	cp	r22, r18
    1bde:	73 07       	cpc	r23, r19
    1be0:	84 07       	cpc	r24, r20
    1be2:	38 f0       	brcs	.+14     	; 0x1bf2 <__divsf3_pse+0x26>
    1be4:	9f 5f       	subi	r25, 0xFF	; 255
    1be6:	5f 4f       	sbci	r21, 0xFF	; 255
    1be8:	22 0f       	add	r18, r18
    1bea:	33 1f       	adc	r19, r19
    1bec:	44 1f       	adc	r20, r20
    1bee:	aa 1f       	adc	r26, r26
    1bf0:	a9 f3       	breq	.-22     	; 0x1bdc <__divsf3_pse+0x10>
    1bf2:	35 d0       	rcall	.+106    	; 0x1c5e <__divsf3_pse+0x92>
    1bf4:	0e 2e       	mov	r0, r30
    1bf6:	3a f0       	brmi	.+14     	; 0x1c06 <__divsf3_pse+0x3a>
    1bf8:	e0 e8       	ldi	r30, 0x80	; 128
    1bfa:	32 d0       	rcall	.+100    	; 0x1c60 <__divsf3_pse+0x94>
    1bfc:	91 50       	subi	r25, 0x01	; 1
    1bfe:	50 40       	sbci	r21, 0x00	; 0
    1c00:	e6 95       	lsr	r30
    1c02:	00 1c       	adc	r0, r0
    1c04:	ca f7       	brpl	.-14     	; 0x1bf8 <__divsf3_pse+0x2c>
    1c06:	2b d0       	rcall	.+86     	; 0x1c5e <__divsf3_pse+0x92>
    1c08:	fe 2f       	mov	r31, r30
    1c0a:	29 d0       	rcall	.+82     	; 0x1c5e <__divsf3_pse+0x92>
    1c0c:	66 0f       	add	r22, r22
    1c0e:	77 1f       	adc	r23, r23
    1c10:	88 1f       	adc	r24, r24
    1c12:	bb 1f       	adc	r27, r27
    1c14:	26 17       	cp	r18, r22
    1c16:	37 07       	cpc	r19, r23
    1c18:	48 07       	cpc	r20, r24
    1c1a:	ab 07       	cpc	r26, r27
    1c1c:	b0 e8       	ldi	r27, 0x80	; 128
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <__divsf3_pse+0x56>
    1c20:	bb 0b       	sbc	r27, r27
    1c22:	80 2d       	mov	r24, r0
    1c24:	bf 01       	movw	r22, r30
    1c26:	ff 27       	eor	r31, r31
    1c28:	93 58       	subi	r25, 0x83	; 131
    1c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c2c:	3a f0       	brmi	.+14     	; 0x1c3c <__divsf3_pse+0x70>
    1c2e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c30:	51 05       	cpc	r21, r1
    1c32:	78 f0       	brcs	.+30     	; 0x1c52 <__divsf3_pse+0x86>
    1c34:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_inf>
    1c38:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__fp_szero>
    1c3c:	5f 3f       	cpi	r21, 0xFF	; 255
    1c3e:	e4 f3       	brlt	.-8      	; 0x1c38 <__divsf3_pse+0x6c>
    1c40:	98 3e       	cpi	r25, 0xE8	; 232
    1c42:	d4 f3       	brlt	.-12     	; 0x1c38 <__divsf3_pse+0x6c>
    1c44:	86 95       	lsr	r24
    1c46:	77 95       	ror	r23
    1c48:	67 95       	ror	r22
    1c4a:	b7 95       	ror	r27
    1c4c:	f7 95       	ror	r31
    1c4e:	9f 5f       	subi	r25, 0xFF	; 255
    1c50:	c9 f7       	brne	.-14     	; 0x1c44 <__divsf3_pse+0x78>
    1c52:	88 0f       	add	r24, r24
    1c54:	91 1d       	adc	r25, r1
    1c56:	96 95       	lsr	r25
    1c58:	87 95       	ror	r24
    1c5a:	97 f9       	bld	r25, 7
    1c5c:	08 95       	ret
    1c5e:	e1 e0       	ldi	r30, 0x01	; 1
    1c60:	66 0f       	add	r22, r22
    1c62:	77 1f       	adc	r23, r23
    1c64:	88 1f       	adc	r24, r24
    1c66:	bb 1f       	adc	r27, r27
    1c68:	62 17       	cp	r22, r18
    1c6a:	73 07       	cpc	r23, r19
    1c6c:	84 07       	cpc	r24, r20
    1c6e:	ba 07       	cpc	r27, r26
    1c70:	20 f0       	brcs	.+8      	; 0x1c7a <__divsf3_pse+0xae>
    1c72:	62 1b       	sub	r22, r18
    1c74:	73 0b       	sbc	r23, r19
    1c76:	84 0b       	sbc	r24, r20
    1c78:	ba 0b       	sbc	r27, r26
    1c7a:	ee 1f       	adc	r30, r30
    1c7c:	88 f7       	brcc	.-30     	; 0x1c60 <__divsf3_pse+0x94>
    1c7e:	e0 95       	com	r30
    1c80:	08 95       	ret

00001c82 <__fixunssfsi>:
    1c82:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__fp_splitA>
    1c86:	88 f0       	brcs	.+34     	; 0x1caa <__fixunssfsi+0x28>
    1c88:	9f 57       	subi	r25, 0x7F	; 127
    1c8a:	98 f0       	brcs	.+38     	; 0x1cb2 <__fixunssfsi+0x30>
    1c8c:	b9 2f       	mov	r27, r25
    1c8e:	99 27       	eor	r25, r25
    1c90:	b7 51       	subi	r27, 0x17	; 23
    1c92:	b0 f0       	brcs	.+44     	; 0x1cc0 <__fixunssfsi+0x3e>
    1c94:	e1 f0       	breq	.+56     	; 0x1cce <__fixunssfsi+0x4c>
    1c96:	66 0f       	add	r22, r22
    1c98:	77 1f       	adc	r23, r23
    1c9a:	88 1f       	adc	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	1a f0       	brmi	.+6      	; 0x1ca6 <__fixunssfsi+0x24>
    1ca0:	ba 95       	dec	r27
    1ca2:	c9 f7       	brne	.-14     	; 0x1c96 <__fixunssfsi+0x14>
    1ca4:	14 c0       	rjmp	.+40     	; 0x1cce <__fixunssfsi+0x4c>
    1ca6:	b1 30       	cpi	r27, 0x01	; 1
    1ca8:	91 f0       	breq	.+36     	; 0x1cce <__fixunssfsi+0x4c>
    1caa:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__fp_zero>
    1cae:	b1 e0       	ldi	r27, 0x01	; 1
    1cb0:	08 95       	ret
    1cb2:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__fp_zero>
    1cb6:	67 2f       	mov	r22, r23
    1cb8:	78 2f       	mov	r23, r24
    1cba:	88 27       	eor	r24, r24
    1cbc:	b8 5f       	subi	r27, 0xF8	; 248
    1cbe:	39 f0       	breq	.+14     	; 0x1cce <__fixunssfsi+0x4c>
    1cc0:	b9 3f       	cpi	r27, 0xF9	; 249
    1cc2:	cc f3       	brlt	.-14     	; 0x1cb6 <__fixunssfsi+0x34>
    1cc4:	86 95       	lsr	r24
    1cc6:	77 95       	ror	r23
    1cc8:	67 95       	ror	r22
    1cca:	b3 95       	inc	r27
    1ccc:	d9 f7       	brne	.-10     	; 0x1cc4 <__fixunssfsi+0x42>
    1cce:	3e f4       	brtc	.+14     	; 0x1cde <__fixunssfsi+0x5c>
    1cd0:	90 95       	com	r25
    1cd2:	80 95       	com	r24
    1cd4:	70 95       	com	r23
    1cd6:	61 95       	neg	r22
    1cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cda:	8f 4f       	sbci	r24, 0xFF	; 255
    1cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cde:	08 95       	ret

00001ce0 <__floatunsisf>:
    1ce0:	e8 94       	clt
    1ce2:	09 c0       	rjmp	.+18     	; 0x1cf6 <__floatsisf+0x12>

00001ce4 <__floatsisf>:
    1ce4:	97 fb       	bst	r25, 7
    1ce6:	3e f4       	brtc	.+14     	; 0x1cf6 <__floatsisf+0x12>
    1ce8:	90 95       	com	r25
    1cea:	80 95       	com	r24
    1cec:	70 95       	com	r23
    1cee:	61 95       	neg	r22
    1cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf6:	99 23       	and	r25, r25
    1cf8:	a9 f0       	breq	.+42     	; 0x1d24 <__floatsisf+0x40>
    1cfa:	f9 2f       	mov	r31, r25
    1cfc:	96 e9       	ldi	r25, 0x96	; 150
    1cfe:	bb 27       	eor	r27, r27
    1d00:	93 95       	inc	r25
    1d02:	f6 95       	lsr	r31
    1d04:	87 95       	ror	r24
    1d06:	77 95       	ror	r23
    1d08:	67 95       	ror	r22
    1d0a:	b7 95       	ror	r27
    1d0c:	f1 11       	cpse	r31, r1
    1d0e:	f8 cf       	rjmp	.-16     	; 0x1d00 <__floatsisf+0x1c>
    1d10:	fa f4       	brpl	.+62     	; 0x1d50 <__floatsisf+0x6c>
    1d12:	bb 0f       	add	r27, r27
    1d14:	11 f4       	brne	.+4      	; 0x1d1a <__floatsisf+0x36>
    1d16:	60 ff       	sbrs	r22, 0
    1d18:	1b c0       	rjmp	.+54     	; 0x1d50 <__floatsisf+0x6c>
    1d1a:	6f 5f       	subi	r22, 0xFF	; 255
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d20:	9f 4f       	sbci	r25, 0xFF	; 255
    1d22:	16 c0       	rjmp	.+44     	; 0x1d50 <__floatsisf+0x6c>
    1d24:	88 23       	and	r24, r24
    1d26:	11 f0       	breq	.+4      	; 0x1d2c <__floatsisf+0x48>
    1d28:	96 e9       	ldi	r25, 0x96	; 150
    1d2a:	11 c0       	rjmp	.+34     	; 0x1d4e <__floatsisf+0x6a>
    1d2c:	77 23       	and	r23, r23
    1d2e:	21 f0       	breq	.+8      	; 0x1d38 <__floatsisf+0x54>
    1d30:	9e e8       	ldi	r25, 0x8E	; 142
    1d32:	87 2f       	mov	r24, r23
    1d34:	76 2f       	mov	r23, r22
    1d36:	05 c0       	rjmp	.+10     	; 0x1d42 <__floatsisf+0x5e>
    1d38:	66 23       	and	r22, r22
    1d3a:	71 f0       	breq	.+28     	; 0x1d58 <__floatsisf+0x74>
    1d3c:	96 e8       	ldi	r25, 0x86	; 134
    1d3e:	86 2f       	mov	r24, r22
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	2a f0       	brmi	.+10     	; 0x1d50 <__floatsisf+0x6c>
    1d46:	9a 95       	dec	r25
    1d48:	66 0f       	add	r22, r22
    1d4a:	77 1f       	adc	r23, r23
    1d4c:	88 1f       	adc	r24, r24
    1d4e:	da f7       	brpl	.-10     	; 0x1d46 <__floatsisf+0x62>
    1d50:	88 0f       	add	r24, r24
    1d52:	96 95       	lsr	r25
    1d54:	87 95       	ror	r24
    1d56:	97 f9       	bld	r25, 7
    1d58:	08 95       	ret

00001d5a <__fp_inf>:
    1d5a:	97 f9       	bld	r25, 7
    1d5c:	9f 67       	ori	r25, 0x7F	; 127
    1d5e:	80 e8       	ldi	r24, 0x80	; 128
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	08 95       	ret

00001d66 <__fp_nan>:
    1d66:	9f ef       	ldi	r25, 0xFF	; 255
    1d68:	80 ec       	ldi	r24, 0xC0	; 192
    1d6a:	08 95       	ret

00001d6c <__fp_pscA>:
    1d6c:	00 24       	eor	r0, r0
    1d6e:	0a 94       	dec	r0
    1d70:	16 16       	cp	r1, r22
    1d72:	17 06       	cpc	r1, r23
    1d74:	18 06       	cpc	r1, r24
    1d76:	09 06       	cpc	r0, r25
    1d78:	08 95       	ret

00001d7a <__fp_pscB>:
    1d7a:	00 24       	eor	r0, r0
    1d7c:	0a 94       	dec	r0
    1d7e:	12 16       	cp	r1, r18
    1d80:	13 06       	cpc	r1, r19
    1d82:	14 06       	cpc	r1, r20
    1d84:	05 06       	cpc	r0, r21
    1d86:	08 95       	ret

00001d88 <__fp_round>:
    1d88:	09 2e       	mov	r0, r25
    1d8a:	03 94       	inc	r0
    1d8c:	00 0c       	add	r0, r0
    1d8e:	11 f4       	brne	.+4      	; 0x1d94 <__fp_round+0xc>
    1d90:	88 23       	and	r24, r24
    1d92:	52 f0       	brmi	.+20     	; 0x1da8 <__fp_round+0x20>
    1d94:	bb 0f       	add	r27, r27
    1d96:	40 f4       	brcc	.+16     	; 0x1da8 <__fp_round+0x20>
    1d98:	bf 2b       	or	r27, r31
    1d9a:	11 f4       	brne	.+4      	; 0x1da0 <__fp_round+0x18>
    1d9c:	60 ff       	sbrs	r22, 0
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <__fp_round+0x20>
    1da0:	6f 5f       	subi	r22, 0xFF	; 255
    1da2:	7f 4f       	sbci	r23, 0xFF	; 255
    1da4:	8f 4f       	sbci	r24, 0xFF	; 255
    1da6:	9f 4f       	sbci	r25, 0xFF	; 255
    1da8:	08 95       	ret

00001daa <__fp_split3>:
    1daa:	57 fd       	sbrc	r21, 7
    1dac:	90 58       	subi	r25, 0x80	; 128
    1dae:	44 0f       	add	r20, r20
    1db0:	55 1f       	adc	r21, r21
    1db2:	59 f0       	breq	.+22     	; 0x1dca <__fp_splitA+0x10>
    1db4:	5f 3f       	cpi	r21, 0xFF	; 255
    1db6:	71 f0       	breq	.+28     	; 0x1dd4 <__fp_splitA+0x1a>
    1db8:	47 95       	ror	r20

00001dba <__fp_splitA>:
    1dba:	88 0f       	add	r24, r24
    1dbc:	97 fb       	bst	r25, 7
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	61 f0       	breq	.+24     	; 0x1dda <__fp_splitA+0x20>
    1dc2:	9f 3f       	cpi	r25, 0xFF	; 255
    1dc4:	79 f0       	breq	.+30     	; 0x1de4 <__fp_splitA+0x2a>
    1dc6:	87 95       	ror	r24
    1dc8:	08 95       	ret
    1dca:	12 16       	cp	r1, r18
    1dcc:	13 06       	cpc	r1, r19
    1dce:	14 06       	cpc	r1, r20
    1dd0:	55 1f       	adc	r21, r21
    1dd2:	f2 cf       	rjmp	.-28     	; 0x1db8 <__fp_split3+0xe>
    1dd4:	46 95       	lsr	r20
    1dd6:	f1 df       	rcall	.-30     	; 0x1dba <__fp_splitA>
    1dd8:	08 c0       	rjmp	.+16     	; 0x1dea <__fp_splitA+0x30>
    1dda:	16 16       	cp	r1, r22
    1ddc:	17 06       	cpc	r1, r23
    1dde:	18 06       	cpc	r1, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	f1 cf       	rjmp	.-30     	; 0x1dc6 <__fp_splitA+0xc>
    1de4:	86 95       	lsr	r24
    1de6:	71 05       	cpc	r23, r1
    1de8:	61 05       	cpc	r22, r1
    1dea:	08 94       	sec
    1dec:	08 95       	ret

00001dee <__fp_zero>:
    1dee:	e8 94       	clt

00001df0 <__fp_szero>:
    1df0:	bb 27       	eor	r27, r27
    1df2:	66 27       	eor	r22, r22
    1df4:	77 27       	eor	r23, r23
    1df6:	cb 01       	movw	r24, r22
    1df8:	97 f9       	bld	r25, 7
    1dfa:	08 95       	ret

00001dfc <__mulsf3>:
    1dfc:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__mulsf3x>
    1e00:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__fp_round>
    1e04:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__fp_pscA>
    1e08:	38 f0       	brcs	.+14     	; 0x1e18 <__mulsf3+0x1c>
    1e0a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fp_pscB>
    1e0e:	20 f0       	brcs	.+8      	; 0x1e18 <__mulsf3+0x1c>
    1e10:	95 23       	and	r25, r21
    1e12:	11 f0       	breq	.+4      	; 0x1e18 <__mulsf3+0x1c>
    1e14:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_inf>
    1e18:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__fp_nan>
    1e1c:	11 24       	eor	r1, r1
    1e1e:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__fp_szero>

00001e22 <__mulsf3x>:
    1e22:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__fp_split3>
    1e26:	70 f3       	brcs	.-36     	; 0x1e04 <__mulsf3+0x8>

00001e28 <__mulsf3_pse>:
    1e28:	95 9f       	mul	r25, r21
    1e2a:	c1 f3       	breq	.-16     	; 0x1e1c <__mulsf3+0x20>
    1e2c:	95 0f       	add	r25, r21
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	55 1f       	adc	r21, r21
    1e32:	62 9f       	mul	r22, r18
    1e34:	f0 01       	movw	r30, r0
    1e36:	72 9f       	mul	r23, r18
    1e38:	bb 27       	eor	r27, r27
    1e3a:	f0 0d       	add	r31, r0
    1e3c:	b1 1d       	adc	r27, r1
    1e3e:	63 9f       	mul	r22, r19
    1e40:	aa 27       	eor	r26, r26
    1e42:	f0 0d       	add	r31, r0
    1e44:	b1 1d       	adc	r27, r1
    1e46:	aa 1f       	adc	r26, r26
    1e48:	64 9f       	mul	r22, r20
    1e4a:	66 27       	eor	r22, r22
    1e4c:	b0 0d       	add	r27, r0
    1e4e:	a1 1d       	adc	r26, r1
    1e50:	66 1f       	adc	r22, r22
    1e52:	82 9f       	mul	r24, r18
    1e54:	22 27       	eor	r18, r18
    1e56:	b0 0d       	add	r27, r0
    1e58:	a1 1d       	adc	r26, r1
    1e5a:	62 1f       	adc	r22, r18
    1e5c:	73 9f       	mul	r23, r19
    1e5e:	b0 0d       	add	r27, r0
    1e60:	a1 1d       	adc	r26, r1
    1e62:	62 1f       	adc	r22, r18
    1e64:	83 9f       	mul	r24, r19
    1e66:	a0 0d       	add	r26, r0
    1e68:	61 1d       	adc	r22, r1
    1e6a:	22 1f       	adc	r18, r18
    1e6c:	74 9f       	mul	r23, r20
    1e6e:	33 27       	eor	r19, r19
    1e70:	a0 0d       	add	r26, r0
    1e72:	61 1d       	adc	r22, r1
    1e74:	23 1f       	adc	r18, r19
    1e76:	84 9f       	mul	r24, r20
    1e78:	60 0d       	add	r22, r0
    1e7a:	21 1d       	adc	r18, r1
    1e7c:	82 2f       	mov	r24, r18
    1e7e:	76 2f       	mov	r23, r22
    1e80:	6a 2f       	mov	r22, r26
    1e82:	11 24       	eor	r1, r1
    1e84:	9f 57       	subi	r25, 0x7F	; 127
    1e86:	50 40       	sbci	r21, 0x00	; 0
    1e88:	9a f0       	brmi	.+38     	; 0x1eb0 <__mulsf3_pse+0x88>
    1e8a:	f1 f0       	breq	.+60     	; 0x1ec8 <__mulsf3_pse+0xa0>
    1e8c:	88 23       	and	r24, r24
    1e8e:	4a f0       	brmi	.+18     	; 0x1ea2 <__mulsf3_pse+0x7a>
    1e90:	ee 0f       	add	r30, r30
    1e92:	ff 1f       	adc	r31, r31
    1e94:	bb 1f       	adc	r27, r27
    1e96:	66 1f       	adc	r22, r22
    1e98:	77 1f       	adc	r23, r23
    1e9a:	88 1f       	adc	r24, r24
    1e9c:	91 50       	subi	r25, 0x01	; 1
    1e9e:	50 40       	sbci	r21, 0x00	; 0
    1ea0:	a9 f7       	brne	.-22     	; 0x1e8c <__mulsf3_pse+0x64>
    1ea2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ea4:	51 05       	cpc	r21, r1
    1ea6:	80 f0       	brcs	.+32     	; 0x1ec8 <__mulsf3_pse+0xa0>
    1ea8:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_inf>
    1eac:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__fp_szero>
    1eb0:	5f 3f       	cpi	r21, 0xFF	; 255
    1eb2:	e4 f3       	brlt	.-8      	; 0x1eac <__mulsf3_pse+0x84>
    1eb4:	98 3e       	cpi	r25, 0xE8	; 232
    1eb6:	d4 f3       	brlt	.-12     	; 0x1eac <__mulsf3_pse+0x84>
    1eb8:	86 95       	lsr	r24
    1eba:	77 95       	ror	r23
    1ebc:	67 95       	ror	r22
    1ebe:	b7 95       	ror	r27
    1ec0:	f7 95       	ror	r31
    1ec2:	e7 95       	ror	r30
    1ec4:	9f 5f       	subi	r25, 0xFF	; 255
    1ec6:	c1 f7       	brne	.-16     	; 0x1eb8 <__mulsf3_pse+0x90>
    1ec8:	fe 2b       	or	r31, r30
    1eca:	88 0f       	add	r24, r24
    1ecc:	91 1d       	adc	r25, r1
    1ece:	96 95       	lsr	r25
    1ed0:	87 95       	ror	r24
    1ed2:	97 f9       	bld	r25, 7
    1ed4:	08 95       	ret

00001ed6 <__divmodhi4>:
    1ed6:	97 fb       	bst	r25, 7
    1ed8:	07 2e       	mov	r0, r23
    1eda:	16 f4       	brtc	.+4      	; 0x1ee0 <__divmodhi4+0xa>
    1edc:	00 94       	com	r0
    1ede:	07 d0       	rcall	.+14     	; 0x1eee <__divmodhi4_neg1>
    1ee0:	77 fd       	sbrc	r23, 7
    1ee2:	09 d0       	rcall	.+18     	; 0x1ef6 <__divmodhi4_neg2>
    1ee4:	0e 94 12 10 	call	0x2024	; 0x2024 <__udivmodhi4>
    1ee8:	07 fc       	sbrc	r0, 7
    1eea:	05 d0       	rcall	.+10     	; 0x1ef6 <__divmodhi4_neg2>
    1eec:	3e f4       	brtc	.+14     	; 0x1efc <__divmodhi4_exit>

00001eee <__divmodhi4_neg1>:
    1eee:	90 95       	com	r25
    1ef0:	81 95       	neg	r24
    1ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef4:	08 95       	ret

00001ef6 <__divmodhi4_neg2>:
    1ef6:	70 95       	com	r23
    1ef8:	61 95       	neg	r22
    1efa:	7f 4f       	sbci	r23, 0xFF	; 255

00001efc <__divmodhi4_exit>:
    1efc:	08 95       	ret

00001efe <__udivmodsi4>:
    1efe:	a1 e2       	ldi	r26, 0x21	; 33
    1f00:	1a 2e       	mov	r1, r26
    1f02:	aa 1b       	sub	r26, r26
    1f04:	bb 1b       	sub	r27, r27
    1f06:	fd 01       	movw	r30, r26
    1f08:	0d c0       	rjmp	.+26     	; 0x1f24 <__udivmodsi4_ep>

00001f0a <__udivmodsi4_loop>:
    1f0a:	aa 1f       	adc	r26, r26
    1f0c:	bb 1f       	adc	r27, r27
    1f0e:	ee 1f       	adc	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	a2 17       	cp	r26, r18
    1f14:	b3 07       	cpc	r27, r19
    1f16:	e4 07       	cpc	r30, r20
    1f18:	f5 07       	cpc	r31, r21
    1f1a:	20 f0       	brcs	.+8      	; 0x1f24 <__udivmodsi4_ep>
    1f1c:	a2 1b       	sub	r26, r18
    1f1e:	b3 0b       	sbc	r27, r19
    1f20:	e4 0b       	sbc	r30, r20
    1f22:	f5 0b       	sbc	r31, r21

00001f24 <__udivmodsi4_ep>:
    1f24:	66 1f       	adc	r22, r22
    1f26:	77 1f       	adc	r23, r23
    1f28:	88 1f       	adc	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	1a 94       	dec	r1
    1f2e:	69 f7       	brne	.-38     	; 0x1f0a <__udivmodsi4_loop>
    1f30:	60 95       	com	r22
    1f32:	70 95       	com	r23
    1f34:	80 95       	com	r24
    1f36:	90 95       	com	r25
    1f38:	9b 01       	movw	r18, r22
    1f3a:	ac 01       	movw	r20, r24
    1f3c:	bd 01       	movw	r22, r26
    1f3e:	cf 01       	movw	r24, r30
    1f40:	08 95       	ret

00001f42 <__divmodsi4>:
    1f42:	05 2e       	mov	r0, r21
    1f44:	97 fb       	bst	r25, 7
    1f46:	1e f4       	brtc	.+6      	; 0x1f4e <__divmodsi4+0xc>
    1f48:	00 94       	com	r0
    1f4a:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__negsi2>
    1f4e:	57 fd       	sbrc	r21, 7
    1f50:	07 d0       	rcall	.+14     	; 0x1f60 <__divmodsi4_neg2>
    1f52:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__udivmodsi4>
    1f56:	07 fc       	sbrc	r0, 7
    1f58:	03 d0       	rcall	.+6      	; 0x1f60 <__divmodsi4_neg2>
    1f5a:	4e f4       	brtc	.+18     	; 0x1f6e <__divmodsi4_exit>
    1f5c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__negsi2>

00001f60 <__divmodsi4_neg2>:
    1f60:	50 95       	com	r21
    1f62:	40 95       	com	r20
    1f64:	30 95       	com	r19
    1f66:	21 95       	neg	r18
    1f68:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6a:	4f 4f       	sbci	r20, 0xFF	; 255
    1f6c:	5f 4f       	sbci	r21, 0xFF	; 255

00001f6e <__divmodsi4_exit>:
    1f6e:	08 95       	ret

00001f70 <__negsi2>:
    1f70:	90 95       	com	r25
    1f72:	80 95       	com	r24
    1f74:	70 95       	com	r23
    1f76:	61 95       	neg	r22
    1f78:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	08 95       	ret

00001f80 <__umulhisi3>:
    1f80:	a2 9f       	mul	r26, r18
    1f82:	b0 01       	movw	r22, r0
    1f84:	b3 9f       	mul	r27, r19
    1f86:	c0 01       	movw	r24, r0
    1f88:	a3 9f       	mul	r26, r19
    1f8a:	70 0d       	add	r23, r0
    1f8c:	81 1d       	adc	r24, r1
    1f8e:	11 24       	eor	r1, r1
    1f90:	91 1d       	adc	r25, r1
    1f92:	b2 9f       	mul	r27, r18
    1f94:	70 0d       	add	r23, r0
    1f96:	81 1d       	adc	r24, r1
    1f98:	11 24       	eor	r1, r1
    1f9a:	91 1d       	adc	r25, r1
    1f9c:	08 95       	ret

00001f9e <__ashldi3>:
    1f9e:	0f 93       	push	r16
    1fa0:	08 30       	cpi	r16, 0x08	; 8
    1fa2:	90 f0       	brcs	.+36     	; 0x1fc8 <__ashldi3+0x2a>
    1fa4:	98 2f       	mov	r25, r24
    1fa6:	87 2f       	mov	r24, r23
    1fa8:	76 2f       	mov	r23, r22
    1faa:	65 2f       	mov	r22, r21
    1fac:	54 2f       	mov	r21, r20
    1fae:	43 2f       	mov	r20, r19
    1fb0:	32 2f       	mov	r19, r18
    1fb2:	22 27       	eor	r18, r18
    1fb4:	08 50       	subi	r16, 0x08	; 8
    1fb6:	f4 cf       	rjmp	.-24     	; 0x1fa0 <__ashldi3+0x2>
    1fb8:	22 0f       	add	r18, r18
    1fba:	33 1f       	adc	r19, r19
    1fbc:	44 1f       	adc	r20, r20
    1fbe:	55 1f       	adc	r21, r21
    1fc0:	66 1f       	adc	r22, r22
    1fc2:	77 1f       	adc	r23, r23
    1fc4:	88 1f       	adc	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	0a 95       	dec	r16
    1fca:	b2 f7       	brpl	.-20     	; 0x1fb8 <__ashldi3+0x1a>
    1fcc:	0f 91       	pop	r16
    1fce:	08 95       	ret

00001fd0 <__ashrdi3>:
    1fd0:	97 fb       	bst	r25, 7
    1fd2:	10 f8       	bld	r1, 0

00001fd4 <__lshrdi3>:
    1fd4:	16 94       	lsr	r1
    1fd6:	00 08       	sbc	r0, r0
    1fd8:	0f 93       	push	r16
    1fda:	08 30       	cpi	r16, 0x08	; 8
    1fdc:	98 f0       	brcs	.+38     	; 0x2004 <__DATA_REGION_LENGTH__+0x4>
    1fde:	08 50       	subi	r16, 0x08	; 8
    1fe0:	23 2f       	mov	r18, r19
    1fe2:	34 2f       	mov	r19, r20
    1fe4:	45 2f       	mov	r20, r21
    1fe6:	56 2f       	mov	r21, r22
    1fe8:	67 2f       	mov	r22, r23
    1fea:	78 2f       	mov	r23, r24
    1fec:	89 2f       	mov	r24, r25
    1fee:	90 2d       	mov	r25, r0
    1ff0:	f4 cf       	rjmp	.-24     	; 0x1fda <__lshrdi3+0x6>
    1ff2:	05 94       	asr	r0
    1ff4:	97 95       	ror	r25
    1ff6:	87 95       	ror	r24
    1ff8:	77 95       	ror	r23
    1ffa:	67 95       	ror	r22
    1ffc:	57 95       	ror	r21
    1ffe:	47 95       	ror	r20
    2000:	37 95       	ror	r19
    2002:	27 95       	ror	r18
    2004:	0a 95       	dec	r16
    2006:	aa f7       	brpl	.-22     	; 0x1ff2 <__lshrdi3+0x1e>
    2008:	0f 91       	pop	r16
    200a:	08 95       	ret

0000200c <__cmpdi2_s8>:
    200c:	00 24       	eor	r0, r0
    200e:	a7 fd       	sbrc	r26, 7
    2010:	00 94       	com	r0
    2012:	2a 17       	cp	r18, r26
    2014:	30 05       	cpc	r19, r0
    2016:	40 05       	cpc	r20, r0
    2018:	50 05       	cpc	r21, r0
    201a:	60 05       	cpc	r22, r0
    201c:	70 05       	cpc	r23, r0
    201e:	80 05       	cpc	r24, r0
    2020:	90 05       	cpc	r25, r0
    2022:	08 95       	ret

00002024 <__udivmodhi4>:
    2024:	aa 1b       	sub	r26, r26
    2026:	bb 1b       	sub	r27, r27
    2028:	51 e1       	ldi	r21, 0x11	; 17
    202a:	07 c0       	rjmp	.+14     	; 0x203a <__udivmodhi4_ep>

0000202c <__udivmodhi4_loop>:
    202c:	aa 1f       	adc	r26, r26
    202e:	bb 1f       	adc	r27, r27
    2030:	a6 17       	cp	r26, r22
    2032:	b7 07       	cpc	r27, r23
    2034:	10 f0       	brcs	.+4      	; 0x203a <__udivmodhi4_ep>
    2036:	a6 1b       	sub	r26, r22
    2038:	b7 0b       	sbc	r27, r23

0000203a <__udivmodhi4_ep>:
    203a:	88 1f       	adc	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	5a 95       	dec	r21
    2040:	a9 f7       	brne	.-22     	; 0x202c <__udivmodhi4_loop>
    2042:	80 95       	com	r24
    2044:	90 95       	com	r25
    2046:	bc 01       	movw	r22, r24
    2048:	cd 01       	movw	r24, r26
    204a:	08 95       	ret

0000204c <strtol>:
    204c:	a0 e0       	ldi	r26, 0x00	; 0
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	ec e2       	ldi	r30, 0x2C	; 44
    2052:	f0 e1       	ldi	r31, 0x10	; 16
    2054:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__prologue_saves__+0x2>
    2058:	5c 01       	movw	r10, r24
    205a:	6b 01       	movw	r12, r22
    205c:	7a 01       	movw	r14, r20
    205e:	61 15       	cp	r22, r1
    2060:	71 05       	cpc	r23, r1
    2062:	19 f0       	breq	.+6      	; 0x206a <strtol+0x1e>
    2064:	fb 01       	movw	r30, r22
    2066:	80 83       	st	Z, r24
    2068:	91 83       	std	Z+1, r25	; 0x01
    206a:	e1 14       	cp	r14, r1
    206c:	f1 04       	cpc	r15, r1
    206e:	29 f0       	breq	.+10     	; 0x207a <strtol+0x2e>
    2070:	c7 01       	movw	r24, r14
    2072:	02 97       	sbiw	r24, 0x02	; 2
    2074:	83 97       	sbiw	r24, 0x23	; 35
    2076:	08 f0       	brcs	.+2      	; 0x207a <strtol+0x2e>
    2078:	e5 c0       	rjmp	.+458    	; 0x2244 <strtol+0x1f8>
    207a:	e5 01       	movw	r28, r10
    207c:	21 96       	adiw	r28, 0x01	; 1
    207e:	f5 01       	movw	r30, r10
    2080:	10 81       	ld	r17, Z
    2082:	81 2f       	mov	r24, r17
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 3c 11 	call	0x2278	; 0x2278 <isspace>
    208a:	89 2b       	or	r24, r25
    208c:	11 f0       	breq	.+4      	; 0x2092 <strtol+0x46>
    208e:	5e 01       	movw	r10, r28
    2090:	f4 cf       	rjmp	.-24     	; 0x207a <strtol+0x2e>
    2092:	1d 32       	cpi	r17, 0x2D	; 45
    2094:	29 f4       	brne	.+10     	; 0x20a0 <strtol+0x54>
    2096:	21 96       	adiw	r28, 0x01	; 1
    2098:	f5 01       	movw	r30, r10
    209a:	11 81       	ldd	r17, Z+1	; 0x01
    209c:	01 e0       	ldi	r16, 0x01	; 1
    209e:	07 c0       	rjmp	.+14     	; 0x20ae <strtol+0x62>
    20a0:	1b 32       	cpi	r17, 0x2B	; 43
    20a2:	21 f4       	brne	.+8      	; 0x20ac <strtol+0x60>
    20a4:	e5 01       	movw	r28, r10
    20a6:	22 96       	adiw	r28, 0x02	; 2
    20a8:	f5 01       	movw	r30, r10
    20aa:	11 81       	ldd	r17, Z+1	; 0x01
    20ac:	00 e0       	ldi	r16, 0x00	; 0
    20ae:	e1 14       	cp	r14, r1
    20b0:	f1 04       	cpc	r15, r1
    20b2:	09 f1       	breq	.+66     	; 0x20f6 <strtol+0xaa>
    20b4:	f0 e1       	ldi	r31, 0x10	; 16
    20b6:	ef 16       	cp	r14, r31
    20b8:	f1 04       	cpc	r15, r1
    20ba:	29 f4       	brne	.+10     	; 0x20c6 <strtol+0x7a>
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <strtol+0xf0>
    20be:	10 e3       	ldi	r17, 0x30	; 48
    20c0:	e1 14       	cp	r14, r1
    20c2:	f1 04       	cpc	r15, r1
    20c4:	21 f1       	breq	.+72     	; 0x210e <strtol+0xc2>
    20c6:	28 e0       	ldi	r18, 0x08	; 8
    20c8:	e2 16       	cp	r14, r18
    20ca:	f1 04       	cpc	r15, r1
    20cc:	01 f1       	breq	.+64     	; 0x210e <strtol+0xc2>
    20ce:	54 f4       	brge	.+20     	; 0x20e4 <strtol+0x98>
    20d0:	e2 e0       	ldi	r30, 0x02	; 2
    20d2:	ee 16       	cp	r14, r30
    20d4:	f1 04       	cpc	r15, r1
    20d6:	21 f5       	brne	.+72     	; 0x2120 <strtol+0xd4>
    20d8:	81 2c       	mov	r8, r1
    20da:	91 2c       	mov	r9, r1
    20dc:	a1 2c       	mov	r10, r1
    20de:	b0 e4       	ldi	r27, 0x40	; 64
    20e0:	bb 2e       	mov	r11, r27
    20e2:	3e c0       	rjmp	.+124    	; 0x2160 <strtol+0x114>
    20e4:	fa e0       	ldi	r31, 0x0A	; 10
    20e6:	ef 16       	cp	r14, r31
    20e8:	f1 04       	cpc	r15, r1
    20ea:	39 f0       	breq	.+14     	; 0x20fa <strtol+0xae>
    20ec:	20 e1       	ldi	r18, 0x10	; 16
    20ee:	e2 16       	cp	r14, r18
    20f0:	f1 04       	cpc	r15, r1
    20f2:	b1 f4       	brne	.+44     	; 0x2120 <strtol+0xd4>
    20f4:	30 c0       	rjmp	.+96     	; 0x2156 <strtol+0x10a>
    20f6:	10 33       	cpi	r17, 0x30	; 48
    20f8:	19 f1       	breq	.+70     	; 0x2140 <strtol+0xf4>
    20fa:	fa e0       	ldi	r31, 0x0A	; 10
    20fc:	ef 2e       	mov	r14, r31
    20fe:	f1 2c       	mov	r15, r1
    2100:	ac ec       	ldi	r26, 0xCC	; 204
    2102:	8a 2e       	mov	r8, r26
    2104:	98 2c       	mov	r9, r8
    2106:	a8 2c       	mov	r10, r8
    2108:	ac e0       	ldi	r26, 0x0C	; 12
    210a:	ba 2e       	mov	r11, r26
    210c:	29 c0       	rjmp	.+82     	; 0x2160 <strtol+0x114>
    210e:	78 e0       	ldi	r23, 0x08	; 8
    2110:	e7 2e       	mov	r14, r23
    2112:	f1 2c       	mov	r15, r1
    2114:	81 2c       	mov	r8, r1
    2116:	91 2c       	mov	r9, r1
    2118:	a1 2c       	mov	r10, r1
    211a:	e0 e1       	ldi	r30, 0x10	; 16
    211c:	be 2e       	mov	r11, r30
    211e:	20 c0       	rjmp	.+64     	; 0x2160 <strtol+0x114>
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	70 e0       	ldi	r23, 0x00	; 0
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	90 e8       	ldi	r25, 0x80	; 128
    2128:	97 01       	movw	r18, r14
    212a:	0f 2c       	mov	r0, r15
    212c:	00 0c       	add	r0, r0
    212e:	44 0b       	sbc	r20, r20
    2130:	55 0b       	sbc	r21, r21
    2132:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__udivmodsi4>
    2136:	49 01       	movw	r8, r18
    2138:	5a 01       	movw	r10, r20
    213a:	12 c0       	rjmp	.+36     	; 0x2160 <strtol+0x114>
    213c:	10 33       	cpi	r17, 0x30	; 48
    213e:	59 f4       	brne	.+22     	; 0x2156 <strtol+0x10a>
    2140:	88 81       	ld	r24, Y
    2142:	8f 7d       	andi	r24, 0xDF	; 223
    2144:	88 35       	cpi	r24, 0x58	; 88
    2146:	09 f0       	breq	.+2      	; 0x214a <strtol+0xfe>
    2148:	ba cf       	rjmp	.-140    	; 0x20be <strtol+0x72>
    214a:	19 81       	ldd	r17, Y+1	; 0x01
    214c:	22 96       	adiw	r28, 0x02	; 2
    214e:	02 60       	ori	r16, 0x02	; 2
    2150:	80 e1       	ldi	r24, 0x10	; 16
    2152:	e8 2e       	mov	r14, r24
    2154:	f1 2c       	mov	r15, r1
    2156:	81 2c       	mov	r8, r1
    2158:	91 2c       	mov	r9, r1
    215a:	a1 2c       	mov	r10, r1
    215c:	68 e0       	ldi	r22, 0x08	; 8
    215e:	b6 2e       	mov	r11, r22
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	70 e0       	ldi	r23, 0x00	; 0
    2166:	cb 01       	movw	r24, r22
    2168:	27 01       	movw	r4, r14
    216a:	0f 2c       	mov	r0, r15
    216c:	00 0c       	add	r0, r0
    216e:	66 08       	sbc	r6, r6
    2170:	77 08       	sbc	r7, r7
    2172:	fe 01       	movw	r30, r28
    2174:	50 ed       	ldi	r21, 0xD0	; 208
    2176:	35 2e       	mov	r3, r21
    2178:	31 0e       	add	r3, r17
    217a:	29 e0       	ldi	r18, 0x09	; 9
    217c:	23 15       	cp	r18, r3
    217e:	70 f4       	brcc	.+28     	; 0x219c <strtol+0x150>
    2180:	2f eb       	ldi	r18, 0xBF	; 191
    2182:	21 0f       	add	r18, r17
    2184:	2a 31       	cpi	r18, 0x1A	; 26
    2186:	18 f4       	brcc	.+6      	; 0x218e <strtol+0x142>
    2188:	39 ec       	ldi	r19, 0xC9	; 201
    218a:	33 2e       	mov	r3, r19
    218c:	06 c0       	rjmp	.+12     	; 0x219a <strtol+0x14e>
    218e:	2f e9       	ldi	r18, 0x9F	; 159
    2190:	21 0f       	add	r18, r17
    2192:	2a 31       	cpi	r18, 0x1A	; 26
    2194:	18 f5       	brcc	.+70     	; 0x21dc <strtol+0x190>
    2196:	29 ea       	ldi	r18, 0xA9	; 169
    2198:	32 2e       	mov	r3, r18
    219a:	31 0e       	add	r3, r17
    219c:	23 2d       	mov	r18, r3
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	2e 15       	cp	r18, r14
    21a2:	3f 05       	cpc	r19, r15
    21a4:	dc f4       	brge	.+54     	; 0x21dc <strtol+0x190>
    21a6:	47 fd       	sbrc	r20, 7
    21a8:	16 c0       	rjmp	.+44     	; 0x21d6 <strtol+0x18a>
    21aa:	86 16       	cp	r8, r22
    21ac:	97 06       	cpc	r9, r23
    21ae:	a8 06       	cpc	r10, r24
    21b0:	b9 06       	cpc	r11, r25
    21b2:	70 f0       	brcs	.+28     	; 0x21d0 <strtol+0x184>
    21b4:	a3 01       	movw	r20, r6
    21b6:	92 01       	movw	r18, r4
    21b8:	0e 94 6d 14 	call	0x28da	; 0x28da <__mulsi3>
    21bc:	63 0d       	add	r22, r3
    21be:	71 1d       	adc	r23, r1
    21c0:	81 1d       	adc	r24, r1
    21c2:	91 1d       	adc	r25, r1
    21c4:	61 30       	cpi	r22, 0x01	; 1
    21c6:	71 05       	cpc	r23, r1
    21c8:	81 05       	cpc	r24, r1
    21ca:	20 e8       	ldi	r18, 0x80	; 128
    21cc:	92 07       	cpc	r25, r18
    21ce:	10 f0       	brcs	.+4      	; 0x21d4 <strtol+0x188>
    21d0:	4f ef       	ldi	r20, 0xFF	; 255
    21d2:	01 c0       	rjmp	.+2      	; 0x21d6 <strtol+0x18a>
    21d4:	41 e0       	ldi	r20, 0x01	; 1
    21d6:	21 96       	adiw	r28, 0x01	; 1
    21d8:	10 81       	ld	r17, Z
    21da:	cb cf       	rjmp	.-106    	; 0x2172 <strtol+0x126>
    21dc:	20 2f       	mov	r18, r16
    21de:	21 70       	andi	r18, 0x01	; 1
    21e0:	c1 14       	cp	r12, r1
    21e2:	d1 04       	cpc	r13, r1
    21e4:	71 f0       	breq	.+28     	; 0x2202 <strtol+0x1b6>
    21e6:	44 23       	and	r20, r20
    21e8:	29 f0       	breq	.+10     	; 0x21f4 <strtol+0x1a8>
    21ea:	21 97       	sbiw	r28, 0x01	; 1
    21ec:	f6 01       	movw	r30, r12
    21ee:	c0 83       	st	Z, r28
    21f0:	d1 83       	std	Z+1, r29	; 0x01
    21f2:	07 c0       	rjmp	.+14     	; 0x2202 <strtol+0x1b6>
    21f4:	01 ff       	sbrs	r16, 1
    21f6:	19 c0       	rjmp	.+50     	; 0x222a <strtol+0x1de>
    21f8:	22 97       	sbiw	r28, 0x02	; 2
    21fa:	f6 01       	movw	r30, r12
    21fc:	c0 83       	st	Z, r28
    21fe:	d1 83       	std	Z+1, r29	; 0x01
    2200:	14 c0       	rjmp	.+40     	; 0x222a <strtol+0x1de>
    2202:	47 ff       	sbrs	r20, 7
    2204:	12 c0       	rjmp	.+36     	; 0x222a <strtol+0x1de>
    2206:	22 23       	and	r18, r18
    2208:	29 f0       	breq	.+10     	; 0x2214 <strtol+0x1c8>
    220a:	60 e0       	ldi	r22, 0x00	; 0
    220c:	70 e0       	ldi	r23, 0x00	; 0
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	90 e8       	ldi	r25, 0x80	; 128
    2212:	04 c0       	rjmp	.+8      	; 0x221c <strtol+0x1d0>
    2214:	6f ef       	ldi	r22, 0xFF	; 255
    2216:	7f ef       	ldi	r23, 0xFF	; 255
    2218:	8f ef       	ldi	r24, 0xFF	; 255
    221a:	9f e7       	ldi	r25, 0x7F	; 127
    221c:	22 e2       	ldi	r18, 0x22	; 34
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	20 93 0e 66 	sts	0x660E, r18	; 0x80660e <errno>
    2224:	30 93 0f 66 	sts	0x660F, r19	; 0x80660f <errno+0x1>
    2228:	09 c0       	rjmp	.+18     	; 0x223c <strtol+0x1f0>
    222a:	22 23       	and	r18, r18
    222c:	81 f0       	breq	.+32     	; 0x224e <strtol+0x202>
    222e:	90 95       	com	r25
    2230:	80 95       	com	r24
    2232:	70 95       	com	r23
    2234:	61 95       	neg	r22
    2236:	7f 4f       	sbci	r23, 0xFF	; 255
    2238:	8f 4f       	sbci	r24, 0xFF	; 255
    223a:	9f 4f       	sbci	r25, 0xFF	; 255
    223c:	46 2f       	mov	r20, r22
    223e:	37 2f       	mov	r19, r23
    2240:	28 2f       	mov	r18, r24
    2242:	12 c0       	rjmp	.+36     	; 0x2268 <strtol+0x21c>
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0d c0       	rjmp	.+26     	; 0x2268 <strtol+0x21c>
    224e:	97 ff       	sbrs	r25, 7
    2250:	f5 cf       	rjmp	.-22     	; 0x223c <strtol+0x1f0>
    2252:	82 e2       	ldi	r24, 0x22	; 34
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	80 93 0e 66 	sts	0x660E, r24	; 0x80660e <errno>
    225a:	90 93 0f 66 	sts	0x660F, r25	; 0x80660f <errno+0x1>
    225e:	6f ef       	ldi	r22, 0xFF	; 255
    2260:	7f ef       	ldi	r23, 0xFF	; 255
    2262:	8f ef       	ldi	r24, 0xFF	; 255
    2264:	9f e7       	ldi	r25, 0x7F	; 127
    2266:	ea cf       	rjmp	.-44     	; 0x223c <strtol+0x1f0>
    2268:	64 2f       	mov	r22, r20
    226a:	73 2f       	mov	r23, r19
    226c:	82 2f       	mov	r24, r18
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	e1 e1       	ldi	r30, 0x11	; 17
    2274:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__epilogue_restores__+0x2>

00002278 <isspace>:
    2278:	91 11       	cpse	r25, r1
    227a:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__ctype_isfalse>
    227e:	80 32       	cpi	r24, 0x20	; 32
    2280:	19 f0       	breq	.+6      	; 0x2288 <isspace+0x10>
    2282:	89 50       	subi	r24, 0x09	; 9
    2284:	85 50       	subi	r24, 0x05	; 5
    2286:	c8 f7       	brcc	.-14     	; 0x227a <isspace+0x2>
    2288:	08 95       	ret

0000228a <strtok>:
    228a:	40 ea       	ldi	r20, 0xA0	; 160
    228c:	55 e6       	ldi	r21, 0x65	; 101
    228e:	0e 94 80 11 	call	0x2300	; 0x2300 <strtok_r>
    2292:	08 95       	ret

00002294 <memcpy>:
    2294:	fb 01       	movw	r30, r22
    2296:	dc 01       	movw	r26, r24
    2298:	02 c0       	rjmp	.+4      	; 0x229e <memcpy+0xa>
    229a:	01 90       	ld	r0, Z+
    229c:	0d 92       	st	X+, r0
    229e:	41 50       	subi	r20, 0x01	; 1
    22a0:	50 40       	sbci	r21, 0x00	; 0
    22a2:	d8 f7       	brcc	.-10     	; 0x229a <memcpy+0x6>
    22a4:	08 95       	ret

000022a6 <strcmp>:
    22a6:	fb 01       	movw	r30, r22
    22a8:	dc 01       	movw	r26, r24
    22aa:	8d 91       	ld	r24, X+
    22ac:	01 90       	ld	r0, Z+
    22ae:	80 19       	sub	r24, r0
    22b0:	01 10       	cpse	r0, r1
    22b2:	d9 f3       	breq	.-10     	; 0x22aa <strcmp+0x4>
    22b4:	99 0b       	sbc	r25, r25
    22b6:	08 95       	ret

000022b8 <strcpy>:
    22b8:	fb 01       	movw	r30, r22
    22ba:	dc 01       	movw	r26, r24
    22bc:	01 90       	ld	r0, Z+
    22be:	0d 92       	st	X+, r0
    22c0:	00 20       	and	r0, r0
    22c2:	e1 f7       	brne	.-8      	; 0x22bc <strcpy+0x4>
    22c4:	08 95       	ret

000022c6 <strncmp>:
    22c6:	fb 01       	movw	r30, r22
    22c8:	dc 01       	movw	r26, r24
    22ca:	41 50       	subi	r20, 0x01	; 1
    22cc:	50 40       	sbci	r21, 0x00	; 0
    22ce:	30 f0       	brcs	.+12     	; 0x22dc <strncmp+0x16>
    22d0:	8d 91       	ld	r24, X+
    22d2:	01 90       	ld	r0, Z+
    22d4:	80 19       	sub	r24, r0
    22d6:	19 f4       	brne	.+6      	; 0x22de <strncmp+0x18>
    22d8:	00 20       	and	r0, r0
    22da:	b9 f7       	brne	.-18     	; 0x22ca <strncmp+0x4>
    22dc:	88 1b       	sub	r24, r24
    22de:	99 0b       	sbc	r25, r25
    22e0:	08 95       	ret

000022e2 <strncpy>:
    22e2:	fb 01       	movw	r30, r22
    22e4:	dc 01       	movw	r26, r24
    22e6:	41 50       	subi	r20, 0x01	; 1
    22e8:	50 40       	sbci	r21, 0x00	; 0
    22ea:	48 f0       	brcs	.+18     	; 0x22fe <strncpy+0x1c>
    22ec:	01 90       	ld	r0, Z+
    22ee:	0d 92       	st	X+, r0
    22f0:	00 20       	and	r0, r0
    22f2:	c9 f7       	brne	.-14     	; 0x22e6 <strncpy+0x4>
    22f4:	01 c0       	rjmp	.+2      	; 0x22f8 <strncpy+0x16>
    22f6:	1d 92       	st	X+, r1
    22f8:	41 50       	subi	r20, 0x01	; 1
    22fa:	50 40       	sbci	r21, 0x00	; 0
    22fc:	e0 f7       	brcc	.-8      	; 0x22f6 <strncpy+0x14>
    22fe:	08 95       	ret

00002300 <strtok_r>:
    2300:	fa 01       	movw	r30, r20
    2302:	a1 91       	ld	r26, Z+
    2304:	b0 81       	ld	r27, Z
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	19 f4       	brne	.+6      	; 0x2310 <strtok_r+0x10>
    230a:	10 97       	sbiw	r26, 0x00	; 0
    230c:	e1 f0       	breq	.+56     	; 0x2346 <strtok_r+0x46>
    230e:	cd 01       	movw	r24, r26
    2310:	dc 01       	movw	r26, r24
    2312:	cd 01       	movw	r24, r26
    2314:	0d 90       	ld	r0, X+
    2316:	00 20       	and	r0, r0
    2318:	11 f4       	brne	.+4      	; 0x231e <strtok_r+0x1e>
    231a:	c0 01       	movw	r24, r0
    231c:	13 c0       	rjmp	.+38     	; 0x2344 <strtok_r+0x44>
    231e:	fb 01       	movw	r30, r22
    2320:	21 91       	ld	r18, Z+
    2322:	22 23       	and	r18, r18
    2324:	19 f0       	breq	.+6      	; 0x232c <strtok_r+0x2c>
    2326:	20 15       	cp	r18, r0
    2328:	d9 f7       	brne	.-10     	; 0x2320 <strtok_r+0x20>
    232a:	f3 cf       	rjmp	.-26     	; 0x2312 <strtok_r+0x12>
    232c:	fb 01       	movw	r30, r22
    232e:	21 91       	ld	r18, Z+
    2330:	20 15       	cp	r18, r0
    2332:	19 f4       	brne	.+6      	; 0x233a <strtok_r+0x3a>
    2334:	1e 92       	st	-X, r1
    2336:	11 96       	adiw	r26, 0x01	; 1
    2338:	06 c0       	rjmp	.+12     	; 0x2346 <strtok_r+0x46>
    233a:	22 23       	and	r18, r18
    233c:	c1 f7       	brne	.-16     	; 0x232e <strtok_r+0x2e>
    233e:	0d 90       	ld	r0, X+
    2340:	00 20       	and	r0, r0
    2342:	a1 f7       	brne	.-24     	; 0x232c <strtok_r+0x2c>
    2344:	d0 01       	movw	r26, r0
    2346:	fa 01       	movw	r30, r20
    2348:	a1 93       	st	Z+, r26
    234a:	b0 83       	st	Z, r27
    234c:	08 95       	ret

0000234e <vsnprintf>:
    234e:	ae e0       	ldi	r26, 0x0E	; 14
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	ed ea       	ldi	r30, 0xAD	; 173
    2354:	f1 e1       	ldi	r31, 0x11	; 17
    2356:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x1c>
    235a:	8c 01       	movw	r16, r24
    235c:	fa 01       	movw	r30, r20
    235e:	86 e0       	ldi	r24, 0x06	; 6
    2360:	8c 83       	std	Y+4, r24	; 0x04
    2362:	09 83       	std	Y+1, r16	; 0x01
    2364:	1a 83       	std	Y+2, r17	; 0x02
    2366:	77 ff       	sbrs	r23, 7
    2368:	02 c0       	rjmp	.+4      	; 0x236e <vsnprintf+0x20>
    236a:	60 e0       	ldi	r22, 0x00	; 0
    236c:	70 e8       	ldi	r23, 0x80	; 128
    236e:	cb 01       	movw	r24, r22
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	9e 83       	std	Y+6, r25	; 0x06
    2376:	a9 01       	movw	r20, r18
    2378:	bf 01       	movw	r22, r30
    237a:	ce 01       	movw	r24, r28
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <vfprintf>
    2382:	4d 81       	ldd	r20, Y+5	; 0x05
    2384:	5e 81       	ldd	r21, Y+6	; 0x06
    2386:	57 fd       	sbrc	r21, 7
    2388:	0a c0       	rjmp	.+20     	; 0x239e <vsnprintf+0x50>
    238a:	2f 81       	ldd	r18, Y+7	; 0x07
    238c:	38 85       	ldd	r19, Y+8	; 0x08
    238e:	42 17       	cp	r20, r18
    2390:	53 07       	cpc	r21, r19
    2392:	0c f4       	brge	.+2      	; 0x2396 <vsnprintf+0x48>
    2394:	9a 01       	movw	r18, r20
    2396:	f8 01       	movw	r30, r16
    2398:	e2 0f       	add	r30, r18
    239a:	f3 1f       	adc	r31, r19
    239c:	10 82       	st	Z, r1
    239e:	2e 96       	adiw	r28, 0x0e	; 14
    23a0:	e4 e0       	ldi	r30, 0x04	; 4
    23a2:	0c 94 af 14 	jmp	0x295e	; 0x295e <__epilogue_restores__+0x1c>

000023a6 <vfprintf>:
    23a6:	ab e0       	ldi	r26, 0x0B	; 11
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e9 ed       	ldi	r30, 0xD9	; 217
    23ac:	f1 e1       	ldi	r31, 0x11	; 17
    23ae:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__prologue_saves__>
    23b2:	6c 01       	movw	r12, r24
    23b4:	7b 01       	movw	r14, r22
    23b6:	8a 01       	movw	r16, r20
    23b8:	fc 01       	movw	r30, r24
    23ba:	16 82       	std	Z+6, r1	; 0x06
    23bc:	17 82       	std	Z+7, r1	; 0x07
    23be:	83 81       	ldd	r24, Z+3	; 0x03
    23c0:	81 ff       	sbrs	r24, 1
    23c2:	cc c1       	rjmp	.+920    	; 0x275c <vfprintf+0x3b6>
    23c4:	ce 01       	movw	r24, r28
    23c6:	01 96       	adiw	r24, 0x01	; 1
    23c8:	3c 01       	movw	r6, r24
    23ca:	f6 01       	movw	r30, r12
    23cc:	93 81       	ldd	r25, Z+3	; 0x03
    23ce:	f7 01       	movw	r30, r14
    23d0:	93 fd       	sbrc	r25, 3
    23d2:	85 91       	lpm	r24, Z+
    23d4:	93 ff       	sbrs	r25, 3
    23d6:	81 91       	ld	r24, Z+
    23d8:	7f 01       	movw	r14, r30
    23da:	88 23       	and	r24, r24
    23dc:	09 f4       	brne	.+2      	; 0x23e0 <vfprintf+0x3a>
    23de:	ba c1       	rjmp	.+884    	; 0x2754 <vfprintf+0x3ae>
    23e0:	85 32       	cpi	r24, 0x25	; 37
    23e2:	39 f4       	brne	.+14     	; 0x23f2 <vfprintf+0x4c>
    23e4:	93 fd       	sbrc	r25, 3
    23e6:	85 91       	lpm	r24, Z+
    23e8:	93 ff       	sbrs	r25, 3
    23ea:	81 91       	ld	r24, Z+
    23ec:	7f 01       	movw	r14, r30
    23ee:	85 32       	cpi	r24, 0x25	; 37
    23f0:	29 f4       	brne	.+10     	; 0x23fc <vfprintf+0x56>
    23f2:	b6 01       	movw	r22, r12
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	0e 94 cd 13 	call	0x279a	; 0x279a <fputc>
    23fa:	e7 cf       	rjmp	.-50     	; 0x23ca <vfprintf+0x24>
    23fc:	91 2c       	mov	r9, r1
    23fe:	21 2c       	mov	r2, r1
    2400:	31 2c       	mov	r3, r1
    2402:	ff e1       	ldi	r31, 0x1F	; 31
    2404:	f3 15       	cp	r31, r3
    2406:	d8 f0       	brcs	.+54     	; 0x243e <vfprintf+0x98>
    2408:	8b 32       	cpi	r24, 0x2B	; 43
    240a:	79 f0       	breq	.+30     	; 0x242a <vfprintf+0x84>
    240c:	38 f4       	brcc	.+14     	; 0x241c <vfprintf+0x76>
    240e:	80 32       	cpi	r24, 0x20	; 32
    2410:	79 f0       	breq	.+30     	; 0x2430 <vfprintf+0x8a>
    2412:	83 32       	cpi	r24, 0x23	; 35
    2414:	a1 f4       	brne	.+40     	; 0x243e <vfprintf+0x98>
    2416:	23 2d       	mov	r18, r3
    2418:	20 61       	ori	r18, 0x10	; 16
    241a:	1d c0       	rjmp	.+58     	; 0x2456 <vfprintf+0xb0>
    241c:	8d 32       	cpi	r24, 0x2D	; 45
    241e:	61 f0       	breq	.+24     	; 0x2438 <vfprintf+0x92>
    2420:	80 33       	cpi	r24, 0x30	; 48
    2422:	69 f4       	brne	.+26     	; 0x243e <vfprintf+0x98>
    2424:	23 2d       	mov	r18, r3
    2426:	21 60       	ori	r18, 0x01	; 1
    2428:	16 c0       	rjmp	.+44     	; 0x2456 <vfprintf+0xb0>
    242a:	83 2d       	mov	r24, r3
    242c:	82 60       	ori	r24, 0x02	; 2
    242e:	38 2e       	mov	r3, r24
    2430:	e3 2d       	mov	r30, r3
    2432:	e4 60       	ori	r30, 0x04	; 4
    2434:	3e 2e       	mov	r3, r30
    2436:	2a c0       	rjmp	.+84     	; 0x248c <vfprintf+0xe6>
    2438:	f3 2d       	mov	r31, r3
    243a:	f8 60       	ori	r31, 0x08	; 8
    243c:	1d c0       	rjmp	.+58     	; 0x2478 <vfprintf+0xd2>
    243e:	37 fc       	sbrc	r3, 7
    2440:	2d c0       	rjmp	.+90     	; 0x249c <vfprintf+0xf6>
    2442:	20 ed       	ldi	r18, 0xD0	; 208
    2444:	28 0f       	add	r18, r24
    2446:	2a 30       	cpi	r18, 0x0A	; 10
    2448:	40 f0       	brcs	.+16     	; 0x245a <vfprintf+0xb4>
    244a:	8e 32       	cpi	r24, 0x2E	; 46
    244c:	b9 f4       	brne	.+46     	; 0x247c <vfprintf+0xd6>
    244e:	36 fc       	sbrc	r3, 6
    2450:	81 c1       	rjmp	.+770    	; 0x2754 <vfprintf+0x3ae>
    2452:	23 2d       	mov	r18, r3
    2454:	20 64       	ori	r18, 0x40	; 64
    2456:	32 2e       	mov	r3, r18
    2458:	19 c0       	rjmp	.+50     	; 0x248c <vfprintf+0xe6>
    245a:	36 fe       	sbrs	r3, 6
    245c:	06 c0       	rjmp	.+12     	; 0x246a <vfprintf+0xc4>
    245e:	8a e0       	ldi	r24, 0x0A	; 10
    2460:	98 9e       	mul	r9, r24
    2462:	20 0d       	add	r18, r0
    2464:	11 24       	eor	r1, r1
    2466:	92 2e       	mov	r9, r18
    2468:	11 c0       	rjmp	.+34     	; 0x248c <vfprintf+0xe6>
    246a:	ea e0       	ldi	r30, 0x0A	; 10
    246c:	2e 9e       	mul	r2, r30
    246e:	20 0d       	add	r18, r0
    2470:	11 24       	eor	r1, r1
    2472:	22 2e       	mov	r2, r18
    2474:	f3 2d       	mov	r31, r3
    2476:	f0 62       	ori	r31, 0x20	; 32
    2478:	3f 2e       	mov	r3, r31
    247a:	08 c0       	rjmp	.+16     	; 0x248c <vfprintf+0xe6>
    247c:	8c 36       	cpi	r24, 0x6C	; 108
    247e:	21 f4       	brne	.+8      	; 0x2488 <vfprintf+0xe2>
    2480:	83 2d       	mov	r24, r3
    2482:	80 68       	ori	r24, 0x80	; 128
    2484:	38 2e       	mov	r3, r24
    2486:	02 c0       	rjmp	.+4      	; 0x248c <vfprintf+0xe6>
    2488:	88 36       	cpi	r24, 0x68	; 104
    248a:	41 f4       	brne	.+16     	; 0x249c <vfprintf+0xf6>
    248c:	f7 01       	movw	r30, r14
    248e:	93 fd       	sbrc	r25, 3
    2490:	85 91       	lpm	r24, Z+
    2492:	93 ff       	sbrs	r25, 3
    2494:	81 91       	ld	r24, Z+
    2496:	7f 01       	movw	r14, r30
    2498:	81 11       	cpse	r24, r1
    249a:	b3 cf       	rjmp	.-154    	; 0x2402 <vfprintf+0x5c>
    249c:	98 2f       	mov	r25, r24
    249e:	9f 7d       	andi	r25, 0xDF	; 223
    24a0:	95 54       	subi	r25, 0x45	; 69
    24a2:	93 30       	cpi	r25, 0x03	; 3
    24a4:	28 f4       	brcc	.+10     	; 0x24b0 <vfprintf+0x10a>
    24a6:	0c 5f       	subi	r16, 0xFC	; 252
    24a8:	1f 4f       	sbci	r17, 0xFF	; 255
    24aa:	9f e3       	ldi	r25, 0x3F	; 63
    24ac:	99 83       	std	Y+1, r25	; 0x01
    24ae:	0d c0       	rjmp	.+26     	; 0x24ca <vfprintf+0x124>
    24b0:	83 36       	cpi	r24, 0x63	; 99
    24b2:	31 f0       	breq	.+12     	; 0x24c0 <vfprintf+0x11a>
    24b4:	83 37       	cpi	r24, 0x73	; 115
    24b6:	71 f0       	breq	.+28     	; 0x24d4 <vfprintf+0x12e>
    24b8:	83 35       	cpi	r24, 0x53	; 83
    24ba:	09 f0       	breq	.+2      	; 0x24be <vfprintf+0x118>
    24bc:	59 c0       	rjmp	.+178    	; 0x2570 <vfprintf+0x1ca>
    24be:	21 c0       	rjmp	.+66     	; 0x2502 <vfprintf+0x15c>
    24c0:	f8 01       	movw	r30, r16
    24c2:	80 81       	ld	r24, Z
    24c4:	89 83       	std	Y+1, r24	; 0x01
    24c6:	0e 5f       	subi	r16, 0xFE	; 254
    24c8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ca:	88 24       	eor	r8, r8
    24cc:	83 94       	inc	r8
    24ce:	91 2c       	mov	r9, r1
    24d0:	53 01       	movw	r10, r6
    24d2:	13 c0       	rjmp	.+38     	; 0x24fa <vfprintf+0x154>
    24d4:	28 01       	movw	r4, r16
    24d6:	f2 e0       	ldi	r31, 0x02	; 2
    24d8:	4f 0e       	add	r4, r31
    24da:	51 1c       	adc	r5, r1
    24dc:	f8 01       	movw	r30, r16
    24de:	a0 80       	ld	r10, Z
    24e0:	b1 80       	ldd	r11, Z+1	; 0x01
    24e2:	36 fe       	sbrs	r3, 6
    24e4:	03 c0       	rjmp	.+6      	; 0x24ec <vfprintf+0x146>
    24e6:	69 2d       	mov	r22, r9
    24e8:	70 e0       	ldi	r23, 0x00	; 0
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <vfprintf+0x14a>
    24ec:	6f ef       	ldi	r22, 0xFF	; 255
    24ee:	7f ef       	ldi	r23, 0xFF	; 255
    24f0:	c5 01       	movw	r24, r10
    24f2:	0e 94 c2 13 	call	0x2784	; 0x2784 <strnlen>
    24f6:	4c 01       	movw	r8, r24
    24f8:	82 01       	movw	r16, r4
    24fa:	f3 2d       	mov	r31, r3
    24fc:	ff 77       	andi	r31, 0x7F	; 127
    24fe:	3f 2e       	mov	r3, r31
    2500:	16 c0       	rjmp	.+44     	; 0x252e <vfprintf+0x188>
    2502:	28 01       	movw	r4, r16
    2504:	22 e0       	ldi	r18, 0x02	; 2
    2506:	42 0e       	add	r4, r18
    2508:	51 1c       	adc	r5, r1
    250a:	f8 01       	movw	r30, r16
    250c:	a0 80       	ld	r10, Z
    250e:	b1 80       	ldd	r11, Z+1	; 0x01
    2510:	36 fe       	sbrs	r3, 6
    2512:	03 c0       	rjmp	.+6      	; 0x251a <vfprintf+0x174>
    2514:	69 2d       	mov	r22, r9
    2516:	70 e0       	ldi	r23, 0x00	; 0
    2518:	02 c0       	rjmp	.+4      	; 0x251e <vfprintf+0x178>
    251a:	6f ef       	ldi	r22, 0xFF	; 255
    251c:	7f ef       	ldi	r23, 0xFF	; 255
    251e:	c5 01       	movw	r24, r10
    2520:	0e 94 b7 13 	call	0x276e	; 0x276e <strnlen_P>
    2524:	4c 01       	movw	r8, r24
    2526:	f3 2d       	mov	r31, r3
    2528:	f0 68       	ori	r31, 0x80	; 128
    252a:	3f 2e       	mov	r3, r31
    252c:	82 01       	movw	r16, r4
    252e:	33 fc       	sbrc	r3, 3
    2530:	1b c0       	rjmp	.+54     	; 0x2568 <vfprintf+0x1c2>
    2532:	82 2d       	mov	r24, r2
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	88 16       	cp	r8, r24
    2538:	99 06       	cpc	r9, r25
    253a:	b0 f4       	brcc	.+44     	; 0x2568 <vfprintf+0x1c2>
    253c:	b6 01       	movw	r22, r12
    253e:	80 e2       	ldi	r24, 0x20	; 32
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	0e 94 cd 13 	call	0x279a	; 0x279a <fputc>
    2546:	2a 94       	dec	r2
    2548:	f4 cf       	rjmp	.-24     	; 0x2532 <vfprintf+0x18c>
    254a:	f5 01       	movw	r30, r10
    254c:	37 fc       	sbrc	r3, 7
    254e:	85 91       	lpm	r24, Z+
    2550:	37 fe       	sbrs	r3, 7
    2552:	81 91       	ld	r24, Z+
    2554:	5f 01       	movw	r10, r30
    2556:	b6 01       	movw	r22, r12
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	0e 94 cd 13 	call	0x279a	; 0x279a <fputc>
    255e:	21 10       	cpse	r2, r1
    2560:	2a 94       	dec	r2
    2562:	21 e0       	ldi	r18, 0x01	; 1
    2564:	82 1a       	sub	r8, r18
    2566:	91 08       	sbc	r9, r1
    2568:	81 14       	cp	r8, r1
    256a:	91 04       	cpc	r9, r1
    256c:	71 f7       	brne	.-36     	; 0x254a <vfprintf+0x1a4>
    256e:	e8 c0       	rjmp	.+464    	; 0x2740 <vfprintf+0x39a>
    2570:	84 36       	cpi	r24, 0x64	; 100
    2572:	11 f0       	breq	.+4      	; 0x2578 <vfprintf+0x1d2>
    2574:	89 36       	cpi	r24, 0x69	; 105
    2576:	41 f5       	brne	.+80     	; 0x25c8 <vfprintf+0x222>
    2578:	f8 01       	movw	r30, r16
    257a:	37 fe       	sbrs	r3, 7
    257c:	07 c0       	rjmp	.+14     	; 0x258c <vfprintf+0x1e6>
    257e:	60 81       	ld	r22, Z
    2580:	71 81       	ldd	r23, Z+1	; 0x01
    2582:	82 81       	ldd	r24, Z+2	; 0x02
    2584:	93 81       	ldd	r25, Z+3	; 0x03
    2586:	0c 5f       	subi	r16, 0xFC	; 252
    2588:	1f 4f       	sbci	r17, 0xFF	; 255
    258a:	08 c0       	rjmp	.+16     	; 0x259c <vfprintf+0x1f6>
    258c:	60 81       	ld	r22, Z
    258e:	71 81       	ldd	r23, Z+1	; 0x01
    2590:	07 2e       	mov	r0, r23
    2592:	00 0c       	add	r0, r0
    2594:	88 0b       	sbc	r24, r24
    2596:	99 0b       	sbc	r25, r25
    2598:	0e 5f       	subi	r16, 0xFE	; 254
    259a:	1f 4f       	sbci	r17, 0xFF	; 255
    259c:	f3 2d       	mov	r31, r3
    259e:	ff 76       	andi	r31, 0x6F	; 111
    25a0:	3f 2e       	mov	r3, r31
    25a2:	97 ff       	sbrs	r25, 7
    25a4:	09 c0       	rjmp	.+18     	; 0x25b8 <vfprintf+0x212>
    25a6:	90 95       	com	r25
    25a8:	80 95       	com	r24
    25aa:	70 95       	com	r23
    25ac:	61 95       	neg	r22
    25ae:	7f 4f       	sbci	r23, 0xFF	; 255
    25b0:	8f 4f       	sbci	r24, 0xFF	; 255
    25b2:	9f 4f       	sbci	r25, 0xFF	; 255
    25b4:	f0 68       	ori	r31, 0x80	; 128
    25b6:	3f 2e       	mov	r3, r31
    25b8:	2a e0       	ldi	r18, 0x0A	; 10
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	a3 01       	movw	r20, r6
    25be:	0e 94 09 14 	call	0x2812	; 0x2812 <__ultoa_invert>
    25c2:	88 2e       	mov	r8, r24
    25c4:	86 18       	sub	r8, r6
    25c6:	45 c0       	rjmp	.+138    	; 0x2652 <vfprintf+0x2ac>
    25c8:	85 37       	cpi	r24, 0x75	; 117
    25ca:	31 f4       	brne	.+12     	; 0x25d8 <vfprintf+0x232>
    25cc:	23 2d       	mov	r18, r3
    25ce:	2f 7e       	andi	r18, 0xEF	; 239
    25d0:	b2 2e       	mov	r11, r18
    25d2:	2a e0       	ldi	r18, 0x0A	; 10
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	25 c0       	rjmp	.+74     	; 0x2622 <vfprintf+0x27c>
    25d8:	93 2d       	mov	r25, r3
    25da:	99 7f       	andi	r25, 0xF9	; 249
    25dc:	b9 2e       	mov	r11, r25
    25de:	8f 36       	cpi	r24, 0x6F	; 111
    25e0:	c1 f0       	breq	.+48     	; 0x2612 <vfprintf+0x26c>
    25e2:	18 f4       	brcc	.+6      	; 0x25ea <vfprintf+0x244>
    25e4:	88 35       	cpi	r24, 0x58	; 88
    25e6:	79 f0       	breq	.+30     	; 0x2606 <vfprintf+0x260>
    25e8:	b5 c0       	rjmp	.+362    	; 0x2754 <vfprintf+0x3ae>
    25ea:	80 37       	cpi	r24, 0x70	; 112
    25ec:	19 f0       	breq	.+6      	; 0x25f4 <vfprintf+0x24e>
    25ee:	88 37       	cpi	r24, 0x78	; 120
    25f0:	21 f0       	breq	.+8      	; 0x25fa <vfprintf+0x254>
    25f2:	b0 c0       	rjmp	.+352    	; 0x2754 <vfprintf+0x3ae>
    25f4:	e9 2f       	mov	r30, r25
    25f6:	e0 61       	ori	r30, 0x10	; 16
    25f8:	be 2e       	mov	r11, r30
    25fa:	b4 fe       	sbrs	r11, 4
    25fc:	0d c0       	rjmp	.+26     	; 0x2618 <vfprintf+0x272>
    25fe:	fb 2d       	mov	r31, r11
    2600:	f4 60       	ori	r31, 0x04	; 4
    2602:	bf 2e       	mov	r11, r31
    2604:	09 c0       	rjmp	.+18     	; 0x2618 <vfprintf+0x272>
    2606:	34 fe       	sbrs	r3, 4
    2608:	0a c0       	rjmp	.+20     	; 0x261e <vfprintf+0x278>
    260a:	29 2f       	mov	r18, r25
    260c:	26 60       	ori	r18, 0x06	; 6
    260e:	b2 2e       	mov	r11, r18
    2610:	06 c0       	rjmp	.+12     	; 0x261e <vfprintf+0x278>
    2612:	28 e0       	ldi	r18, 0x08	; 8
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	05 c0       	rjmp	.+10     	; 0x2622 <vfprintf+0x27c>
    2618:	20 e1       	ldi	r18, 0x10	; 16
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	02 c0       	rjmp	.+4      	; 0x2622 <vfprintf+0x27c>
    261e:	20 e1       	ldi	r18, 0x10	; 16
    2620:	32 e0       	ldi	r19, 0x02	; 2
    2622:	f8 01       	movw	r30, r16
    2624:	b7 fe       	sbrs	r11, 7
    2626:	07 c0       	rjmp	.+14     	; 0x2636 <vfprintf+0x290>
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	0c 5f       	subi	r16, 0xFC	; 252
    2632:	1f 4f       	sbci	r17, 0xFF	; 255
    2634:	06 c0       	rjmp	.+12     	; 0x2642 <vfprintf+0x29c>
    2636:	60 81       	ld	r22, Z
    2638:	71 81       	ldd	r23, Z+1	; 0x01
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	0e 5f       	subi	r16, 0xFE	; 254
    2640:	1f 4f       	sbci	r17, 0xFF	; 255
    2642:	a3 01       	movw	r20, r6
    2644:	0e 94 09 14 	call	0x2812	; 0x2812 <__ultoa_invert>
    2648:	88 2e       	mov	r8, r24
    264a:	86 18       	sub	r8, r6
    264c:	fb 2d       	mov	r31, r11
    264e:	ff 77       	andi	r31, 0x7F	; 127
    2650:	3f 2e       	mov	r3, r31
    2652:	36 fe       	sbrs	r3, 6
    2654:	0d c0       	rjmp	.+26     	; 0x2670 <vfprintf+0x2ca>
    2656:	23 2d       	mov	r18, r3
    2658:	2e 7f       	andi	r18, 0xFE	; 254
    265a:	a2 2e       	mov	r10, r18
    265c:	89 14       	cp	r8, r9
    265e:	58 f4       	brcc	.+22     	; 0x2676 <vfprintf+0x2d0>
    2660:	34 fe       	sbrs	r3, 4
    2662:	0b c0       	rjmp	.+22     	; 0x267a <vfprintf+0x2d4>
    2664:	32 fc       	sbrc	r3, 2
    2666:	09 c0       	rjmp	.+18     	; 0x267a <vfprintf+0x2d4>
    2668:	83 2d       	mov	r24, r3
    266a:	8e 7e       	andi	r24, 0xEE	; 238
    266c:	a8 2e       	mov	r10, r24
    266e:	05 c0       	rjmp	.+10     	; 0x267a <vfprintf+0x2d4>
    2670:	b8 2c       	mov	r11, r8
    2672:	a3 2c       	mov	r10, r3
    2674:	03 c0       	rjmp	.+6      	; 0x267c <vfprintf+0x2d6>
    2676:	b8 2c       	mov	r11, r8
    2678:	01 c0       	rjmp	.+2      	; 0x267c <vfprintf+0x2d6>
    267a:	b9 2c       	mov	r11, r9
    267c:	a4 fe       	sbrs	r10, 4
    267e:	0f c0       	rjmp	.+30     	; 0x269e <vfprintf+0x2f8>
    2680:	fe 01       	movw	r30, r28
    2682:	e8 0d       	add	r30, r8
    2684:	f1 1d       	adc	r31, r1
    2686:	80 81       	ld	r24, Z
    2688:	80 33       	cpi	r24, 0x30	; 48
    268a:	21 f4       	brne	.+8      	; 0x2694 <vfprintf+0x2ee>
    268c:	9a 2d       	mov	r25, r10
    268e:	99 7e       	andi	r25, 0xE9	; 233
    2690:	a9 2e       	mov	r10, r25
    2692:	09 c0       	rjmp	.+18     	; 0x26a6 <vfprintf+0x300>
    2694:	a2 fe       	sbrs	r10, 2
    2696:	06 c0       	rjmp	.+12     	; 0x26a4 <vfprintf+0x2fe>
    2698:	b3 94       	inc	r11
    269a:	b3 94       	inc	r11
    269c:	04 c0       	rjmp	.+8      	; 0x26a6 <vfprintf+0x300>
    269e:	8a 2d       	mov	r24, r10
    26a0:	86 78       	andi	r24, 0x86	; 134
    26a2:	09 f0       	breq	.+2      	; 0x26a6 <vfprintf+0x300>
    26a4:	b3 94       	inc	r11
    26a6:	a3 fc       	sbrc	r10, 3
    26a8:	11 c0       	rjmp	.+34     	; 0x26cc <vfprintf+0x326>
    26aa:	a0 fe       	sbrs	r10, 0
    26ac:	06 c0       	rjmp	.+12     	; 0x26ba <vfprintf+0x314>
    26ae:	b2 14       	cp	r11, r2
    26b0:	88 f4       	brcc	.+34     	; 0x26d4 <vfprintf+0x32e>
    26b2:	28 0c       	add	r2, r8
    26b4:	92 2c       	mov	r9, r2
    26b6:	9b 18       	sub	r9, r11
    26b8:	0e c0       	rjmp	.+28     	; 0x26d6 <vfprintf+0x330>
    26ba:	b2 14       	cp	r11, r2
    26bc:	60 f4       	brcc	.+24     	; 0x26d6 <vfprintf+0x330>
    26be:	b6 01       	movw	r22, r12
    26c0:	80 e2       	ldi	r24, 0x20	; 32
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	0e 94 cd 13 	call	0x279a	; 0x279a <fputc>
    26c8:	b3 94       	inc	r11
    26ca:	f7 cf       	rjmp	.-18     	; 0x26ba <vfprintf+0x314>
    26cc:	b2 14       	cp	r11, r2
    26ce:	18 f4       	brcc	.+6      	; 0x26d6 <vfprintf+0x330>
    26d0:	2b 18       	sub	r2, r11
    26d2:	02 c0       	rjmp	.+4      	; 0x26d8 <vfprintf+0x332>
    26d4:	98 2c       	mov	r9, r8
    26d6:	21 2c       	mov	r2, r1
    26d8:	a4 fe       	sbrs	r10, 4
    26da:	10 c0       	rjmp	.+32     	; 0x26fc <vfprintf+0x356>
    26dc:	b6 01       	movw	r22, r12
    26de:	80 e3       	ldi	r24, 0x30	; 48
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 94 cd 13 	call	0x279a	; 0x279a <fputc>
    26e6:	a2 fe       	sbrs	r10, 2
    26e8:	17 c0       	rjmp	.+46     	; 0x2718 <vfprintf+0x372>
    26ea:	a1 fc       	sbrc	r10, 1
    26ec:	03 c0       	rjmp	.+6      	; 0x26f4 <vfprintf+0x34e>
    26ee:	88 e7       	ldi	r24, 0x78	; 120
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <vfprintf+0x352>
    26f4:	88 e5       	ldi	r24, 0x58	; 88
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	b6 01       	movw	r22, r12
    26fa:	0c c0       	rjmp	.+24     	; 0x2714 <vfprintf+0x36e>
    26fc:	8a 2d       	mov	r24, r10
    26fe:	86 78       	andi	r24, 0x86	; 134
    2700:	59 f0       	breq	.+22     	; 0x2718 <vfprintf+0x372>
    2702:	a1 fe       	sbrs	r10, 1
    2704:	02 c0       	rjmp	.+4      	; 0x270a <vfprintf+0x364>
    2706:	8b e2       	ldi	r24, 0x2B	; 43
    2708:	01 c0       	rjmp	.+2      	; 0x270c <vfprintf+0x366>
    270a:	80 e2       	ldi	r24, 0x20	; 32
    270c:	a7 fc       	sbrc	r10, 7
    270e:	8d e2       	ldi	r24, 0x2D	; 45
    2710:	b6 01       	movw	r22, r12
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 cd 13 	call	0x279a	; 0x279a <fputc>
    2718:	89 14       	cp	r8, r9
    271a:	38 f4       	brcc	.+14     	; 0x272a <vfprintf+0x384>
    271c:	b6 01       	movw	r22, r12
    271e:	80 e3       	ldi	r24, 0x30	; 48
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	0e 94 cd 13 	call	0x279a	; 0x279a <fputc>
    2726:	9a 94       	dec	r9
    2728:	f7 cf       	rjmp	.-18     	; 0x2718 <vfprintf+0x372>
    272a:	8a 94       	dec	r8
    272c:	f3 01       	movw	r30, r6
    272e:	e8 0d       	add	r30, r8
    2730:	f1 1d       	adc	r31, r1
    2732:	80 81       	ld	r24, Z
    2734:	b6 01       	movw	r22, r12
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	0e 94 cd 13 	call	0x279a	; 0x279a <fputc>
    273c:	81 10       	cpse	r8, r1
    273e:	f5 cf       	rjmp	.-22     	; 0x272a <vfprintf+0x384>
    2740:	22 20       	and	r2, r2
    2742:	09 f4       	brne	.+2      	; 0x2746 <vfprintf+0x3a0>
    2744:	42 ce       	rjmp	.-892    	; 0x23ca <vfprintf+0x24>
    2746:	b6 01       	movw	r22, r12
    2748:	80 e2       	ldi	r24, 0x20	; 32
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	0e 94 cd 13 	call	0x279a	; 0x279a <fputc>
    2750:	2a 94       	dec	r2
    2752:	f6 cf       	rjmp	.-20     	; 0x2740 <vfprintf+0x39a>
    2754:	f6 01       	movw	r30, r12
    2756:	86 81       	ldd	r24, Z+6	; 0x06
    2758:	97 81       	ldd	r25, Z+7	; 0x07
    275a:	02 c0       	rjmp	.+4      	; 0x2760 <vfprintf+0x3ba>
    275c:	8f ef       	ldi	r24, 0xFF	; 255
    275e:	9f ef       	ldi	r25, 0xFF	; 255
    2760:	2b 96       	adiw	r28, 0x0b	; 11
    2762:	e2 e1       	ldi	r30, 0x12	; 18
    2764:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__epilogue_restores__>

00002768 <__ctype_isfalse>:
    2768:	99 27       	eor	r25, r25
    276a:	88 27       	eor	r24, r24

0000276c <__ctype_istrue>:
    276c:	08 95       	ret

0000276e <strnlen_P>:
    276e:	fc 01       	movw	r30, r24
    2770:	05 90       	lpm	r0, Z+
    2772:	61 50       	subi	r22, 0x01	; 1
    2774:	70 40       	sbci	r23, 0x00	; 0
    2776:	01 10       	cpse	r0, r1
    2778:	d8 f7       	brcc	.-10     	; 0x2770 <strnlen_P+0x2>
    277a:	80 95       	com	r24
    277c:	90 95       	com	r25
    277e:	8e 0f       	add	r24, r30
    2780:	9f 1f       	adc	r25, r31
    2782:	08 95       	ret

00002784 <strnlen>:
    2784:	fc 01       	movw	r30, r24
    2786:	61 50       	subi	r22, 0x01	; 1
    2788:	70 40       	sbci	r23, 0x00	; 0
    278a:	01 90       	ld	r0, Z+
    278c:	01 10       	cpse	r0, r1
    278e:	d8 f7       	brcc	.-10     	; 0x2786 <strnlen+0x2>
    2790:	80 95       	com	r24
    2792:	90 95       	com	r25
    2794:	8e 0f       	add	r24, r30
    2796:	9f 1f       	adc	r25, r31
    2798:	08 95       	ret

0000279a <fputc>:
    279a:	0f 93       	push	r16
    279c:	1f 93       	push	r17
    279e:	cf 93       	push	r28
    27a0:	df 93       	push	r29
    27a2:	fb 01       	movw	r30, r22
    27a4:	23 81       	ldd	r18, Z+3	; 0x03
    27a6:	21 fd       	sbrc	r18, 1
    27a8:	03 c0       	rjmp	.+6      	; 0x27b0 <fputc+0x16>
    27aa:	8f ef       	ldi	r24, 0xFF	; 255
    27ac:	9f ef       	ldi	r25, 0xFF	; 255
    27ae:	2c c0       	rjmp	.+88     	; 0x2808 <fputc+0x6e>
    27b0:	22 ff       	sbrs	r18, 2
    27b2:	16 c0       	rjmp	.+44     	; 0x27e0 <fputc+0x46>
    27b4:	46 81       	ldd	r20, Z+6	; 0x06
    27b6:	57 81       	ldd	r21, Z+7	; 0x07
    27b8:	24 81       	ldd	r18, Z+4	; 0x04
    27ba:	35 81       	ldd	r19, Z+5	; 0x05
    27bc:	42 17       	cp	r20, r18
    27be:	53 07       	cpc	r21, r19
    27c0:	44 f4       	brge	.+16     	; 0x27d2 <fputc+0x38>
    27c2:	a0 81       	ld	r26, Z
    27c4:	b1 81       	ldd	r27, Z+1	; 0x01
    27c6:	9d 01       	movw	r18, r26
    27c8:	2f 5f       	subi	r18, 0xFF	; 255
    27ca:	3f 4f       	sbci	r19, 0xFF	; 255
    27cc:	20 83       	st	Z, r18
    27ce:	31 83       	std	Z+1, r19	; 0x01
    27d0:	8c 93       	st	X, r24
    27d2:	26 81       	ldd	r18, Z+6	; 0x06
    27d4:	37 81       	ldd	r19, Z+7	; 0x07
    27d6:	2f 5f       	subi	r18, 0xFF	; 255
    27d8:	3f 4f       	sbci	r19, 0xFF	; 255
    27da:	26 83       	std	Z+6, r18	; 0x06
    27dc:	37 83       	std	Z+7, r19	; 0x07
    27de:	14 c0       	rjmp	.+40     	; 0x2808 <fputc+0x6e>
    27e0:	8b 01       	movw	r16, r22
    27e2:	ec 01       	movw	r28, r24
    27e4:	fb 01       	movw	r30, r22
    27e6:	00 84       	ldd	r0, Z+8	; 0x08
    27e8:	f1 85       	ldd	r31, Z+9	; 0x09
    27ea:	e0 2d       	mov	r30, r0
    27ec:	09 95       	icall
    27ee:	89 2b       	or	r24, r25
    27f0:	e1 f6       	brne	.-72     	; 0x27aa <fputc+0x10>
    27f2:	d8 01       	movw	r26, r16
    27f4:	16 96       	adiw	r26, 0x06	; 6
    27f6:	8d 91       	ld	r24, X+
    27f8:	9c 91       	ld	r25, X
    27fa:	17 97       	sbiw	r26, 0x07	; 7
    27fc:	01 96       	adiw	r24, 0x01	; 1
    27fe:	16 96       	adiw	r26, 0x06	; 6
    2800:	8d 93       	st	X+, r24
    2802:	9c 93       	st	X, r25
    2804:	17 97       	sbiw	r26, 0x07	; 7
    2806:	ce 01       	movw	r24, r28
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	1f 91       	pop	r17
    280e:	0f 91       	pop	r16
    2810:	08 95       	ret

00002812 <__ultoa_invert>:
    2812:	fa 01       	movw	r30, r20
    2814:	aa 27       	eor	r26, r26
    2816:	28 30       	cpi	r18, 0x08	; 8
    2818:	51 f1       	breq	.+84     	; 0x286e <__ultoa_invert+0x5c>
    281a:	20 31       	cpi	r18, 0x10	; 16
    281c:	81 f1       	breq	.+96     	; 0x287e <__ultoa_invert+0x6c>
    281e:	e8 94       	clt
    2820:	6f 93       	push	r22
    2822:	6e 7f       	andi	r22, 0xFE	; 254
    2824:	6e 5f       	subi	r22, 0xFE	; 254
    2826:	7f 4f       	sbci	r23, 0xFF	; 255
    2828:	8f 4f       	sbci	r24, 0xFF	; 255
    282a:	9f 4f       	sbci	r25, 0xFF	; 255
    282c:	af 4f       	sbci	r26, 0xFF	; 255
    282e:	b1 e0       	ldi	r27, 0x01	; 1
    2830:	3e d0       	rcall	.+124    	; 0x28ae <__ultoa_invert+0x9c>
    2832:	b4 e0       	ldi	r27, 0x04	; 4
    2834:	3c d0       	rcall	.+120    	; 0x28ae <__ultoa_invert+0x9c>
    2836:	67 0f       	add	r22, r23
    2838:	78 1f       	adc	r23, r24
    283a:	89 1f       	adc	r24, r25
    283c:	9a 1f       	adc	r25, r26
    283e:	a1 1d       	adc	r26, r1
    2840:	68 0f       	add	r22, r24
    2842:	79 1f       	adc	r23, r25
    2844:	8a 1f       	adc	r24, r26
    2846:	91 1d       	adc	r25, r1
    2848:	a1 1d       	adc	r26, r1
    284a:	6a 0f       	add	r22, r26
    284c:	71 1d       	adc	r23, r1
    284e:	81 1d       	adc	r24, r1
    2850:	91 1d       	adc	r25, r1
    2852:	a1 1d       	adc	r26, r1
    2854:	20 d0       	rcall	.+64     	; 0x2896 <__ultoa_invert+0x84>
    2856:	09 f4       	brne	.+2      	; 0x285a <__ultoa_invert+0x48>
    2858:	68 94       	set
    285a:	3f 91       	pop	r19
    285c:	2a e0       	ldi	r18, 0x0A	; 10
    285e:	26 9f       	mul	r18, r22
    2860:	11 24       	eor	r1, r1
    2862:	30 19       	sub	r19, r0
    2864:	30 5d       	subi	r19, 0xD0	; 208
    2866:	31 93       	st	Z+, r19
    2868:	de f6       	brtc	.-74     	; 0x2820 <__ultoa_invert+0xe>
    286a:	cf 01       	movw	r24, r30
    286c:	08 95       	ret
    286e:	46 2f       	mov	r20, r22
    2870:	47 70       	andi	r20, 0x07	; 7
    2872:	40 5d       	subi	r20, 0xD0	; 208
    2874:	41 93       	st	Z+, r20
    2876:	b3 e0       	ldi	r27, 0x03	; 3
    2878:	0f d0       	rcall	.+30     	; 0x2898 <__ultoa_invert+0x86>
    287a:	c9 f7       	brne	.-14     	; 0x286e <__ultoa_invert+0x5c>
    287c:	f6 cf       	rjmp	.-20     	; 0x286a <__ultoa_invert+0x58>
    287e:	46 2f       	mov	r20, r22
    2880:	4f 70       	andi	r20, 0x0F	; 15
    2882:	40 5d       	subi	r20, 0xD0	; 208
    2884:	4a 33       	cpi	r20, 0x3A	; 58
    2886:	18 f0       	brcs	.+6      	; 0x288e <__ultoa_invert+0x7c>
    2888:	49 5d       	subi	r20, 0xD9	; 217
    288a:	31 fd       	sbrc	r19, 1
    288c:	40 52       	subi	r20, 0x20	; 32
    288e:	41 93       	st	Z+, r20
    2890:	02 d0       	rcall	.+4      	; 0x2896 <__ultoa_invert+0x84>
    2892:	a9 f7       	brne	.-22     	; 0x287e <__ultoa_invert+0x6c>
    2894:	ea cf       	rjmp	.-44     	; 0x286a <__ultoa_invert+0x58>
    2896:	b4 e0       	ldi	r27, 0x04	; 4
    2898:	a6 95       	lsr	r26
    289a:	97 95       	ror	r25
    289c:	87 95       	ror	r24
    289e:	77 95       	ror	r23
    28a0:	67 95       	ror	r22
    28a2:	ba 95       	dec	r27
    28a4:	c9 f7       	brne	.-14     	; 0x2898 <__ultoa_invert+0x86>
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	61 05       	cpc	r22, r1
    28aa:	71 05       	cpc	r23, r1
    28ac:	08 95       	ret
    28ae:	9b 01       	movw	r18, r22
    28b0:	ac 01       	movw	r20, r24
    28b2:	0a 2e       	mov	r0, r26
    28b4:	06 94       	lsr	r0
    28b6:	57 95       	ror	r21
    28b8:	47 95       	ror	r20
    28ba:	37 95       	ror	r19
    28bc:	27 95       	ror	r18
    28be:	ba 95       	dec	r27
    28c0:	c9 f7       	brne	.-14     	; 0x28b4 <__ultoa_invert+0xa2>
    28c2:	62 0f       	add	r22, r18
    28c4:	73 1f       	adc	r23, r19
    28c6:	84 1f       	adc	r24, r20
    28c8:	95 1f       	adc	r25, r21
    28ca:	a0 1d       	adc	r26, r0
    28cc:	08 95       	ret

000028ce <ccp_write_io>:
    28ce:	dc 01       	movw	r26, r24
    28d0:	28 ed       	ldi	r18, 0xD8	; 216
    28d2:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f0034>
    28d6:	6c 93       	st	X, r22
    28d8:	08 95       	ret

000028da <__mulsi3>:
    28da:	db 01       	movw	r26, r22
    28dc:	8f 93       	push	r24
    28de:	9f 93       	push	r25
    28e0:	0e 94 7d 14 	call	0x28fa	; 0x28fa <__muluhisi3>
    28e4:	bf 91       	pop	r27
    28e6:	af 91       	pop	r26
    28e8:	a2 9f       	mul	r26, r18
    28ea:	80 0d       	add	r24, r0
    28ec:	91 1d       	adc	r25, r1
    28ee:	a3 9f       	mul	r26, r19
    28f0:	90 0d       	add	r25, r0
    28f2:	b2 9f       	mul	r27, r18
    28f4:	90 0d       	add	r25, r0
    28f6:	11 24       	eor	r1, r1
    28f8:	08 95       	ret

000028fa <__muluhisi3>:
    28fa:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
    28fe:	a5 9f       	mul	r26, r21
    2900:	90 0d       	add	r25, r0
    2902:	b4 9f       	mul	r27, r20
    2904:	90 0d       	add	r25, r0
    2906:	a4 9f       	mul	r26, r20
    2908:	80 0d       	add	r24, r0
    290a:	91 1d       	adc	r25, r1
    290c:	11 24       	eor	r1, r1
    290e:	08 95       	ret

00002910 <__prologue_saves__>:
    2910:	2f 92       	push	r2
    2912:	3f 92       	push	r3
    2914:	4f 92       	push	r4
    2916:	5f 92       	push	r5
    2918:	6f 92       	push	r6
    291a:	7f 92       	push	r7
    291c:	8f 92       	push	r8
    291e:	9f 92       	push	r9
    2920:	af 92       	push	r10
    2922:	bf 92       	push	r11
    2924:	cf 92       	push	r12
    2926:	df 92       	push	r13
    2928:	ef 92       	push	r14
    292a:	ff 92       	push	r15
    292c:	0f 93       	push	r16
    292e:	1f 93       	push	r17
    2930:	cf 93       	push	r28
    2932:	df 93       	push	r29
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	ca 1b       	sub	r28, r26
    293a:	db 0b       	sbc	r29, r27
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	09 94       	ijmp

00002942 <__epilogue_restores__>:
    2942:	2a 88       	ldd	r2, Y+18	; 0x12
    2944:	39 88       	ldd	r3, Y+17	; 0x11
    2946:	48 88       	ldd	r4, Y+16	; 0x10
    2948:	5f 84       	ldd	r5, Y+15	; 0x0f
    294a:	6e 84       	ldd	r6, Y+14	; 0x0e
    294c:	7d 84       	ldd	r7, Y+13	; 0x0d
    294e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2950:	9b 84       	ldd	r9, Y+11	; 0x0b
    2952:	aa 84       	ldd	r10, Y+10	; 0x0a
    2954:	b9 84       	ldd	r11, Y+9	; 0x09
    2956:	c8 84       	ldd	r12, Y+8	; 0x08
    2958:	df 80       	ldd	r13, Y+7	; 0x07
    295a:	ee 80       	ldd	r14, Y+6	; 0x06
    295c:	fd 80       	ldd	r15, Y+5	; 0x05
    295e:	0c 81       	ldd	r16, Y+4	; 0x04
    2960:	1b 81       	ldd	r17, Y+3	; 0x03
    2962:	aa 81       	ldd	r26, Y+2	; 0x02
    2964:	b9 81       	ldd	r27, Y+1	; 0x01
    2966:	ce 0f       	add	r28, r30
    2968:	d1 1d       	adc	r29, r1
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	ed 01       	movw	r28, r26
    2970:	08 95       	ret

00002972 <_exit>:
    2972:	f8 94       	cli

00002974 <__stop_program>:
    2974:	ff cf       	rjmp	.-2      	; 0x2974 <__stop_program>
