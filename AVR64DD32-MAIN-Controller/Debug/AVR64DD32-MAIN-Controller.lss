
AVR64DD32-MAIN-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000598  00806000  00002ba2  00002c36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ba2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00806598  00806598  000031ce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000031ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000322c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000460  00000000  00000000  00003268  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009262  00000000  00000000  000036c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cfb  00000000  00000000  0000c92a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f72  00000000  00000000  00010625  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c3c  00000000  00000000  00013598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003277  00000000  00000000  000141d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000030dc  00000000  00000000  0001744b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  0001a527  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e7       	ldi	r29, 0x7F	; 127
      9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
      9c:	15 e6       	ldi	r17, 0x65	; 101
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b0 e6       	ldi	r27, 0x60	; 96
      a2:	e2 ea       	ldi	r30, 0xA2	; 162
      a4:	fb e2       	ldi	r31, 0x2B	; 43
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 39       	cpi	r26, 0x98	; 152
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	26 e6       	ldi	r18, 0x66	; 102
      b4:	a8 e9       	ldi	r26, 0x98	; 152
      b6:	b5 e6       	ldi	r27, 0x65	; 101
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 30       	cpi	r26, 0x06	; 6
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <main>
      c6:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <normalize>:
#include "ActionsVar.h"


// Pagalbinë funkcija: normalizuoja kampà á [0,360)
int16_t normalize(int16_t angle) {
	angle %= 360;
      ce:	68 e6       	ldi	r22, 0x68	; 104
      d0:	71 e0       	ldi	r23, 0x01	; 1
      d2:	0e 94 a1 10 	call	0x2142	; 0x2142 <__divmodhi4>
	if (angle < 0) angle += 360;
      d6:	99 23       	and	r25, r25
      d8:	14 f4       	brge	.+4      	; 0xde <normalize+0x10>
      da:	88 59       	subi	r24, 0x98	; 152
      dc:	9e 4f       	sbci	r25, 0xFE	; 254
	return angle;
}
      de:	08 95       	ret

000000e0 <angle_diff>:

// Pagalbinë: apskaièiuoja maþiausià kampiná atstumà
int16_t angle_diff(int16_t a, int16_t b) {
	int16_t d = abs(a - b) % 360;
      e0:	9c 01       	movw	r18, r24
      e2:	26 1b       	sub	r18, r22
      e4:	37 0b       	sbc	r19, r23
      e6:	c9 01       	movw	r24, r18
      e8:	99 23       	and	r25, r25
      ea:	24 f4       	brge	.+8      	; 0xf4 <angle_diff+0x14>
      ec:	88 27       	eor	r24, r24
      ee:	99 27       	eor	r25, r25
      f0:	82 1b       	sub	r24, r18
      f2:	93 0b       	sbc	r25, r19
      f4:	68 e6       	ldi	r22, 0x68	; 104
      f6:	71 e0       	ldi	r23, 0x01	; 1
      f8:	0e 94 a1 10 	call	0x2142	; 0x2142 <__divmodhi4>
	return (d > 180) ? 360 - d : d;
      fc:	85 3b       	cpi	r24, 0xB5	; 181
      fe:	91 05       	cpc	r25, r1
     100:	34 f0       	brlt	.+12     	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
     102:	28 e6       	ldi	r18, 0x68	; 104
     104:	31 e0       	ldi	r19, 0x01	; 1
     106:	a9 01       	movw	r20, r18
     108:	48 1b       	sub	r20, r24
     10a:	59 0b       	sbc	r21, r25
     10c:	ca 01       	movw	r24, r20
}
     10e:	08 95       	ret

00000110 <get_safe_azimuth>:

void get_safe_azimuth() {
     110:	cf 92       	push	r12
     112:	df 92       	push	r13
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
	// Galimos saugios kryptys
	int16_t safe1 = normalize((WSData.winddirection * 45) + 90);
     120:	c0 91 db 65 	lds	r28, 0x65DB	; 0x8065db <WSData+0x7>
     124:	2d e2       	ldi	r18, 0x2D	; 45
     126:	c2 9f       	mul	r28, r18
     128:	e0 01       	movw	r28, r0
     12a:	11 24       	eor	r1, r1
     12c:	ce 01       	movw	r24, r28
     12e:	86 5a       	subi	r24, 0xA6	; 166
     130:	9f 4f       	sbci	r25, 0xFF	; 255
     132:	0e 94 67 00 	call	0xce	; 0xce <normalize>
     136:	8c 01       	movw	r16, r24
	int16_t safe2 = normalize((WSData.winddirection * 45) - 90);
     138:	ce 01       	movw	r24, r28
     13a:	8a 55       	subi	r24, 0x5A	; 90
     13c:	91 09       	sbc	r25, r1
     13e:	0e 94 67 00 	call	0xce	; 0xce <normalize>
     142:	ec 01       	movw	r28, r24

	bool valid1 = (safe1 >= MIN_AZIMUTH && safe1 <= MAX_AZIMUTH);
     144:	c8 01       	movw	r24, r16
     146:	4e 97       	sbiw	r24, 0x1e	; 30
	bool valid2 = (safe2 >= MIN_AZIMUTH && safe2 <= MAX_AZIMUTH);
     148:	9e 01       	movw	r18, r28
     14a:	2e 51       	subi	r18, 0x1E	; 30
     14c:	31 09       	sbc	r19, r1

	if (valid1 && valid2) {
     14e:	8d 32       	cpi	r24, 0x2D	; 45
     150:	41 e0       	ldi	r20, 0x01	; 1
     152:	94 07       	cpc	r25, r20
     154:	e8 f4       	brcc	.+58     	; 0x190 <get_safe_azimuth+0x80>
     156:	2d 32       	cpi	r18, 0x2D	; 45
     158:	31 40       	sbci	r19, 0x01	; 1
     15a:	d0 f4       	brcc	.+52     	; 0x190 <get_safe_azimuth+0x80>
		int16_t d1 = angle_diff(SensorData.Azimuth, safe1);
     15c:	e0 90 9c 65 	lds	r14, 0x659C	; 0x80659c <__data_end+0x4>
     160:	f0 90 9d 65 	lds	r15, 0x659D	; 0x80659d <__data_end+0x5>
     164:	b8 01       	movw	r22, r16
     166:	c7 01       	movw	r24, r14
     168:	0e 94 70 00 	call	0xe0	; 0xe0 <angle_diff>
     16c:	6c 01       	movw	r12, r24
		int16_t d2 = angle_diff(SensorData.Azimuth, safe2);
     16e:	be 01       	movw	r22, r28
     170:	c7 01       	movw	r24, r14
     172:	0e 94 70 00 	call	0xe0	; 0xe0 <angle_diff>
		Target.azimuth = (d1 <= d2) ? safe1 : safe2;
     176:	8c 15       	cp	r24, r12
     178:	9d 05       	cpc	r25, r13
     17a:	1c f0       	brlt	.+6      	; 0x182 <get_safe_azimuth+0x72>
     17c:	90 2f       	mov	r25, r16
     17e:	81 2f       	mov	r24, r17
     180:	02 c0       	rjmp	.+4      	; 0x186 <get_safe_azimuth+0x76>
     182:	9c 2f       	mov	r25, r28
     184:	8d 2f       	mov	r24, r29
     186:	90 93 4f 60 	sts	0x604F, r25	; 0x80604f <Target+0x5>
     18a:	80 93 50 60 	sts	0x6050, r24	; 0x806050 <Target+0x6>
	int16_t safe2 = normalize((WSData.winddirection * 45) - 90);

	bool valid1 = (safe1 >= MIN_AZIMUTH && safe1 <= MAX_AZIMUTH);
	bool valid2 = (safe2 >= MIN_AZIMUTH && safe2 <= MAX_AZIMUTH);

	if (valid1 && valid2) {
     18e:	0c c0       	rjmp	.+24     	; 0x1a8 <get_safe_azimuth+0x98>
		int16_t d1 = angle_diff(SensorData.Azimuth, safe1);
		int16_t d2 = angle_diff(SensorData.Azimuth, safe2);
		Target.azimuth = (d1 <= d2) ? safe1 : safe2;
		} else if (valid1) {
     190:	8d 32       	cpi	r24, 0x2D	; 45
     192:	91 40       	sbci	r25, 0x01	; 1
     194:	28 f4       	brcc	.+10     	; 0x1a0 <get_safe_azimuth+0x90>
		Target.azimuth = safe1;
     196:	00 93 4f 60 	sts	0x604F, r16	; 0x80604f <Target+0x5>
     19a:	10 93 50 60 	sts	0x6050, r17	; 0x806050 <Target+0x6>
     19e:	04 c0       	rjmp	.+8      	; 0x1a8 <get_safe_azimuth+0x98>
		} else {
		Target.azimuth = safe2; // visada bus bent vienas tinkamas
     1a0:	c0 93 4f 60 	sts	0x604F, r28	; 0x80604f <Target+0x5>
     1a4:	d0 93 50 60 	sts	0x6050, r29	; 0x806050 <Target+0x6>
	}
}
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	1f 91       	pop	r17
     1ae:	0f 91       	pop	r16
     1b0:	ff 90       	pop	r15
     1b2:	ef 90       	pop	r14
     1b4:	df 90       	pop	r13
     1b6:	cf 90       	pop	r12
     1b8:	08 95       	ret

000001ba <MotorControl>:

//Motor control function wrtited based on void LinearMotorControl()
void MotorControl(MotorControlObj* m)
{
     1ba:	8f 92       	push	r8
     1bc:	9f 92       	push	r9
     1be:	af 92       	push	r10
     1c0:	bf 92       	push	r11
     1c2:	cf 92       	push	r12
     1c4:	df 92       	push	r13
     1c6:	ef 92       	push	r14
     1c8:	ff 92       	push	r15
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	ec 01       	movw	r28, r24
	// 1. FO jungtis
	if (SensorData.FO_lost_connecton_fault) {
     1d4:	80 91 ab 65 	lds	r24, 0x65AB	; 0x8065ab <__data_end+0x13>
     1d8:	88 23       	and	r24, r24
     1da:	39 f0       	breq	.+14     	; 0x1ea <MotorControl+0x30>
		m->iface.stop();
     1dc:	ef 81       	ldd	r30, Y+7	; 0x07
     1de:	f8 85       	ldd	r31, Y+8	; 0x08
     1e0:	09 95       	icall
		m->iface.disable();
     1e2:	eb 81       	ldd	r30, Y+3	; 0x03
     1e4:	fc 81       	ldd	r31, Y+4	; 0x04
     1e6:	09 95       	icall
		return;
     1e8:	1b c1       	rjmp	.+566    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	}

	// 2. Tikslas pasiektas
	if (*m->sensor.position == *m->sensor.target) {
     1ea:	ef 85       	ldd	r30, Y+15	; 0x0f
     1ec:	f8 89       	ldd	r31, Y+16	; 0x10
     1ee:	20 81       	ld	r18, Z
     1f0:	31 81       	ldd	r19, Z+1	; 0x01
     1f2:	ef 89       	ldd	r30, Y+23	; 0x17
     1f4:	f8 8d       	ldd	r31, Y+24	; 0x18
     1f6:	80 81       	ld	r24, Z
     1f8:	91 81       	ldd	r25, Z+1	; 0x01
     1fa:	28 17       	cp	r18, r24
     1fc:	39 07       	cpc	r19, r25
     1fe:	81 f4       	brne	.+32     	; 0x220 <MotorControl+0x66>
		m->iface.stop();
     200:	ef 81       	ldd	r30, Y+7	; 0x07
     202:	f8 85       	ldd	r31, Y+8	; 0x08
     204:	09 95       	icall
		m->iface.disable();
     206:	eb 81       	ldd	r30, Y+3	; 0x03
     208:	fc 81       	ldd	r31, Y+4	; 0x04
     20a:	09 95       	icall
		*m->sensor.faultFlag = false;
     20c:	eb 89       	ldd	r30, Y+19	; 0x13
     20e:	fc 89       	ldd	r31, Y+20	; 0x14
     210:	10 82       	st	Z, r1
		*m->sensor.targetReached = true;
     212:	e9 8d       	ldd	r30, Y+25	; 0x19
     214:	fa 8d       	ldd	r31, Y+26	; 0x1a
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	80 83       	st	Z, r24
		m->stuckCount = 0;
     21a:	1b 8e       	std	Y+27, r1	; 0x1b
		m->noChangeCount = 0;
     21c:	1c 8e       	std	Y+28, r1	; 0x1c
		return;
     21e:	00 c1       	rjmp	.+512    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	}

	// 2.1  Nuskaitomi elektriniai parametrai
	*m->voltage = m->iface.read_voltage(); //read and save voltage
     220:	09 a1       	ldd	r16, Y+33	; 0x21
     222:	1a a1       	ldd	r17, Y+34	; 0x22
     224:	eb 85       	ldd	r30, Y+11	; 0x0b
     226:	fc 85       	ldd	r31, Y+12	; 0x0c
     228:	09 95       	icall
     22a:	f8 01       	movw	r30, r16
     22c:	80 83       	st	Z, r24
     22e:	91 83       	std	Z+1, r25	; 0x01
	*m->current = m->iface.read_current(); //read and save current
     230:	0b a1       	ldd	r16, Y+35	; 0x23
     232:	1c a1       	ldd	r17, Y+36	; 0x24
     234:	ed 85       	ldd	r30, Y+13	; 0x0d
     236:	fe 85       	ldd	r31, Y+14	; 0x0e
     238:	09 95       	icall
     23a:	f8 01       	movw	r30, r16
     23c:	80 83       	st	Z, r24
     23e:	91 83       	std	Z+1, r25	; 0x01

	// 3. Backlash logika
	bool inBacklash = (*m->sensor.position >= (*m->sensor.target - m->backlash)) &&
     240:	ef 85       	ldd	r30, Y+15	; 0x0f
     242:	f8 89       	ldd	r31, Y+16	; 0x10
     244:	80 81       	ld	r24, Z
     246:	91 81       	ldd	r25, Z+1	; 0x01
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	ef 89       	ldd	r30, Y+23	; 0x17
     24e:	f8 8d       	ldd	r31, Y+24	; 0x18
     250:	40 81       	ld	r20, Z
     252:	51 81       	ldd	r21, Z+1	; 0x01
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	0d 8d       	ldd	r16, Y+29	; 0x1d
     25a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     25c:	2f 8d       	ldd	r18, Y+31	; 0x1f
     25e:	38 a1       	ldd	r19, Y+32	; 0x20
     260:	6a 01       	movw	r12, r20
     262:	7b 01       	movw	r14, r22
     264:	c0 1a       	sub	r12, r16
     266:	d1 0a       	sbc	r13, r17
     268:	e2 0a       	sbc	r14, r18
     26a:	f3 0a       	sbc	r15, r19
     26c:	8c 15       	cp	r24, r12
     26e:	9d 05       	cpc	r25, r13
     270:	ae 05       	cpc	r26, r14
     272:	bf 05       	cpc	r27, r15
     274:	5c f0       	brlt	.+22     	; 0x28c <MotorControl+0xd2>
	(*m->sensor.position <= (*m->sensor.target + m->backlash));
     276:	40 0f       	add	r20, r16
     278:	51 1f       	adc	r21, r17
     27a:	62 1f       	adc	r22, r18
     27c:	73 1f       	adc	r23, r19
	// 2.1  Nuskaitomi elektriniai parametrai
	*m->voltage = m->iface.read_voltage(); //read and save voltage
	*m->current = m->iface.read_current(); //read and save current

	// 3. Backlash logika
	bool inBacklash = (*m->sensor.position >= (*m->sensor.target - m->backlash)) &&
     27e:	48 17       	cp	r20, r24
     280:	59 07       	cpc	r21, r25
     282:	6a 07       	cpc	r22, r26
     284:	7b 07       	cpc	r23, r27
     286:	24 f4       	brge	.+8      	; 0x290 <MotorControl+0xd6>
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	03 c0       	rjmp	.+6      	; 0x292 <MotorControl+0xd8>
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	01 c0       	rjmp	.+2      	; 0x292 <MotorControl+0xd8>
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	89 2f       	mov	r24, r25
     294:	81 70       	andi	r24, 0x01	; 1
	(*m->sensor.position <= (*m->sensor.target + m->backlash));

	if (!inBacklash || !*m->sensor.targetReached) {
     296:	29 f0       	breq	.+10     	; 0x2a2 <MotorControl+0xe8>
     298:	e9 8d       	ldd	r30, Y+25	; 0x19
     29a:	fa 8d       	ldd	r31, Y+26	; 0x1a
     29c:	80 81       	ld	r24, Z
     29e:	81 11       	cpse	r24, r1
     2a0:	09 c0       	rjmp	.+18     	; 0x2b4 <MotorControl+0xfa>
		m->iface.start();
     2a2:	ed 81       	ldd	r30, Y+5	; 0x05
     2a4:	fe 81       	ldd	r31, Y+6	; 0x06
     2a6:	09 95       	icall
		m->iface.enable();
     2a8:	e9 81       	ldd	r30, Y+1	; 0x01
     2aa:	fa 81       	ldd	r31, Y+2	; 0x02
     2ac:	09 95       	icall
		*m->sensor.targetReached = false;
     2ae:	e9 8d       	ldd	r30, Y+25	; 0x19
     2b0:	fa 8d       	ldd	r31, Y+26	; 0x1a
     2b2:	10 82       	st	Z, r1
	}

	// 4. Pokytis
	int32_t delta = (int32_t)(*m->sensor.positionFiltered) - (int32_t)(*m->sensor.lastPosition);
     2b4:	e9 89       	ldd	r30, Y+17	; 0x11
     2b6:	fa 89       	ldd	r31, Y+18	; 0x12
     2b8:	c0 80       	ld	r12, Z
     2ba:	d1 80       	ldd	r13, Z+1	; 0x01
     2bc:	e1 2c       	mov	r14, r1
     2be:	f1 2c       	mov	r15, r1
     2c0:	ed 89       	ldd	r30, Y+21	; 0x15
     2c2:	fe 89       	ldd	r31, Y+22	; 0x16
     2c4:	80 81       	ld	r24, Z
     2c6:	91 81       	ldd	r25, Z+1	; 0x01
     2c8:	c8 1a       	sub	r12, r24
     2ca:	d9 0a       	sbc	r13, r25
     2cc:	e1 08       	sbc	r14, r1
     2ce:	f1 08       	sbc	r15, r1
	if (delta > -SENSOR_DEADBAND && delta < SENSOR_DEADBAND) {
     2d0:	d7 01       	movw	r26, r14
     2d2:	c6 01       	movw	r24, r12
     2d4:	89 53       	subi	r24, 0x39	; 57
     2d6:	9f 4f       	sbci	r25, 0xFF	; 255
     2d8:	af 4f       	sbci	r26, 0xFF	; 255
     2da:	bf 4f       	sbci	r27, 0xFF	; 255
     2dc:	8f 38       	cpi	r24, 0x8F	; 143
     2de:	91 40       	sbci	r25, 0x01	; 1
     2e0:	a1 05       	cpc	r26, r1
     2e2:	b1 05       	cpc	r27, r1
     2e4:	18 f4       	brcc	.+6      	; 0x2ec <MotorControl+0x132>
		delta = 0;
     2e6:	c1 2c       	mov	r12, r1
     2e8:	d1 2c       	mov	r13, r1
     2ea:	76 01       	movw	r14, r12
	}

	// 5. Kryptis
	if (*m->sensor.position < *m->sensor.target) {
     2ec:	ef 85       	ldd	r30, Y+15	; 0x0f
     2ee:	f8 89       	ldd	r31, Y+16	; 0x10
     2f0:	20 81       	ld	r18, Z
     2f2:	31 81       	ldd	r19, Z+1	; 0x01
     2f4:	ef 89       	ldd	r30, Y+23	; 0x17
     2f6:	f8 8d       	ldd	r31, Y+24	; 0x18
     2f8:	80 81       	ld	r24, Z
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	28 17       	cp	r18, r24
     2fe:	39 07       	cpc	r19, r25
     300:	28 f4       	brcc	.+10     	; 0x30c <MotorControl+0x152>
		m->iface.set_direction(1);
     302:	e9 85       	ldd	r30, Y+9	; 0x09
     304:	fa 85       	ldd	r31, Y+10	; 0x0a
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	09 95       	icall
     30a:	07 c0       	rjmp	.+14     	; 0x31a <MotorControl+0x160>
		} else if (*m->sensor.position > *m->sensor.target) {
     30c:	82 17       	cp	r24, r18
     30e:	93 07       	cpc	r25, r19
     310:	20 f4       	brcc	.+8      	; 0x31a <MotorControl+0x160>
		m->iface.set_direction(0);
     312:	e9 85       	ldd	r30, Y+9	; 0x09
     314:	fa 85       	ldd	r31, Y+10	; 0x0a
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	09 95       	icall
	}

	// 6. Uþstrigimo tikrinimas (neteisinga kryptis)
	if (*m->sensor.position < (*m->sensor.target - m->backlash)) {
     31a:	ef 85       	ldd	r30, Y+15	; 0x0f
     31c:	f8 89       	ldd	r31, Y+16	; 0x10
     31e:	80 81       	ld	r24, Z
     320:	91 81       	ldd	r25, Z+1	; 0x01
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	ef 89       	ldd	r30, Y+23	; 0x17
     328:	f8 8d       	ldd	r31, Y+24	; 0x18
     32a:	40 81       	ld	r20, Z
     32c:	51 81       	ldd	r21, Z+1	; 0x01
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	0d 8d       	ldd	r16, Y+29	; 0x1d
     334:	1e 8d       	ldd	r17, Y+30	; 0x1e
     336:	2f 8d       	ldd	r18, Y+31	; 0x1f
     338:	38 a1       	ldd	r19, Y+32	; 0x20
     33a:	4a 01       	movw	r8, r20
     33c:	5b 01       	movw	r10, r22
     33e:	80 1a       	sub	r8, r16
     340:	91 0a       	sbc	r9, r17
     342:	a2 0a       	sbc	r10, r18
     344:	b3 0a       	sbc	r11, r19
     346:	88 15       	cp	r24, r8
     348:	99 05       	cpc	r25, r9
     34a:	aa 05       	cpc	r26, r10
     34c:	bb 05       	cpc	r27, r11
     34e:	fc f4       	brge	.+62     	; 0x38e <MotorControl+0x1d4>
		if (delta < -SENSOR_DEADBAND && ++m->stuckCount >= STUCK_LIMIT) {
     350:	28 e3       	ldi	r18, 0x38	; 56
     352:	c2 16       	cp	r12, r18
     354:	2f ef       	ldi	r18, 0xFF	; 255
     356:	d2 06       	cpc	r13, r18
     358:	e2 06       	cpc	r14, r18
     35a:	f2 06       	cpc	r15, r18
     35c:	84 f4       	brge	.+32     	; 0x37e <MotorControl+0x1c4>
     35e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     360:	8f 5f       	subi	r24, 0xFF	; 255
     362:	8b 8f       	std	Y+27, r24	; 0x1b
     364:	82 30       	cpi	r24, 0x02	; 2
     366:	58 f0       	brcs	.+22     	; 0x37e <MotorControl+0x1c4>
			*m->sensor.faultFlag = true;
     368:	eb 89       	ldd	r30, Y+19	; 0x13
     36a:	fc 89       	ldd	r31, Y+20	; 0x14
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	80 83       	st	Z, r24
			m->iface.stop();
     370:	ef 81       	ldd	r30, Y+7	; 0x07
     372:	f8 85       	ldd	r31, Y+8	; 0x08
     374:	09 95       	icall
			m->iface.disable();
     376:	eb 81       	ldd	r30, Y+3	; 0x03
     378:	fc 81       	ldd	r31, Y+4	; 0x04
     37a:	09 95       	icall
     37c:	2f c0       	rjmp	.+94     	; 0x3dc <MotorControl+0x222>
			} else if (delta > SENSOR_DEADBAND) {
     37e:	89 ec       	ldi	r24, 0xC9	; 201
     380:	c8 16       	cp	r12, r24
     382:	d1 04       	cpc	r13, r1
     384:	e1 04       	cpc	r14, r1
     386:	f1 04       	cpc	r15, r1
     388:	4c f1       	brlt	.+82     	; 0x3dc <MotorControl+0x222>
			m->stuckCount = 0;
     38a:	1b 8e       	std	Y+27, r1	; 0x1b
     38c:	27 c0       	rjmp	.+78     	; 0x3dc <MotorControl+0x222>
		}
		} else if (*m->sensor.position > (*m->sensor.target + m->backlash)) {
     38e:	40 0f       	add	r20, r16
     390:	51 1f       	adc	r21, r17
     392:	62 1f       	adc	r22, r18
     394:	73 1f       	adc	r23, r19
     396:	48 17       	cp	r20, r24
     398:	59 07       	cpc	r21, r25
     39a:	6a 07       	cpc	r22, r26
     39c:	7b 07       	cpc	r23, r27
     39e:	f4 f4       	brge	.+60     	; 0x3dc <MotorControl+0x222>
		if (delta > SENSOR_DEADBAND && ++m->stuckCount >= STUCK_LIMIT) {
     3a0:	e9 ec       	ldi	r30, 0xC9	; 201
     3a2:	ce 16       	cp	r12, r30
     3a4:	d1 04       	cpc	r13, r1
     3a6:	e1 04       	cpc	r14, r1
     3a8:	f1 04       	cpc	r15, r1
     3aa:	84 f0       	brlt	.+32     	; 0x3cc <MotorControl+0x212>
     3ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3ae:	8f 5f       	subi	r24, 0xFF	; 255
     3b0:	8b 8f       	std	Y+27, r24	; 0x1b
     3b2:	82 30       	cpi	r24, 0x02	; 2
     3b4:	58 f0       	brcs	.+22     	; 0x3cc <MotorControl+0x212>
			*m->sensor.faultFlag = true;
     3b6:	eb 89       	ldd	r30, Y+19	; 0x13
     3b8:	fc 89       	ldd	r31, Y+20	; 0x14
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	80 83       	st	Z, r24
			m->iface.stop();
     3be:	ef 81       	ldd	r30, Y+7	; 0x07
     3c0:	f8 85       	ldd	r31, Y+8	; 0x08
     3c2:	09 95       	icall
			m->iface.disable();
     3c4:	eb 81       	ldd	r30, Y+3	; 0x03
     3c6:	fc 81       	ldd	r31, Y+4	; 0x04
     3c8:	09 95       	icall
     3ca:	08 c0       	rjmp	.+16     	; 0x3dc <MotorControl+0x222>
			} else if (delta < -SENSOR_DEADBAND) {
     3cc:	f8 e3       	ldi	r31, 0x38	; 56
     3ce:	cf 16       	cp	r12, r31
     3d0:	ff ef       	ldi	r31, 0xFF	; 255
     3d2:	df 06       	cpc	r13, r31
     3d4:	ef 06       	cpc	r14, r31
     3d6:	ff 06       	cpc	r15, r31
     3d8:	0c f4       	brge	.+2      	; 0x3dc <MotorControl+0x222>
			m->stuckCount = 0;
     3da:	1b 8e       	std	Y+27, r1	; 0x1b
		}
	}

	// 7. Uþstrigimas vietoje
	if (delta == 0 && !*m->sensor.targetReached) {
     3dc:	cd 28       	or	r12, r13
     3de:	ce 28       	or	r12, r14
     3e0:	cf 28       	or	r12, r15
     3e2:	a9 f4       	brne	.+42     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3e4:	e9 8d       	ldd	r30, Y+25	; 0x19
     3e6:	fa 8d       	ldd	r31, Y+26	; 0x1a
     3e8:	80 81       	ld	r24, Z
     3ea:	81 11       	cpse	r24, r1
     3ec:	10 c0       	rjmp	.+32     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		if (++m->noChangeCount >= STUCK_LIMIT) {
     3ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3f0:	8f 5f       	subi	r24, 0xFF	; 255
     3f2:	8c 8f       	std	Y+28, r24	; 0x1c
     3f4:	82 30       	cpi	r24, 0x02	; 2
     3f6:	60 f0       	brcs	.+24     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			*m->sensor.faultFlag = true;
     3f8:	eb 89       	ldd	r30, Y+19	; 0x13
     3fa:	fc 89       	ldd	r31, Y+20	; 0x14
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	80 83       	st	Z, r24
			m->iface.stop();
     400:	ef 81       	ldd	r30, Y+7	; 0x07
     402:	f8 85       	ldd	r31, Y+8	; 0x08
     404:	09 95       	icall
			m->iface.disable();
     406:	eb 81       	ldd	r30, Y+3	; 0x03
     408:	fc 81       	ldd	r31, Y+4	; 0x04
     40a:	09 95       	icall
     40c:	01 c0       	rjmp	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		}
		} else {
		m->noChangeCount = 0;
     40e:	1c 8e       	std	Y+28, r1	; 0x1c
	}

	// 8. Atnaujinam paskutinæ reikðmæ
	*m->sensor.lastPosition = *m->sensor.positionFiltered;
     410:	ed 89       	ldd	r30, Y+21	; 0x15
     412:	fe 89       	ldd	r31, Y+22	; 0x16
     414:	a9 89       	ldd	r26, Y+17	; 0x11
     416:	ba 89       	ldd	r27, Y+18	; 0x12
     418:	8d 91       	ld	r24, X+
     41a:	9c 91       	ld	r25, X
     41c:	80 83       	st	Z, r24
     41e:	91 83       	std	Z+1, r25	; 0x01
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	bf 90       	pop	r11
     432:	af 90       	pop	r10
     434:	9f 90       	pop	r9
     436:	8f 90       	pop	r8
     438:	08 95       	ret

0000043a <work>:

void work(){
	if(Joystick.LatchSwitch){ //Manual mode
     43a:	80 91 c7 65 	lds	r24, 0x65C7	; 0x8065c7 <Joystick+0x6>
     43e:	88 23       	and	r24, r24
     440:	b9 f1       	breq	.+110    	; 0x4b0 <work+0x76>
		if( (Target.azimuth + Joystick.X_Axis) >= MIN_AZIMUTH && (Target.azimuth + Joystick.X_Axis) <= MAX_AZIMUTH ) {
     442:	80 91 4f 60 	lds	r24, 0x604F	; 0x80604f <Target+0x5>
     446:	90 91 50 60 	lds	r25, 0x6050	; 0x806050 <Target+0x6>
     44a:	20 91 c1 65 	lds	r18, 0x65C1	; 0x8065c1 <Joystick>
     44e:	30 91 c2 65 	lds	r19, 0x65C2	; 0x8065c2 <Joystick+0x1>
     452:	82 0f       	add	r24, r18
     454:	93 1f       	adc	r25, r19
     456:	9c 01       	movw	r18, r24
     458:	2e 51       	subi	r18, 0x1E	; 30
     45a:	31 09       	sbc	r19, r1
     45c:	2d 32       	cpi	r18, 0x2D	; 45
     45e:	31 40       	sbci	r19, 0x01	; 1
     460:	20 f4       	brcc	.+8      	; 0x46a <work+0x30>
			Target.azimuth += Joystick.X_Axis;
     462:	80 93 4f 60 	sts	0x604F, r24	; 0x80604f <Target+0x5>
     466:	90 93 50 60 	sts	0x6050, r25	; 0x806050 <Target+0x6>
		}
		if( (Target.elevation - Joystick.Y_Axis) >= MIN_ELEVATION && (Target.elevation - Joystick.Y_Axis) <= MAX_ELEVATION ) {
     46a:	80 91 4a 60 	lds	r24, 0x604A	; 0x80604a <Target>
     46e:	90 91 4b 60 	lds	r25, 0x604B	; 0x80604b <Target+0x1>
     472:	20 91 c3 65 	lds	r18, 0x65C3	; 0x8065c3 <Joystick+0x2>
     476:	30 91 c4 65 	lds	r19, 0x65C4	; 0x8065c4 <Joystick+0x3>
     47a:	82 1b       	sub	r24, r18
     47c:	93 0b       	sbc	r25, r19
     47e:	8b 35       	cpi	r24, 0x5B	; 91
     480:	91 05       	cpc	r25, r1
     482:	20 f4       	brcc	.+8      	; 0x48c <work+0x52>
			Target.elevation -= Joystick.Y_Axis;
     484:	80 93 4a 60 	sts	0x604A, r24	; 0x80604a <Target>
     488:	90 93 4b 60 	sts	0x604B, r25	; 0x80604b <Target+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     48c:	8f ef       	ldi	r24, 0xFF	; 255
     48e:	95 ea       	ldi	r25, 0xA5	; 165
     490:	2e e0       	ldi	r18, 0x0E	; 14
     492:	81 50       	subi	r24, 0x01	; 1
     494:	90 40       	sbci	r25, 0x00	; 0
     496:	20 40       	sbci	r18, 0x00	; 0
     498:	e1 f7       	brne	.-8      	; 0x492 <work+0x58>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <work+0x62>
     49c:	00 00       	nop
		}
		_delay_ms(200);
		MotorControl(&LinearMotorCtrl);
     49e:	85 e2       	ldi	r24, 0x25	; 37
     4a0:	90 e6       	ldi	r25, 0x60	; 96
     4a2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MotorControl>
		MotorControl(&StepperMotorCtrl);
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e6       	ldi	r25, 0x60	; 96
     4aa:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MotorControl>
     4ae:	08 95       	ret
	}
	else{//Auto mode
		if(WSData.windspeed > MAX_WIND){
     4b0:	80 91 da 65 	lds	r24, 0x65DA	; 0x8065da <WSData+0x6>
     4b4:	80 31       	cpi	r24, 0x10	; 16
     4b6:	48 f0       	brcs	.+18     	; 0x4ca <work+0x90>
			get_safe_azimuth();
     4b8:	0e 94 88 00 	call	0x110	; 0x110 <get_safe_azimuth>
		Target.elevation = SAFE_ELEVATION;
     4bc:	84 e1       	ldi	r24, 0x14	; 20
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	80 93 4a 60 	sts	0x604A, r24	; 0x80604a <Target>
     4c4:	90 93 4b 60 	sts	0x604B, r25	; 0x80604b <Target+0x1>
     4c8:	08 95       	ret
			}
			else{ // if not go to best day position (early morning, late at evening, or just dark day)
				Target.azimuth = 180; //South
				Target.elevation = WSData.topelevation; //day top elevation
			}		 
			Target.azimuth = WSData.azimuth;
     4ca:	a4 ed       	ldi	r26, 0xD4	; 212
     4cc:	b5 e6       	ldi	r27, 0x65	; 101
     4ce:	8d 91       	ld	r24, X+
     4d0:	9c 91       	ld	r25, X
     4d2:	11 97       	sbiw	r26, 0x01	; 1
     4d4:	ea e4       	ldi	r30, 0x4A	; 74
     4d6:	f0 e6       	ldi	r31, 0x60	; 96
     4d8:	85 83       	std	Z+5, r24	; 0x05
     4da:	96 83       	std	Z+6, r25	; 0x06
			Target.elevation = WSData.elevation;
     4dc:	12 96       	adiw	r26, 0x02	; 2
     4de:	8d 91       	ld	r24, X+
     4e0:	9c 91       	ld	r25, X
     4e2:	13 97       	sbiw	r26, 0x03	; 3
     4e4:	80 83       	st	Z, r24
     4e6:	91 83       	std	Z+1, r25	; 0x01
			MotorControl(&LinearMotorCtrl);
     4e8:	85 e2       	ldi	r24, 0x25	; 37
     4ea:	90 e6       	ldi	r25, 0x60	; 96
     4ec:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MotorControl>
			MotorControl(&StepperMotorCtrl);
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e6       	ldi	r25, 0x60	; 96
     4f4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MotorControl>
     4f8:	08 95       	ret

000004fa <ADC0_init>:
 * - Prescaler: Division by 4
 * - Resolution: 12-bit
 * - Enables the ADC.
 */
void ADC0_init() {
    ADC0.CTRLB = ADC_SAMPNUM_ACC128_gc; // 1 measurements
     4fa:	e0 e0       	ldi	r30, 0x00	; 0
     4fc:	f6 e0       	ldi	r31, 0x06	; 6
     4fe:	87 e0       	ldi	r24, 0x07	; 7
     500:	81 83       	std	Z+1, r24	; 0x01
    ADC0.CTRLC = ADC_PRESC_DIV4_gc; // 24Mhz / 16 ADC speed
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	82 83       	std	Z+2, r24	; 0x02
    ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_12BIT_gc; // 12-bit resolution
     506:	80 83       	st	Z, r24
     508:	08 95       	ret

0000050a <ADC0_SetupJoystick>:
}


void ADC0_SetupJoystick(uint8_t axis) {
    VREF.ADC0REF = VREF_REFSEL_VDD_gc;
     50a:	95 e0       	ldi	r25, 0x05	; 5
     50c:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    ADC0.MUXPOS = axis;
     510:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     514:	08 95       	ret

00000516 <ADC0_SetupLinearMotor>:

}

void ADC0_SetupLinearMotor(uint8_t parameter) {
	switch (parameter)
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	39 f4       	brne	.+14     	; 0x528 <ADC0_SetupLinearMotor+0x12>
	{
		case 1: //I
			VREF.ADC0REF = VREF_REFSEL_4V096_gc; // up to 9,21A (if MCU Vcc== 4.096V)| 0A= 0.4096V| 4.096- 0.4096 = 3,6864V/0,4 = 9.21A | max current at normal working conditions for linear motor is ~4A			
     51a:	82 e0       	ldi	r24, 0x02	; 2
     51c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
			ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc; //PD1
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
		break;
     526:	08 95       	ret
		default://U
			VREF.ADC0REF = VREF_REFSEL_2V048_gc; //AMC1311 full range is 2.0V for linear motor 2.0V = 30.0V (300k)
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
			ADC0.MUXPOS = ADC_MUXPOS_AIN31_gc; //PC3
     52e:	8f e1       	ldi	r24, 0x1F	; 31
     530:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     534:	08 95       	ret

00000536 <ADC0_SetupStepper>:
	}

}

void ADC0_SetupStepper(uint8_t parameter) {
	switch (parameter)
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	39 f4       	brne	.+14     	; 0x548 <ADC0_SetupStepper+0x12>
	{
		case 1: //I
			VREF.ADC0REF = VREF_REFSEL_4V096_gc; // up to 9,21A (if MCU Vcc== 4.096V)| 0A= 0.4096V| 4.096- 0.4096 = 3,6864V/0,4 = 9.21A | max current at normal working conditions for stepper motor is ~6A
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
			ADC0.MUXPOS = ADC_MUXPOS_AIN16_gc; //PF0
     540:	80 e1       	ldi	r24, 0x10	; 16
     542:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
		break;
     546:	08 95       	ret
		default://U
			VREF.ADC0REF = VREF_REFSEL_2V048_gc; //AMC1311 full range is 2.0V for stepper 2.0V = 71.0V (710k)
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
			ADC0.MUXPOS = ADC_MUXPOS_AIN6_gc; //PD6
     54e:	86 e0       	ldi	r24, 0x06	; 6
     550:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     554:	08 95       	ret

00000556 <ADC0_SetupSysVoltage>:
	}

}

void ADC0_SetupSysVoltage(){
	VREF.ADC0REF = VREF_REFSEL_1V024_gc; // 1.024V = 4096| 1.024 = 10.24V|
     556:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
	ADC0.MUXPOS = ADC_MUXPOS_VDDDIV10_gc; //5V = 0.5V
     55a:	84 e4       	ldi	r24, 0x44	; 68
     55c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     560:	08 95       	ret

00000562 <ADC0_read>:
 * appropriately.
 *
 * @return The ADC conversion result as a 12-bit value.
 */
uint16_t ADC0_read() {
    ADC0.COMMAND = ADC_STCONV_bm; // Start conversion
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7f060a>
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)); // Wait until result is ready
     568:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7f060d>
     56c:	80 ff       	sbrs	r24, 0
     56e:	fc cf       	rjmp	.-8      	; 0x568 <ADC0_read+0x6>
    ADC0.INTFLAGS = ADC_RESRDY_bm; // Clear result ready flag
     570:	e0 e0       	ldi	r30, 0x00	; 0
     572:	f6 e0       	ldi	r31, 0x06	; 6
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	85 87       	std	Z+13, r24	; 0x0d
    return ADC0.RES >> 4; // Shift result if accumulation is over 16
     578:	80 89       	ldd	r24, Z+16	; 0x10
     57a:	91 89       	ldd	r25, Z+17	; 0x11
}
     57c:	92 95       	swap	r25
     57e:	82 95       	swap	r24
     580:	8f 70       	andi	r24, 0x0F	; 15
     582:	89 27       	eor	r24, r25
     584:	9f 70       	andi	r25, 0x0F	; 15
     586:	89 27       	eor	r24, r25
     588:	08 95       	ret

0000058a <Read_MCU_Voltge>:

uint16_t Read_MCU_Voltge(){
ADC0_SetupSysVoltage();
     58a:	0e 94 ab 02 	call	0x556	; 0x556 <ADC0_SetupSysVoltage>
return ADC0_read()*0.25; //ADC value * 10.26V (full adc range) / 4096 (Full adc range steps) exp: 1856 * 0.25 = 464 (4.64V)
     58e:	0e 94 b1 02 	call	0x562	; 0x562 <ADC0_read>
     592:	bc 01       	movw	r22, r24
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatunsisf>
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	40 e8       	ldi	r20, 0x80	; 128
     5a2:	5e e3       	ldi	r21, 0x3E	; 62
     5a4:	0e 94 34 10 	call	0x2068	; 0x2068 <__mulsf3>
     5a8:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__fixunssfsi>
}
     5ac:	cb 01       	movw	r24, r22
     5ae:	08 95       	ret

000005b0 <CLOCK_XOSCHF_clock_init>:
#include "Settings.h"

void CLOCK_XOSCHF_clock_init()
{
	/* Enable external (32 MHz) clock input */
	ccp_write_io((uint8_t *) &CLKCTRL.XOSCHFCTRLA, CLKCTRL_SELHF_EXTCLOCK_gc | CLKCTRL_FRQRANGE_24M_gc | CLKCTRL_ENABLE_bm);
     5b0:	6b e0       	ldi	r22, 0x0B	; 11
     5b2:	80 e8       	ldi	r24, 0x80	; 128
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 7d 15 	call	0x2afa	; 0x2afa <ccp_write_io>

	/* Set the main clock to use external clock as source */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc);
     5ba:	63 e0       	ldi	r22, 0x03	; 3
     5bc:	80 e6       	ldi	r24, 0x60	; 96
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 7d 15 	call	0x2afa	; 0x2afa <ccp_write_io>

	/* Wait for system oscillator change to complete */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm)
     5c4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
     5c8:	80 fd       	sbrc	r24, 0
     5ca:	fc cf       	rjmp	.-8      	; 0x5c4 <CLOCK_XOSCHF_clock_init+0x14>
	{};
	/* Configuration complete;*/
}
     5cc:	08 95       	ret

000005ce <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
     5ce:	2f 92       	push	r2
     5d0:	3f 92       	push	r3
     5d2:	4f 92       	push	r4
     5d4:	5f 92       	push	r5
     5d6:	6f 92       	push	r6
     5d8:	7f 92       	push	r7
     5da:	8f 92       	push	r8
     5dc:	9f 92       	push	r9
     5de:	af 92       	push	r10
     5e0:	bf 92       	push	r11
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
     5f6:	2b 97       	sbiw	r28, 0x0b	; 11
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	c2 2e       	mov	r12, r18
     5fe:	b3 2e       	mov	r11, r19
     600:	a4 2e       	mov	r10, r20
     602:	95 2e       	mov	r9, r21
     604:	86 2e       	mov	r8, r22
     606:	77 2e       	mov	r7, r23
     608:	68 2e       	mov	r6, r24
     60a:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
     60c:	f2 2e       	mov	r15, r18
     60e:	03 2f       	mov	r16, r19
     610:	14 2f       	mov	r17, r20
     612:	5a 87       	std	Y+10, r21	; 0x0a
     614:	69 83       	std	Y+1, r22	; 0x01
     616:	b7 2f       	mov	r27, r23
     618:	d8 2e       	mov	r13, r24
     61a:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
     61c:	e0 e0       	ldi	r30, 0x00	; 0
     61e:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     620:	14 c0       	rjmp	.+40     	; 0x64a <crc8_cdma2000+0x7c>
        length++;
     622:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
     624:	2f 2d       	mov	r18, r15
     626:	30 2f       	mov	r19, r16
     628:	41 2f       	mov	r20, r17
     62a:	5a 85       	ldd	r21, Y+10	; 0x0a
     62c:	69 81       	ldd	r22, Y+1	; 0x01
     62e:	7b 2f       	mov	r23, r27
     630:	8d 2d       	mov	r24, r13
     632:	9e 2d       	mov	r25, r14
     634:	08 e0       	ldi	r16, 0x08	; 8
     636:	0e 94 20 11 	call	0x2240	; 0x2240 <__lshrdi3>
     63a:	f2 2e       	mov	r15, r18
     63c:	03 2f       	mov	r16, r19
     63e:	14 2f       	mov	r17, r20
     640:	5a 87       	std	Y+10, r21	; 0x0a
     642:	69 83       	std	Y+1, r22	; 0x01
     644:	b7 2f       	mov	r27, r23
     646:	d8 2e       	mov	r13, r24
     648:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     64a:	2f 2d       	mov	r18, r15
     64c:	30 2f       	mov	r19, r16
     64e:	41 2f       	mov	r20, r17
     650:	5a 85       	ldd	r21, Y+10	; 0x0a
     652:	69 81       	ldd	r22, Y+1	; 0x01
     654:	7b 2f       	mov	r23, r27
     656:	8d 2d       	mov	r24, r13
     658:	9e 2d       	mov	r25, r14
     65a:	a0 e0       	ldi	r26, 0x00	; 0
     65c:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpdi2_s8>
     660:	01 f7       	brne	.-64     	; 0x622 <crc8_cdma2000+0x54>
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	8a 87       	std	Y+10, r24	; 0x0a
     666:	cb 86       	std	Y+11, r12	; 0x0b
     668:	b9 82       	std	Y+1, r11	; 0x01
     66a:	4a 2c       	mov	r4, r10
     66c:	39 2c       	mov	r3, r9
     66e:	28 2c       	mov	r2, r8
     670:	1a c0       	rjmp	.+52     	; 0x6a6 <crc8_cdma2000+0xd8>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
     672:	8d 01       	movw	r16, r26
     674:	00 0f       	add	r16, r16
     676:	11 1f       	adc	r17, r17
     678:	00 0f       	add	r16, r16
     67a:	11 1f       	adc	r17, r17
     67c:	00 0f       	add	r16, r16
     67e:	11 1f       	adc	r17, r17
     680:	2b 85       	ldd	r18, Y+11	; 0x0b
     682:	39 81       	ldd	r19, Y+1	; 0x01
     684:	44 2d       	mov	r20, r4
     686:	53 2d       	mov	r21, r3
     688:	62 2d       	mov	r22, r2
     68a:	77 2d       	mov	r23, r7
     68c:	86 2d       	mov	r24, r6
     68e:	95 2d       	mov	r25, r5
     690:	0e 94 20 11 	call	0x2240	; 0x2240 <__lshrdi3>
     694:	8a 84       	ldd	r8, Y+10	; 0x0a
     696:	82 26       	eor	r8, r18
     698:	91 2c       	mov	r9, r1
     69a:	f4 01       	movw	r30, r8
     69c:	ea 54       	subi	r30, 0x4A	; 74
     69e:	fc 49       	sbci	r31, 0x9C	; 156
     6a0:	80 81       	ld	r24, Z
     6a2:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
     6a4:	fd 01       	movw	r30, r26
     6a6:	df 01       	movw	r26, r30
     6a8:	11 97       	sbiw	r26, 0x01	; 1
     6aa:	ef 2b       	or	r30, r31
     6ac:	11 f7       	brne	.-60     	; 0x672 <crc8_cdma2000+0xa4>
     6ae:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
     6b0:	2b 96       	adiw	r28, 0x0b	; 11
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	df 90       	pop	r13
     6c4:	cf 90       	pop	r12
     6c6:	bf 90       	pop	r11
     6c8:	af 90       	pop	r10
     6ca:	9f 90       	pop	r9
     6cc:	8f 90       	pop	r8
     6ce:	7f 90       	pop	r7
     6d0:	6f 90       	pop	r6
     6d2:	5f 90       	pop	r5
     6d4:	4f 90       	pop	r4
     6d6:	3f 90       	pop	r3
     6d8:	2f 90       	pop	r2
     6da:	08 95       	ret

000006dc <verify_crc8_cdma2000>:
 * without the CRC byte. Otherwise, it returns 0 to indicate a mismatch.
 * 
 * @param data_with_crc The input data with the CRC byte appended.
 * @return The data without the CRC byte if the checksum is valid, or 0 if invalid.
 */
uint8_t verify_crc8_cdma2000(uint64_t data_without_crc, uint8_t crc) {
     6dc:	0f 93       	push	r16
     6de:	cf 93       	push	r28
     6e0:	c2 2f       	mov	r28, r18

	return crc8_cdma2000(data_without_crc) == crc ?  data_without_crc : 0;
     6e2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <crc8_cdma2000>
     6e6:	80 13       	cpse	r24, r16
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <verify_crc8_cdma2000+0x12>
     6ea:	8c 2f       	mov	r24, r28
     6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <verify_crc8_cdma2000+0x14>
     6ee:	80 e0       	ldi	r24, 0x00	; 0

}
     6f0:	cf 91       	pop	r28
     6f2:	0f 91       	pop	r16
     6f4:	08 95       	ret

000006f6 <verify_crc8_cdma2000_v2>:


uint8_t verify_crc8_cdma2000_v2(uint8_t *data, uint8_t crc) {
     6f6:	ac 01       	movw	r20, r24
	uint16_t saveOneBit = ((data[4] & 0x07) << 12) | (data[5] & 0x0FFF); //wind direction (F)(values only 0- 7) + light level(FFF)(values only 0-4095) = (F+FFF)
	buf[7] = (uint8_t)(saveOneBit >> 8); //split wind direction and part of light level data
	buf[8] = (uint8_t)(saveOneBit & 0xFF); // left part of light level*/

	uint8_t calculatedcrc = 0xFF;
	for (size_t i = 0; i < 9; i++) { // length = 8 baitai
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
	buf[6] = (uint8_t)data[3]; // uint8_t wind speed (FF)
	uint16_t saveOneBit = ((data[4] & 0x07) << 12) | (data[5] & 0x0FFF); //wind direction (F)(values only 0- 7) + light level(FFF)(values only 0-4095) = (F+FFF)
	buf[7] = (uint8_t)(saveOneBit >> 8); //split wind direction and part of light level data
	buf[8] = (uint8_t)(saveOneBit & 0xFF); // left part of light level*/

	uint8_t calculatedcrc = 0xFF;
     6fc:	ef ef       	ldi	r30, 0xFF	; 255
	for (size_t i = 0; i < 9; i++) { // length = 8 baitai
     6fe:	0b c0       	rjmp	.+22     	; 0x716 <verify_crc8_cdma2000_v2+0x20>
		calculatedcrc = crc8_table[calculatedcrc ^ data[i]];
     700:	da 01       	movw	r26, r20
     702:	a2 0f       	add	r26, r18
     704:	b3 1f       	adc	r27, r19
     706:	9c 91       	ld	r25, X
     708:	e9 27       	eor	r30, r25
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	ea 54       	subi	r30, 0x4A	; 74
     70e:	fc 49       	sbci	r31, 0x9C	; 156
     710:	e0 81       	ld	r30, Z
	uint16_t saveOneBit = ((data[4] & 0x07) << 12) | (data[5] & 0x0FFF); //wind direction (F)(values only 0- 7) + light level(FFF)(values only 0-4095) = (F+FFF)
	buf[7] = (uint8_t)(saveOneBit >> 8); //split wind direction and part of light level data
	buf[8] = (uint8_t)(saveOneBit & 0xFF); // left part of light level*/

	uint8_t calculatedcrc = 0xFF;
	for (size_t i = 0; i < 9; i++) { // length = 8 baitai
     712:	2f 5f       	subi	r18, 0xFF	; 255
     714:	3f 4f       	sbci	r19, 0xFF	; 255
     716:	29 30       	cpi	r18, 0x09	; 9
     718:	31 05       	cpc	r19, r1
     71a:	90 f3       	brcs	.-28     	; 0x700 <verify_crc8_cdma2000_v2+0xa>
		calculatedcrc = crc8_table[calculatedcrc ^ data[i]];
	}
	return calculatedcrc == crc ? calculatedcrc : 0 ;
     71c:	e6 17       	cp	r30, r22
     71e:	11 f0       	breq	.+4      	; 0x724 <verify_crc8_cdma2000_v2+0x2e>
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	08 95       	ret
     724:	8e 2f       	mov	r24, r30

     726:	08 95       	ret

00000728 <hexToUint64>:
 *  Author: Saulius
 */ 
#include "Settings.h"
#include "FOUSARTVar.h"

uint64_t hexToUint64(const char *str) {
     728:	0f 93       	push	r16
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	fc 01       	movw	r30, r24
	uint64_t result = 0;
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
	char c;

	while ((c = *str++)) {
     740:	3a c0       	rjmp	.+116    	; 0x7b6 <hexToUint64+0x8e>
		result <<= 4; // kiekvienas hex simbolis = 4 bitai
     742:	04 e0       	ldi	r16, 0x04	; 4
     744:	0e 94 05 11 	call	0x220a	; 0x220a <__ashldi3>

		if (c >= '0' && c <= '9') {
     748:	e0 ed       	ldi	r30, 0xD0	; 208
     74a:	ec 0f       	add	r30, r28
     74c:	ea 30       	cpi	r30, 0x0A	; 10
     74e:	70 f4       	brcc	.+28     	; 0x76c <hexToUint64+0x44>
			result |= (uint64_t)(c - '0');
     750:	d0 e0       	ldi	r29, 0x00	; 0
     752:	e0 97       	sbiw	r28, 0x30	; 48
     754:	ed 2f       	mov	r30, r29
     756:	ee 0f       	add	r30, r30
     758:	ee 0b       	sbc	r30, r30
     75a:	2c 2b       	or	r18, r28
     75c:	3d 2b       	or	r19, r29
     75e:	4e 2b       	or	r20, r30
     760:	5e 2b       	or	r21, r30
     762:	6e 2b       	or	r22, r30
     764:	7e 2b       	or	r23, r30
     766:	8e 2b       	or	r24, r30
     768:	9e 2b       	or	r25, r30
     76a:	24 c0       	rjmp	.+72     	; 0x7b4 <hexToUint64+0x8c>
			} else if (c >= 'A' && c <= 'F') {
     76c:	ef eb       	ldi	r30, 0xBF	; 191
     76e:	ec 0f       	add	r30, r28
     770:	e6 30       	cpi	r30, 0x06	; 6
     772:	70 f4       	brcc	.+28     	; 0x790 <hexToUint64+0x68>
			result |= (uint64_t)(c - 'A' + 10);
     774:	d0 e0       	ldi	r29, 0x00	; 0
     776:	e7 97       	sbiw	r28, 0x37	; 55
     778:	ed 2f       	mov	r30, r29
     77a:	ee 0f       	add	r30, r30
     77c:	ee 0b       	sbc	r30, r30
     77e:	2c 2b       	or	r18, r28
     780:	3d 2b       	or	r19, r29
     782:	4e 2b       	or	r20, r30
     784:	5e 2b       	or	r21, r30
     786:	6e 2b       	or	r22, r30
     788:	7e 2b       	or	r23, r30
     78a:	8e 2b       	or	r24, r30
     78c:	9e 2b       	or	r25, r30
     78e:	12 c0       	rjmp	.+36     	; 0x7b4 <hexToUint64+0x8c>
			} else if (c >= 'a' && c <= 'f') {
     790:	ef e9       	ldi	r30, 0x9F	; 159
     792:	ec 0f       	add	r30, r28
     794:	e6 30       	cpi	r30, 0x06	; 6
     796:	a8 f4       	brcc	.+42     	; 0x7c2 <hexToUint64+0x9a>
			result |= (uint64_t)(c - 'a' + 10);
     798:	d0 e0       	ldi	r29, 0x00	; 0
     79a:	c7 55       	subi	r28, 0x57	; 87
     79c:	d1 09       	sbc	r29, r1
     79e:	ed 2f       	mov	r30, r29
     7a0:	ee 0f       	add	r30, r30
     7a2:	ee 0b       	sbc	r30, r30
     7a4:	2c 2b       	or	r18, r28
     7a6:	3d 2b       	or	r19, r29
     7a8:	4e 2b       	or	r20, r30
     7aa:	5e 2b       	or	r21, r30
     7ac:	6e 2b       	or	r22, r30
     7ae:	7e 2b       	or	r23, r30
     7b0:	8e 2b       	or	r24, r30
     7b2:	9e 2b       	or	r25, r30
     7b4:	fd 01       	movw	r30, r26

uint64_t hexToUint64(const char *str) {
	uint64_t result = 0;
	char c;

	while ((c = *str++)) {
     7b6:	df 01       	movw	r26, r30
     7b8:	11 96       	adiw	r26, 0x01	; 1
     7ba:	c0 81       	ld	r28, Z
     7bc:	c1 11       	cpse	r28, r1
     7be:	c1 cf       	rjmp	.-126    	; 0x742 <hexToUint64+0x1a>
     7c0:	08 c0       	rjmp	.+16     	; 0x7d2 <hexToUint64+0xaa>
			result |= (uint64_t)(c - 'A' + 10);
			} else if (c >= 'a' && c <= 'f') {
			result |= (uint64_t)(c - 'a' + 10);
			} else {
			// netinkamas simbolis
			return 0;
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return result;
}
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <FODataSplitter>:

void FODataSplitter(char *command) {
     7da:	7f 92       	push	r7
     7dc:	8f 92       	push	r8
     7de:	9f 92       	push	r9
     7e0:	af 92       	push	r10
     7e2:	bf 92       	push	r11
     7e4:	cf 92       	push	r12
     7e6:	df 92       	push	r13
     7e8:	ef 92       	push	r14
     7ea:	ff 92       	push	r15
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	69 97       	sbiw	r28, 0x19	; 25
     7fa:	cd bf       	out	0x3d, r28	; 61
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	6c 01       	movw	r12, r24
	if (strncmp(command, "00000000000000", 14) == 0) { //if elevation angle, azimuth angle, solar cells voltage and current = 0 meaning it is FO optic fault: bad signal
     800:	4e e0       	ldi	r20, 0x0E	; 14
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	66 eb       	ldi	r22, 0xB6	; 182
     806:	74 e6       	ldi	r23, 0x64	; 100
     808:	0e 94 a0 12 	call	0x2540	; 0x2540 <strncmp>
     80c:	89 2b       	or	r24, r25
     80e:	21 f4       	brne	.+8      	; 0x818 <FODataSplitter+0x3e>
		SensorData.FO_bad_signal_fault = true; //exp. hard bended fo
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	80 93 a8 65 	sts	0x65A8, r24	; 0x8065a8 <__data_end+0x10>
     816:	dc c0       	rjmp	.+440    	; 0x9d0 <FODataSplitter+0x1f6>
	}
	else{
		const uint8_t lengths[] = {4, 4, 3, 3, 1};
     818:	85 e0       	ldi	r24, 0x05	; 5
     81a:	e3 e9       	ldi	r30, 0x93	; 147
     81c:	f3 e6       	ldi	r31, 0x63	; 99
     81e:	de 01       	movw	r26, r28
     820:	55 96       	adiw	r26, 0x15	; 21
     822:	01 90       	ld	r0, Z+
     824:	0d 92       	st	X+, r0
     826:	8a 95       	dec	r24
     828:	e1 f7       	brne	.-8      	; 0x822 <FODataSplitter+0x48>
		char temp[MESSAGE_LENGTH_FO-2];

		strncpy(temp, command, MESSAGE_LENGTH_FO-2);
     82a:	4f e0       	ldi	r20, 0x0F	; 15
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	b6 01       	movw	r22, r12
     830:	ce 01       	movw	r24, r28
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	0e 94 ae 12 	call	0x255c	; 0x255c <strncpy>
		temp[MESSAGE_LENGTH_FO-2] = '\0';
     838:	18 8a       	std	Y+16, r1	; 0x10
		uint64_t datatocheck = hexToUint64(temp);
     83a:	ce 01       	movw	r24, r28
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	0e 94 94 03 	call	0x728	; 0x728 <hexToUint64>
     842:	72 2e       	mov	r7, r18
     844:	83 2e       	mov	r8, r19
     846:	94 2e       	mov	r9, r20
     848:	a5 2e       	mov	r10, r21
     84a:	b6 2e       	mov	r11, r22
     84c:	e7 2e       	mov	r14, r23
     84e:	f8 2e       	mov	r15, r24
     850:	19 2f       	mov	r17, r25
		strncpy(temp, command + MESSAGE_LENGTH_FO-2, 2);
     852:	42 e0       	ldi	r20, 0x02	; 2
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	b6 01       	movw	r22, r12
     858:	61 5f       	subi	r22, 0xF1	; 241
     85a:	7f 4f       	sbci	r23, 0xFF	; 255
     85c:	ce 01       	movw	r24, r28
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	0e 94 ae 12 	call	0x255c	; 0x255c <strncpy>
		temp[2] = '\0';
     864:	1b 82       	std	Y+3, r1	; 0x03
		uint8_t crctocheck = (uint8_t)strtol(temp, NULL, 16);
     866:	40 e1       	ldi	r20, 0x10	; 16
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	ce 01       	movw	r24, r28
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	0e 94 68 11 	call	0x22d0	; 0x22d0 <strtol>

		if(verify_crc8_cdma2000(datatocheck, crctocheck)){ //if data valid update it
     876:	06 2f       	mov	r16, r22
     878:	27 2d       	mov	r18, r7
     87a:	38 2d       	mov	r19, r8
     87c:	49 2d       	mov	r20, r9
     87e:	5a 2d       	mov	r21, r10
     880:	6b 2d       	mov	r22, r11
     882:	7e 2d       	mov	r23, r14
     884:	8f 2d       	mov	r24, r15
     886:	91 2f       	mov	r25, r17
     888:	0e 94 6e 03 	call	0x6dc	; 0x6dc <verify_crc8_cdma2000>
     88c:	81 11       	cpse	r24, r1
     88e:	69 c0       	rjmp	.+210    	; 0x962 <FODataSplitter+0x188>
     890:	9c c0       	rjmp	.+312    	; 0x9ca <FODataSplitter+0x1f0>
			//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
			const char *p = command;
			uint8_t EndSwitchesValue = 0;

			for (uint8_t i = 0; i < 5; i++) {
				char token[5] = {0};
     892:	5e 01       	movw	r10, r28
     894:	80 e1       	ldi	r24, 0x10	; 16
     896:	a8 0e       	add	r10, r24
     898:	b1 1c       	adc	r11, r1
     89a:	85 e0       	ldi	r24, 0x05	; 5
     89c:	f5 01       	movw	r30, r10
     89e:	11 92       	st	Z+, r1
     8a0:	8a 95       	dec	r24
     8a2:	e9 f7       	brne	.-6      	; 0x89e <FODataSplitter+0xc4>

				memcpy(token, p, lengths[i]);
     8a4:	e5 e1       	ldi	r30, 0x15	; 21
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	ec 0f       	add	r30, r28
     8aa:	fd 1f       	adc	r31, r29
     8ac:	e1 0f       	add	r30, r17
     8ae:	f1 1d       	adc	r31, r1
     8b0:	e0 80       	ld	r14, Z
     8b2:	f1 2c       	mov	r15, r1
     8b4:	a7 01       	movw	r20, r14
     8b6:	b6 01       	movw	r22, r12
     8b8:	c5 01       	movw	r24, r10
     8ba:	0e 94 87 12 	call	0x250e	; 0x250e <memcpy>
				token[lengths[i]] = '\0';
     8be:	f5 01       	movw	r30, r10
     8c0:	ee 0d       	add	r30, r14
     8c2:	ff 1d       	adc	r31, r15
     8c4:	10 82       	st	Z, r1

				switch (i) {
     8c6:	12 30       	cpi	r17, 0x02	; 2
     8c8:	29 f1       	breq	.+74     	; 0x914 <FODataSplitter+0x13a>
     8ca:	28 f4       	brcc	.+10     	; 0x8d6 <FODataSplitter+0xfc>
     8cc:	11 23       	and	r17, r17
     8ce:	41 f0       	breq	.+16     	; 0x8e0 <FODataSplitter+0x106>
     8d0:	11 30       	cpi	r17, 0x01	; 1
     8d2:	99 f0       	breq	.+38     	; 0x8fa <FODataSplitter+0x120>
     8d4:	42 c0       	rjmp	.+132    	; 0x95a <FODataSplitter+0x180>
     8d6:	13 30       	cpi	r17, 0x03	; 3
     8d8:	51 f1       	breq	.+84     	; 0x92e <FODataSplitter+0x154>
     8da:	14 30       	cpi	r17, 0x04	; 4
     8dc:	a9 f1       	breq	.+106    	; 0x948 <FODataSplitter+0x16e>
     8de:	3d c0       	rjmp	.+122    	; 0x95a <FODataSplitter+0x180>
					case 0: SensorData.HPElevation   = (uint16_t)strtol(token, NULL, 16); break;
     8e0:	40 e1       	ldi	r20, 0x10	; 16
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	ce 01       	movw	r24, r28
     8ea:	40 96       	adiw	r24, 0x10	; 16
     8ec:	0e 94 68 11 	call	0x22d0	; 0x22d0 <strtol>
     8f0:	60 93 9a 65 	sts	0x659A, r22	; 0x80659a <__data_end+0x2>
     8f4:	70 93 9b 65 	sts	0x659B, r23	; 0x80659b <__data_end+0x3>
     8f8:	30 c0       	rjmp	.+96     	; 0x95a <FODataSplitter+0x180>
					case 1: SensorData.HPAzimuth     = (uint16_t)strtol(token, NULL, 16); break;
     8fa:	40 e1       	ldi	r20, 0x10	; 16
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	ce 01       	movw	r24, r28
     904:	40 96       	adiw	r24, 0x10	; 16
     906:	0e 94 68 11 	call	0x22d0	; 0x22d0 <strtol>
     90a:	60 93 9e 65 	sts	0x659E, r22	; 0x80659e <__data_end+0x6>
     90e:	70 93 9f 65 	sts	0x659F, r23	; 0x80659f <__data_end+0x7>
     912:	23 c0       	rjmp	.+70     	; 0x95a <FODataSplitter+0x180>
					case 2: SensorData.PVU         = (uint16_t)strtol(token, NULL, 16)/ U_I_Precizion; break;
     914:	40 e1       	ldi	r20, 0x10	; 16
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	ce 01       	movw	r24, r28
     91e:	40 96       	adiw	r24, 0x10	; 16
     920:	0e 94 68 11 	call	0x22d0	; 0x22d0 <strtol>
     924:	60 93 a0 65 	sts	0x65A0, r22	; 0x8065a0 <__data_end+0x8>
     928:	70 93 a1 65 	sts	0x65A1, r23	; 0x8065a1 <__data_end+0x9>
     92c:	16 c0       	rjmp	.+44     	; 0x95a <FODataSplitter+0x180>
					case 3: SensorData.PVI         = (uint16_t)strtol(token, NULL, 16)/ U_I_Precizion; break;
     92e:	40 e1       	ldi	r20, 0x10	; 16
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	ce 01       	movw	r24, r28
     938:	40 96       	adiw	r24, 0x10	; 16
     93a:	0e 94 68 11 	call	0x22d0	; 0x22d0 <strtol>
     93e:	60 93 a2 65 	sts	0x65A2, r22	; 0x8065a2 <__data_end+0xa>
     942:	70 93 a3 65 	sts	0x65A3, r23	; 0x8065a3 <__data_end+0xb>
     946:	09 c0       	rjmp	.+18     	; 0x95a <FODataSplitter+0x180>
					case 4: EndSwitchesValue       = (uint8_t)strtol(token, NULL, 16); break; //common end switches value
     948:	40 e1       	ldi	r20, 0x10	; 16
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	ce 01       	movw	r24, r28
     952:	40 96       	adiw	r24, 0x10	; 16
     954:	0e 94 68 11 	call	0x22d0	; 0x22d0 <strtol>
     958:	06 2f       	mov	r16, r22
				}

				p += lengths[i];
     95a:	ce 0c       	add	r12, r14
     95c:	df 1c       	adc	r13, r15
		if(verify_crc8_cdma2000(datatocheck, crctocheck)){ //if data valid update it
			//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
			const char *p = command;
			uint8_t EndSwitchesValue = 0;

			for (uint8_t i = 0; i < 5; i++) {
     95e:	1f 5f       	subi	r17, 0xFF	; 255
     960:	02 c0       	rjmp	.+4      	; 0x966 <FODataSplitter+0x18c>
     962:	10 e0       	ldi	r17, 0x00	; 0
     964:	00 e0       	ldi	r16, 0x00	; 0
     966:	15 30       	cpi	r17, 0x05	; 5
     968:	08 f4       	brcc	.+2      	; 0x96c <FODataSplitter+0x192>
     96a:	93 cf       	rjmp	.-218    	; 0x892 <FODataSplitter+0xb8>
					case 4: EndSwitchesValue       = (uint8_t)strtol(token, NULL, 16); break; //common end switches value
				}

				p += lengths[i];
			}
			SensorData.Elevation = SensorData.HPElevation / Angle_Precizion;
     96c:	e8 e9       	ldi	r30, 0x98	; 152
     96e:	f5 e6       	ldi	r31, 0x65	; 101
     970:	22 81       	ldd	r18, Z+2	; 0x02
     972:	33 81       	ldd	r19, Z+3	; 0x03
     974:	36 95       	lsr	r19
     976:	27 95       	ror	r18
     978:	36 95       	lsr	r19
     97a:	27 95       	ror	r18
     97c:	ab e7       	ldi	r26, 0x7B	; 123
     97e:	b4 e1       	ldi	r27, 0x14	; 20
     980:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__umulhisi3>
     984:	96 95       	lsr	r25
     986:	87 95       	ror	r24
     988:	80 83       	st	Z, r24
     98a:	91 83       	std	Z+1, r25	; 0x01
			SensorData.Azimuth = SensorData.HPAzimuth / Angle_Precizion;
     98c:	26 81       	ldd	r18, Z+6	; 0x06
     98e:	37 81       	ldd	r19, Z+7	; 0x07
     990:	36 95       	lsr	r19
     992:	27 95       	ror	r18
     994:	36 95       	lsr	r19
     996:	27 95       	ror	r18
     998:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__umulhisi3>
     99c:	96 95       	lsr	r25
     99e:	87 95       	ror	r24
     9a0:	84 83       	std	Z+4, r24	; 0x04
     9a2:	95 83       	std	Z+5, r25	; 0x05
			//spliting end switch value to separate end switch value according to axis
			SensorData.ElMin = (EndSwitchesValue & 0x01) ? 1 : 0;
     9a4:	80 2f       	mov	r24, r16
     9a6:	81 70       	andi	r24, 0x01	; 1
     9a8:	84 87       	std	Z+12, r24	; 0x0c
			SensorData.ElMax = (EndSwitchesValue & 0x02) ? 1 : 0;
     9aa:	01 fb       	bst	r16, 1
     9ac:	88 27       	eor	r24, r24
     9ae:	80 f9       	bld	r24, 0
     9b0:	85 87       	std	Z+13, r24	; 0x0d
			SensorData.AzMin = (EndSwitchesValue & 0x04) ? 1 : 0;
     9b2:	02 fb       	bst	r16, 2
     9b4:	88 27       	eor	r24, r24
     9b6:	80 f9       	bld	r24, 0
     9b8:	86 87       	std	Z+14, r24	; 0x0e
			SensorData.AzMax = (EndSwitchesValue & 0x08) ? 1 : 0;
     9ba:	03 fb       	bst	r16, 3
     9bc:	00 27       	eor	r16, r16
     9be:	00 f9       	bld	r16, 0
     9c0:	07 87       	std	Z+15, r16	; 0x0f
			SensorData.FO_bad_signal_fault = false; //reset error
     9c2:	10 8a       	std	Z+16, r1	; 0x10
			SensorData.FO_data_fault = false; //reset error
     9c4:	12 8a       	std	Z+18, r1	; 0x12
			SensorData.FO_lost_signal_fault = false; //reset error
     9c6:	11 8a       	std	Z+17, r1	; 0x11
     9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <FODataSplitter+0x1f6>

		}
		else{
			//uncomment if nedded
			//screen_write_formatted_text("data is corupted!", 1, ALIGN_CENTER); // bad crc
			SensorData.FO_data_fault = true;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	80 93 aa 65 	sts	0x65AA, r24	; 0x8065aa <__data_end+0x12>
		}	
	}
}
     9d0:	69 96       	adiw	r28, 0x19	; 25
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	ff 90       	pop	r15
     9e0:	ef 90       	pop	r14
     9e2:	df 90       	pop	r13
     9e4:	cf 90       	pop	r12
     9e6:	bf 90       	pop	r11
     9e8:	af 90       	pop	r10
     9ea:	9f 90       	pop	r9
     9ec:	8f 90       	pop	r8
     9ee:	7f 90       	pop	r7
     9f0:	08 95       	ret

000009f2 <FOReceiver>:
 * This function continuously reads incoming data via USART, processes the data, 
 * and executes the appropriate command. If an error occurs or a warning is set, 
 * it handles the corresponding state. The function handles both normal command 
 * processing and error recovery.
 */
void FOReceiver() {
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	61 97       	sbiw	r28, 0x11	; 17
     a02:	cd bf       	out	0x3d, r28	; 61
     a04:	de bf       	out	0x3e, r29	; 62
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
     a06:	fe 01       	movw	r30, r28
     a08:	31 96       	adiw	r30, 0x01	; 1
     a0a:	81 e1       	ldi	r24, 0x11	; 17
     a0c:	df 01       	movw	r26, r30
     a0e:	1d 92       	st	X+, r1
     a10:	8a 95       	dec	r24
     a12:	e9 f7       	brne	.-6      	; 0xa0e <FOReceiver+0x1c>
    uint8_t start = 0;
	uint8_t timeout = 0;
	SensorData.FO_lost_signal_fault = false;// usart1 while loop exit
     a14:	e8 e9       	ldi	r30, 0x98	; 152
     a16:	f5 e6       	ldi	r31, 0x65	; 101
     a18:	11 8a       	std	Z+17, r1	; 0x11
	SensorData.FO_lost_connecton_fault = false; // while lop exit below
     a1a:	13 8a       	std	Z+19, r1	; 0x13
 */
void FOReceiver() {
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
    uint8_t start = 0;
	uint8_t timeout = 0;
     a1c:	10 e0       	ldi	r17, 0x00	; 0
 * processing and error recovery.
 */
void FOReceiver() {
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
    uint8_t start = 0;
     a1e:	f1 2c       	mov	r15, r1
 * and executes the appropriate command. If an error occurs or a warning is set, 
 * it handles the corresponding state. The function handles both normal command 
 * processing and error recovery.
 */
void FOReceiver() {
    uint8_t index = 0;
     a20:	00 e0       	ldi	r16, 0x00	; 0
     a22:	03 c0       	rjmp	.+6      	; 0xa2a <FOReceiver+0x38>
            } else if (index < MESSAGE_LENGTH_FO) {
                command[index++] = c; // Store received character in command array
            }
        }
        if (c == '<') { // If received data start symbol
            start = 1;
     a24:	ff 24       	eor	r15, r15
     a26:	f3 94       	inc	r15
            index = 0;
     a28:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t timeout = 0;
	SensorData.FO_lost_signal_fault = false;// usart1 while loop exit
	SensorData.FO_lost_connecton_fault = false; // while lop exit below

    while (1) {
        char c = USART1_readChar(); // Reading a character from USART
     a2a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <USART1_readChar>

		if(SensorData.FO_lost_signal_fault){
     a2e:	90 91 a9 65 	lds	r25, 0x65A9	; 0x8065a9 <__data_end+0x11>
     a32:	99 23       	and	r25, r25
     a34:	39 f0       	breq	.+14     	; 0xa44 <FOReceiver+0x52>
			if (++timeout == CountForError_FO) { // Timeout condition if usart1 reading is halted
     a36:	1f 5f       	subi	r17, 0xFF	; 255
     a38:	13 30       	cpi	r17, 0x03	; 3
     a3a:	21 f4       	brne	.+8      	; 0xa44 <FOReceiver+0x52>
				SensorData.FO_lost_connecton_fault = true;
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	80 93 ab 65 	sts	0x65AB, r24	; 0x8065ab <__data_end+0x13>
				break;
     a42:	2c c0       	rjmp	.+88     	; 0xa9c <FOReceiver+0xaa>
			}
		}
        if (start) {
     a44:	ff 20       	and	r15, r15
     a46:	39 f1       	breq	.+78     	; 0xa96 <FOReceiver+0xa4>
			
            if (c == '>') { // If received data end symbol			
     a48:	8e 33       	cpi	r24, 0x3E	; 62
     a4a:	d9 f4       	brne	.+54     	; 0xa82 <FOReceiver+0x90>
				start = 0;
				command[index] = '\0';
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	ec 0f       	add	r30, r28
     a52:	fd 1f       	adc	r31, r29
     a54:	e0 0f       	add	r30, r16
     a56:	f1 1d       	adc	r31, r1
     a58:	10 82       	st	Z, r1
				index = 0;
				if (strcmp(command, SensorData.FreshDataPack) != 0){ //only if message is different
     a5a:	6f ea       	ldi	r22, 0xAF	; 175
     a5c:	75 e6       	ldi	r23, 0x65	; 101
     a5e:	ce 01       	movw	r24, r28
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	0e 94 90 12 	call	0x2520	; 0x2520 <strcmp>
     a66:	89 2b       	or	r24, r25
     a68:	21 f0       	breq	.+8      	; 0xa72 <FOReceiver+0x80>
					FODataSplitter(command); // Execute the received command //comment when testing lines below
     a6a:	ce 01       	movw	r24, r28
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	0e 94 ed 03 	call	0x7da	; 0x7da <FODataSplitter>
				}
				strcpy(SensorData.FreshDataPack, command); // prevents from same message data splitting
     a72:	be 01       	movw	r22, r28
     a74:	6f 5f       	subi	r22, 0xFF	; 255
     a76:	7f 4f       	sbci	r23, 0xFF	; 255
     a78:	8f ea       	ldi	r24, 0xAF	; 175
     a7a:	95 e6       	ldi	r25, 0x65	; 101
     a7c:	0e 94 99 12 	call	0x2532	; 0x2532 <strcpy>
				break;
     a80:	0d c0       	rjmp	.+26     	; 0xa9c <FOReceiver+0xaa>
            } else if (index < MESSAGE_LENGTH_FO) {
     a82:	01 31       	cpi	r16, 0x11	; 17
     a84:	40 f4       	brcc	.+16     	; 0xa96 <FOReceiver+0xa4>
                command[index++] = c; // Store received character in command array
     a86:	e1 e0       	ldi	r30, 0x01	; 1
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	ec 0f       	add	r30, r28
     a8c:	fd 1f       	adc	r31, r29
     a8e:	e0 0f       	add	r30, r16
     a90:	f1 1d       	adc	r31, r1
     a92:	80 83       	st	Z, r24
     a94:	0f 5f       	subi	r16, 0xFF	; 255
            }
        }
        if (c == '<') { // If received data start symbol
     a96:	8c 33       	cpi	r24, 0x3C	; 60
     a98:	41 f6       	brne	.-112    	; 0xa2a <FOReceiver+0x38>
     a9a:	c4 cf       	rjmp	.-120    	; 0xa24 <FOReceiver+0x32>
            start = 1;
            index = 0;
        }
    }
}
     a9c:	61 96       	adiw	r28, 0x11	; 17
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	08 95       	ret

00000aae <GPIO_init>:

#include "Settings.h"

void GPIO_init(){
    // Configure USART0 and USART1 pin routing
    PORTMUX.USARTROUTEA = PORTMUX_USART0_ALT1_gc | PORTMUX_USART1_ALT2_gc; // Set USART0 to alternative pins set 1, USART1 to alternative pins set 2
     aae:	e0 ee       	ldi	r30, 0xE0	; 224
     ab0:	f5 e0       	ldi	r31, 0x05	; 5
     ab2:	81 e1       	ldi	r24, 0x11	; 17
     ab4:	82 83       	std	Z+2, r24	; 0x02
    PORTMUX.TWIROUTEA = PORTMUX_TWI0_DEFAULT_gc; // Set TWI0 to default pins
     ab6:	16 82       	std	Z+6, r1	; 0x06
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;
     ab8:	83 e0       	ldi	r24, 0x03	; 3
     aba:	87 83       	std	Z+7, r24	; 0x07
	PORTMUX.TCDROUTEA = PORTMUX_TCD0_ALT2_gc; ///< Select alternative WOC pin variant 2
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	81 87       	std	Z+9, r24	; 0x09


    // Configure Port A (PA) for RX LED, I2C SDA, SCL, USART0 TX, TX LED and XDIR
    PORTA.DIRSET = PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // Set PA2, PA3, PA4, PA7 as output (RX LED, I2C SDA, SCL, USART0 TX, TX LED, XDIR)
     ac0:	e0 e0       	ldi	r30, 0x00	; 0
     ac2:	f4 e0       	ldi	r31, 0x04	; 4
     ac4:	8c ed       	ldi	r24, 0xDC	; 220
     ac6:	81 83       	std	Z+1, r24	; 0x01
    PORTA.DIRCLR = PIN1_bm | PIN5_bm; // Set  PA1 as Joystick button,  PA5 as input (USART0 RX)
     ac8:	82 e2       	ldi	r24, 0x22	; 34
     aca:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA1 (Joystick button)
     acc:	88 e0       	ldi	r24, 0x08	; 8
     ace:	81 8b       	std	Z+17, r24	; 0x11
    PORTA.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA4 (I2C SCL)
     ad0:	84 8b       	std	Z+20, r24	; 0x14
    PORTA.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA5 (USART0 RX)
     ad2:	85 8b       	std	Z+21, r24	; 0x15

    // Configure ADC pins for Joystick x and y axis
    PORTC.PIN1CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC1 (X axis)
     ad4:	e0 e4       	ldi	r30, 0x40	; 64
     ad6:	f4 e0       	ldi	r31, 0x04	; 4
     ad8:	91 89       	ldd	r25, Z+17	; 0x11
     ada:	98 7f       	andi	r25, 0xF8	; 248
     adc:	91 8b       	std	Z+17, r25	; 0x11
    PORTC.PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC1
     ade:	91 89       	ldd	r25, Z+17	; 0x11
     ae0:	94 60       	ori	r25, 0x04	; 4
     ae2:	91 8b       	std	Z+17, r25	; 0x11
    PORTC.PIN1CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC1
     ae4:	91 89       	ldd	r25, Z+17	; 0x11
     ae6:	97 7f       	andi	r25, 0xF7	; 247
     ae8:	91 8b       	std	Z+17, r25	; 0x11

    PORTC.PIN2CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC2 (Y axis)
     aea:	92 89       	ldd	r25, Z+18	; 0x12
     aec:	98 7f       	andi	r25, 0xF8	; 248
     aee:	92 8b       	std	Z+18, r25	; 0x12
    PORTC.PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC2
     af0:	92 89       	ldd	r25, Z+18	; 0x12
     af2:	94 60       	ori	r25, 0x04	; 4
     af4:	92 8b       	std	Z+18, r25	; 0x12
    PORTC.PIN2CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC2
     af6:	92 89       	ldd	r25, Z+18	; 0x12
     af8:	97 7f       	andi	r25, 0xF7	; 247
     afa:	92 8b       	std	Z+18, r25	; 0x12

	PORTC.DIRSET = PIN0_bm; //Set PC0 as RX LED
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	91 83       	std	Z+1, r25	; 0x01

    // Configure Port D (PD) for USART1 TX and RX
    PORTD.DIRSET = PIN2_bm | PIN3_bm | PIN5_bm; //Set PD2 as linear motor disable pin, PD3 as PWM, PD5 as direction
     b00:	9c e2       	ldi	r25, 0x2C	; 44
     b02:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f0461>
	//PORTD.DIRCLR = PIN4_bm; //Linear motor driver TLE9201SG error flag pin

	PORTF.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm; //Set PF1 as enable, PF2 as pulse, PIN3 as direction signals output for HBS86 driver
     b06:	e0 ea       	ldi	r30, 0xA0	; 160
     b08:	f4 e0       	ldi	r31, 0x04	; 4
     b0a:	9e e0       	ldi	r25, 0x0E	; 14
     b0c:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRCLR = PIN4_bm | PIN5_bm; //Set PF4 as alarm and PF5 as Pend signals inputs from HBS86 driver
     b0e:	90 e3       	ldi	r25, 0x30	; 48
     b10:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PF4
     b12:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PF5
     b14:	85 8b       	std	Z+21, r24	; 0x15
     b16:	08 95       	ret

00000b18 <I2C_init>:
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal to release the bus
    return data;
}
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f9 e0       	ldi	r31, 0x09	; 9
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	80 83       	st	Z, r24
     b20:	85 e0       	ldi	r24, 0x05	; 5
     b22:	86 83       	std	Z+6, r24	; 0x06
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	83 83       	std	Z+3, r24	; 0x03
     b28:	85 83       	std	Z+5, r24	; 0x05
     b2a:	08 95       	ret

00000b2c <TransmitAdd>:
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	86 2b       	or	r24, r22
     b34:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7f0907>
     b38:	48 e8       	ldi	r20, 0x88	; 136
     b3a:	53 e1       	ldi	r21, 0x13	; 19
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	09 c0       	rjmp	.+18     	; 0xb54 <TransmitAdd+0x28>
     b42:	41 50       	subi	r20, 0x01	; 1
     b44:	51 09       	sbc	r21, r1
     b46:	61 09       	sbc	r22, r1
     b48:	71 09       	sbc	r23, r1
     b4a:	21 f4       	brne	.+8      	; 0xb54 <TransmitAdd+0x28>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     b52:	05 c0       	rjmp	.+10     	; 0xb5e <TransmitAdd+0x32>
     b54:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b58:	80 7c       	andi	r24, 0xC0	; 192
     b5a:	99 f3       	breq	.-26     	; 0xb42 <TransmitAdd+0x16>
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b62:	94 fd       	sbrc	r25, 4
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b6a:	9c 70       	andi	r25, 0x0C	; 12
     b6c:	09 f0       	breq	.+2      	; 0xb70 <TransmitAdd+0x44>
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	88 23       	and	r24, r24
     b72:	19 f0       	breq	.+6      	; 0xb7a <TransmitAdd+0x4e>
     b74:	93 e0       	ldi	r25, 0x03	; 3
     b76:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     b7a:	80 93 c0 65 	sts	0x65C0, r24	; 0x8065c0 <I2C>
     b7e:	08 95       	ret

00000b80 <TransmitByte>:
     b80:	28 2f       	mov	r18, r24
     b82:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b86:	94 fd       	sbrc	r25, 4
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <TransmitByte+0xe>
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	01 c0       	rjmp	.+2      	; 0xb90 <TransmitByte+0x10>
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b94:	9c 70       	andi	r25, 0x0C	; 12
     b96:	09 f0       	breq	.+2      	; 0xb9a <TransmitByte+0x1a>
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	88 23       	and	r24, r24
     b9c:	19 f0       	breq	.+6      	; 0xba4 <TransmitByte+0x24>
     b9e:	93 e0       	ldi	r25, 0x03	; 3
     ba0:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     ba4:	81 11       	cpse	r24, r1
     ba6:	14 c0       	rjmp	.+40     	; 0xbd0 <TransmitByte+0x50>
     ba8:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <__TEXT_REGION_LENGTH__+0x7f0908>
     bac:	48 e8       	ldi	r20, 0x88	; 136
     bae:	53 e1       	ldi	r21, 0x13	; 19
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <TransmitByte+0x48>
     bb6:	41 50       	subi	r20, 0x01	; 1
     bb8:	51 09       	sbc	r21, r1
     bba:	61 09       	sbc	r22, r1
     bbc:	71 09       	sbc	r23, r1
     bbe:	21 f4       	brne	.+8      	; 0xbc8 <TransmitByte+0x48>
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <TransmitByte+0x50>
     bc8:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     bcc:	96 ff       	sbrs	r25, 6
     bce:	f3 cf       	rjmp	.-26     	; 0xbb6 <TransmitByte+0x36>
     bd0:	80 93 c0 65 	sts	0x65C0, r24	; 0x8065c0 <I2C>
     bd4:	08 95       	ret

00000bd6 <WriteToReg>:
 * @param reg Register address to write to.
 * @param data Data to write to the register.
 * 
 * This function writes the data to a specific register of an I2C device.
 */
void WriteToReg(uint8_t addr, uint8_t reg, uint8_t data) {
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	c6 2f       	mov	r28, r22
     bdc:	d4 2f       	mov	r29, r20
    if (!TransmitAdd(addr, WRITE)) { // Transmit address for write
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	0e 94 96 05 	call	0xb2c	; 0xb2c <TransmitAdd>
     be4:	81 11       	cpse	r24, r1
     be6:	08 c0       	rjmp	.+16     	; 0xbf8 <WriteToReg+0x22>
        if (!TransmitByte(reg)) { // Write register address
     be8:	8c 2f       	mov	r24, r28
     bea:	0e 94 c0 05 	call	0xb80	; 0xb80 <TransmitByte>
     bee:	81 11       	cpse	r24, r1
     bf0:	03 c0       	rjmp	.+6      	; 0xbf8 <WriteToReg+0x22>
            TransmitByte(data); // Write the data with STOP
     bf2:	8d 2f       	mov	r24, r29
     bf4:	0e 94 c0 05 	call	0xb80	; 0xb80 <TransmitByte>
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal
     bf8:	e0 e0       	ldi	r30, 0x00	; 0
     bfa:	f9 e0       	ldi	r31, 0x09	; 9
     bfc:	84 81       	ldd	r24, Z+4	; 0x04
     bfe:	83 60       	ori	r24, 0x03	; 3
     c00:	84 83       	std	Z+4, r24	; 0x04
}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <ReadButton>:
 */ 
#include "Settings.h"
#include "JoystickVar.h"

uint8_t ReadButton(){
	return !(PORTA.IN & PIN1_bm);
     c08:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
     c0c:	86 95       	lsr	r24
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	89 27       	eor	r24, r25
}
     c12:	81 70       	andi	r24, 0x01	; 1
     c14:	08 95       	ret

00000c16 <LatchSwitcher>:

void LatchSwitcher(){
	if (ReadButton()){
     c16:	0e 94 04 06 	call	0xc08	; 0xc08 <ReadButton>
     c1a:	88 23       	and	r24, r24
     c1c:	61 f0       	breq	.+24     	; 0xc36 <LatchSwitcher+0x20>
		if(!Joystick.LastState){
     c1e:	80 91 c6 65 	lds	r24, 0x65C6	; 0x8065c6 <Joystick+0x5>
     c22:	81 11       	cpse	r24, r1
     c24:	0d c0       	rjmp	.+26     	; 0xc40 <LatchSwitcher+0x2a>
			Joystick.LatchSwitch ^= 1;
     c26:	e1 ec       	ldi	r30, 0xC1	; 193
     c28:	f5 e6       	ldi	r31, 0x65	; 101
     c2a:	86 81       	ldd	r24, Z+6	; 0x06
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	89 27       	eor	r24, r25
     c30:	86 83       	std	Z+6, r24	; 0x06
			Joystick.LastState = true;
     c32:	95 83       	std	Z+5, r25	; 0x05
     c34:	08 95       	ret
		}
	}
	else{
		if(Joystick.LastState){
     c36:	80 91 c6 65 	lds	r24, 0x65C6	; 0x8065c6 <Joystick+0x5>
     c3a:	81 11       	cpse	r24, r1
			Joystick.LastState = false;
     c3c:	10 92 c6 65 	sts	0x65C6, r1	; 0x8065c6 <Joystick+0x5>
     c40:	08 95       	ret

00000c42 <ReadJoystickValues>:
		}
	}
}

void ReadJoystickValues(){
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
	ADC0_SetupJoystick(Joystick_X_axis_CH);
     c4a:	8e e1       	ldi	r24, 0x1E	; 30
     c4c:	0e 94 85 02 	call	0x50a	; 0x50a <ADC0_SetupJoystick>
	Joystick.X_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps; // 5 steps total: -2,-1,0,1,2 (4096/1000 = 4,096)
     c50:	0e 94 b1 02 	call	0x562	; 0x562 <ADC0_read>
     c54:	98 50       	subi	r25, 0x08	; 8
     c56:	04 ef       	ldi	r16, 0xF4	; 244
     c58:	11 e0       	ldi	r17, 0x01	; 1
     c5a:	b8 01       	movw	r22, r16
     c5c:	0e 94 a1 10 	call	0x2142	; 0x2142 <__divmodhi4>
     c60:	c1 ec       	ldi	r28, 0xC1	; 193
     c62:	d5 e6       	ldi	r29, 0x65	; 101
     c64:	68 83       	st	Y, r22
     c66:	79 83       	std	Y+1, r23	; 0x01
	ADC0_SetupJoystick(Joystick_Y_axis_CH);
     c68:	8d e1       	ldi	r24, 0x1D	; 29
     c6a:	0e 94 85 02 	call	0x50a	; 0x50a <ADC0_SetupJoystick>
	Joystick.Y_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps;
     c6e:	0e 94 b1 02 	call	0x562	; 0x562 <ADC0_read>
     c72:	98 50       	subi	r25, 0x08	; 8
     c74:	b8 01       	movw	r22, r16
     c76:	0e 94 a1 10 	call	0x2142	; 0x2142 <__divmodhi4>
     c7a:	6a 83       	std	Y+2, r22	; 0x02
     c7c:	7b 83       	std	Y+3, r23	; 0x03
	Joystick.Button = ReadButton();
     c7e:	0e 94 04 06 	call	0xc08	; 0xc08 <ReadButton>
     c82:	8c 83       	std	Y+4, r24	; 0x04
}
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	08 95       	ret

00000c8e <SelectWindow>:


void SelectWindow(){
	if(Joystick.Y_Axis >= 1)
     c8e:	80 91 c3 65 	lds	r24, 0x65C3	; 0x8065c3 <Joystick+0x2>
     c92:	90 91 c4 65 	lds	r25, 0x65C4	; 0x8065c4 <Joystick+0x3>
     c96:	18 16       	cp	r1, r24
     c98:	19 06       	cpc	r1, r25
     c9a:	1c f4       	brge	.+6      	; 0xca2 <SelectWindow+0x14>
		show.window = 1;
     c9c:	21 e0       	ldi	r18, 0x01	; 1
     c9e:	20 93 ec 65 	sts	0x65EC, r18	; 0x8065ec <show>
	if(Joystick.Y_Axis <= -1)
     ca2:	99 23       	and	r25, r25
     ca4:	14 f4       	brge	.+4      	; 0xcaa <SelectWindow+0x1c>
		show.window = 0;
     ca6:	10 92 ec 65 	sts	0x65EC, r1	; 0x8065ec <show>
     caa:	08 95       	ret

00000cac <LinearMotor_enable>:
	PORTD.OUTSET = PIN2_bm; //set output disabled for TLE9201SG
};

bool Read_LinearMotor_EF(){ // false if driver has a error (overheat, linear motor stuck and so on)
	return PORTD.IN & PIN4_bm;
}
     cac:	80 91 cc 65 	lds	r24, 0x65CC	; 0x8065cc <LinearMotor+0x3>
     cb0:	81 11       	cpse	r24, r1
     cb2:	0b c0       	rjmp	.+22     	; 0xcca <LinearMotor_enable+0x1e>
     cb4:	84 e0       	ldi	r24, 0x04	; 4
     cb6:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
     cba:	88 e2       	ldi	r24, 0x28	; 40
     cbc:	8a 95       	dec	r24
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <LinearMotor_enable+0x10>
     cc0:	e9 ec       	ldi	r30, 0xC9	; 201
     cc2:	f5 e6       	ldi	r31, 0x65	; 101
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	83 83       	std	Z+3, r24	; 0x03
     cc8:	14 82       	std	Z+4, r1	; 0x04
     cca:	08 95       	ret

00000ccc <LinearMotor_disable>:
     ccc:	80 91 cd 65 	lds	r24, 0x65CD	; 0x8065cd <LinearMotor+0x4>
     cd0:	81 11       	cpse	r24, r1
     cd2:	0b c0       	rjmp	.+22     	; 0xcea <LinearMotor_disable+0x1e>
     cd4:	84 e0       	ldi	r24, 0x04	; 4
     cd6:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     cda:	88 e2       	ldi	r24, 0x28	; 40
     cdc:	8a 95       	dec	r24
     cde:	f1 f7       	brne	.-4      	; 0xcdc <LinearMotor_disable+0x10>
     ce0:	e9 ec       	ldi	r30, 0xC9	; 201
     ce2:	f5 e6       	ldi	r31, 0x65	; 101
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	84 83       	std	Z+4, r24	; 0x04
     ce8:	13 82       	std	Z+3, r1	; 0x03
     cea:	08 95       	ret

00000cec <LinearMotor_start>:
     cec:	80 91 ca 65 	lds	r24, 0x65CA	; 0x8065ca <LinearMotor+0x1>
     cf0:	81 11       	cpse	r24, r1
     cf2:	0d c0       	rjmp	.+26     	; 0xd0e <LinearMotor_start+0x22>
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	fa e0       	ldi	r31, 0x0A	; 10
     cf8:	81 81       	ldd	r24, Z+1	; 0x01
     cfa:	80 61       	ori	r24, 0x10	; 16
     cfc:	81 83       	std	Z+1, r24	; 0x01
     cfe:	80 81       	ld	r24, Z
     d00:	81 60       	ori	r24, 0x01	; 1
     d02:	80 83       	st	Z, r24
     d04:	e9 ec       	ldi	r30, 0xC9	; 201
     d06:	f5 e6       	ldi	r31, 0x65	; 101
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	81 83       	std	Z+1, r24	; 0x01
     d0c:	12 82       	std	Z+2, r1	; 0x02
     d0e:	08 95       	ret

00000d10 <LinearMotor_stop>:
     d10:	80 91 cb 65 	lds	r24, 0x65CB	; 0x8065cb <LinearMotor+0x2>
     d14:	81 11       	cpse	r24, r1
     d16:	19 c0       	rjmp	.+50     	; 0xd4a <LinearMotor_stop+0x3a>
     d18:	e0 e0       	ldi	r30, 0x00	; 0
     d1a:	fa e0       	ldi	r31, 0x0A	; 10
     d1c:	81 81       	ldd	r24, Z+1	; 0x01
     d1e:	8f 7e       	andi	r24, 0xEF	; 239
     d20:	81 83       	std	Z+1, r24	; 0x01
     d22:	80 81       	ld	r24, Z
     d24:	8e 7f       	andi	r24, 0xFE	; 254
     d26:	80 83       	st	Z, r24
     d28:	88 e0       	ldi	r24, 0x08	; 8
     d2a:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
     d2e:	2f ef       	ldi	r18, 0xFF	; 255
     d30:	8e e9       	ldi	r24, 0x9E	; 158
     d32:	94 e2       	ldi	r25, 0x24	; 36
     d34:	21 50       	subi	r18, 0x01	; 1
     d36:	80 40       	sbci	r24, 0x00	; 0
     d38:	90 40       	sbci	r25, 0x00	; 0
     d3a:	e1 f7       	brne	.-8      	; 0xd34 <LinearMotor_stop+0x24>
     d3c:	00 c0       	rjmp	.+0      	; 0xd3e <LinearMotor_stop+0x2e>
     d3e:	00 00       	nop
     d40:	e9 ec       	ldi	r30, 0xC9	; 201
     d42:	f5 e6       	ldi	r31, 0x65	; 101
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	82 83       	std	Z+2, r24	; 0x02
     d48:	11 82       	std	Z+1, r1	; 0x01
     d4a:	08 95       	ret

00000d4c <LinearMotor_set_direction>:
     d4c:	cf 93       	push	r28
     d4e:	90 91 c9 65 	lds	r25, 0x65C9	; 0x8065c9 <LinearMotor>
     d52:	98 17       	cp	r25, r24
     d54:	99 f0       	breq	.+38     	; 0xd7c <LinearMotor_set_direction+0x30>
     d56:	c8 2f       	mov	r28, r24
     d58:	0e 94 88 06 	call	0xd10	; 0xd10 <LinearMotor_stop>
     d5c:	cc 23       	and	r28, r28
     d5e:	21 f0       	breq	.+8      	; 0xd68 <LinearMotor_set_direction+0x1c>
     d60:	80 e2       	ldi	r24, 0x20	; 32
     d62:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <LinearMotor_set_direction+0x22>
     d68:	80 e2       	ldi	r24, 0x20	; 32
     d6a:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
     d6e:	88 e2       	ldi	r24, 0x28	; 40
     d70:	8a 95       	dec	r24
     d72:	f1 f7       	brne	.-4      	; 0xd70 <LinearMotor_set_direction+0x24>
     d74:	0e 94 76 06 	call	0xcec	; 0xcec <LinearMotor_start>
     d78:	c0 93 c9 65 	sts	0x65C9, r28	; 0x8065c9 <LinearMotor>
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret

00000d80 <LinearMotor_init>:
     d80:	62 e3       	ldi	r22, 0x32	; 50
     d82:	80 e2       	ldi	r24, 0x20	; 32
     d84:	9e e4       	ldi	r25, 0x4E	; 78
     d86:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <TCA0_init_linear_PWM>
     d8a:	84 e0       	ldi	r24, 0x04	; 4
     d8c:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     d90:	08 95       	ret

00000d92 <Read_LinearMotor_Voltage>:

uint16_t Read_LinearMotor_Voltage(){
	ADC0_SetupLinearMotor(0);
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	0e 94 8b 02 	call	0x516	; 0x516 <ADC0_SetupLinearMotor>
	return (ADC0_read() * 0.075) * LinearMotor_Voltage_Compensation_koef; // same as ADC read/2000 * 30V (300k) / 2V(AMC1131 full range) )
     d98:	0e 94 b1 02 	call	0x562	; 0x562 <ADC0_read>
     d9c:	bc 01       	movw	r22, r24
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatunsisf>
     da6:	2a e9       	ldi	r18, 0x9A	; 154
     da8:	39 e9       	ldi	r19, 0x99	; 153
     daa:	49 e9       	ldi	r20, 0x99	; 153
     dac:	5d e3       	ldi	r21, 0x3D	; 61
     dae:	0e 94 34 10 	call	0x2068	; 0x2068 <__mulsf3>
     db2:	23 e8       	ldi	r18, 0x83	; 131
     db4:	3d ed       	ldi	r19, 0xDD	; 221
     db6:	4c e7       	ldi	r20, 0x7C	; 124
     db8:	5f e3       	ldi	r21, 0x3F	; 63
     dba:	0e 94 34 10 	call	0x2068	; 0x2068 <__mulsf3>
     dbe:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__fixunssfsi>
}
     dc2:	cb 01       	movw	r24, r22
     dc4:	08 95       	ret

00000dc6 <Read_LinearMotor_Current>:

int16_t Read_LinearMotor_Current(){
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
	ADC0_SetupLinearMotor(1);
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	0e 94 8b 02 	call	0x516	; 0x516 <ADC0_SetupLinearMotor>
	return ((int16_t)ADC0_read() - (int16_t)Read_MCU_Voltge())/4;
     dd0:	0e 94 b1 02 	call	0x562	; 0x562 <ADC0_read>
     dd4:	ec 01       	movw	r28, r24
     dd6:	0e 94 c5 02 	call	0x58a	; 0x58a <Read_MCU_Voltge>
     dda:	9e 01       	movw	r18, r28
     ddc:	28 1b       	sub	r18, r24
     dde:	39 0b       	sbc	r19, r25
     de0:	c9 01       	movw	r24, r18
     de2:	99 23       	and	r25, r25
     de4:	0c f4       	brge	.+2      	; 0xde8 <Read_LinearMotor_Current+0x22>
     de6:	03 96       	adiw	r24, 0x03	; 3
     de8:	95 95       	asr	r25
     dea:	87 95       	ror	r24
     dec:	95 95       	asr	r25
     dee:	87 95       	ror	r24
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <main>:

#include "Settings.h"

int main(void)
{
    CLOCK_XOSCHF_clock_init();
     df6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <CLOCK_XOSCHF_clock_init>
    GPIO_init();
     dfa:	0e 94 57 05 	call	0xaae	; 0xaae <GPIO_init>
	LinearMotor_init();
     dfe:	0e 94 c0 06 	call	0xd80	; 0xd80 <LinearMotor_init>
	Stepper_init();
     e02:	0e 94 27 0a 	call	0x144e	; 0x144e <Stepper_init>
    I2C_init();
     e06:	0e 94 8c 05 	call	0xb18	; 0xb18 <I2C_init>
    ADC0_init();
     e0a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <ADC0_init>
    USART0_init();
     e0e:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <USART0_init>
    USART1_init();
     e12:	0e 94 97 0b 	call	0x172e	; 0x172e <USART1_init>
    screen_init();
     e16:	0e 94 be 08 	call	0x117c	; 0x117c <screen_init>
    screen_clear();
     e1a:	0e 94 05 09 	call	0x120a	; 0x120a <screen_clear>
     e1e:	2f ef       	ldi	r18, 0xFF	; 255
     e20:	88 ef       	ldi	r24, 0xF8	; 248
     e22:	95 e1       	ldi	r25, 0x15	; 21
     e24:	21 50       	subi	r18, 0x01	; 1
     e26:	80 40       	sbci	r24, 0x00	; 0
     e28:	90 40       	sbci	r25, 0x00	; 0
     e2a:	e1 f7       	brne	.-8      	; 0xe24 <main+0x2e>
     e2c:	00 c0       	rjmp	.+0      	; 0xe2e <main+0x38>
     e2e:	00 00       	nop
	_delay_ms(300); //Let to boot Top controller
	FOReceiver(); // Received Fiber optic data
     e30:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <FOReceiver>
	RS485Receiver(); //RS485 communication
     e34:	0e 94 5e 08 	call	0x10bc	; 0x10bc <RS485Receiver>
    while (1) 
    {
		RS485Receiver(); //RS485 communication
     e38:	0e 94 5e 08 	call	0x10bc	; 0x10bc <RS485Receiver>
		FOReceiver(); // Received Fiber optic data
     e3c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <FOReceiver>
		work();//Actions with motors
     e40:	0e 94 1d 02 	call	0x43a	; 0x43a <work>
		windows();
     e44:	0e 94 a0 0c 	call	0x1940	; 0x1940 <windows>
     e48:	f7 cf       	rjmp	.-18     	; 0xe38 <main+0x42>

00000e4a <RS485_Led>:
 */ 
#include "Settings.h"

void RS485_Led(RS485_LED_t LED){

    switch (LED) {
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	51 f0       	breq	.+20     	; 0xe62 <RS485_Led+0x18>
     e4e:	28 f0       	brcs	.+10     	; 0xe5a <RS485_Led+0x10>
     e50:	82 30       	cpi	r24, 0x02	; 2
     e52:	59 f0       	breq	.+22     	; 0xe6a <RS485_Led+0x20>
     e54:	83 30       	cpi	r24, 0x03	; 3
     e56:	69 f0       	breq	.+26     	; 0xe72 <RS485_Led+0x28>
     e58:	08 95       	ret
	    case RX_LED_ON:
			PORTC.OUTSET = PIN0_bm;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f0445>
		break;
     e60:	08 95       	ret
	    case RX_LED_OFF:
			PORTC.OUTCLR = PIN0_bm;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f0446>
		break;
     e68:	08 95       	ret
	    case TX_LED_ON:
			PORTA.OUTSET = PIN6_bm;
     e6a:	80 e4       	ldi	r24, 0x40	; 64
     e6c:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f0405>
		break;
     e70:	08 95       	ret
	    case TX_LED_OFF:
			PORTA.OUTCLR = PIN6_bm;
     e72:	80 e4       	ldi	r24, 0x40	; 64
     e74:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f0406>
     e78:	08 95       	ret

00000e7a <RS485DataSplitter>:
 */ 
#include "Settings.h"
#include "RS485USARTVar.h"


void RS485DataSplitter(char *command) {
     e7a:	af 92       	push	r10
     e7c:	bf 92       	push	r11
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	a6 97       	sbiw	r28, 0x26	; 38
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	7c 01       	movw	r14, r24
	for (uint8_t i = 0; token != NULL && i < 6; i++) {
		*fields[i] = (uint16_t)strtol(token, NULL, 10);
		token = strtok(NULL, "|");
	}*/

	const uint8_t lengths[] = {4, 4, 4, 2, 1, 3}; //tokens length without crc
     e9a:	86 e0       	ldi	r24, 0x06	; 6
     e9c:	e8 e9       	ldi	r30, 0x98	; 152
     e9e:	f3 e6       	ldi	r31, 0x63	; 99
     ea0:	de 01       	movw	r26, r28
     ea2:	11 96       	adiw	r26, 0x01	; 1
     ea4:	01 90       	ld	r0, Z+
     ea6:	0d 92       	st	X+, r0
     ea8:	8a 95       	dec	r24
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <RS485DataSplitter+0x2a>
	char temp[MESSAGE_LENGTH_RS485-2]; //data storage

	strncpy(temp, command, MESSAGE_LENGTH_RS485-2); //copy data without crc
     eac:	42 e1       	ldi	r20, 0x12	; 18
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	b7 01       	movw	r22, r14
     eb2:	ce 01       	movw	r24, r28
     eb4:	07 96       	adiw	r24, 0x07	; 7
     eb6:	0e 94 ae 12 	call	0x255c	; 0x255c <strncpy>
	temp[MESSAGE_LENGTH_RS485-2] = '\0';
     eba:	19 8e       	std	Y+25, r1	; 0x19

	uint8_t datatocheck[(MESSAGE_LENGTH_RS485-2)/2]={0};
     ebc:	fe 01       	movw	r30, r28
     ebe:	79 96       	adiw	r30, 0x19	; 25
     ec0:	89 e0       	ldi	r24, 0x09	; 9
     ec2:	df 01       	movw	r26, r30
     ec4:	1d 92       	st	X+, r1
     ec6:	8a 95       	dec	r24
     ec8:	e9 f7       	brne	.-6      	; 0xec4 <RS485DataSplitter+0x4a>

	for (uint8_t i = 0; i < (MESSAGE_LENGTH_RS485-2)/2; i++) {
     eca:	d1 2c       	mov	r13, r1
     ecc:	27 c0       	rjmp	.+78     	; 0xf1c <RS485DataSplitter+0xa2>
		char buf[3] = { temp[i * 2], temp[i * 2 + 1], '\0' }; // du simboliai + '\0'
     ece:	0d 2d       	mov	r16, r13
     ed0:	10 e0       	ldi	r17, 0x00	; 0
     ed2:	c8 01       	movw	r24, r16
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	e7 e0       	ldi	r30, 0x07	; 7
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	ec 0f       	add	r30, r28
     ede:	fd 1f       	adc	r31, r29
     ee0:	e8 0f       	add	r30, r24
     ee2:	f9 1f       	adc	r31, r25
     ee4:	20 81       	ld	r18, Z
     ee6:	2a a3       	std	Y+34, r18	; 0x22
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	e7 e0       	ldi	r30, 0x07	; 7
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	ec 0f       	add	r30, r28
     ef0:	fd 1f       	adc	r31, r29
     ef2:	e8 0f       	add	r30, r24
     ef4:	f9 1f       	adc	r31, r25
     ef6:	80 81       	ld	r24, Z
     ef8:	8b a3       	std	Y+35, r24	; 0x23
     efa:	1c a2       	std	Y+36, r1	; 0x24
		datatocheck[i] = (uint8_t)strtol(buf, NULL, 16);
     efc:	40 e1       	ldi	r20, 0x10	; 16
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	ce 01       	movw	r24, r28
     f06:	82 96       	adiw	r24, 0x22	; 34
     f08:	0e 94 68 11 	call	0x22d0	; 0x22d0 <strtol>
     f0c:	e9 e1       	ldi	r30, 0x19	; 25
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	ec 0f       	add	r30, r28
     f12:	fd 1f       	adc	r31, r29
     f14:	e0 0f       	add	r30, r16
     f16:	f1 1f       	adc	r31, r17
     f18:	60 83       	st	Z, r22
	strncpy(temp, command, MESSAGE_LENGTH_RS485-2); //copy data without crc
	temp[MESSAGE_LENGTH_RS485-2] = '\0';

	uint8_t datatocheck[(MESSAGE_LENGTH_RS485-2)/2]={0};

	for (uint8_t i = 0; i < (MESSAGE_LENGTH_RS485-2)/2; i++) {
     f1a:	d3 94       	inc	r13
     f1c:	b8 e0       	ldi	r27, 0x08	; 8
     f1e:	bd 15       	cp	r27, r13
     f20:	b0 f6       	brcc	.-84     	; 0xece <RS485DataSplitter+0x54>
		char buf[3] = { temp[i * 2], temp[i * 2 + 1], '\0' }; // du simboliai + '\0'
		datatocheck[i] = (uint8_t)strtol(buf, NULL, 16);
	}
	strncpy(temp, command + (MESSAGE_LENGTH_RS485-2), 2); //copy only crc
     f22:	42 e0       	ldi	r20, 0x02	; 2
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	b7 01       	movw	r22, r14
     f28:	6e 5e       	subi	r22, 0xEE	; 238
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	ce 01       	movw	r24, r28
     f2e:	07 96       	adiw	r24, 0x07	; 7
     f30:	0e 94 ae 12 	call	0x255c	; 0x255c <strncpy>
	temp[2] = '\0';
     f34:	19 86       	std	Y+9, r1	; 0x09

	uint8_t crctocheck = (uint8_t)strtol(temp, NULL, 16); //convert char to int
     f36:	40 e1       	ldi	r20, 0x10	; 16
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	ce 01       	movw	r24, r28
     f40:	07 96       	adiw	r24, 0x07	; 7
     f42:	0e 94 68 11 	call	0x22d0	; 0x22d0 <strtol>

	if(verify_crc8_cdma2000_v2(datatocheck, crctocheck)){ //if data valid update it
     f46:	ce 01       	movw	r24, r28
     f48:	49 96       	adiw	r24, 0x19	; 25
     f4a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <verify_crc8_cdma2000_v2>
     f4e:	81 11       	cpse	r24, r1
     f50:	9b c0       	rjmp	.+310    	; 0x1088 <RS485DataSplitter+0x20e>
     f52:	a3 c0       	rjmp	.+326    	; 0x109a <RS485DataSplitter+0x220>
		//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
		const char *p = command;

		for (uint8_t i = 0; i < 6; i++) {
			char token[5] = {0}; //longest token length + 1
     f54:	5e 01       	movw	r10, r28
     f56:	e2 e2       	ldi	r30, 0x22	; 34
     f58:	ae 0e       	add	r10, r30
     f5a:	b1 1c       	adc	r11, r1
     f5c:	85 e0       	ldi	r24, 0x05	; 5
     f5e:	d5 01       	movw	r26, r10
     f60:	1d 92       	st	X+, r1
     f62:	8a 95       	dec	r24
     f64:	e9 f7       	brne	.-6      	; 0xf60 <RS485DataSplitter+0xe6>

			memcpy(token, p, lengths[i]);
     f66:	e1 e0       	ldi	r30, 0x01	; 1
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	ec 0f       	add	r30, r28
     f6c:	fd 1f       	adc	r31, r29
     f6e:	e1 0f       	add	r30, r17
     f70:	f1 1d       	adc	r31, r1
     f72:	c0 80       	ld	r12, Z
     f74:	d1 2c       	mov	r13, r1
     f76:	a6 01       	movw	r20, r12
     f78:	b7 01       	movw	r22, r14
     f7a:	c5 01       	movw	r24, r10
     f7c:	0e 94 87 12 	call	0x250e	; 0x250e <memcpy>
			token[lengths[i]] = '\0';
     f80:	f5 01       	movw	r30, r10
     f82:	ec 0d       	add	r30, r12
     f84:	fd 1d       	adc	r31, r13
     f86:	10 82       	st	Z, r1

			switch (i) {
     f88:	12 30       	cpi	r17, 0x02	; 2
     f8a:	09 f4       	brne	.+2      	; 0xf8e <RS485DataSplitter+0x114>
     f8c:	3f c0       	rjmp	.+126    	; 0x100c <RS485DataSplitter+0x192>
     f8e:	28 f4       	brcc	.+10     	; 0xf9a <RS485DataSplitter+0x120>
     f90:	11 23       	and	r17, r17
     f92:	61 f0       	breq	.+24     	; 0xfac <RS485DataSplitter+0x132>
     f94:	11 30       	cpi	r17, 0x01	; 1
     f96:	11 f1       	breq	.+68     	; 0xfdc <RS485DataSplitter+0x162>
     f98:	73 c0       	rjmp	.+230    	; 0x1080 <RS485DataSplitter+0x206>
     f9a:	14 30       	cpi	r17, 0x04	; 4
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <RS485DataSplitter+0x126>
     f9e:	59 c0       	rjmp	.+178    	; 0x1052 <RS485DataSplitter+0x1d8>
     fa0:	08 f4       	brcc	.+2      	; 0xfa4 <RS485DataSplitter+0x12a>
     fa2:	4c c0       	rjmp	.+152    	; 0x103c <RS485DataSplitter+0x1c2>
     fa4:	15 30       	cpi	r17, 0x05	; 5
     fa6:	09 f4       	brne	.+2      	; 0xfaa <RS485DataSplitter+0x130>
     fa8:	5f c0       	rjmp	.+190    	; 0x1068 <RS485DataSplitter+0x1ee>
     faa:	6a c0       	rjmp	.+212    	; 0x1080 <RS485DataSplitter+0x206>
				case 0: WSData.azimuth   = (uint16_t)strtol(token, NULL, 16) / Angle_Precizion; break;
     fac:	40 e1       	ldi	r20, 0x10	; 16
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	ce 01       	movw	r24, r28
     fb6:	82 96       	adiw	r24, 0x22	; 34
     fb8:	0e 94 68 11 	call	0x22d0	; 0x22d0 <strtol>
     fbc:	9b 01       	movw	r18, r22
     fbe:	36 95       	lsr	r19
     fc0:	27 95       	ror	r18
     fc2:	36 95       	lsr	r19
     fc4:	27 95       	ror	r18
     fc6:	ab e7       	ldi	r26, 0x7B	; 123
     fc8:	b4 e1       	ldi	r27, 0x14	; 20
     fca:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__umulhisi3>
     fce:	96 95       	lsr	r25
     fd0:	87 95       	ror	r24
     fd2:	80 93 d4 65 	sts	0x65D4, r24	; 0x8065d4 <WSData>
     fd6:	90 93 d5 65 	sts	0x65D5, r25	; 0x8065d5 <WSData+0x1>
     fda:	52 c0       	rjmp	.+164    	; 0x1080 <RS485DataSplitter+0x206>
				case 1: WSData.elevation     = (uint16_t)strtol(token, NULL, 16) / Angle_Precizion; break;
     fdc:	40 e1       	ldi	r20, 0x10	; 16
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	ce 01       	movw	r24, r28
     fe6:	82 96       	adiw	r24, 0x22	; 34
     fe8:	0e 94 68 11 	call	0x22d0	; 0x22d0 <strtol>
     fec:	9b 01       	movw	r18, r22
     fee:	36 95       	lsr	r19
     ff0:	27 95       	ror	r18
     ff2:	36 95       	lsr	r19
     ff4:	27 95       	ror	r18
     ff6:	ab e7       	ldi	r26, 0x7B	; 123
     ff8:	b4 e1       	ldi	r27, 0x14	; 20
     ffa:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__umulhisi3>
     ffe:	96 95       	lsr	r25
    1000:	87 95       	ror	r24
    1002:	80 93 d6 65 	sts	0x65D6, r24	; 0x8065d6 <WSData+0x2>
    1006:	90 93 d7 65 	sts	0x65D7, r25	; 0x8065d7 <WSData+0x3>
    100a:	3a c0       	rjmp	.+116    	; 0x1080 <RS485DataSplitter+0x206>
				case 2: WSData.topelevation         = (uint16_t)strtol(token, NULL, 16) / Angle_Precizion; break;
    100c:	40 e1       	ldi	r20, 0x10	; 16
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	ce 01       	movw	r24, r28
    1016:	82 96       	adiw	r24, 0x22	; 34
    1018:	0e 94 68 11 	call	0x22d0	; 0x22d0 <strtol>
    101c:	9b 01       	movw	r18, r22
    101e:	36 95       	lsr	r19
    1020:	27 95       	ror	r18
    1022:	36 95       	lsr	r19
    1024:	27 95       	ror	r18
    1026:	ab e7       	ldi	r26, 0x7B	; 123
    1028:	b4 e1       	ldi	r27, 0x14	; 20
    102a:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__umulhisi3>
    102e:	96 95       	lsr	r25
    1030:	87 95       	ror	r24
    1032:	80 93 d8 65 	sts	0x65D8, r24	; 0x8065d8 <WSData+0x4>
    1036:	90 93 d9 65 	sts	0x65D9, r25	; 0x8065d9 <WSData+0x5>
    103a:	22 c0       	rjmp	.+68     	; 0x1080 <RS485DataSplitter+0x206>
				case 3: WSData.windspeed         = (uint8_t)strtol(token, NULL, 16); break;
    103c:	40 e1       	ldi	r20, 0x10	; 16
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	ce 01       	movw	r24, r28
    1046:	82 96       	adiw	r24, 0x22	; 34
    1048:	0e 94 68 11 	call	0x22d0	; 0x22d0 <strtol>
    104c:	60 93 da 65 	sts	0x65DA, r22	; 0x8065da <WSData+0x6>
    1050:	17 c0       	rjmp	.+46     	; 0x1080 <RS485DataSplitter+0x206>
				case 4: WSData.winddirection       = (uint8_t)strtol(token, NULL, 16); break;
    1052:	40 e1       	ldi	r20, 0x10	; 16
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	ce 01       	movw	r24, r28
    105c:	82 96       	adiw	r24, 0x22	; 34
    105e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <strtol>
    1062:	60 93 db 65 	sts	0x65DB, r22	; 0x8065db <WSData+0x7>
    1066:	0c c0       	rjmp	.+24     	; 0x1080 <RS485DataSplitter+0x206>
				case 5: WSData.lightlevel	= (uint16_t)strtol(token, NULL, 16); break;
    1068:	40 e1       	ldi	r20, 0x10	; 16
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	ce 01       	movw	r24, r28
    1072:	82 96       	adiw	r24, 0x22	; 34
    1074:	0e 94 68 11 	call	0x22d0	; 0x22d0 <strtol>
    1078:	60 93 dc 65 	sts	0x65DC, r22	; 0x8065dc <WSData+0x8>
    107c:	70 93 dd 65 	sts	0x65DD, r23	; 0x8065dd <WSData+0x9>
			}

			p += lengths[i];
    1080:	ec 0c       	add	r14, r12
    1082:	fd 1c       	adc	r15, r13

	if(verify_crc8_cdma2000_v2(datatocheck, crctocheck)){ //if data valid update it
		//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
		const char *p = command;

		for (uint8_t i = 0; i < 6; i++) {
    1084:	1f 5f       	subi	r17, 0xFF	; 255
    1086:	01 c0       	rjmp	.+2      	; 0x108a <RS485DataSplitter+0x210>
    1088:	10 e0       	ldi	r17, 0x00	; 0
    108a:	16 30       	cpi	r17, 0x06	; 6
    108c:	08 f4       	brcc	.+2      	; 0x1090 <RS485DataSplitter+0x216>
    108e:	62 cf       	rjmp	.-316    	; 0xf54 <RS485DataSplitter+0xda>
				case 5: WSData.lightlevel	= (uint16_t)strtol(token, NULL, 16); break;
			}

			p += lengths[i];
		}
		WSData.WS_data_fault = false; //reset error
    1090:	e4 ed       	ldi	r30, 0xD4	; 212
    1092:	f5 e6       	ldi	r31, 0x65	; 101
    1094:	14 86       	std	Z+12, r1	; 0x0c
		WSData.WS_lost_signal_fault = false; //reset error
    1096:	13 86       	std	Z+11, r1	; 0x0b
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <RS485DataSplitter+0x226>

	}
	else{
		//uncomment if nedded
		//screen_write_formatted_text("data is corupted!", 1, ALIGN_CENTER); // bad crc
		WSData.WS_data_fault = true;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	80 93 e0 65 	sts	0x65E0, r24	; 0x8065e0 <WSData+0xc>
	}

}
    10a0:	a6 96       	adiw	r28, 0x26	; 38
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	ff 90       	pop	r15
    10b0:	ef 90       	pop	r14
    10b2:	df 90       	pop	r13
    10b4:	cf 90       	pop	r12
    10b6:	bf 90       	pop	r11
    10b8:	af 90       	pop	r10
    10ba:	08 95       	ret

000010bc <RS485Receiver>:

void RS485Receiver() {
    10bc:	ff 92       	push	r15
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	64 97       	sbiw	r28, 0x14	; 20
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	de bf       	out	0x3e, r29	; 62
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
    10d0:	fe 01       	movw	r30, r28
    10d2:	31 96       	adiw	r30, 0x01	; 1
    10d4:	84 e1       	ldi	r24, 0x14	; 20
    10d6:	df 01       	movw	r26, r30
    10d8:	1d 92       	st	X+, r1
    10da:	8a 95       	dec	r24
    10dc:	e9 f7       	brne	.-6      	; 0x10d8 <RS485Receiver+0x1c>
	uint8_t start = 0;
	uint8_t timeout = 0;
	WSData.WS_lost_connecton_fault = false;
    10de:	e4 ed       	ldi	r30, 0xD4	; 212
    10e0:	f5 e6       	ldi	r31, 0x65	; 101
    10e2:	12 86       	std	Z+10, r1	; 0x0a
	WSData.WS_lost_signal_fault = false;
    10e4:	13 86       	std	Z+11, r1	; 0x0b

void RS485Receiver() {
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
	uint8_t start = 0;
	uint8_t timeout = 0;
    10e6:	10 e0       	ldi	r17, 0x00	; 0
}

void RS485Receiver() {
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
	uint8_t start = 0;
    10e8:	f1 2c       	mov	r15, r1
	}

}

void RS485Receiver() {
	uint8_t index = 0;
    10ea:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t timeout = 0;
	WSData.WS_lost_connecton_fault = false;
	WSData.WS_lost_signal_fault = false;

	while (1) {
		char c = USART0_readChar(); // Reading a character from USART	
    10ec:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <USART0_readChar>

		if(WSData.WS_lost_signal_fault){
    10f0:	90 91 df 65 	lds	r25, 0x65DF	; 0x8065df <WSData+0xb>
    10f4:	99 23       	and	r25, r25
    10f6:	39 f0       	breq	.+14     	; 0x1106 <RS485Receiver+0x4a>
			if (++timeout == CountForError_RS485) { // Timeout condition if usart1 reading is halted
    10f8:	1f 5f       	subi	r17, 0xFF	; 255
    10fa:	13 30       	cpi	r17, 0x03	; 3
    10fc:	21 f4       	brne	.+8      	; 0x1106 <RS485Receiver+0x4a>
				WSData.WS_lost_connecton_fault = true;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	80 93 de 65 	sts	0x65DE, r24	; 0x8065de <WSData+0xa>
				break;
    1104:	26 c0       	rjmp	.+76     	; 0x1152 <RS485Receiver+0x96>
			}
		}		
		if (start) {
    1106:	ff 20       	and	r15, r15
    1108:	d9 f0       	breq	.+54     	; 0x1140 <RS485Receiver+0x84>
			if (c == '}') { // If received data end symbol
    110a:	8d 37       	cpi	r24, 0x7D	; 125
    110c:	79 f4       	brne	.+30     	; 0x112c <RS485Receiver+0x70>
				RS485_Led(RX_LED_OFF);
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	0e 94 25 07 	call	0xe4a	; 0xe4a <RS485_Led>
				start = 0;
				command[index] = '\0';
    1114:	e1 e0       	ldi	r30, 0x01	; 1
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	ec 0f       	add	r30, r28
    111a:	fd 1f       	adc	r31, r29
    111c:	e0 0f       	add	r30, r16
    111e:	f1 1d       	adc	r31, r1
    1120:	10 82       	st	Z, r1
				index = 0;
				RS485DataSplitter(command); // Execute the received command //comment when testing lines below
    1122:	ce 01       	movw	r24, r28
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	0e 94 3d 07 	call	0xe7a	; 0xe7a <RS485DataSplitter>
				break;
    112a:	13 c0       	rjmp	.+38     	; 0x1152 <RS485Receiver+0x96>
				} else if (index < MESSAGE_LENGTH_RS485) {
    112c:	04 31       	cpi	r16, 0x14	; 20
    112e:	40 f4       	brcc	.+16     	; 0x1140 <RS485Receiver+0x84>
				command[index++] = c; // Store received character in command array
    1130:	e1 e0       	ldi	r30, 0x01	; 1
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	ec 0f       	add	r30, r28
    1136:	fd 1f       	adc	r31, r29
    1138:	e0 0f       	add	r30, r16
    113a:	f1 1d       	adc	r31, r1
    113c:	80 83       	st	Z, r24
    113e:	0f 5f       	subi	r16, 0xFF	; 255
			}
		}
		if (c == '{') { // If received data start symbol
    1140:	8b 37       	cpi	r24, 0x7B	; 123
    1142:	a1 f6       	brne	.-88     	; 0x10ec <RS485Receiver+0x30>
			start = 1;
			index = 0;
			RS485_Led(RX_LED_ON);
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	0e 94 25 07 	call	0xe4a	; 0xe4a <RS485_Led>
				} else if (index < MESSAGE_LENGTH_RS485) {
				command[index++] = c; // Store received character in command array
			}
		}
		if (c == '{') { // If received data start symbol
			start = 1;
    114a:	ff 24       	eor	r15, r15
    114c:	f3 94       	inc	r15
			index = 0;
    114e:	00 e0       	ldi	r16, 0x00	; 0
    1150:	cd cf       	rjmp	.-102    	; 0x10ec <RS485Receiver+0x30>
			RS485_Led(RX_LED_ON);
		}
	}
    1152:	64 96       	adiw	r28, 0x14	; 20
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	ff 90       	pop	r15
    1162:	08 95       	ret

00001164 <screen_command>:
    if (contrast > 0x3f) {
        contrast = 0x3f;  ///< Ensure contrast does not exceed maximum
    }
    screen_command(0x81);  ///< Send command to set contrast
    screen_command(contrast);  ///< Set the contrast value
}
    1164:	48 2f       	mov	r20, r24
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	8c e3       	ldi	r24, 0x3C	; 60
    116a:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <WriteToReg>
    116e:	08 95       	ret

00001170 <screen_data>:
    1170:	48 2f       	mov	r20, r24
    1172:	60 e4       	ldi	r22, 0x40	; 64
    1174:	8c e3       	ldi	r24, 0x3C	; 60
    1176:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <WriteToReg>
    117a:	08 95       	ret

0000117c <screen_init>:
    117c:	cf 93       	push	r28
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	8c e3       	ldi	r24, 0x3C	; 60
    1182:	0e 94 96 05 	call	0xb2c	; 0xb2c <TransmitAdd>
    1186:	c0 e0       	ldi	r28, 0x00	; 0
    1188:	08 c0       	rjmp	.+16     	; 0x119a <screen_init+0x1e>
    118a:	ec 2f       	mov	r30, r28
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	e7 58       	subi	r30, 0x87	; 135
    1190:	fc 49       	sbci	r31, 0x9C	; 156
    1192:	80 81       	ld	r24, Z
    1194:	0e 94 c0 05 	call	0xb80	; 0xb80 <TransmitByte>
    1198:	cf 5f       	subi	r28, 0xFF	; 255
    119a:	ca 31       	cpi	r28, 0x1A	; 26
    119c:	b0 f3       	brcs	.-20     	; 0x118a <screen_init+0xe>
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <screen_draw_char>:
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	d8 2f       	mov	r29, r24
    11aa:	80 ee       	ldi	r24, 0xE0	; 224
    11ac:	8d 0f       	add	r24, r29
    11ae:	80 36       	cpi	r24, 0x60	; 96
    11b0:	28 f0       	brcs	.+10     	; 0x11bc <screen_draw_char+0x1a>
    11b2:	d0 3b       	cpi	r29, 0xB0	; 176
    11b4:	19 f0       	breq	.+6      	; 0x11bc <screen_draw_char+0x1a>
    11b6:	d0 3c       	cpi	r29, 0xC0	; 192
    11b8:	08 f4       	brcc	.+2      	; 0x11bc <screen_draw_char+0x1a>
    11ba:	d0 e2       	ldi	r29, 0x20	; 32
    11bc:	d0 3b       	cpi	r29, 0xB0	; 176
    11be:	21 f0       	breq	.+8      	; 0x11c8 <screen_draw_char+0x26>
    11c0:	d0 3c       	cpi	r29, 0xC0	; 192
    11c2:	20 f4       	brcc	.+8      	; 0x11cc <screen_draw_char+0x2a>
    11c4:	10 e2       	ldi	r17, 0x20	; 32
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <screen_draw_char+0x2c>
    11c8:	10 e5       	ldi	r17, 0x50	; 80
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <screen_draw_char+0x2c>
    11cc:	1f e5       	ldi	r17, 0x5F	; 95
    11ce:	c0 e0       	ldi	r28, 0x00	; 0
    11d0:	13 c0       	rjmp	.+38     	; 0x11f8 <screen_draw_char+0x56>
    11d2:	8d 2f       	mov	r24, r29
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	81 1b       	sub	r24, r17
    11d8:	91 09       	sbc	r25, r1
    11da:	fc 01       	movw	r30, r24
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	ee 0f       	add	r30, r30
    11e2:	ff 1f       	adc	r31, r31
    11e4:	e8 0f       	add	r30, r24
    11e6:	f9 1f       	adc	r31, r25
    11e8:	ec 5a       	subi	r30, 0xAC	; 172
    11ea:	ff 49       	sbci	r31, 0x9F	; 159
    11ec:	ec 0f       	add	r30, r28
    11ee:	f1 1d       	adc	r31, r1
    11f0:	80 81       	ld	r24, Z
    11f2:	0e 94 b8 08 	call	0x1170	; 0x1170 <screen_data>
    11f6:	cf 5f       	subi	r28, 0xFF	; 255
    11f8:	c5 30       	cpi	r28, 0x05	; 5
    11fa:	58 f3       	brcs	.-42     	; 0x11d2 <screen_draw_char+0x30>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	0e 94 b8 08 	call	0x1170	; 0x1170 <screen_data>
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	08 95       	ret

0000120a <screen_clear>:
 * @brief Clears the ST7567S display.
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    for (int page = 0; page < 8; page++) {
    1212:	00 e0       	ldi	r16, 0x00	; 0
    1214:	10 e0       	ldi	r17, 0x00	; 0
    1216:	16 c0       	rjmp	.+44     	; 0x1244 <screen_clear+0x3a>
        screen_command(0xB0 + page);  ///< Select page
    1218:	80 eb       	ldi	r24, 0xB0	; 176
    121a:	80 0f       	add	r24, r16
    121c:	0e 94 b2 08 	call	0x1164	; 0x1164 <screen_command>
        screen_command(0x00);  ///< Set column address
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	0e 94 b2 08 	call	0x1164	; 0x1164 <screen_command>
        screen_command(0x10);  ///< Set column address
    1226:	80 e1       	ldi	r24, 0x10	; 16
    1228:	0e 94 b2 08 	call	0x1164	; 0x1164 <screen_command>

        for (int column = 0; column < 128; column++) {
    122c:	c0 e0       	ldi	r28, 0x00	; 0
    122e:	d0 e0       	ldi	r29, 0x00	; 0
    1230:	04 c0       	rjmp	.+8      	; 0x123a <screen_clear+0x30>
            screen_data(0x00);  ///< Clear each column
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	0e 94 b8 08 	call	0x1170	; 0x1170 <screen_data>
    for (int page = 0; page < 8; page++) {
        screen_command(0xB0 + page);  ///< Select page
        screen_command(0x00);  ///< Set column address
        screen_command(0x10);  ///< Set column address

        for (int column = 0; column < 128; column++) {
    1238:	21 96       	adiw	r28, 0x01	; 1
    123a:	c0 38       	cpi	r28, 0x80	; 128
    123c:	d1 05       	cpc	r29, r1
    123e:	cc f3       	brlt	.-14     	; 0x1232 <screen_clear+0x28>
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
    for (int page = 0; page < 8; page++) {
    1240:	0f 5f       	subi	r16, 0xFF	; 255
    1242:	1f 4f       	sbci	r17, 0xFF	; 255
    1244:	08 30       	cpi	r16, 0x08	; 8
    1246:	11 05       	cpc	r17, r1
    1248:	3c f3       	brlt	.-50     	; 0x1218 <screen_clear+0xe>
        for (int column = 0; column < 128; column++) {
            screen_data(0x00);  ///< Clear each column
        }
    }
    //screen_contrast(SSD1306_CONTRAST);  ///< Restore contrast
}
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	1f 91       	pop	r17
    1250:	0f 91       	pop	r16
    1252:	08 95       	ret

00001254 <screen_draw_text>:
 * the maximum allowed characters are displayed.
 * 
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	8c 01       	movw	r16, r24
    125e:	d6 2f       	mov	r29, r22
    uint8_t length = 0;
    1260:	c0 e0       	ldi	r28, 0x00	; 0
    while (*text && length < max_length) {
    1262:	05 c0       	rjmp	.+10     	; 0x126e <screen_draw_text+0x1a>
        screen_draw_char(*text);  ///< Draw each character in the string
    1264:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <screen_draw_char>
        text++;
    1268:	0f 5f       	subi	r16, 0xFF	; 255
    126a:	1f 4f       	sbci	r17, 0xFF	; 255
        length++;
    126c:	cf 5f       	subi	r28, 0xFF	; 255
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
    uint8_t length = 0;
    while (*text && length < max_length) {
    126e:	f8 01       	movw	r30, r16
    1270:	80 81       	ld	r24, Z
    1272:	88 23       	and	r24, r24
    1274:	39 f0       	breq	.+14     	; 0x1284 <screen_draw_text+0x30>
    1276:	cd 17       	cp	r28, r29
    1278:	a8 f3       	brcs	.-22     	; 0x1264 <screen_draw_text+0x10>
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <screen_draw_text+0x30>
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
        screen_draw_char(' ');  ///< Fill remaining space with spaces
    127c:	80 e2       	ldi	r24, 0x20	; 32
    127e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <screen_draw_char>
        length++;
    1282:	cf 5f       	subi	r28, 0xFF	; 255
    while (*text && length < max_length) {
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
    1284:	cd 17       	cp	r28, r29
    1286:	d0 f3       	brcs	.-12     	; 0x127c <screen_draw_text+0x28>
        screen_draw_char(' ');  ///< Fill remaining space with spaces
        length++;
    }
}
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	08 95       	ret

00001292 <screen_write_text>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param start_pixel The starting pixel column for the text.
 */
void screen_write_text(char *text, uint8_t line, uint8_t start_pixel) {
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	8c 01       	movw	r16, r24
    129c:	26 2f       	mov	r18, r22
    129e:	c4 2f       	mov	r28, r20
    uint8_t max_chars = (128 - start_pixel) / 6;  ///< Calculate max characters per line
    12a0:	80 e8       	ldi	r24, 0x80	; 128
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	84 1b       	sub	r24, r20
    12a6:	91 09       	sbc	r25, r1
    12a8:	66 e0       	ldi	r22, 0x06	; 6
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	0e 94 a1 10 	call	0x2142	; 0x2142 <__divmodhi4>
    12b0:	d6 2f       	mov	r29, r22
    screen_command(0xB0 | line);  ///< Set the page (line)
    12b2:	82 2f       	mov	r24, r18
    12b4:	80 6b       	ori	r24, 0xB0	; 176
    12b6:	0e 94 b2 08 	call	0x1164	; 0x1164 <screen_command>
    screen_command(0x10 | (start_pixel >> 4));  ///< Set high byte of column address
    12ba:	8c 2f       	mov	r24, r28
    12bc:	82 95       	swap	r24
    12be:	8f 70       	andi	r24, 0x0F	; 15
    12c0:	80 61       	ori	r24, 0x10	; 16
    12c2:	0e 94 b2 08 	call	0x1164	; 0x1164 <screen_command>
    screen_command(0x00 | (start_pixel & 0x0F));  ///< Set low byte of column address
    12c6:	8c 2f       	mov	r24, r28
    12c8:	8f 70       	andi	r24, 0x0F	; 15
    12ca:	0e 94 b2 08 	call	0x1164	; 0x1164 <screen_command>
    screen_draw_text(text, max_chars);  ///< Draw the text
    12ce:	6d 2f       	mov	r22, r29
    12d0:	c8 01       	movw	r24, r16
    12d2:	0e 94 2a 09 	call	0x1254	; 0x1254 <screen_draw_text>
}
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	08 95       	ret

000012e0 <calculate_start_pixel>:
 * @param max_length The maximum number of characters.
 * @param alignment The desired text alignment (left, center, right).
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
    12e0:	ac 01       	movw	r20, r24
    uint8_t text_length = 0;
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
    12e4:	01 c0       	rjmp	.+2      	; 0x12e8 <calculate_start_pixel+0x8>
        text_length++;
    12e6:	9f 5f       	subi	r25, 0xFF	; 255
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
    uint8_t text_length = 0;
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
    12e8:	fa 01       	movw	r30, r20
    12ea:	e9 0f       	add	r30, r25
    12ec:	f1 1d       	adc	r31, r1
    12ee:	20 81       	ld	r18, Z
    12f0:	21 11       	cpse	r18, r1
    12f2:	f9 cf       	rjmp	.-14     	; 0x12e6 <calculate_start_pixel+0x6>
        text_length++;
    }

    uint8_t text_width = text_length * 6;  ///< Calculate the width of the text in pixels
    12f4:	89 2f       	mov	r24, r25
    12f6:	88 0f       	add	r24, r24
    12f8:	98 0f       	add	r25, r24
    12fa:	29 2f       	mov	r18, r25
    12fc:	22 0f       	add	r18, r18
    switch (alignment) {
    12fe:	61 30       	cpi	r22, 0x01	; 1
    1300:	19 f0       	breq	.+6      	; 0x1308 <calculate_start_pixel+0x28>
    1302:	62 30       	cpi	r22, 0x02	; 2
    1304:	69 f0       	breq	.+26     	; 0x1320 <calculate_start_pixel+0x40>
    1306:	0f c0       	rjmp	.+30     	; 0x1326 <calculate_start_pixel+0x46>
        case ALIGN_CENTER:
            return (128 - text_width) / 2;  ///< Center the text
    1308:	80 e8       	ldi	r24, 0x80	; 128
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	ac 01       	movw	r20, r24
    130e:	42 1b       	sub	r20, r18
    1310:	51 09       	sbc	r21, r1
    1312:	ca 01       	movw	r24, r20
    1314:	99 23       	and	r25, r25
    1316:	0c f4       	brge	.+2      	; 0x131a <calculate_start_pixel+0x3a>
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	95 95       	asr	r25
    131c:	87 95       	ror	r24
    131e:	08 95       	ret
        case ALIGN_RIGHT:
            return (128 - text_width);  ///< Right-align the text
    1320:	80 e8       	ldi	r24, 0x80	; 128
    1322:	82 1b       	sub	r24, r18
    1324:	08 95       	ret
        case ALIGN_LEFT:
        default:
            return 0;  ///< Left-align the text
    1326:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1328:	08 95       	ret

0000132a <screen_write_text_aligned>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_text_aligned(char *text, uint8_t line, alignment_t alignment) {
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	ec 01       	movw	r28, r24
    1332:	16 2f       	mov	r17, r22
    uint8_t start_pixel = calculate_start_pixel(text, alignment);  ///< Calculate start pixel
    1334:	64 2f       	mov	r22, r20
    1336:	0e 94 70 09 	call	0x12e0	; 0x12e0 <calculate_start_pixel>
   screen_write_text(text, line, start_pixel);
    133a:	48 2f       	mov	r20, r24
    133c:	61 2f       	mov	r22, r17
    133e:	ce 01       	movw	r24, r28
    1340:	0e 94 49 09 	call	0x1292	; 0x1292 <screen_write_text>
}
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	08 95       	ret

0000134c <screen_write_formatted_text>:
 * 
 * @param format The format string for the text.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_formatted_text(const char *format, uint8_t line, alignment_t alignment, ...) {
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	e2 97       	sbiw	r28, 0x32	; 50
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	de bf       	out	0x3e, r29	; 62
    char textStorage[MAX_TEXT_LENGTH];  ///< Buffer for storing formatted text
    va_list args;  ///< Variable argument list

    va_start(args, alignment);  ///< Start reading variable arguments
    vsnprintf(textStorage, MAX_TEXT_LENGTH, format, args);  ///< Format the text
    135a:	9e 01       	movw	r18, r28
    135c:	25 5c       	subi	r18, 0xC5	; 197
    135e:	3f 4f       	sbci	r19, 0xFF	; 255
    1360:	4f a9       	ldd	r20, Y+55	; 0x37
    1362:	58 ad       	ldd	r21, Y+56	; 0x38
    1364:	62 e3       	ldi	r22, 0x32	; 50
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	ce 01       	movw	r24, r28
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	0e 94 bd 12 	call	0x257a	; 0x257a <vsnprintf>
    va_end(args);  ///< End reading variable arguments

    screen_write_text_aligned(textStorage, line, alignment);  ///< Write formatted text to display
    1370:	4a ad       	ldd	r20, Y+58	; 0x3a
    1372:	69 ad       	ldd	r22, Y+57	; 0x39
    1374:	ce 01       	movw	r24, r28
    1376:	01 96       	adiw	r24, 0x01	; 1
    1378:	0e 94 95 09 	call	0x132a	; 0x132a <screen_write_text_aligned>
}
    137c:	e2 96       	adiw	r28, 0x32	; 50
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	08 95       	ret

00001388 <Stepper_enable>:
	return !(PORTF.IN & PIN5_bm);
}

bool Read_Stepper_ALM(){ // true if driver has a error (overheat, stepepr stuck and so on)
	return !(PORTF.IN & PIN4_bm);
}
    1388:	80 91 e4 65 	lds	r24, 0x65E4	; 0x8065e4 <StepperMotor+0x3>
    138c:	81 11       	cpse	r24, r1
    138e:	11 c0       	rjmp	.+34     	; 0x13b2 <Stepper_enable+0x2a>
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
    1396:	2f ef       	ldi	r18, 0xFF	; 255
    1398:	88 ef       	ldi	r24, 0xF8	; 248
    139a:	95 e1       	ldi	r25, 0x15	; 21
    139c:	21 50       	subi	r18, 0x01	; 1
    139e:	80 40       	sbci	r24, 0x00	; 0
    13a0:	90 40       	sbci	r25, 0x00	; 0
    13a2:	e1 f7       	brne	.-8      	; 0x139c <Stepper_enable+0x14>
    13a4:	00 c0       	rjmp	.+0      	; 0x13a6 <Stepper_enable+0x1e>
    13a6:	00 00       	nop
    13a8:	e1 ee       	ldi	r30, 0xE1	; 225
    13aa:	f5 e6       	ldi	r31, 0x65	; 101
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	83 83       	std	Z+3, r24	; 0x03
    13b0:	14 82       	std	Z+4, r1	; 0x04
    13b2:	08 95       	ret

000013b4 <Stepper_disable>:
    13b4:	80 91 e5 65 	lds	r24, 0x65E5	; 0x8065e5 <StepperMotor+0x4>
    13b8:	81 11       	cpse	r24, r1
    13ba:	08 c0       	rjmp	.+16     	; 0x13cc <Stepper_disable+0x18>
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f04a5>
    13c2:	e1 ee       	ldi	r30, 0xE1	; 225
    13c4:	f5 e6       	ldi	r31, 0x65	; 101
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	84 83       	std	Z+4, r24	; 0x04
    13ca:	13 82       	std	Z+3, r1	; 0x03
    13cc:	08 95       	ret

000013ce <Stepper_start>:
    13ce:	80 91 e2 65 	lds	r24, 0x65E2	; 0x8065e2 <StepperMotor+0x1>
    13d2:	81 11       	cpse	r24, r1
    13d4:	0e c0       	rjmp	.+28     	; 0x13f2 <Stepper_start+0x24>
    13d6:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
    13da:	80 ff       	sbrs	r24, 0
    13dc:	fc cf       	rjmp	.-8      	; 0x13d6 <Stepper_start+0x8>
    13de:	e0 e8       	ldi	r30, 0x80	; 128
    13e0:	fb e0       	ldi	r31, 0x0B	; 11
    13e2:	80 81       	ld	r24, Z
    13e4:	81 60       	ori	r24, 0x01	; 1
    13e6:	80 83       	st	Z, r24
    13e8:	e1 ee       	ldi	r30, 0xE1	; 225
    13ea:	f5 e6       	ldi	r31, 0x65	; 101
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	81 83       	std	Z+1, r24	; 0x01
    13f0:	12 82       	std	Z+2, r1	; 0x02
    13f2:	08 95       	ret

000013f4 <Stepper_stop>:
    13f4:	80 91 e3 65 	lds	r24, 0x65E3	; 0x8065e3 <StepperMotor+0x2>
    13f8:	81 11       	cpse	r24, r1
    13fa:	0e c0       	rjmp	.+28     	; 0x1418 <Stepper_stop+0x24>
    13fc:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
    1400:	80 ff       	sbrs	r24, 0
    1402:	fc cf       	rjmp	.-8      	; 0x13fc <Stepper_stop+0x8>
    1404:	e0 e8       	ldi	r30, 0x80	; 128
    1406:	fb e0       	ldi	r31, 0x0B	; 11
    1408:	80 81       	ld	r24, Z
    140a:	8e 7f       	andi	r24, 0xFE	; 254
    140c:	80 83       	st	Z, r24
    140e:	e1 ee       	ldi	r30, 0xE1	; 225
    1410:	f5 e6       	ldi	r31, 0x65	; 101
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	82 83       	std	Z+2, r24	; 0x02
    1416:	11 82       	std	Z+1, r1	; 0x01
    1418:	08 95       	ret

0000141a <Stepper_set_direction>:
    141a:	cf 93       	push	r28
    141c:	90 91 e1 65 	lds	r25, 0x65E1	; 0x8065e1 <StepperMotor>
    1420:	98 17       	cp	r25, r24
    1422:	99 f0       	breq	.+38     	; 0x144a <Stepper_set_direction+0x30>
    1424:	c8 2f       	mov	r28, r24
    1426:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <Stepper_stop>
    142a:	cc 23       	and	r28, r28
    142c:	21 f0       	breq	.+8      	; 0x1436 <Stepper_set_direction+0x1c>
    142e:	88 e0       	ldi	r24, 0x08	; 8
    1430:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f04a5>
    1434:	03 c0       	rjmp	.+6      	; 0x143c <Stepper_set_direction+0x22>
    1436:	88 e0       	ldi	r24, 0x08	; 8
    1438:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
    143c:	88 e1       	ldi	r24, 0x18	; 24
    143e:	8a 95       	dec	r24
    1440:	f1 f7       	brne	.-4      	; 0x143e <Stepper_set_direction+0x24>
    1442:	0e 94 e7 09 	call	0x13ce	; 0x13ce <Stepper_start>
    1446:	c0 93 e1 65 	sts	0x65E1, r28	; 0x8065e1 <StepperMotor>
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <Stepper_init>:
    144e:	42 e3       	ldi	r20, 0x32	; 50
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	78 ec       	ldi	r23, 0xC8	; 200
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <TCD0_init_stepper_PWM>
    145c:	08 95       	ret

0000145e <Read_Stepper_Voltage>:

uint16_t Read_Stepper_Voltage(){
	ADC0_SetupStepper(0);
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	0e 94 9b 02 	call	0x536	; 0x536 <ADC0_SetupStepper>
	return (ADC0_read() * 0.1775) * Stepper_Voltage_Compensation_koef;
    1464:	0e 94 b1 02 	call	0x562	; 0x562 <ADC0_read>
    1468:	bc 01       	movw	r22, r24
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatunsisf>
    1472:	2f e8       	ldi	r18, 0x8F	; 143
    1474:	32 ec       	ldi	r19, 0xC2	; 194
    1476:	45 e3       	ldi	r20, 0x35	; 53
    1478:	5e e3       	ldi	r21, 0x3E	; 62
    147a:	0e 94 34 10 	call	0x2068	; 0x2068 <__mulsf3>
    147e:	26 e6       	ldi	r18, 0x66	; 102
    1480:	36 e6       	ldi	r19, 0x66	; 102
    1482:	46 e8       	ldi	r20, 0x86	; 134
    1484:	5f e3       	ldi	r21, 0x3F	; 63
    1486:	0e 94 34 10 	call	0x2068	; 0x2068 <__mulsf3>
    148a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__fixunssfsi>
}
    148e:	cb 01       	movw	r24, r22
    1490:	08 95       	ret

00001492 <Read_Stepper_Current>:

int16_t Read_Stepper_Current(){
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
	ADC0_SetupStepper(1);
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	0e 94 9b 02 	call	0x536	; 0x536 <ADC0_SetupStepper>
	return ((int16_t)ADC0_read() - (int16_t)Read_MCU_Voltge())/4;
    149c:	0e 94 b1 02 	call	0x562	; 0x562 <ADC0_read>
    14a0:	ec 01       	movw	r28, r24
    14a2:	0e 94 c5 02 	call	0x58a	; 0x58a <Read_MCU_Voltge>
    14a6:	9e 01       	movw	r18, r28
    14a8:	28 1b       	sub	r18, r24
    14aa:	39 0b       	sbc	r19, r25
    14ac:	c9 01       	movw	r24, r18
    14ae:	99 23       	and	r25, r25
    14b0:	0c f4       	brge	.+2      	; 0x14b4 <Read_Stepper_Current+0x22>
    14b2:	03 96       	adiw	r24, 0x03	; 3
    14b4:	95 95       	asr	r25
    14b6:	87 95       	ror	r24
    14b8:	95 95       	asr	r25
    14ba:	87 95       	ror	r24
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	08 95       	ret

000014c2 <TCA0_init_linear_PWM>:
 *  Author: Saulius
 */ 
#include "Settings.h"

void TCA0_init_linear_PWM(uint16_t freq_hz, uint8_t duty_percent) //Auto TCA prescaler selection, that give us Frequency range: ~366Hz - ~93kHz. TLE9201SG max 20kHz
{
    14c2:	8f 92       	push	r8
    14c4:	9f 92       	push	r9
    14c6:	af 92       	push	r10
    14c8:	bf 92       	push	r11
    14ca:	cf 92       	push	r12
    14cc:	df 92       	push	r13
    14ce:	ef 92       	push	r14
    14d0:	ff 92       	push	r15
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	68 97       	sbiw	r28, 0x18	; 24
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	7c 01       	movw	r14, r24
    14e6:	c6 2e       	mov	r12, r22
	const uint16_t prescalers[] = {1, 2, 4, 8, 16, 64, 256, 1024};
    14e8:	80 e1       	ldi	r24, 0x10	; 16
    14ea:	ee e9       	ldi	r30, 0x9E	; 158
    14ec:	f3 e6       	ldi	r31, 0x63	; 99
    14ee:	de 01       	movw	r26, r28
    14f0:	11 96       	adiw	r26, 0x01	; 1
    14f2:	01 90       	ld	r0, Z+
    14f4:	0d 92       	st	X+, r0
    14f6:	8a 95       	dec	r24
    14f8:	e1 f7       	brne	.-8      	; 0x14f2 <TCA0_init_linear_PWM+0x30>
	const uint8_t clk_select[] = {
    14fa:	88 e0       	ldi	r24, 0x08	; 8
    14fc:	ee ea       	ldi	r30, 0xAE	; 174
    14fe:	f3 e6       	ldi	r31, 0x63	; 99
    1500:	de 01       	movw	r26, r28
    1502:	51 96       	adiw	r26, 0x11	; 17
    1504:	01 90       	ld	r0, Z+
    1506:	0d 92       	st	X+, r0
    1508:	8a 95       	dec	r24
    150a:	e1 f7       	brne	.-8      	; 0x1504 <TCA0_init_linear_PWM+0x42>

	uint8_t chosen_clk = 0;
	uint8_t period = 0;

	// surandam tinkamà prescaler
	for (uint8_t i = 0; i < 8; i++) {
    150c:	d1 2c       	mov	r13, r1
    150e:	38 c0       	rjmp	.+112    	; 0x1580 <TCA0_init_linear_PWM+0xbe>
		uint32_t f_timer = F_CPU / prescalers[i];
    1510:	0d 2d       	mov	r16, r13
    1512:	10 e0       	ldi	r17, 0x00	; 0
    1514:	f8 01       	movw	r30, r16
    1516:	ee 0f       	add	r30, r30
    1518:	ff 1f       	adc	r31, r31
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	8c 0f       	add	r24, r28
    1520:	9d 1f       	adc	r25, r29
    1522:	e8 0f       	add	r30, r24
    1524:	f9 1f       	adc	r31, r25
    1526:	20 81       	ld	r18, Z
    1528:	31 81       	ldd	r19, Z+1	; 0x01
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	76 e3       	ldi	r23, 0x36	; 54
    1532:	8e e6       	ldi	r24, 0x6E	; 110
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__divmodsi4>
		uint32_t tmp_period = (f_timer / freq_hz) - 1;
    153a:	47 01       	movw	r8, r14
    153c:	a1 2c       	mov	r10, r1
    153e:	b1 2c       	mov	r11, r1
    1540:	ca 01       	movw	r24, r20
    1542:	b9 01       	movw	r22, r18
    1544:	a5 01       	movw	r20, r10
    1546:	94 01       	movw	r18, r8
    1548:	0e 94 b5 10 	call	0x216a	; 0x216a <__udivmodsi4>
    154c:	da 01       	movw	r26, r20
    154e:	c9 01       	movw	r24, r18
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	a1 09       	sbc	r26, r1
    1554:	b1 09       	sbc	r27, r1

		if (tmp_period <= 255 && tmp_period >= 1) {
    1556:	ba 01       	movw	r22, r20
    1558:	a9 01       	movw	r20, r18
    155a:	42 50       	subi	r20, 0x02	; 2
    155c:	51 09       	sbc	r21, r1
    155e:	61 09       	sbc	r22, r1
    1560:	71 09       	sbc	r23, r1
    1562:	4f 3f       	cpi	r20, 0xFF	; 255
    1564:	51 05       	cpc	r21, r1
    1566:	61 05       	cpc	r22, r1
    1568:	71 05       	cpc	r23, r1
    156a:	48 f4       	brcc	.+18     	; 0x157e <TCA0_init_linear_PWM+0xbc>
			period = (uint8_t)tmp_period;
    156c:	f8 2e       	mov	r15, r24
			chosen_clk = clk_select[i];
    156e:	e1 e1       	ldi	r30, 0x11	; 17
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	ec 0f       	add	r30, r28
    1574:	fd 1f       	adc	r31, r29
    1576:	e0 0f       	add	r30, r16
    1578:	f1 1f       	adc	r31, r17
    157a:	10 81       	ld	r17, Z
			break; // radom maþiausià tinkamà prescaler
    157c:	06 c0       	rjmp	.+12     	; 0x158a <TCA0_init_linear_PWM+0xc8>

	uint8_t chosen_clk = 0;
	uint8_t period = 0;

	// surandam tinkamà prescaler
	for (uint8_t i = 0; i < 8; i++) {
    157e:	d3 94       	inc	r13
    1580:	97 e0       	ldi	r25, 0x07	; 7
    1582:	9d 15       	cp	r25, r13
    1584:	28 f6       	brcc	.-118    	; 0x1510 <TCA0_init_linear_PWM+0x4e>
		TCA_SINGLE_CLKSEL_DIV256_gc,
		TCA_SINGLE_CLKSEL_DIV1024_gc
	};

	uint8_t chosen_clk = 0;
	uint8_t period = 0;
    1586:	f1 2c       	mov	r15, r1
		TCA_SINGLE_CLKSEL_DIV64_gc,
		TCA_SINGLE_CLKSEL_DIV256_gc,
		TCA_SINGLE_CLKSEL_DIV1024_gc
	};

	uint8_t chosen_clk = 0;
    1588:	10 e0       	ldi	r17, 0x00	; 0
			break; // radom maþiausià tinkamà prescaler
		}
	}

	// duty skaièiavimas
	uint8_t duty = (uint32_t)period * duty_percent / 100;
    158a:	2f 2d       	mov	r18, r15
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	ac 2d       	mov	r26, r12
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__umulhisi3>
    1596:	24 e6       	ldi	r18, 0x64	; 100
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	0e 94 b5 10 	call	0x216a	; 0x216a <__udivmodsi4>
	if (duty > period) duty = period;
    15a2:	f2 16       	cp	r15, r18
    15a4:	08 f4       	brcc	.+2      	; 0x15a8 <TCA0_init_linear_PWM+0xe6>
    15a6:	2f 2d       	mov	r18, r15

	// konfigûracija
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;  // WOx ant PORTD
    15a8:	83 e0       	ldi	r24, 0x03	; 3
    15aa:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <__TEXT_REGION_LENGTH__+0x7f05e7>

	TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;   // Split mode
    15ae:	e0 e0       	ldi	r30, 0x00	; 0
    15b0:	fa e0       	ldi	r31, 0x0A	; 10
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	83 83       	std	Z+3, r24	; 0x03
	TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm;    // enable WO3 (HCMP0 ? PD3)
    15b6:	80 e1       	ldi	r24, 0x10	; 16
    15b8:	81 83       	std	Z+1, r24	; 0x01

	TCA0.SPLIT.HPER  = period;
    15ba:	f7 a2       	std	Z+39, r15	; 0x27
	TCA0.SPLIT.HCMP0 = duty;
    15bc:	21 a7       	std	Z+41, r18	; 0x29

	TCA0.SPLIT.CTRLA = chosen_clk | TCA_SPLIT_ENABLE_bm; // paleidþiam su pasirinktu prescaler
    15be:	11 60       	ori	r17, 0x01	; 1
    15c0:	10 83       	st	Z, r17
}
    15c2:	68 96       	adiw	r28, 0x18	; 24
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16
    15d0:	ff 90       	pop	r15
    15d2:	ef 90       	pop	r14
    15d4:	df 90       	pop	r13
    15d6:	cf 90       	pop	r12
    15d8:	bf 90       	pop	r11
    15da:	af 90       	pop	r10
    15dc:	9f 90       	pop	r9
    15de:	8f 90       	pop	r8
    15e0:	08 95       	ret

000015e2 <TCD0_init_stepper_PWM>:
 * @date 2025-01-09
 */

#include "Settings.h"

void TCD0_init_stepper_PWM(uint32_t freq_hz, uint8_t duty_percent) {
    15e2:	cf 92       	push	r12
    15e4:	df 92       	push	r13
    15e6:	ef 92       	push	r14
    15e8:	ff 92       	push	r15
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	14 2f       	mov	r17, r20

	// Calculate compare registers
	uint16_t cmpbclr = (F_CPU / (4 * freq_hz * 2)) - 1;
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	aa 1f       	adc	r26, r26
    15fe:	bb 1f       	adc	r27, r27
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	aa 1f       	adc	r26, r26
    1606:	bb 1f       	adc	r27, r27
    1608:	9c 01       	movw	r18, r24
    160a:	ad 01       	movw	r20, r26
    160c:	22 0f       	add	r18, r18
    160e:	33 1f       	adc	r19, r19
    1610:	44 1f       	adc	r20, r20
    1612:	55 1f       	adc	r21, r21
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	76 e3       	ldi	r23, 0x36	; 54
    1618:	8e e6       	ldi	r24, 0x6E	; 110
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	0e 94 b5 10 	call	0x216a	; 0x216a <__udivmodsi4>
    1620:	e9 01       	movw	r28, r18
    1622:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t cmpaset = (uint16_t)(cmpbclr * (duty_percent / 100.0)) + 1;
    1624:	61 2f       	mov	r22, r17
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__floatsisf>
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	48 ec       	ldi	r20, 0xC8	; 200
    1636:	52 e4       	ldi	r21, 0x42	; 66
    1638:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__divsf3>
    163c:	6b 01       	movw	r12, r22
    163e:	7c 01       	movw	r14, r24
    1640:	be 01       	movw	r22, r28
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatunsisf>
    164a:	a7 01       	movw	r20, r14
    164c:	96 01       	movw	r18, r12
    164e:	0e 94 34 10 	call	0x2068	; 0x2068 <__mulsf3>
    1652:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__fixunssfsi>
    1656:	6f 5f       	subi	r22, 0xFF	; 255
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t cmpbset = cmpbclr - cmpaset - 1;
    165a:	ce 01       	movw	r24, r28
    165c:	86 1b       	sub	r24, r22
    165e:	97 0b       	sbc	r25, r23
    1660:	01 97       	sbiw	r24, 0x01	; 1

	// Set TCD compare registers
	TCD0.CMPBCLR = cmpbclr;
    1662:	00 e8       	ldi	r16, 0x80	; 128
    1664:	1b e0       	ldi	r17, 0x0B	; 11
    1666:	f8 01       	movw	r30, r16
    1668:	c6 a7       	std	Z+46, r28	; 0x2e
    166a:	d7 a7       	std	Z+47, r29	; 0x2f
	TCD0.CMPBSET = cmpbset;
    166c:	84 a7       	std	Z+44, r24	; 0x2c
    166e:	95 a7       	std	Z+45, r25	; 0x2d
	TCD0.CMPASET = cmpaset;
    1670:	60 a7       	std	Z+40, r22	; 0x28
    1672:	71 a7       	std	Z+41, r23	; 0x29

	ccp_write_io((uint8_t *) &TCD0.FAULTCTRL, TCD_CMPCEN_bm); ///< Enable WOC on PF2
    1674:	60 e4       	ldi	r22, 0x40	; 64
    1676:	82 e9       	ldi	r24, 0x92	; 146
    1678:	9b e0       	ldi	r25, 0x0B	; 11
    167a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <ccp_write_io>
	TCD0.CTRLB = TCD_WGMODE_DS_gc; ///< Set waveform mode to double slope
    167e:	83 e0       	ldi	r24, 0x03	; 3
    1680:	f8 01       	movw	r30, r16
    1682:	81 83       	std	Z+1, r24	; 0x01
	// Ájungiam WOC iðëjimà
	//TCD0.FAULTCTRL = TCD_CMPAEN_bm | TCD_CMPBEN_bm | TCD_CMPCEN_bm;

	// Paleidþiam su prescaler = 4
	//TCD0.CTRLA = TCD_CLKSEL_CLKPER_gc | TCD_CNTPRES_DIV4_gc;
	ccp_write_io((uint8_t *) &TCD0.CTRLA, TCD_CLKSEL_CLKPER_gc | TCD_CNTPRES_DIV4_gc);
    1684:	68 e6       	ldi	r22, 0x68	; 104
    1686:	80 e8       	ldi	r24, 0x80	; 128
    1688:	9b e0       	ldi	r25, 0x0B	; 11
    168a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <ccp_write_io>
	// Palaukti, kol sinchronizuosis
	//while (!(TCD0.STATUS & TCD_ENRDY_bm));
/*
			while (!(TCD0.STATUS & TCD_ENRDY_bm));
			TCD0.CTRLA |= TCD_ENABLE_bm;*/
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	08 95       	ret

000016a0 <USART0_init>:
 * @return 0 on success.
 */
int USART1_printChar(char c, FILE *stream) {
	USART1_sendChar(c); // Send character
	return 0;
}
    16a0:	e0 e0       	ldi	r30, 0x00	; 0
    16a2:	f8 e0       	ldi	r31, 0x08	; 8
    16a4:	83 e8       	ldi	r24, 0x83	; 131
    16a6:	96 e0       	ldi	r25, 0x06	; 6
    16a8:	80 87       	std	Z+8, r24	; 0x08
    16aa:	91 87       	std	Z+9, r25	; 0x09
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	85 83       	std	Z+5, r24	; 0x05
    16b0:	82 ec       	ldi	r24, 0xC2	; 194
    16b2:	86 83       	std	Z+6, r24	; 0x06
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	87 83       	std	Z+7, r24	; 0x07
    16b8:	08 95       	ret

000016ba <USART0_readChar>:
    16ba:	ff 92       	push	r15
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	80 e8       	ldi	r24, 0x80	; 128
    16c6:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    16ca:	68 94       	set
    16cc:	ff 24       	eor	r15, r15
    16ce:	f5 f8       	bld	r15, 5
    16d0:	0f eb       	ldi	r16, 0xBF	; 191
    16d2:	12 e0       	ldi	r17, 0x02	; 2
    16d4:	d0 e0       	ldi	r29, 0x00	; 0
    16d6:	c0 e0       	ldi	r28, 0x00	; 0
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	e0 e0       	ldi	r30, 0x00	; 0
    16de:	1b c0       	rjmp	.+54     	; 0x1716 <USART0_readChar+0x5c>
    16e0:	2f 2d       	mov	r18, r15
    16e2:	30 2f       	mov	r19, r16
    16e4:	41 2f       	mov	r20, r17
    16e6:	5d 2f       	mov	r21, r29
    16e8:	6c 2f       	mov	r22, r28
    16ea:	7b 2f       	mov	r23, r27
    16ec:	8f 2f       	mov	r24, r31
    16ee:	9e 2f       	mov	r25, r30
    16f0:	af ef       	ldi	r26, 0xFF	; 255
    16f2:	0e 94 3c 11 	call	0x2278	; 0x2278 <__adddi3_s8>
    16f6:	f2 2e       	mov	r15, r18
    16f8:	03 2f       	mov	r16, r19
    16fa:	14 2f       	mov	r17, r20
    16fc:	d5 2f       	mov	r29, r21
    16fe:	c6 2f       	mov	r28, r22
    1700:	b7 2f       	mov	r27, r23
    1702:	f8 2f       	mov	r31, r24
    1704:	e9 2f       	mov	r30, r25
    1706:	a0 e0       	ldi	r26, 0x00	; 0
    1708:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpdi2_s8>
    170c:	21 f4       	brne	.+8      	; 0x1716 <USART0_readChar+0x5c>
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	80 93 df 65 	sts	0x65DF, r24	; 0x8065df <WSData+0xb>
    1714:	04 c0       	rjmp	.+8      	; 0x171e <USART0_readChar+0x64>
    1716:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    171a:	88 23       	and	r24, r24
    171c:	0c f7       	brge	.-62     	; 0x16e0 <USART0_readChar+0x26>
    171e:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	08 95       	ret

0000172e <USART1_init>:
    172e:	e0 e2       	ldi	r30, 0x20	; 32
    1730:	f8 e0       	ldi	r31, 0x08	; 8
    1732:	81 ea       	ldi	r24, 0xA1	; 161
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	80 87       	std	Z+8, r24	; 0x08
    1738:	91 87       	std	Z+9, r25	; 0x09
    173a:	82 e8       	ldi	r24, 0x82	; 130
    173c:	86 83       	std	Z+6, r24	; 0x06
    173e:	83 e0       	ldi	r24, 0x03	; 3
    1740:	87 83       	std	Z+7, r24	; 0x07
    1742:	08 95       	ret

00001744 <USART1_readChar>:
 * If a timeout occurs, it returns a predefined warning.
 * 
 * @return The received character.
 */
char USART1_readChar() {
	USART1.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    1744:	80 e8       	ldi	r24, 0x80	; 128
    1746:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f0824>
	uint32_t timeout_counter = FO_TIMEOUT_COUNTER; // Set a timeout counter
    174a:	80 ea       	ldi	r24, 0xA0	; 160
    174c:	97 ef       	ldi	r25, 0xF7	; 247
    174e:	a3 e0       	ldi	r26, 0x03	; 3
    1750:	b0 e0       	ldi	r27, 0x00	; 0
	while (!(USART1.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
    1752:	08 c0       	rjmp	.+16     	; 0x1764 <USART1_readChar+0x20>
		if (--timeout_counter == 0) { // Timeout condition
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	a1 09       	sbc	r26, r1
    1758:	b1 09       	sbc	r27, r1
    175a:	21 f4       	brne	.+8      	; 0x1764 <USART1_readChar+0x20>
			//screen_write_formatted_text("USART1 timeout", 0, ALIGN_LEFT);// uncomment for timeout number finding, when timeout number is set corectly this line should not to be visible at all. if timeout is to small you will see this line 
			//_delay_ms(100);
			//screen_write_formatted_text("              ", 0, ALIGN_LEFT);
			SensorData.FO_lost_signal_fault = true;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	80 93 a9 65 	sts	0x65A9, r24	; 0x8065a9 <__data_end+0x11>
			break; //just exit from this while cycle
    1762:	04 c0       	rjmp	.+8      	; 0x176c <USART1_readChar+0x28>
 * @return The received character.
 */
char USART1_readChar() {
	USART1.STATUS = USART_RXCIF_bm; // Clear buffer before reading
	uint32_t timeout_counter = FO_TIMEOUT_COUNTER; // Set a timeout counter
	while (!(USART1.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
    1764:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f0824>
    1768:	22 23       	and	r18, r18
    176a:	a4 f7       	brge	.-24     	; 0x1754 <USART1_readChar+0x10>
			SensorData.FO_lost_signal_fault = true;
			break; //just exit from this while cycle

		}
	}
	return USART1.RXDATAL; // Return received character
    176c:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f0820>
}
    1770:	08 95       	ret

00001772 <screenUpdater>:
 */

#include "Settings.h"
#include "windowsVar.h"

bool screenUpdater(uint8_t window){ //update window data if any changes only
    1772:	1f 93       	push	r17
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	66 97       	sbiw	r28, 0x16	; 22
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	18 2f       	mov	r17, r24
	uint16_t values[MAX_VARS]={0};
    1784:	fe 01       	movw	r30, r28
    1786:	31 96       	adiw	r30, 0x01	; 1
    1788:	86 e1       	ldi	r24, 0x16	; 22
    178a:	df 01       	movw	r26, r30
    178c:	1d 92       	st	X+, r1
    178e:	8a 95       	dec	r24
    1790:	e9 f7       	brne	.-6      	; 0x178c <screenUpdater+0x1a>
	bool update = false;

	if(show.lastWindow != window)
    1792:	80 91 ed 65 	lds	r24, 0x65ED	; 0x8065ed <show+0x1>
    1796:	81 13       	cpse	r24, r17
		screen_clear();
    1798:	0e 94 05 09 	call	0x120a	; 0x120a <screen_clear>
	switch (window){
    179c:	11 23       	and	r17, r17
    179e:	21 f0       	breq	.+8      	; 0x17a8 <screenUpdater+0x36>
    17a0:	11 30       	cpi	r17, 0x01	; 1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <screenUpdater+0x34>
    17a4:	6b c0       	rjmp	.+214    	; 0x187c <screenUpdater+0x10a>
    17a6:	c2 c0       	rjmp	.+388    	; 0x192c <screenUpdater+0x1ba>
		case 0:
			values[0] = Target.elevation;
    17a8:	aa e4       	ldi	r26, 0x4A	; 74
    17aa:	b0 e6       	ldi	r27, 0x60	; 96
    17ac:	8d 91       	ld	r24, X+
    17ae:	9c 91       	ld	r25, X
    17b0:	11 97       	sbiw	r26, 0x01	; 1
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	9a 83       	std	Y+2, r25	; 0x02
			values[1] = SensorData.Elevation;
    17b6:	e8 e9       	ldi	r30, 0x98	; 152
    17b8:	f5 e6       	ldi	r31, 0x65	; 101
    17ba:	80 81       	ld	r24, Z
    17bc:	91 81       	ldd	r25, Z+1	; 0x01
    17be:	8b 83       	std	Y+3, r24	; 0x03
    17c0:	9c 83       	std	Y+4, r25	; 0x04
			values[2] = Target.azimuth;
    17c2:	15 96       	adiw	r26, 0x05	; 5
    17c4:	8d 91       	ld	r24, X+
    17c6:	9c 91       	ld	r25, X
    17c8:	16 97       	sbiw	r26, 0x06	; 6
    17ca:	8d 83       	std	Y+5, r24	; 0x05
    17cc:	9e 83       	std	Y+6, r25	; 0x06
			values[3] = SensorData.Azimuth;
    17ce:	84 81       	ldd	r24, Z+4	; 0x04
    17d0:	95 81       	ldd	r25, Z+5	; 0x05
    17d2:	8f 83       	std	Y+7, r24	; 0x07
    17d4:	98 87       	std	Y+8, r25	; 0x08
			values[4] = Joystick.LatchSwitch;
    17d6:	80 91 c7 65 	lds	r24, 0x65C7	; 0x8065c7 <Joystick+0x6>
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	89 87       	std	Y+9, r24	; 0x09
    17de:	9a 87       	std	Y+10, r25	; 0x0a
			values[5] = SensorData.FO_data_fault;
    17e0:	82 89       	ldd	r24, Z+18	; 0x12
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	8b 87       	std	Y+11, r24	; 0x0b
    17e6:	9c 87       	std	Y+12, r25	; 0x0c
			values[6] = SensorData.FO_bad_signal_fault;
    17e8:	80 89       	ldd	r24, Z+16	; 0x10
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	8d 87       	std	Y+13, r24	; 0x0d
    17ee:	9e 87       	std	Y+14, r25	; 0x0e
			values[7] = SensorData.FO_lost_connecton_fault;
    17f0:	83 89       	ldd	r24, Z+19	; 0x13
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	8f 87       	std	Y+15, r24	; 0x0f
    17f6:	98 8b       	std	Y+16, r25	; 0x10
			values[8] = SensorData.FO_elevation_sensor_fault;
    17f8:	84 89       	ldd	r24, Z+20	; 0x14
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	89 8b       	std	Y+17, r24	; 0x11
    17fe:	9a 8b       	std	Y+18, r25	; 0x12
			values[9] = SensorData.FO_azimuth_sensor_fault;
    1800:	85 89       	ldd	r24, Z+21	; 0x15
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	8b 8b       	std	Y+19, r24	; 0x13
    1806:	9c 8b       	std	Y+20, r25	; 0x14
			for (uint8_t i=0; i<10; i++){
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	18 c0       	rjmp	.+48     	; 0x183c <screenUpdater+0xca>
				if(show.lastValues[i] != values[i]){
    180c:	82 2f       	mov	r24, r18
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	fc 01       	movw	r30, r24
    1812:	31 96       	adiw	r30, 0x01	; 1
    1814:	ee 0f       	add	r30, r30
    1816:	ff 1f       	adc	r31, r31
    1818:	e4 51       	subi	r30, 0x14	; 20
    181a:	fa 49       	sbci	r31, 0x9A	; 154
    181c:	40 81       	ld	r20, Z
    181e:	51 81       	ldd	r21, Z+1	; 0x01
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	e1 e0       	ldi	r30, 0x01	; 1
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	ec 0f       	add	r30, r28
    182a:	fd 1f       	adc	r31, r29
    182c:	e8 0f       	add	r30, r24
    182e:	f9 1f       	adc	r31, r25
    1830:	80 81       	ld	r24, Z
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	48 17       	cp	r20, r24
    1836:	59 07       	cpc	r21, r25
    1838:	29 f4       	brne	.+10     	; 0x1844 <screenUpdater+0xd2>
			values[5] = SensorData.FO_data_fault;
			values[6] = SensorData.FO_bad_signal_fault;
			values[7] = SensorData.FO_lost_connecton_fault;
			values[8] = SensorData.FO_elevation_sensor_fault;
			values[9] = SensorData.FO_azimuth_sensor_fault;
			for (uint8_t i=0; i<10; i++){
    183a:	2f 5f       	subi	r18, 0xFF	; 255
    183c:	2a 30       	cpi	r18, 0x0A	; 10
    183e:	30 f3       	brcs	.-52     	; 0x180c <screenUpdater+0x9a>
#include "Settings.h"
#include "windowsVar.h"

bool screenUpdater(uint8_t window){ //update window data if any changes only
	uint16_t values[MAX_VARS]={0};
	bool update = false;
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	01 c0       	rjmp	.+2      	; 0x1846 <screenUpdater+0xd4>
			values[7] = SensorData.FO_lost_connecton_fault;
			values[8] = SensorData.FO_elevation_sensor_fault;
			values[9] = SensorData.FO_azimuth_sensor_fault;
			for (uint8_t i=0; i<10; i++){
				if(show.lastValues[i] != values[i]){
				update = true;
    1844:	81 e0       	ldi	r24, 0x01	; 1
				break;
				}
			}
			for (uint8_t i=0; i<10; i++){
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	16 c0       	rjmp	.+44     	; 0x1876 <screenUpdater+0x104>
				show.lastValues[i] = values[i];
    184a:	29 2f       	mov	r18, r25
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	f9 01       	movw	r30, r18
    1850:	ee 0f       	add	r30, r30
    1852:	ff 1f       	adc	r31, r31
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	4c 0f       	add	r20, r28
    185a:	5d 1f       	adc	r21, r29
    185c:	e4 0f       	add	r30, r20
    185e:	f5 1f       	adc	r31, r21
    1860:	40 81       	ld	r20, Z
    1862:	51 81       	ldd	r21, Z+1	; 0x01
    1864:	f9 01       	movw	r30, r18
    1866:	31 96       	adiw	r30, 0x01	; 1
    1868:	ee 0f       	add	r30, r30
    186a:	ff 1f       	adc	r31, r31
    186c:	e4 51       	subi	r30, 0x14	; 20
    186e:	fa 49       	sbci	r31, 0x9A	; 154
    1870:	40 83       	st	Z, r20
    1872:	51 83       	std	Z+1, r21	; 0x01
				if(show.lastValues[i] != values[i]){
				update = true;
				break;
				}
			}
			for (uint8_t i=0; i<10; i++){
    1874:	9f 5f       	subi	r25, 0xFF	; 255
    1876:	9a 30       	cpi	r25, 0x0A	; 10
    1878:	40 f3       	brcs	.-48     	; 0x184a <screenUpdater+0xd8>
    187a:	59 c0       	rjmp	.+178    	; 0x192e <screenUpdater+0x1bc>
				show.lastValues[i] = values[i];
			}
		break;
		case 1:
			values[0] = SensorData.PVU;
    187c:	e8 e9       	ldi	r30, 0x98	; 152
    187e:	f5 e6       	ldi	r31, 0x65	; 101
    1880:	80 85       	ldd	r24, Z+8	; 0x08
    1882:	91 85       	ldd	r25, Z+9	; 0x09
    1884:	89 83       	std	Y+1, r24	; 0x01
    1886:	9a 83       	std	Y+2, r25	; 0x02
			values[1] = SensorData.PVI;
    1888:	82 85       	ldd	r24, Z+10	; 0x0a
    188a:	93 85       	ldd	r25, Z+11	; 0x0b
    188c:	8b 83       	std	Y+3, r24	; 0x03
    188e:	9c 83       	std	Y+4, r25	; 0x04
			values[2] = StepperMotor.measuredVoltage;
    1890:	e1 ee       	ldi	r30, 0xE1	; 225
    1892:	f5 e6       	ldi	r31, 0x65	; 101
    1894:	85 81       	ldd	r24, Z+5	; 0x05
    1896:	96 81       	ldd	r25, Z+6	; 0x06
    1898:	8d 83       	std	Y+5, r24	; 0x05
    189a:	9e 83       	std	Y+6, r25	; 0x06
			values[3] = StepperMotor.measuredCurrent;
    189c:	87 81       	ldd	r24, Z+7	; 0x07
    189e:	90 85       	ldd	r25, Z+8	; 0x08
    18a0:	8f 83       	std	Y+7, r24	; 0x07
    18a2:	98 87       	std	Y+8, r25	; 0x08
			values[4] = LinearMotor.measuredVoltage;
    18a4:	e9 ec       	ldi	r30, 0xC9	; 201
    18a6:	f5 e6       	ldi	r31, 0x65	; 101
    18a8:	85 81       	ldd	r24, Z+5	; 0x05
    18aa:	96 81       	ldd	r25, Z+6	; 0x06
    18ac:	89 87       	std	Y+9, r24	; 0x09
    18ae:	9a 87       	std	Y+10, r25	; 0x0a
			values[5] = LinearMotor.measuredCurrent;
    18b0:	87 81       	ldd	r24, Z+7	; 0x07
    18b2:	90 85       	ldd	r25, Z+8	; 0x08
    18b4:	8b 87       	std	Y+11, r24	; 0x0b
    18b6:	9c 87       	std	Y+12, r25	; 0x0c
			for (uint8_t i=0; i<6; i++){
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	18 c0       	rjmp	.+48     	; 0x18ec <screenUpdater+0x17a>
				if(show.lastValues[i] != values[i]){
    18bc:	82 2f       	mov	r24, r18
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	fc 01       	movw	r30, r24
    18c2:	31 96       	adiw	r30, 0x01	; 1
    18c4:	ee 0f       	add	r30, r30
    18c6:	ff 1f       	adc	r31, r31
    18c8:	e4 51       	subi	r30, 0x14	; 20
    18ca:	fa 49       	sbci	r31, 0x9A	; 154
    18cc:	40 81       	ld	r20, Z
    18ce:	51 81       	ldd	r21, Z+1	; 0x01
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	e1 e0       	ldi	r30, 0x01	; 1
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	ec 0f       	add	r30, r28
    18da:	fd 1f       	adc	r31, r29
    18dc:	e8 0f       	add	r30, r24
    18de:	f9 1f       	adc	r31, r25
    18e0:	80 81       	ld	r24, Z
    18e2:	91 81       	ldd	r25, Z+1	; 0x01
    18e4:	48 17       	cp	r20, r24
    18e6:	59 07       	cpc	r21, r25
    18e8:	29 f4       	brne	.+10     	; 0x18f4 <screenUpdater+0x182>
			values[1] = SensorData.PVI;
			values[2] = StepperMotor.measuredVoltage;
			values[3] = StepperMotor.measuredCurrent;
			values[4] = LinearMotor.measuredVoltage;
			values[5] = LinearMotor.measuredCurrent;
			for (uint8_t i=0; i<6; i++){
    18ea:	2f 5f       	subi	r18, 0xFF	; 255
    18ec:	26 30       	cpi	r18, 0x06	; 6
    18ee:	30 f3       	brcs	.-52     	; 0x18bc <screenUpdater+0x14a>
#include "Settings.h"
#include "windowsVar.h"

bool screenUpdater(uint8_t window){ //update window data if any changes only
	uint16_t values[MAX_VARS]={0};
	bool update = false;
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	01 c0       	rjmp	.+2      	; 0x18f6 <screenUpdater+0x184>
			values[3] = StepperMotor.measuredCurrent;
			values[4] = LinearMotor.measuredVoltage;
			values[5] = LinearMotor.measuredCurrent;
			for (uint8_t i=0; i<6; i++){
				if(show.lastValues[i] != values[i]){
				update = true;
    18f4:	81 e0       	ldi	r24, 0x01	; 1
				break;
				}
			}
			for (uint8_t i=0; i<6; i++){
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	16 c0       	rjmp	.+44     	; 0x1926 <screenUpdater+0x1b4>
				show.lastValues[i] = values[i];
    18fa:	29 2f       	mov	r18, r25
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	f9 01       	movw	r30, r18
    1900:	ee 0f       	add	r30, r30
    1902:	ff 1f       	adc	r31, r31
    1904:	a1 e0       	ldi	r26, 0x01	; 1
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	ac 0f       	add	r26, r28
    190a:	bd 1f       	adc	r27, r29
    190c:	ea 0f       	add	r30, r26
    190e:	fb 1f       	adc	r31, r27
    1910:	40 81       	ld	r20, Z
    1912:	51 81       	ldd	r21, Z+1	; 0x01
    1914:	f9 01       	movw	r30, r18
    1916:	31 96       	adiw	r30, 0x01	; 1
    1918:	ee 0f       	add	r30, r30
    191a:	ff 1f       	adc	r31, r31
    191c:	e4 51       	subi	r30, 0x14	; 20
    191e:	fa 49       	sbci	r31, 0x9A	; 154
    1920:	40 83       	st	Z, r20
    1922:	51 83       	std	Z+1, r21	; 0x01
				if(show.lastValues[i] != values[i]){
				update = true;
				break;
				}
			}
			for (uint8_t i=0; i<6; i++){
    1924:	9f 5f       	subi	r25, 0xFF	; 255
    1926:	96 30       	cpi	r25, 0x06	; 6
    1928:	40 f3       	brcs	.-48     	; 0x18fa <screenUpdater+0x188>
    192a:	01 c0       	rjmp	.+2      	; 0x192e <screenUpdater+0x1bc>
#include "Settings.h"
#include "windowsVar.h"

bool screenUpdater(uint8_t window){ //update window data if any changes only
	uint16_t values[MAX_VARS]={0};
	bool update = false;
    192c:	80 e0       	ldi	r24, 0x00	; 0
			for (uint8_t i=0; i<6; i++){
				show.lastValues[i] = values[i];
			}
		break;
	}
	show.lastWindow = window;
    192e:	10 93 ed 65 	sts	0x65ED, r17	; 0x8065ed <show+0x1>
	return update;
}
    1932:	66 96       	adiw	r28, 0x16	; 22
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	1f 91       	pop	r17
    193e:	08 95       	ret

00001940 <windows>:

void windows() {
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29

	ReadJoystickValues(); //Joystick read
    1950:	0e 94 21 06 	call	0xc42	; 0xc42 <ReadJoystickValues>

	if(!Joystick.LatchSwitch){//windows changing works if control is set as Auto.
    1954:	80 91 c7 65 	lds	r24, 0x65C7	; 0x8065c7 <Joystick+0x6>
    1958:	81 11       	cpse	r24, r1
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <windows+0x20>
		SelectWindow();
    195c:	0e 94 47 06 	call	0xc8e	; 0xc8e <SelectWindow>
	}
	LatchSwitcher();
    1960:	0e 94 0b 06 	call	0xc16	; 0xc16 <LatchSwitcher>
	switch (show.window){
    1964:	80 91 ec 65 	lds	r24, 0x65EC	; 0x8065ec <show>
    1968:	88 23       	and	r24, r24
    196a:	21 f0       	breq	.+8      	; 0x1974 <windows+0x34>
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	09 f4       	brne	.+2      	; 0x1972 <windows+0x32>
    1970:	c4 c0       	rjmp	.+392    	; 0x1afa <windows+0x1ba>
    1972:	42 c2       	rjmp	.+1156   	; 0x1df8 <windows+0x4b8>
		case 0:
			if(screenUpdater(0)){
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	0e 94 b9 0b 	call	0x1772	; 0x1772 <screenUpdater>
    197a:	88 23       	and	r24, r24
    197c:	09 f4       	brne	.+2      	; 0x1980 <windows+0x40>
    197e:	3c c2       	rjmp	.+1144   	; 0x1df8 <windows+0x4b8>
				screen_write_formatted_text("%s", 0, ALIGN_CENTER, Joystick.LatchSwitch ? "Manual mode": " Auto mode ");			
    1980:	80 91 c7 65 	lds	r24, 0x65C7	; 0x8065c7 <Joystick+0x6>
    1984:	88 23       	and	r24, r24
    1986:	19 f0       	breq	.+6      	; 0x198e <windows+0x4e>
    1988:	85 ec       	ldi	r24, 0xC5	; 197
    198a:	94 e6       	ldi	r25, 0x64	; 100
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <windows+0x52>
    198e:	81 ed       	ldi	r24, 0xD1	; 209
    1990:	94 e6       	ldi	r25, 0x64	; 100
    1992:	9f 93       	push	r25
    1994:	8f 93       	push	r24
    1996:	c1 e0       	ldi	r28, 0x01	; 1
    1998:	cf 93       	push	r28
    199a:	1f 92       	push	r1
    199c:	83 e1       	ldi	r24, 0x13	; 19
    199e:	95 e6       	ldi	r25, 0x65	; 101
    19a0:	9f 93       	push	r25
    19a2:	8f 93       	push	r24
    19a4:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("---------------------", 1, ALIGN_CENTER);
    19a8:	cf 93       	push	r28
    19aa:	cf 93       	push	r28
    19ac:	81 ef       	ldi	r24, 0xF1	; 241
    19ae:	94 e6       	ldi	r25, 0x64	; 100
    19b0:	9f 93       	push	r25
    19b2:	8f 93       	push	r24
    19b4:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				//2. Bad signal fro FO coses FO_bad_signal_fault (receiving 000.. with good crc)
				//3. USATR1 not receiving messages FO_lost_signal_fault meaning FO optic cut or Top controller fault, or onboard Attiny212 fault
				//3a. FO_lost_signal_fault 3 times in row leads to lost connection fault FO_lost_connecton_fault
				//4. Elevation sensor stuck or bad data returns FO_elevation_sensor_fault error
				//5. Azimuth sensor fault FO_azimuth_sensor_fault
				screen_write_formatted_text("%s %s %s %s %s", 2, ALIGN_LEFT, SensorData.FO_data_fault ? "CE": "  ", SensorData.FO_bad_signal_fault ? "FOE": "   ", SensorData.FO_lost_connecton_fault ? "LCE": "   ", SensorData.FO_elevation_sensor_fault ? "ESE": "   ", SensorData.FO_azimuth_sensor_fault ? "ASE": "   ");
    19b8:	80 91 ad 65 	lds	r24, 0x65AD	; 0x8065ad <__data_end+0x15>
    19bc:	2d b7       	in	r18, 0x3d	; 61
    19be:	3e b7       	in	r19, 0x3e	; 62
    19c0:	26 5f       	subi	r18, 0xF6	; 246
    19c2:	3f 4f       	sbci	r19, 0xFF	; 255
    19c4:	2d bf       	out	0x3d, r18	; 61
    19c6:	3e bf       	out	0x3e, r19	; 62
    19c8:	88 23       	and	r24, r24
    19ca:	19 f0       	breq	.+6      	; 0x19d2 <windows+0x92>
    19cc:	ed ed       	ldi	r30, 0xDD	; 221
    19ce:	f4 e6       	ldi	r31, 0x64	; 100
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <windows+0x96>
    19d2:	e1 ee       	ldi	r30, 0xE1	; 225
    19d4:	f4 e6       	ldi	r31, 0x64	; 100
    19d6:	80 91 ac 65 	lds	r24, 0x65AC	; 0x8065ac <__data_end+0x14>
    19da:	88 23       	and	r24, r24
    19dc:	19 f0       	breq	.+6      	; 0x19e4 <windows+0xa4>
    19de:	65 ee       	ldi	r22, 0xE5	; 229
    19e0:	74 e6       	ldi	r23, 0x64	; 100
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <windows+0xa8>
    19e4:	61 ee       	ldi	r22, 0xE1	; 225
    19e6:	74 e6       	ldi	r23, 0x64	; 100
    19e8:	80 91 ab 65 	lds	r24, 0x65AB	; 0x8065ab <__data_end+0x13>
    19ec:	88 23       	and	r24, r24
    19ee:	19 f0       	breq	.+6      	; 0x19f6 <windows+0xb6>
    19f0:	49 ee       	ldi	r20, 0xE9	; 233
    19f2:	54 e6       	ldi	r21, 0x64	; 100
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <windows+0xba>
    19f6:	41 ee       	ldi	r20, 0xE1	; 225
    19f8:	54 e6       	ldi	r21, 0x64	; 100
    19fa:	80 91 a8 65 	lds	r24, 0x65A8	; 0x8065a8 <__data_end+0x10>
    19fe:	88 23       	and	r24, r24
    1a00:	19 f0       	breq	.+6      	; 0x1a08 <windows+0xc8>
    1a02:	2d ee       	ldi	r18, 0xED	; 237
    1a04:	34 e6       	ldi	r19, 0x64	; 100
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <windows+0xcc>
    1a08:	21 ee       	ldi	r18, 0xE1	; 225
    1a0a:	34 e6       	ldi	r19, 0x64	; 100
    1a0c:	80 91 aa 65 	lds	r24, 0x65AA	; 0x8065aa <__data_end+0x12>
    1a10:	88 23       	and	r24, r24
    1a12:	19 f0       	breq	.+6      	; 0x1a1a <windows+0xda>
    1a14:	8a ee       	ldi	r24, 0xEA	; 234
    1a16:	94 e6       	ldi	r25, 0x64	; 100
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <windows+0xde>
    1a1a:	82 ee       	ldi	r24, 0xE2	; 226
    1a1c:	94 e6       	ldi	r25, 0x64	; 100
    1a1e:	ff 93       	push	r31
    1a20:	ef 93       	push	r30
    1a22:	7f 93       	push	r23
    1a24:	6f 93       	push	r22
    1a26:	5f 93       	push	r21
    1a28:	4f 93       	push	r20
    1a2a:	3f 93       	push	r19
    1a2c:	2f 93       	push	r18
    1a2e:	9f 93       	push	r25
    1a30:	8f 93       	push	r24
    1a32:	1f 92       	push	r1
    1a34:	68 94       	set
    1a36:	dd 24       	eor	r13, r13
    1a38:	d1 f8       	bld	r13, 1
    1a3a:	df 92       	push	r13
    1a3c:	87 e0       	ldi	r24, 0x07	; 7
    1a3e:	95 e6       	ldi	r25, 0x65	; 101
    1a40:	9f 93       	push	r25
    1a42:	8f 93       	push	r24
    1a44:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("---------------------", 3, ALIGN_CENTER);
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	8f 93       	push	r24
    1a4c:	83 e0       	ldi	r24, 0x03	; 3
    1a4e:	8f 93       	push	r24
    1a50:	81 ef       	ldi	r24, 0xF1	; 241
    1a52:	94 e6       	ldi	r25, 0x64	; 100
    1a54:	9f 93       	push	r25
    1a56:	8f 93       	push	r24
    1a58:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("Elevation:", 4, ALIGN_LEFT);
    1a5c:	1f 92       	push	r1
    1a5e:	c4 e0       	ldi	r28, 0x04	; 4
    1a60:	cf 93       	push	r28
    1a62:	86 e1       	ldi	r24, 0x16	; 22
    1a64:	95 e6       	ldi	r25, 0x65	; 101
    1a66:	9f 93       	push	r25
    1a68:	8f 93       	push	r24
    1a6a:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("%3d/ %3d", 4, ALIGN_RIGHT, Target.elevation, SensorData.Elevation);
    1a6e:	0f 2e       	mov	r0, r31
    1a70:	f8 e9       	ldi	r31, 0x98	; 152
    1a72:	ef 2e       	mov	r14, r31
    1a74:	f5 e6       	ldi	r31, 0x65	; 101
    1a76:	ff 2e       	mov	r15, r31
    1a78:	f0 2d       	mov	r31, r0
    1a7a:	d7 01       	movw	r26, r14
    1a7c:	11 96       	adiw	r26, 0x01	; 1
    1a7e:	8c 91       	ld	r24, X
    1a80:	11 97       	sbiw	r26, 0x01	; 1
    1a82:	8f 93       	push	r24
    1a84:	8c 91       	ld	r24, X
    1a86:	8f 93       	push	r24
    1a88:	0a e4       	ldi	r16, 0x4A	; 74
    1a8a:	10 e6       	ldi	r17, 0x60	; 96
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	81 81       	ldd	r24, Z+1	; 0x01
    1a90:	8f 93       	push	r24
    1a92:	80 81       	ld	r24, Z
    1a94:	8f 93       	push	r24
    1a96:	df 92       	push	r13
    1a98:	cf 93       	push	r28
    1a9a:	c1 e2       	ldi	r28, 0x21	; 33
    1a9c:	d5 e6       	ldi	r29, 0x65	; 101
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("Azimuth:", 5, ALIGN_LEFT);
    1aa6:	1f 92       	push	r1
    1aa8:	0f 2e       	mov	r0, r31
    1aaa:	f5 e0       	ldi	r31, 0x05	; 5
    1aac:	cf 2e       	mov	r12, r31
    1aae:	f0 2d       	mov	r31, r0
    1ab0:	cf 92       	push	r12
    1ab2:	8a e2       	ldi	r24, 0x2A	; 42
    1ab4:	95 e6       	ldi	r25, 0x65	; 101
    1ab6:	9f 93       	push	r25
    1ab8:	8f 93       	push	r24
    1aba:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("%3d/ %3d", 5, ALIGN_RIGHT, Target.azimuth, SensorData.Azimuth);
    1abe:	8d b7       	in	r24, 0x3d	; 61
    1ac0:	9e b7       	in	r25, 0x3e	; 62
    1ac2:	82 96       	adiw	r24, 0x22	; 34
    1ac4:	8d bf       	out	0x3d, r24	; 61
    1ac6:	9e bf       	out	0x3e, r25	; 62
    1ac8:	d7 01       	movw	r26, r14
    1aca:	15 96       	adiw	r26, 0x05	; 5
    1acc:	8c 91       	ld	r24, X
    1ace:	15 97       	sbiw	r26, 0x05	; 5
    1ad0:	8f 93       	push	r24
    1ad2:	14 96       	adiw	r26, 0x04	; 4
    1ad4:	8c 91       	ld	r24, X
    1ad6:	8f 93       	push	r24
    1ad8:	f8 01       	movw	r30, r16
    1ada:	86 81       	ldd	r24, Z+6	; 0x06
    1adc:	8f 93       	push	r24
    1ade:	85 81       	ldd	r24, Z+5	; 0x05
    1ae0:	8f 93       	push	r24
    1ae2:	df 92       	push	r13
    1ae4:	cf 92       	push	r12
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
    1aee:	8d b7       	in	r24, 0x3d	; 61
    1af0:	9e b7       	in	r25, 0x3e	; 62
    1af2:	08 96       	adiw	r24, 0x08	; 8
    1af4:	8d bf       	out	0x3d, r24	; 61
    1af6:	9e bf       	out	0x3e, r25	; 62
    1af8:	7f c1       	rjmp	.+766    	; 0x1df8 <windows+0x4b8>
			}
		break;
		case 1:
			if(screenUpdater(1)){
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	0e 94 b9 0b 	call	0x1772	; 0x1772 <screenUpdater>
    1b00:	88 23       	and	r24, r24
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <windows+0x1c6>
    1b04:	79 c1       	rjmp	.+754    	; 0x1df8 <windows+0x4b8>
				//Solar panels electrical information
				screen_write_formatted_text("S.P. Voltage", 0, ALIGN_LEFT);
    1b06:	1f 92       	push	r1
    1b08:	1f 92       	push	r1
    1b0a:	83 e3       	ldi	r24, 0x33	; 51
    1b0c:	95 e6       	ldi	r25, 0x65	; 101
    1b0e:	9f 93       	push	r25
    1b10:	8f 93       	push	r24
    1b12:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%01d", 0, ALIGN_RIGHT, SensorData.PVU/10, SensorData.PVU%10);
    1b16:	c8 e9       	ldi	r28, 0x98	; 152
    1b18:	d5 e6       	ldi	r29, 0x65	; 101
    1b1a:	48 85       	ldd	r20, Y+8	; 0x08
    1b1c:	59 85       	ldd	r21, Y+9	; 0x09
    1b1e:	9a 01       	movw	r18, r20
    1b20:	ad ec       	ldi	r26, 0xCD	; 205
    1b22:	bc ec       	ldi	r27, 0xCC	; 204
    1b24:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__umulhisi3>
    1b28:	96 95       	lsr	r25
    1b2a:	87 95       	ror	r24
    1b2c:	96 95       	lsr	r25
    1b2e:	87 95       	ror	r24
    1b30:	96 95       	lsr	r25
    1b32:	87 95       	ror	r24
    1b34:	9c 01       	movw	r18, r24
    1b36:	22 0f       	add	r18, r18
    1b38:	33 1f       	adc	r19, r19
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	82 0f       	add	r24, r18
    1b48:	93 1f       	adc	r25, r19
    1b4a:	da 01       	movw	r26, r20
    1b4c:	a8 1b       	sub	r26, r24
    1b4e:	b9 0b       	sbc	r27, r25
    1b50:	cd 01       	movw	r24, r26
    1b52:	9f 93       	push	r25
    1b54:	af 93       	push	r26
    1b56:	9a 01       	movw	r18, r20
    1b58:	ad ec       	ldi	r26, 0xCD	; 205
    1b5a:	bc ec       	ldi	r27, 0xCC	; 204
    1b5c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__umulhisi3>
    1b60:	96 95       	lsr	r25
    1b62:	87 95       	ror	r24
    1b64:	96 95       	lsr	r25
    1b66:	87 95       	ror	r24
    1b68:	96 95       	lsr	r25
    1b6a:	87 95       	ror	r24
    1b6c:	9f 93       	push	r25
    1b6e:	8f 93       	push	r24
    1b70:	82 e0       	ldi	r24, 0x02	; 2
    1b72:	8f 93       	push	r24
    1b74:	1f 92       	push	r1
    1b76:	80 e4       	ldi	r24, 0x40	; 64
    1b78:	95 e6       	ldi	r25, 0x65	; 101
    1b7a:	9f 93       	push	r25
    1b7c:	8f 93       	push	r24
    1b7e:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("S.P Current:", 1, ALIGN_LEFT);
    1b82:	1f 92       	push	r1
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	8f 93       	push	r24
    1b88:	89 e4       	ldi	r24, 0x49	; 73
    1b8a:	95 e6       	ldi	r25, 0x65	; 101
    1b8c:	9f 93       	push	r25
    1b8e:	8f 93       	push	r24
    1b90:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%02d", 1, ALIGN_RIGHT, SensorData.PVI/100, abs(SensorData.PVI%100));
    1b94:	4a 85       	ldd	r20, Y+10	; 0x0a
    1b96:	5b 85       	ldd	r21, Y+11	; 0x0b
    1b98:	9a 01       	movw	r18, r20
    1b9a:	36 95       	lsr	r19
    1b9c:	27 95       	ror	r18
    1b9e:	36 95       	lsr	r19
    1ba0:	27 95       	ror	r18
    1ba2:	ab e7       	ldi	r26, 0x7B	; 123
    1ba4:	b4 e1       	ldi	r27, 0x14	; 20
    1ba6:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__umulhisi3>
    1baa:	96 95       	lsr	r25
    1bac:	87 95       	ror	r24
    1bae:	64 e6       	ldi	r22, 0x64	; 100
    1bb0:	68 9f       	mul	r22, r24
    1bb2:	90 01       	movw	r18, r0
    1bb4:	69 9f       	mul	r22, r25
    1bb6:	30 0d       	add	r19, r0
    1bb8:	11 24       	eor	r1, r1
    1bba:	ca 01       	movw	r24, r20
    1bbc:	82 1b       	sub	r24, r18
    1bbe:	93 0b       	sbc	r25, r19
    1bc0:	9c 01       	movw	r18, r24
    1bc2:	22 f4       	brpl	.+8      	; 0x1bcc <windows+0x28c>
    1bc4:	22 27       	eor	r18, r18
    1bc6:	33 27       	eor	r19, r19
    1bc8:	28 1b       	sub	r18, r24
    1bca:	39 0b       	sbc	r19, r25
    1bcc:	3f 93       	push	r19
    1bce:	2f 93       	push	r18
    1bd0:	9a 01       	movw	r18, r20
    1bd2:	36 95       	lsr	r19
    1bd4:	27 95       	ror	r18
    1bd6:	36 95       	lsr	r19
    1bd8:	27 95       	ror	r18
    1bda:	ab e7       	ldi	r26, 0x7B	; 123
    1bdc:	b4 e1       	ldi	r27, 0x14	; 20
    1bde:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__umulhisi3>
    1be2:	96 95       	lsr	r25
    1be4:	87 95       	ror	r24
    1be6:	9f 93       	push	r25
    1be8:	8f 93       	push	r24
    1bea:	c2 e0       	ldi	r28, 0x02	; 2
    1bec:	cf 93       	push	r28
    1bee:	d1 e0       	ldi	r29, 0x01	; 1
    1bf0:	df 93       	push	r29
    1bf2:	86 e5       	ldi	r24, 0x56	; 86
    1bf4:	95 e6       	ldi	r25, 0x65	; 101
    1bf6:	9f 93       	push	r25
    1bf8:	8f 93       	push	r24
    1bfa:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("---------------------", 2, ALIGN_CENTER);
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	81 ef       	ldi	r24, 0xF1	; 241
    1c04:	94 e6       	ldi	r25, 0x64	; 100
    1c06:	9f 93       	push	r25
    1c08:	8f 93       	push	r24
    1c0a:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				//Azimuth (Stepper) motor electrical information
				screen_write_formatted_text("St.M. Voltage", 3, ALIGN_LEFT);
    1c0e:	1f 92       	push	r1
    1c10:	d3 e0       	ldi	r29, 0x03	; 3
    1c12:	df 93       	push	r29
    1c14:	8f e5       	ldi	r24, 0x5F	; 95
    1c16:	95 e6       	ldi	r25, 0x65	; 101
    1c18:	9f 93       	push	r25
    1c1a:	8f 93       	push	r24
    1c1c:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%01d", 3, ALIGN_RIGHT, StepperMotor.measuredVoltage/10, StepperMotor.measuredVoltage%10);
    1c20:	01 ee       	ldi	r16, 0xE1	; 225
    1c22:	15 e6       	ldi	r17, 0x65	; 101
    1c24:	f8 01       	movw	r30, r16
    1c26:	45 81       	ldd	r20, Z+5	; 0x05
    1c28:	56 81       	ldd	r21, Z+6	; 0x06
    1c2a:	2d b7       	in	r18, 0x3d	; 61
    1c2c:	3e b7       	in	r19, 0x3e	; 62
    1c2e:	20 5e       	subi	r18, 0xE0	; 224
    1c30:	3f 4f       	sbci	r19, 0xFF	; 255
    1c32:	2d bf       	out	0x3d, r18	; 61
    1c34:	3e bf       	out	0x3e, r19	; 62
    1c36:	9a 01       	movw	r18, r20
    1c38:	ad ec       	ldi	r26, 0xCD	; 205
    1c3a:	bc ec       	ldi	r27, 0xCC	; 204
    1c3c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__umulhisi3>
    1c40:	96 95       	lsr	r25
    1c42:	87 95       	ror	r24
    1c44:	96 95       	lsr	r25
    1c46:	87 95       	ror	r24
    1c48:	96 95       	lsr	r25
    1c4a:	87 95       	ror	r24
    1c4c:	9c 01       	movw	r18, r24
    1c4e:	22 0f       	add	r18, r18
    1c50:	33 1f       	adc	r19, r19
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	82 0f       	add	r24, r18
    1c60:	93 1f       	adc	r25, r19
    1c62:	da 01       	movw	r26, r20
    1c64:	a8 1b       	sub	r26, r24
    1c66:	b9 0b       	sbc	r27, r25
    1c68:	cd 01       	movw	r24, r26
    1c6a:	9f 93       	push	r25
    1c6c:	af 93       	push	r26
    1c6e:	9a 01       	movw	r18, r20
    1c70:	ad ec       	ldi	r26, 0xCD	; 205
    1c72:	bc ec       	ldi	r27, 0xCC	; 204
    1c74:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__umulhisi3>
    1c78:	96 95       	lsr	r25
    1c7a:	87 95       	ror	r24
    1c7c:	96 95       	lsr	r25
    1c7e:	87 95       	ror	r24
    1c80:	96 95       	lsr	r25
    1c82:	87 95       	ror	r24
    1c84:	9f 93       	push	r25
    1c86:	8f 93       	push	r24
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	80 e4       	ldi	r24, 0x40	; 64
    1c8e:	95 e6       	ldi	r25, 0x65	; 101
    1c90:	9f 93       	push	r25
    1c92:	8f 93       	push	r24
    1c94:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("St.M. Current:", 4, ALIGN_LEFT);
    1c98:	1f 92       	push	r1
    1c9a:	84 e0       	ldi	r24, 0x04	; 4
    1c9c:	8f 93       	push	r24
    1c9e:	8d e6       	ldi	r24, 0x6D	; 109
    1ca0:	95 e6       	ldi	r25, 0x65	; 101
    1ca2:	9f 93       	push	r25
    1ca4:	8f 93       	push	r24
    1ca6:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%02d", 4, ALIGN_RIGHT, StepperMotor.measuredCurrent/100, abs(StepperMotor.measuredCurrent%100));
    1caa:	d8 01       	movw	r26, r16
    1cac:	17 96       	adiw	r26, 0x07	; 7
    1cae:	ed 91       	ld	r30, X+
    1cb0:	fc 91       	ld	r31, X
    1cb2:	18 97       	sbiw	r26, 0x08	; 8
    1cb4:	cf 01       	movw	r24, r30
    1cb6:	64 e6       	ldi	r22, 0x64	; 100
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	0e 94 a1 10 	call	0x2142	; 0x2142 <__divmodhi4>
    1cbe:	9c 01       	movw	r18, r24
    1cc0:	99 23       	and	r25, r25
    1cc2:	24 f4       	brge	.+8      	; 0x1ccc <windows+0x38c>
    1cc4:	22 27       	eor	r18, r18
    1cc6:	33 27       	eor	r19, r19
    1cc8:	28 1b       	sub	r18, r24
    1cca:	39 0b       	sbc	r19, r25
    1ccc:	3f 93       	push	r19
    1cce:	2f 93       	push	r18
    1cd0:	c4 e6       	ldi	r28, 0x64	; 100
    1cd2:	d0 e0       	ldi	r29, 0x00	; 0
    1cd4:	cf 01       	movw	r24, r30
    1cd6:	be 01       	movw	r22, r28
    1cd8:	0e 94 a1 10 	call	0x2142	; 0x2142 <__divmodhi4>
    1cdc:	7f 93       	push	r23
    1cde:	6f 93       	push	r22
    1ce0:	68 94       	set
    1ce2:	ee 24       	eor	r14, r14
    1ce4:	e1 f8       	bld	r14, 1
    1ce6:	ef 92       	push	r14
    1ce8:	84 e0       	ldi	r24, 0x04	; 4
    1cea:	8f 93       	push	r24
    1cec:	86 e5       	ldi	r24, 0x56	; 86
    1cee:	95 e6       	ldi	r25, 0x65	; 101
    1cf0:	9f 93       	push	r25
    1cf2:	8f 93       	push	r24
    1cf4:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("---------------------", 5, ALIGN_CENTER);
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	8f 93       	push	r24
    1cfc:	85 e0       	ldi	r24, 0x05	; 5
    1cfe:	8f 93       	push	r24
    1d00:	81 ef       	ldi	r24, 0xF1	; 241
    1d02:	94 e6       	ldi	r25, 0x64	; 100
    1d04:	9f 93       	push	r25
    1d06:	8f 93       	push	r24
    1d08:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				//Elevation (Linear) motor electical information
				screen_write_formatted_text("L.M. Voltage", 6, ALIGN_LEFT);
    1d0c:	1f 92       	push	r1
    1d0e:	0f 2e       	mov	r0, r31
    1d10:	f6 e0       	ldi	r31, 0x06	; 6
    1d12:	ff 2e       	mov	r15, r31
    1d14:	f0 2d       	mov	r31, r0
    1d16:	ff 92       	push	r15
    1d18:	8c e7       	ldi	r24, 0x7C	; 124
    1d1a:	95 e6       	ldi	r25, 0x65	; 101
    1d1c:	9f 93       	push	r25
    1d1e:	8f 93       	push	r24
    1d20:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%01d", 6, ALIGN_RIGHT, LinearMotor.measuredVoltage/10, LinearMotor.measuredVoltage%10);
    1d24:	09 ec       	ldi	r16, 0xC9	; 201
    1d26:	15 e6       	ldi	r17, 0x65	; 101
    1d28:	f8 01       	movw	r30, r16
    1d2a:	45 81       	ldd	r20, Z+5	; 0x05
    1d2c:	56 81       	ldd	r21, Z+6	; 0x06
    1d2e:	9a 01       	movw	r18, r20
    1d30:	ad ec       	ldi	r26, 0xCD	; 205
    1d32:	bc ec       	ldi	r27, 0xCC	; 204
    1d34:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__umulhisi3>
    1d38:	96 95       	lsr	r25
    1d3a:	87 95       	ror	r24
    1d3c:	96 95       	lsr	r25
    1d3e:	87 95       	ror	r24
    1d40:	96 95       	lsr	r25
    1d42:	87 95       	ror	r24
    1d44:	9c 01       	movw	r18, r24
    1d46:	22 0f       	add	r18, r18
    1d48:	33 1f       	adc	r19, r19
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	82 0f       	add	r24, r18
    1d58:	93 1f       	adc	r25, r19
    1d5a:	9a 01       	movw	r18, r20
    1d5c:	28 1b       	sub	r18, r24
    1d5e:	39 0b       	sbc	r19, r25
    1d60:	c9 01       	movw	r24, r18
    1d62:	9f 93       	push	r25
    1d64:	2f 93       	push	r18
    1d66:	9a 01       	movw	r18, r20
    1d68:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__umulhisi3>
    1d6c:	96 95       	lsr	r25
    1d6e:	87 95       	ror	r24
    1d70:	96 95       	lsr	r25
    1d72:	87 95       	ror	r24
    1d74:	96 95       	lsr	r25
    1d76:	87 95       	ror	r24
    1d78:	9f 93       	push	r25
    1d7a:	8f 93       	push	r24
    1d7c:	ef 92       	push	r14
    1d7e:	ff 92       	push	r15
    1d80:	80 e4       	ldi	r24, 0x40	; 64
    1d82:	95 e6       	ldi	r25, 0x65	; 101
    1d84:	9f 93       	push	r25
    1d86:	8f 93       	push	r24
    1d88:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("L.M. Current:", 7, ALIGN_LEFT);
    1d8c:	8d b7       	in	r24, 0x3d	; 61
    1d8e:	9e b7       	in	r25, 0x3e	; 62
    1d90:	84 96       	adiw	r24, 0x24	; 36
    1d92:	8d bf       	out	0x3d, r24	; 61
    1d94:	9e bf       	out	0x3e, r25	; 62
    1d96:	1f 92       	push	r1
    1d98:	87 e0       	ldi	r24, 0x07	; 7
    1d9a:	8f 93       	push	r24
    1d9c:	89 e8       	ldi	r24, 0x89	; 137
    1d9e:	95 e6       	ldi	r25, 0x65	; 101
    1da0:	9f 93       	push	r25
    1da2:	8f 93       	push	r24
    1da4:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%02d", 7, ALIGN_RIGHT, LinearMotor.measuredCurrent/100, abs(LinearMotor.measuredCurrent%100));
    1da8:	d8 01       	movw	r26, r16
    1daa:	17 96       	adiw	r26, 0x07	; 7
    1dac:	ed 91       	ld	r30, X+
    1dae:	fc 91       	ld	r31, X
    1db0:	18 97       	sbiw	r26, 0x08	; 8
    1db2:	cf 01       	movw	r24, r30
    1db4:	be 01       	movw	r22, r28
    1db6:	0e 94 a1 10 	call	0x2142	; 0x2142 <__divmodhi4>
    1dba:	9c 01       	movw	r18, r24
    1dbc:	99 23       	and	r25, r25
    1dbe:	24 f4       	brge	.+8      	; 0x1dc8 <windows+0x488>
    1dc0:	22 27       	eor	r18, r18
    1dc2:	33 27       	eor	r19, r19
    1dc4:	28 1b       	sub	r18, r24
    1dc6:	39 0b       	sbc	r19, r25
    1dc8:	3f 93       	push	r19
    1dca:	2f 93       	push	r18
    1dcc:	cf 01       	movw	r24, r30
    1dce:	64 e6       	ldi	r22, 0x64	; 100
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	0e 94 a1 10 	call	0x2142	; 0x2142 <__divmodhi4>
    1dd6:	7f 93       	push	r23
    1dd8:	6f 93       	push	r22
    1dda:	82 e0       	ldi	r24, 0x02	; 2
    1ddc:	8f 93       	push	r24
    1dde:	87 e0       	ldi	r24, 0x07	; 7
    1de0:	8f 93       	push	r24
    1de2:	86 e5       	ldi	r24, 0x56	; 86
    1de4:	95 e6       	ldi	r25, 0x65	; 101
    1de6:	9f 93       	push	r25
    1de8:	8f 93       	push	r24
    1dea:	0e 94 a6 09 	call	0x134c	; 0x134c <screen_write_formatted_text>
    1dee:	ed b7       	in	r30, 0x3d	; 61
    1df0:	fe b7       	in	r31, 0x3e	; 62
    1df2:	3c 96       	adiw	r30, 0x0c	; 12
    1df4:	ed bf       	out	0x3d, r30	; 61
    1df6:	fe bf       	out	0x3e, r31	; 62
			}
		break;
	}
	

    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	1f 91       	pop	r17
    1dfe:	0f 91       	pop	r16
    1e00:	ff 90       	pop	r15
    1e02:	ef 90       	pop	r14
    1e04:	df 90       	pop	r13
    1e06:	cf 90       	pop	r12
    1e08:	08 95       	ret

00001e0a <__divsf3>:
    1e0a:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divsf3x>
    1e0e:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__fp_round>
    1e12:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fp_pscB>
    1e16:	58 f0       	brcs	.+22     	; 0x1e2e <__divsf3+0x24>
    1e18:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__fp_pscA>
    1e1c:	40 f0       	brcs	.+16     	; 0x1e2e <__divsf3+0x24>
    1e1e:	29 f4       	brne	.+10     	; 0x1e2a <__divsf3+0x20>
    1e20:	5f 3f       	cpi	r21, 0xFF	; 255
    1e22:	29 f0       	breq	.+10     	; 0x1e2e <__divsf3+0x24>
    1e24:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__fp_inf>
    1e28:	51 11       	cpse	r21, r1
    1e2a:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__fp_szero>
    1e2e:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__fp_nan>

00001e32 <__divsf3x>:
    1e32:	0e 94 0b 10 	call	0x2016	; 0x2016 <__fp_split3>
    1e36:	68 f3       	brcs	.-38     	; 0x1e12 <__divsf3+0x8>

00001e38 <__divsf3_pse>:
    1e38:	99 23       	and	r25, r25
    1e3a:	b1 f3       	breq	.-20     	; 0x1e28 <__divsf3+0x1e>
    1e3c:	55 23       	and	r21, r21
    1e3e:	91 f3       	breq	.-28     	; 0x1e24 <__divsf3+0x1a>
    1e40:	95 1b       	sub	r25, r21
    1e42:	55 0b       	sbc	r21, r21
    1e44:	bb 27       	eor	r27, r27
    1e46:	aa 27       	eor	r26, r26
    1e48:	62 17       	cp	r22, r18
    1e4a:	73 07       	cpc	r23, r19
    1e4c:	84 07       	cpc	r24, r20
    1e4e:	38 f0       	brcs	.+14     	; 0x1e5e <__divsf3_pse+0x26>
    1e50:	9f 5f       	subi	r25, 0xFF	; 255
    1e52:	5f 4f       	sbci	r21, 0xFF	; 255
    1e54:	22 0f       	add	r18, r18
    1e56:	33 1f       	adc	r19, r19
    1e58:	44 1f       	adc	r20, r20
    1e5a:	aa 1f       	adc	r26, r26
    1e5c:	a9 f3       	breq	.-22     	; 0x1e48 <__divsf3_pse+0x10>
    1e5e:	35 d0       	rcall	.+106    	; 0x1eca <__divsf3_pse+0x92>
    1e60:	0e 2e       	mov	r0, r30
    1e62:	3a f0       	brmi	.+14     	; 0x1e72 <__divsf3_pse+0x3a>
    1e64:	e0 e8       	ldi	r30, 0x80	; 128
    1e66:	32 d0       	rcall	.+100    	; 0x1ecc <__divsf3_pse+0x94>
    1e68:	91 50       	subi	r25, 0x01	; 1
    1e6a:	50 40       	sbci	r21, 0x00	; 0
    1e6c:	e6 95       	lsr	r30
    1e6e:	00 1c       	adc	r0, r0
    1e70:	ca f7       	brpl	.-14     	; 0x1e64 <__divsf3_pse+0x2c>
    1e72:	2b d0       	rcall	.+86     	; 0x1eca <__divsf3_pse+0x92>
    1e74:	fe 2f       	mov	r31, r30
    1e76:	29 d0       	rcall	.+82     	; 0x1eca <__divsf3_pse+0x92>
    1e78:	66 0f       	add	r22, r22
    1e7a:	77 1f       	adc	r23, r23
    1e7c:	88 1f       	adc	r24, r24
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	26 17       	cp	r18, r22
    1e82:	37 07       	cpc	r19, r23
    1e84:	48 07       	cpc	r20, r24
    1e86:	ab 07       	cpc	r26, r27
    1e88:	b0 e8       	ldi	r27, 0x80	; 128
    1e8a:	09 f0       	breq	.+2      	; 0x1e8e <__divsf3_pse+0x56>
    1e8c:	bb 0b       	sbc	r27, r27
    1e8e:	80 2d       	mov	r24, r0
    1e90:	bf 01       	movw	r22, r30
    1e92:	ff 27       	eor	r31, r31
    1e94:	93 58       	subi	r25, 0x83	; 131
    1e96:	5f 4f       	sbci	r21, 0xFF	; 255
    1e98:	3a f0       	brmi	.+14     	; 0x1ea8 <__divsf3_pse+0x70>
    1e9a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e9c:	51 05       	cpc	r21, r1
    1e9e:	78 f0       	brcs	.+30     	; 0x1ebe <__divsf3_pse+0x86>
    1ea0:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__fp_inf>
    1ea4:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__fp_szero>
    1ea8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eaa:	e4 f3       	brlt	.-8      	; 0x1ea4 <__divsf3_pse+0x6c>
    1eac:	98 3e       	cpi	r25, 0xE8	; 232
    1eae:	d4 f3       	brlt	.-12     	; 0x1ea4 <__divsf3_pse+0x6c>
    1eb0:	86 95       	lsr	r24
    1eb2:	77 95       	ror	r23
    1eb4:	67 95       	ror	r22
    1eb6:	b7 95       	ror	r27
    1eb8:	f7 95       	ror	r31
    1eba:	9f 5f       	subi	r25, 0xFF	; 255
    1ebc:	c9 f7       	brne	.-14     	; 0x1eb0 <__divsf3_pse+0x78>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	91 1d       	adc	r25, r1
    1ec2:	96 95       	lsr	r25
    1ec4:	87 95       	ror	r24
    1ec6:	97 f9       	bld	r25, 7
    1ec8:	08 95       	ret
    1eca:	e1 e0       	ldi	r30, 0x01	; 1
    1ecc:	66 0f       	add	r22, r22
    1ece:	77 1f       	adc	r23, r23
    1ed0:	88 1f       	adc	r24, r24
    1ed2:	bb 1f       	adc	r27, r27
    1ed4:	62 17       	cp	r22, r18
    1ed6:	73 07       	cpc	r23, r19
    1ed8:	84 07       	cpc	r24, r20
    1eda:	ba 07       	cpc	r27, r26
    1edc:	20 f0       	brcs	.+8      	; 0x1ee6 <__divsf3_pse+0xae>
    1ede:	62 1b       	sub	r22, r18
    1ee0:	73 0b       	sbc	r23, r19
    1ee2:	84 0b       	sbc	r24, r20
    1ee4:	ba 0b       	sbc	r27, r26
    1ee6:	ee 1f       	adc	r30, r30
    1ee8:	88 f7       	brcc	.-30     	; 0x1ecc <__divsf3_pse+0x94>
    1eea:	e0 95       	com	r30
    1eec:	08 95       	ret

00001eee <__fixunssfsi>:
    1eee:	0e 94 13 10 	call	0x2026	; 0x2026 <__fp_splitA>
    1ef2:	88 f0       	brcs	.+34     	; 0x1f16 <__fixunssfsi+0x28>
    1ef4:	9f 57       	subi	r25, 0x7F	; 127
    1ef6:	98 f0       	brcs	.+38     	; 0x1f1e <__fixunssfsi+0x30>
    1ef8:	b9 2f       	mov	r27, r25
    1efa:	99 27       	eor	r25, r25
    1efc:	b7 51       	subi	r27, 0x17	; 23
    1efe:	b0 f0       	brcs	.+44     	; 0x1f2c <__fixunssfsi+0x3e>
    1f00:	e1 f0       	breq	.+56     	; 0x1f3a <__fixunssfsi+0x4c>
    1f02:	66 0f       	add	r22, r22
    1f04:	77 1f       	adc	r23, r23
    1f06:	88 1f       	adc	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	1a f0       	brmi	.+6      	; 0x1f12 <__fixunssfsi+0x24>
    1f0c:	ba 95       	dec	r27
    1f0e:	c9 f7       	brne	.-14     	; 0x1f02 <__fixunssfsi+0x14>
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <__fixunssfsi+0x4c>
    1f12:	b1 30       	cpi	r27, 0x01	; 1
    1f14:	91 f0       	breq	.+36     	; 0x1f3a <__fixunssfsi+0x4c>
    1f16:	0e 94 2d 10 	call	0x205a	; 0x205a <__fp_zero>
    1f1a:	b1 e0       	ldi	r27, 0x01	; 1
    1f1c:	08 95       	ret
    1f1e:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__fp_zero>
    1f22:	67 2f       	mov	r22, r23
    1f24:	78 2f       	mov	r23, r24
    1f26:	88 27       	eor	r24, r24
    1f28:	b8 5f       	subi	r27, 0xF8	; 248
    1f2a:	39 f0       	breq	.+14     	; 0x1f3a <__fixunssfsi+0x4c>
    1f2c:	b9 3f       	cpi	r27, 0xF9	; 249
    1f2e:	cc f3       	brlt	.-14     	; 0x1f22 <__fixunssfsi+0x34>
    1f30:	86 95       	lsr	r24
    1f32:	77 95       	ror	r23
    1f34:	67 95       	ror	r22
    1f36:	b3 95       	inc	r27
    1f38:	d9 f7       	brne	.-10     	; 0x1f30 <__fixunssfsi+0x42>
    1f3a:	3e f4       	brtc	.+14     	; 0x1f4a <__fixunssfsi+0x5c>
    1f3c:	90 95       	com	r25
    1f3e:	80 95       	com	r24
    1f40:	70 95       	com	r23
    1f42:	61 95       	neg	r22
    1f44:	7f 4f       	sbci	r23, 0xFF	; 255
    1f46:	8f 4f       	sbci	r24, 0xFF	; 255
    1f48:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4a:	08 95       	ret

00001f4c <__floatunsisf>:
    1f4c:	e8 94       	clt
    1f4e:	09 c0       	rjmp	.+18     	; 0x1f62 <__floatsisf+0x12>

00001f50 <__floatsisf>:
    1f50:	97 fb       	bst	r25, 7
    1f52:	3e f4       	brtc	.+14     	; 0x1f62 <__floatsisf+0x12>
    1f54:	90 95       	com	r25
    1f56:	80 95       	com	r24
    1f58:	70 95       	com	r23
    1f5a:	61 95       	neg	r22
    1f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	99 23       	and	r25, r25
    1f64:	a9 f0       	breq	.+42     	; 0x1f90 <__floatsisf+0x40>
    1f66:	f9 2f       	mov	r31, r25
    1f68:	96 e9       	ldi	r25, 0x96	; 150
    1f6a:	bb 27       	eor	r27, r27
    1f6c:	93 95       	inc	r25
    1f6e:	f6 95       	lsr	r31
    1f70:	87 95       	ror	r24
    1f72:	77 95       	ror	r23
    1f74:	67 95       	ror	r22
    1f76:	b7 95       	ror	r27
    1f78:	f1 11       	cpse	r31, r1
    1f7a:	f8 cf       	rjmp	.-16     	; 0x1f6c <__floatsisf+0x1c>
    1f7c:	fa f4       	brpl	.+62     	; 0x1fbc <__floatsisf+0x6c>
    1f7e:	bb 0f       	add	r27, r27
    1f80:	11 f4       	brne	.+4      	; 0x1f86 <__floatsisf+0x36>
    1f82:	60 ff       	sbrs	r22, 0
    1f84:	1b c0       	rjmp	.+54     	; 0x1fbc <__floatsisf+0x6c>
    1f86:	6f 5f       	subi	r22, 0xFF	; 255
    1f88:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8e:	16 c0       	rjmp	.+44     	; 0x1fbc <__floatsisf+0x6c>
    1f90:	88 23       	and	r24, r24
    1f92:	11 f0       	breq	.+4      	; 0x1f98 <__floatsisf+0x48>
    1f94:	96 e9       	ldi	r25, 0x96	; 150
    1f96:	11 c0       	rjmp	.+34     	; 0x1fba <__floatsisf+0x6a>
    1f98:	77 23       	and	r23, r23
    1f9a:	21 f0       	breq	.+8      	; 0x1fa4 <__floatsisf+0x54>
    1f9c:	9e e8       	ldi	r25, 0x8E	; 142
    1f9e:	87 2f       	mov	r24, r23
    1fa0:	76 2f       	mov	r23, r22
    1fa2:	05 c0       	rjmp	.+10     	; 0x1fae <__floatsisf+0x5e>
    1fa4:	66 23       	and	r22, r22
    1fa6:	71 f0       	breq	.+28     	; 0x1fc4 <__floatsisf+0x74>
    1fa8:	96 e8       	ldi	r25, 0x86	; 134
    1faa:	86 2f       	mov	r24, r22
    1fac:	70 e0       	ldi	r23, 0x00	; 0
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	2a f0       	brmi	.+10     	; 0x1fbc <__floatsisf+0x6c>
    1fb2:	9a 95       	dec	r25
    1fb4:	66 0f       	add	r22, r22
    1fb6:	77 1f       	adc	r23, r23
    1fb8:	88 1f       	adc	r24, r24
    1fba:	da f7       	brpl	.-10     	; 0x1fb2 <__floatsisf+0x62>
    1fbc:	88 0f       	add	r24, r24
    1fbe:	96 95       	lsr	r25
    1fc0:	87 95       	ror	r24
    1fc2:	97 f9       	bld	r25, 7
    1fc4:	08 95       	ret

00001fc6 <__fp_inf>:
    1fc6:	97 f9       	bld	r25, 7
    1fc8:	9f 67       	ori	r25, 0x7F	; 127
    1fca:	80 e8       	ldi	r24, 0x80	; 128
    1fcc:	70 e0       	ldi	r23, 0x00	; 0
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	08 95       	ret

00001fd2 <__fp_nan>:
    1fd2:	9f ef       	ldi	r25, 0xFF	; 255
    1fd4:	80 ec       	ldi	r24, 0xC0	; 192
    1fd6:	08 95       	ret

00001fd8 <__fp_pscA>:
    1fd8:	00 24       	eor	r0, r0
    1fda:	0a 94       	dec	r0
    1fdc:	16 16       	cp	r1, r22
    1fde:	17 06       	cpc	r1, r23
    1fe0:	18 06       	cpc	r1, r24
    1fe2:	09 06       	cpc	r0, r25
    1fe4:	08 95       	ret

00001fe6 <__fp_pscB>:
    1fe6:	00 24       	eor	r0, r0
    1fe8:	0a 94       	dec	r0
    1fea:	12 16       	cp	r1, r18
    1fec:	13 06       	cpc	r1, r19
    1fee:	14 06       	cpc	r1, r20
    1ff0:	05 06       	cpc	r0, r21
    1ff2:	08 95       	ret

00001ff4 <__fp_round>:
    1ff4:	09 2e       	mov	r0, r25
    1ff6:	03 94       	inc	r0
    1ff8:	00 0c       	add	r0, r0
    1ffa:	11 f4       	brne	.+4      	; 0x2000 <__DATA_REGION_LENGTH__>
    1ffc:	88 23       	and	r24, r24
    1ffe:	52 f0       	brmi	.+20     	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    2000:	bb 0f       	add	r27, r27
    2002:	40 f4       	brcc	.+16     	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    2004:	bf 2b       	or	r27, r31
    2006:	11 f4       	brne	.+4      	; 0x200c <__DATA_REGION_LENGTH__+0xc>
    2008:	60 ff       	sbrs	r22, 0
    200a:	04 c0       	rjmp	.+8      	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    200c:	6f 5f       	subi	r22, 0xFF	; 255
    200e:	7f 4f       	sbci	r23, 0xFF	; 255
    2010:	8f 4f       	sbci	r24, 0xFF	; 255
    2012:	9f 4f       	sbci	r25, 0xFF	; 255
    2014:	08 95       	ret

00002016 <__fp_split3>:
    2016:	57 fd       	sbrc	r21, 7
    2018:	90 58       	subi	r25, 0x80	; 128
    201a:	44 0f       	add	r20, r20
    201c:	55 1f       	adc	r21, r21
    201e:	59 f0       	breq	.+22     	; 0x2036 <__fp_splitA+0x10>
    2020:	5f 3f       	cpi	r21, 0xFF	; 255
    2022:	71 f0       	breq	.+28     	; 0x2040 <__fp_splitA+0x1a>
    2024:	47 95       	ror	r20

00002026 <__fp_splitA>:
    2026:	88 0f       	add	r24, r24
    2028:	97 fb       	bst	r25, 7
    202a:	99 1f       	adc	r25, r25
    202c:	61 f0       	breq	.+24     	; 0x2046 <__fp_splitA+0x20>
    202e:	9f 3f       	cpi	r25, 0xFF	; 255
    2030:	79 f0       	breq	.+30     	; 0x2050 <__fp_splitA+0x2a>
    2032:	87 95       	ror	r24
    2034:	08 95       	ret
    2036:	12 16       	cp	r1, r18
    2038:	13 06       	cpc	r1, r19
    203a:	14 06       	cpc	r1, r20
    203c:	55 1f       	adc	r21, r21
    203e:	f2 cf       	rjmp	.-28     	; 0x2024 <__fp_split3+0xe>
    2040:	46 95       	lsr	r20
    2042:	f1 df       	rcall	.-30     	; 0x2026 <__fp_splitA>
    2044:	08 c0       	rjmp	.+16     	; 0x2056 <__fp_splitA+0x30>
    2046:	16 16       	cp	r1, r22
    2048:	17 06       	cpc	r1, r23
    204a:	18 06       	cpc	r1, r24
    204c:	99 1f       	adc	r25, r25
    204e:	f1 cf       	rjmp	.-30     	; 0x2032 <__fp_splitA+0xc>
    2050:	86 95       	lsr	r24
    2052:	71 05       	cpc	r23, r1
    2054:	61 05       	cpc	r22, r1
    2056:	08 94       	sec
    2058:	08 95       	ret

0000205a <__fp_zero>:
    205a:	e8 94       	clt

0000205c <__fp_szero>:
    205c:	bb 27       	eor	r27, r27
    205e:	66 27       	eor	r22, r22
    2060:	77 27       	eor	r23, r23
    2062:	cb 01       	movw	r24, r22
    2064:	97 f9       	bld	r25, 7
    2066:	08 95       	ret

00002068 <__mulsf3>:
    2068:	0e 94 47 10 	call	0x208e	; 0x208e <__mulsf3x>
    206c:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__fp_round>
    2070:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__fp_pscA>
    2074:	38 f0       	brcs	.+14     	; 0x2084 <__mulsf3+0x1c>
    2076:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fp_pscB>
    207a:	20 f0       	brcs	.+8      	; 0x2084 <__mulsf3+0x1c>
    207c:	95 23       	and	r25, r21
    207e:	11 f0       	breq	.+4      	; 0x2084 <__mulsf3+0x1c>
    2080:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__fp_inf>
    2084:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__fp_nan>
    2088:	11 24       	eor	r1, r1
    208a:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__fp_szero>

0000208e <__mulsf3x>:
    208e:	0e 94 0b 10 	call	0x2016	; 0x2016 <__fp_split3>
    2092:	70 f3       	brcs	.-36     	; 0x2070 <__mulsf3+0x8>

00002094 <__mulsf3_pse>:
    2094:	95 9f       	mul	r25, r21
    2096:	c1 f3       	breq	.-16     	; 0x2088 <__mulsf3+0x20>
    2098:	95 0f       	add	r25, r21
    209a:	50 e0       	ldi	r21, 0x00	; 0
    209c:	55 1f       	adc	r21, r21
    209e:	62 9f       	mul	r22, r18
    20a0:	f0 01       	movw	r30, r0
    20a2:	72 9f       	mul	r23, r18
    20a4:	bb 27       	eor	r27, r27
    20a6:	f0 0d       	add	r31, r0
    20a8:	b1 1d       	adc	r27, r1
    20aa:	63 9f       	mul	r22, r19
    20ac:	aa 27       	eor	r26, r26
    20ae:	f0 0d       	add	r31, r0
    20b0:	b1 1d       	adc	r27, r1
    20b2:	aa 1f       	adc	r26, r26
    20b4:	64 9f       	mul	r22, r20
    20b6:	66 27       	eor	r22, r22
    20b8:	b0 0d       	add	r27, r0
    20ba:	a1 1d       	adc	r26, r1
    20bc:	66 1f       	adc	r22, r22
    20be:	82 9f       	mul	r24, r18
    20c0:	22 27       	eor	r18, r18
    20c2:	b0 0d       	add	r27, r0
    20c4:	a1 1d       	adc	r26, r1
    20c6:	62 1f       	adc	r22, r18
    20c8:	73 9f       	mul	r23, r19
    20ca:	b0 0d       	add	r27, r0
    20cc:	a1 1d       	adc	r26, r1
    20ce:	62 1f       	adc	r22, r18
    20d0:	83 9f       	mul	r24, r19
    20d2:	a0 0d       	add	r26, r0
    20d4:	61 1d       	adc	r22, r1
    20d6:	22 1f       	adc	r18, r18
    20d8:	74 9f       	mul	r23, r20
    20da:	33 27       	eor	r19, r19
    20dc:	a0 0d       	add	r26, r0
    20de:	61 1d       	adc	r22, r1
    20e0:	23 1f       	adc	r18, r19
    20e2:	84 9f       	mul	r24, r20
    20e4:	60 0d       	add	r22, r0
    20e6:	21 1d       	adc	r18, r1
    20e8:	82 2f       	mov	r24, r18
    20ea:	76 2f       	mov	r23, r22
    20ec:	6a 2f       	mov	r22, r26
    20ee:	11 24       	eor	r1, r1
    20f0:	9f 57       	subi	r25, 0x7F	; 127
    20f2:	50 40       	sbci	r21, 0x00	; 0
    20f4:	9a f0       	brmi	.+38     	; 0x211c <__mulsf3_pse+0x88>
    20f6:	f1 f0       	breq	.+60     	; 0x2134 <__mulsf3_pse+0xa0>
    20f8:	88 23       	and	r24, r24
    20fa:	4a f0       	brmi	.+18     	; 0x210e <__mulsf3_pse+0x7a>
    20fc:	ee 0f       	add	r30, r30
    20fe:	ff 1f       	adc	r31, r31
    2100:	bb 1f       	adc	r27, r27
    2102:	66 1f       	adc	r22, r22
    2104:	77 1f       	adc	r23, r23
    2106:	88 1f       	adc	r24, r24
    2108:	91 50       	subi	r25, 0x01	; 1
    210a:	50 40       	sbci	r21, 0x00	; 0
    210c:	a9 f7       	brne	.-22     	; 0x20f8 <__mulsf3_pse+0x64>
    210e:	9e 3f       	cpi	r25, 0xFE	; 254
    2110:	51 05       	cpc	r21, r1
    2112:	80 f0       	brcs	.+32     	; 0x2134 <__mulsf3_pse+0xa0>
    2114:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__fp_inf>
    2118:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__fp_szero>
    211c:	5f 3f       	cpi	r21, 0xFF	; 255
    211e:	e4 f3       	brlt	.-8      	; 0x2118 <__mulsf3_pse+0x84>
    2120:	98 3e       	cpi	r25, 0xE8	; 232
    2122:	d4 f3       	brlt	.-12     	; 0x2118 <__mulsf3_pse+0x84>
    2124:	86 95       	lsr	r24
    2126:	77 95       	ror	r23
    2128:	67 95       	ror	r22
    212a:	b7 95       	ror	r27
    212c:	f7 95       	ror	r31
    212e:	e7 95       	ror	r30
    2130:	9f 5f       	subi	r25, 0xFF	; 255
    2132:	c1 f7       	brne	.-16     	; 0x2124 <__mulsf3_pse+0x90>
    2134:	fe 2b       	or	r31, r30
    2136:	88 0f       	add	r24, r24
    2138:	91 1d       	adc	r25, r1
    213a:	96 95       	lsr	r25
    213c:	87 95       	ror	r24
    213e:	97 f9       	bld	r25, 7
    2140:	08 95       	ret

00002142 <__divmodhi4>:
    2142:	97 fb       	bst	r25, 7
    2144:	07 2e       	mov	r0, r23
    2146:	16 f4       	brtc	.+4      	; 0x214c <__divmodhi4+0xa>
    2148:	00 94       	com	r0
    214a:	07 d0       	rcall	.+14     	; 0x215a <__divmodhi4_neg1>
    214c:	77 fd       	sbrc	r23, 7
    214e:	09 d0       	rcall	.+18     	; 0x2162 <__divmodhi4_neg2>
    2150:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__udivmodhi4>
    2154:	07 fc       	sbrc	r0, 7
    2156:	05 d0       	rcall	.+10     	; 0x2162 <__divmodhi4_neg2>
    2158:	3e f4       	brtc	.+14     	; 0x2168 <__divmodhi4_exit>

0000215a <__divmodhi4_neg1>:
    215a:	90 95       	com	r25
    215c:	81 95       	neg	r24
    215e:	9f 4f       	sbci	r25, 0xFF	; 255
    2160:	08 95       	ret

00002162 <__divmodhi4_neg2>:
    2162:	70 95       	com	r23
    2164:	61 95       	neg	r22
    2166:	7f 4f       	sbci	r23, 0xFF	; 255

00002168 <__divmodhi4_exit>:
    2168:	08 95       	ret

0000216a <__udivmodsi4>:
    216a:	a1 e2       	ldi	r26, 0x21	; 33
    216c:	1a 2e       	mov	r1, r26
    216e:	aa 1b       	sub	r26, r26
    2170:	bb 1b       	sub	r27, r27
    2172:	fd 01       	movw	r30, r26
    2174:	0d c0       	rjmp	.+26     	; 0x2190 <__udivmodsi4_ep>

00002176 <__udivmodsi4_loop>:
    2176:	aa 1f       	adc	r26, r26
    2178:	bb 1f       	adc	r27, r27
    217a:	ee 1f       	adc	r30, r30
    217c:	ff 1f       	adc	r31, r31
    217e:	a2 17       	cp	r26, r18
    2180:	b3 07       	cpc	r27, r19
    2182:	e4 07       	cpc	r30, r20
    2184:	f5 07       	cpc	r31, r21
    2186:	20 f0       	brcs	.+8      	; 0x2190 <__udivmodsi4_ep>
    2188:	a2 1b       	sub	r26, r18
    218a:	b3 0b       	sbc	r27, r19
    218c:	e4 0b       	sbc	r30, r20
    218e:	f5 0b       	sbc	r31, r21

00002190 <__udivmodsi4_ep>:
    2190:	66 1f       	adc	r22, r22
    2192:	77 1f       	adc	r23, r23
    2194:	88 1f       	adc	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	1a 94       	dec	r1
    219a:	69 f7       	brne	.-38     	; 0x2176 <__udivmodsi4_loop>
    219c:	60 95       	com	r22
    219e:	70 95       	com	r23
    21a0:	80 95       	com	r24
    21a2:	90 95       	com	r25
    21a4:	9b 01       	movw	r18, r22
    21a6:	ac 01       	movw	r20, r24
    21a8:	bd 01       	movw	r22, r26
    21aa:	cf 01       	movw	r24, r30
    21ac:	08 95       	ret

000021ae <__divmodsi4>:
    21ae:	05 2e       	mov	r0, r21
    21b0:	97 fb       	bst	r25, 7
    21b2:	1e f4       	brtc	.+6      	; 0x21ba <__divmodsi4+0xc>
    21b4:	00 94       	com	r0
    21b6:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__negsi2>
    21ba:	57 fd       	sbrc	r21, 7
    21bc:	07 d0       	rcall	.+14     	; 0x21cc <__divmodsi4_neg2>
    21be:	0e 94 b5 10 	call	0x216a	; 0x216a <__udivmodsi4>
    21c2:	07 fc       	sbrc	r0, 7
    21c4:	03 d0       	rcall	.+6      	; 0x21cc <__divmodsi4_neg2>
    21c6:	4e f4       	brtc	.+18     	; 0x21da <__divmodsi4_exit>
    21c8:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__negsi2>

000021cc <__divmodsi4_neg2>:
    21cc:	50 95       	com	r21
    21ce:	40 95       	com	r20
    21d0:	30 95       	com	r19
    21d2:	21 95       	neg	r18
    21d4:	3f 4f       	sbci	r19, 0xFF	; 255
    21d6:	4f 4f       	sbci	r20, 0xFF	; 255
    21d8:	5f 4f       	sbci	r21, 0xFF	; 255

000021da <__divmodsi4_exit>:
    21da:	08 95       	ret

000021dc <__negsi2>:
    21dc:	90 95       	com	r25
    21de:	80 95       	com	r24
    21e0:	70 95       	com	r23
    21e2:	61 95       	neg	r22
    21e4:	7f 4f       	sbci	r23, 0xFF	; 255
    21e6:	8f 4f       	sbci	r24, 0xFF	; 255
    21e8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ea:	08 95       	ret

000021ec <__umulhisi3>:
    21ec:	a2 9f       	mul	r26, r18
    21ee:	b0 01       	movw	r22, r0
    21f0:	b3 9f       	mul	r27, r19
    21f2:	c0 01       	movw	r24, r0
    21f4:	a3 9f       	mul	r26, r19
    21f6:	70 0d       	add	r23, r0
    21f8:	81 1d       	adc	r24, r1
    21fa:	11 24       	eor	r1, r1
    21fc:	91 1d       	adc	r25, r1
    21fe:	b2 9f       	mul	r27, r18
    2200:	70 0d       	add	r23, r0
    2202:	81 1d       	adc	r24, r1
    2204:	11 24       	eor	r1, r1
    2206:	91 1d       	adc	r25, r1
    2208:	08 95       	ret

0000220a <__ashldi3>:
    220a:	0f 93       	push	r16
    220c:	08 30       	cpi	r16, 0x08	; 8
    220e:	90 f0       	brcs	.+36     	; 0x2234 <__ashldi3+0x2a>
    2210:	98 2f       	mov	r25, r24
    2212:	87 2f       	mov	r24, r23
    2214:	76 2f       	mov	r23, r22
    2216:	65 2f       	mov	r22, r21
    2218:	54 2f       	mov	r21, r20
    221a:	43 2f       	mov	r20, r19
    221c:	32 2f       	mov	r19, r18
    221e:	22 27       	eor	r18, r18
    2220:	08 50       	subi	r16, 0x08	; 8
    2222:	f4 cf       	rjmp	.-24     	; 0x220c <__ashldi3+0x2>
    2224:	22 0f       	add	r18, r18
    2226:	33 1f       	adc	r19, r19
    2228:	44 1f       	adc	r20, r20
    222a:	55 1f       	adc	r21, r21
    222c:	66 1f       	adc	r22, r22
    222e:	77 1f       	adc	r23, r23
    2230:	88 1f       	adc	r24, r24
    2232:	99 1f       	adc	r25, r25
    2234:	0a 95       	dec	r16
    2236:	b2 f7       	brpl	.-20     	; 0x2224 <__ashldi3+0x1a>
    2238:	0f 91       	pop	r16
    223a:	08 95       	ret

0000223c <__ashrdi3>:
    223c:	97 fb       	bst	r25, 7
    223e:	10 f8       	bld	r1, 0

00002240 <__lshrdi3>:
    2240:	16 94       	lsr	r1
    2242:	00 08       	sbc	r0, r0
    2244:	0f 93       	push	r16
    2246:	08 30       	cpi	r16, 0x08	; 8
    2248:	98 f0       	brcs	.+38     	; 0x2270 <__lshrdi3+0x30>
    224a:	08 50       	subi	r16, 0x08	; 8
    224c:	23 2f       	mov	r18, r19
    224e:	34 2f       	mov	r19, r20
    2250:	45 2f       	mov	r20, r21
    2252:	56 2f       	mov	r21, r22
    2254:	67 2f       	mov	r22, r23
    2256:	78 2f       	mov	r23, r24
    2258:	89 2f       	mov	r24, r25
    225a:	90 2d       	mov	r25, r0
    225c:	f4 cf       	rjmp	.-24     	; 0x2246 <__lshrdi3+0x6>
    225e:	05 94       	asr	r0
    2260:	97 95       	ror	r25
    2262:	87 95       	ror	r24
    2264:	77 95       	ror	r23
    2266:	67 95       	ror	r22
    2268:	57 95       	ror	r21
    226a:	47 95       	ror	r20
    226c:	37 95       	ror	r19
    226e:	27 95       	ror	r18
    2270:	0a 95       	dec	r16
    2272:	aa f7       	brpl	.-22     	; 0x225e <__lshrdi3+0x1e>
    2274:	0f 91       	pop	r16
    2276:	08 95       	ret

00002278 <__adddi3_s8>:
    2278:	00 24       	eor	r0, r0
    227a:	a7 fd       	sbrc	r26, 7
    227c:	00 94       	com	r0
    227e:	2a 0f       	add	r18, r26
    2280:	30 1d       	adc	r19, r0
    2282:	40 1d       	adc	r20, r0
    2284:	50 1d       	adc	r21, r0
    2286:	60 1d       	adc	r22, r0
    2288:	70 1d       	adc	r23, r0
    228a:	80 1d       	adc	r24, r0
    228c:	90 1d       	adc	r25, r0
    228e:	08 95       	ret

00002290 <__cmpdi2_s8>:
    2290:	00 24       	eor	r0, r0
    2292:	a7 fd       	sbrc	r26, 7
    2294:	00 94       	com	r0
    2296:	2a 17       	cp	r18, r26
    2298:	30 05       	cpc	r19, r0
    229a:	40 05       	cpc	r20, r0
    229c:	50 05       	cpc	r21, r0
    229e:	60 05       	cpc	r22, r0
    22a0:	70 05       	cpc	r23, r0
    22a2:	80 05       	cpc	r24, r0
    22a4:	90 05       	cpc	r25, r0
    22a6:	08 95       	ret

000022a8 <__udivmodhi4>:
    22a8:	aa 1b       	sub	r26, r26
    22aa:	bb 1b       	sub	r27, r27
    22ac:	51 e1       	ldi	r21, 0x11	; 17
    22ae:	07 c0       	rjmp	.+14     	; 0x22be <__udivmodhi4_ep>

000022b0 <__udivmodhi4_loop>:
    22b0:	aa 1f       	adc	r26, r26
    22b2:	bb 1f       	adc	r27, r27
    22b4:	a6 17       	cp	r26, r22
    22b6:	b7 07       	cpc	r27, r23
    22b8:	10 f0       	brcs	.+4      	; 0x22be <__udivmodhi4_ep>
    22ba:	a6 1b       	sub	r26, r22
    22bc:	b7 0b       	sbc	r27, r23

000022be <__udivmodhi4_ep>:
    22be:	88 1f       	adc	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	5a 95       	dec	r21
    22c4:	a9 f7       	brne	.-22     	; 0x22b0 <__udivmodhi4_loop>
    22c6:	80 95       	com	r24
    22c8:	90 95       	com	r25
    22ca:	bc 01       	movw	r22, r24
    22cc:	cd 01       	movw	r24, r26
    22ce:	08 95       	ret

000022d0 <strtol>:
    22d0:	a0 e0       	ldi	r26, 0x00	; 0
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	ee e6       	ldi	r30, 0x6E	; 110
    22d6:	f1 e1       	ldi	r31, 0x11	; 17
    22d8:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__prologue_saves__+0x2>
    22dc:	5c 01       	movw	r10, r24
    22de:	6b 01       	movw	r12, r22
    22e0:	7a 01       	movw	r14, r20
    22e2:	61 15       	cp	r22, r1
    22e4:	71 05       	cpc	r23, r1
    22e6:	19 f0       	breq	.+6      	; 0x22ee <strtol+0x1e>
    22e8:	fb 01       	movw	r30, r22
    22ea:	80 83       	st	Z, r24
    22ec:	91 83       	std	Z+1, r25	; 0x01
    22ee:	e1 14       	cp	r14, r1
    22f0:	f1 04       	cpc	r15, r1
    22f2:	29 f0       	breq	.+10     	; 0x22fe <strtol+0x2e>
    22f4:	c7 01       	movw	r24, r14
    22f6:	02 97       	sbiw	r24, 0x02	; 2
    22f8:	83 97       	sbiw	r24, 0x23	; 35
    22fa:	08 f0       	brcs	.+2      	; 0x22fe <strtol+0x2e>
    22fc:	e5 c0       	rjmp	.+458    	; 0x24c8 <strtol+0x1f8>
    22fe:	e5 01       	movw	r28, r10
    2300:	21 96       	adiw	r28, 0x01	; 1
    2302:	f5 01       	movw	r30, r10
    2304:	10 81       	ld	r17, Z
    2306:	81 2f       	mov	r24, r17
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	0e 94 7e 12 	call	0x24fc	; 0x24fc <isspace>
    230e:	89 2b       	or	r24, r25
    2310:	11 f0       	breq	.+4      	; 0x2316 <strtol+0x46>
    2312:	5e 01       	movw	r10, r28
    2314:	f4 cf       	rjmp	.-24     	; 0x22fe <strtol+0x2e>
    2316:	1d 32       	cpi	r17, 0x2D	; 45
    2318:	29 f4       	brne	.+10     	; 0x2324 <strtol+0x54>
    231a:	21 96       	adiw	r28, 0x01	; 1
    231c:	f5 01       	movw	r30, r10
    231e:	11 81       	ldd	r17, Z+1	; 0x01
    2320:	01 e0       	ldi	r16, 0x01	; 1
    2322:	07 c0       	rjmp	.+14     	; 0x2332 <strtol+0x62>
    2324:	1b 32       	cpi	r17, 0x2B	; 43
    2326:	21 f4       	brne	.+8      	; 0x2330 <strtol+0x60>
    2328:	e5 01       	movw	r28, r10
    232a:	22 96       	adiw	r28, 0x02	; 2
    232c:	f5 01       	movw	r30, r10
    232e:	11 81       	ldd	r17, Z+1	; 0x01
    2330:	00 e0       	ldi	r16, 0x00	; 0
    2332:	e1 14       	cp	r14, r1
    2334:	f1 04       	cpc	r15, r1
    2336:	09 f1       	breq	.+66     	; 0x237a <strtol+0xaa>
    2338:	f0 e1       	ldi	r31, 0x10	; 16
    233a:	ef 16       	cp	r14, r31
    233c:	f1 04       	cpc	r15, r1
    233e:	29 f4       	brne	.+10     	; 0x234a <strtol+0x7a>
    2340:	3f c0       	rjmp	.+126    	; 0x23c0 <strtol+0xf0>
    2342:	10 e3       	ldi	r17, 0x30	; 48
    2344:	e1 14       	cp	r14, r1
    2346:	f1 04       	cpc	r15, r1
    2348:	21 f1       	breq	.+72     	; 0x2392 <strtol+0xc2>
    234a:	28 e0       	ldi	r18, 0x08	; 8
    234c:	e2 16       	cp	r14, r18
    234e:	f1 04       	cpc	r15, r1
    2350:	01 f1       	breq	.+64     	; 0x2392 <strtol+0xc2>
    2352:	54 f4       	brge	.+20     	; 0x2368 <strtol+0x98>
    2354:	e2 e0       	ldi	r30, 0x02	; 2
    2356:	ee 16       	cp	r14, r30
    2358:	f1 04       	cpc	r15, r1
    235a:	21 f5       	brne	.+72     	; 0x23a4 <strtol+0xd4>
    235c:	81 2c       	mov	r8, r1
    235e:	91 2c       	mov	r9, r1
    2360:	a1 2c       	mov	r10, r1
    2362:	b0 e4       	ldi	r27, 0x40	; 64
    2364:	bb 2e       	mov	r11, r27
    2366:	3e c0       	rjmp	.+124    	; 0x23e4 <strtol+0x114>
    2368:	fa e0       	ldi	r31, 0x0A	; 10
    236a:	ef 16       	cp	r14, r31
    236c:	f1 04       	cpc	r15, r1
    236e:	39 f0       	breq	.+14     	; 0x237e <strtol+0xae>
    2370:	20 e1       	ldi	r18, 0x10	; 16
    2372:	e2 16       	cp	r14, r18
    2374:	f1 04       	cpc	r15, r1
    2376:	b1 f4       	brne	.+44     	; 0x23a4 <strtol+0xd4>
    2378:	30 c0       	rjmp	.+96     	; 0x23da <strtol+0x10a>
    237a:	10 33       	cpi	r17, 0x30	; 48
    237c:	19 f1       	breq	.+70     	; 0x23c4 <strtol+0xf4>
    237e:	fa e0       	ldi	r31, 0x0A	; 10
    2380:	ef 2e       	mov	r14, r31
    2382:	f1 2c       	mov	r15, r1
    2384:	ac ec       	ldi	r26, 0xCC	; 204
    2386:	8a 2e       	mov	r8, r26
    2388:	98 2c       	mov	r9, r8
    238a:	a8 2c       	mov	r10, r8
    238c:	ac e0       	ldi	r26, 0x0C	; 12
    238e:	ba 2e       	mov	r11, r26
    2390:	29 c0       	rjmp	.+82     	; 0x23e4 <strtol+0x114>
    2392:	78 e0       	ldi	r23, 0x08	; 8
    2394:	e7 2e       	mov	r14, r23
    2396:	f1 2c       	mov	r15, r1
    2398:	81 2c       	mov	r8, r1
    239a:	91 2c       	mov	r9, r1
    239c:	a1 2c       	mov	r10, r1
    239e:	e0 e1       	ldi	r30, 0x10	; 16
    23a0:	be 2e       	mov	r11, r30
    23a2:	20 c0       	rjmp	.+64     	; 0x23e4 <strtol+0x114>
    23a4:	60 e0       	ldi	r22, 0x00	; 0
    23a6:	70 e0       	ldi	r23, 0x00	; 0
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	90 e8       	ldi	r25, 0x80	; 128
    23ac:	97 01       	movw	r18, r14
    23ae:	0f 2c       	mov	r0, r15
    23b0:	00 0c       	add	r0, r0
    23b2:	44 0b       	sbc	r20, r20
    23b4:	55 0b       	sbc	r21, r21
    23b6:	0e 94 b5 10 	call	0x216a	; 0x216a <__udivmodsi4>
    23ba:	49 01       	movw	r8, r18
    23bc:	5a 01       	movw	r10, r20
    23be:	12 c0       	rjmp	.+36     	; 0x23e4 <strtol+0x114>
    23c0:	10 33       	cpi	r17, 0x30	; 48
    23c2:	59 f4       	brne	.+22     	; 0x23da <strtol+0x10a>
    23c4:	88 81       	ld	r24, Y
    23c6:	8f 7d       	andi	r24, 0xDF	; 223
    23c8:	88 35       	cpi	r24, 0x58	; 88
    23ca:	09 f0       	breq	.+2      	; 0x23ce <strtol+0xfe>
    23cc:	ba cf       	rjmp	.-140    	; 0x2342 <strtol+0x72>
    23ce:	19 81       	ldd	r17, Y+1	; 0x01
    23d0:	22 96       	adiw	r28, 0x02	; 2
    23d2:	02 60       	ori	r16, 0x02	; 2
    23d4:	80 e1       	ldi	r24, 0x10	; 16
    23d6:	e8 2e       	mov	r14, r24
    23d8:	f1 2c       	mov	r15, r1
    23da:	81 2c       	mov	r8, r1
    23dc:	91 2c       	mov	r9, r1
    23de:	a1 2c       	mov	r10, r1
    23e0:	68 e0       	ldi	r22, 0x08	; 8
    23e2:	b6 2e       	mov	r11, r22
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	60 e0       	ldi	r22, 0x00	; 0
    23e8:	70 e0       	ldi	r23, 0x00	; 0
    23ea:	cb 01       	movw	r24, r22
    23ec:	27 01       	movw	r4, r14
    23ee:	0f 2c       	mov	r0, r15
    23f0:	00 0c       	add	r0, r0
    23f2:	66 08       	sbc	r6, r6
    23f4:	77 08       	sbc	r7, r7
    23f6:	fe 01       	movw	r30, r28
    23f8:	50 ed       	ldi	r21, 0xD0	; 208
    23fa:	35 2e       	mov	r3, r21
    23fc:	31 0e       	add	r3, r17
    23fe:	29 e0       	ldi	r18, 0x09	; 9
    2400:	23 15       	cp	r18, r3
    2402:	70 f4       	brcc	.+28     	; 0x2420 <strtol+0x150>
    2404:	2f eb       	ldi	r18, 0xBF	; 191
    2406:	21 0f       	add	r18, r17
    2408:	2a 31       	cpi	r18, 0x1A	; 26
    240a:	18 f4       	brcc	.+6      	; 0x2412 <strtol+0x142>
    240c:	39 ec       	ldi	r19, 0xC9	; 201
    240e:	33 2e       	mov	r3, r19
    2410:	06 c0       	rjmp	.+12     	; 0x241e <strtol+0x14e>
    2412:	2f e9       	ldi	r18, 0x9F	; 159
    2414:	21 0f       	add	r18, r17
    2416:	2a 31       	cpi	r18, 0x1A	; 26
    2418:	18 f5       	brcc	.+70     	; 0x2460 <strtol+0x190>
    241a:	29 ea       	ldi	r18, 0xA9	; 169
    241c:	32 2e       	mov	r3, r18
    241e:	31 0e       	add	r3, r17
    2420:	23 2d       	mov	r18, r3
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	2e 15       	cp	r18, r14
    2426:	3f 05       	cpc	r19, r15
    2428:	dc f4       	brge	.+54     	; 0x2460 <strtol+0x190>
    242a:	47 fd       	sbrc	r20, 7
    242c:	16 c0       	rjmp	.+44     	; 0x245a <strtol+0x18a>
    242e:	86 16       	cp	r8, r22
    2430:	97 06       	cpc	r9, r23
    2432:	a8 06       	cpc	r10, r24
    2434:	b9 06       	cpc	r11, r25
    2436:	70 f0       	brcs	.+28     	; 0x2454 <strtol+0x184>
    2438:	a3 01       	movw	r20, r6
    243a:	92 01       	movw	r18, r4
    243c:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__mulsi3>
    2440:	63 0d       	add	r22, r3
    2442:	71 1d       	adc	r23, r1
    2444:	81 1d       	adc	r24, r1
    2446:	91 1d       	adc	r25, r1
    2448:	61 30       	cpi	r22, 0x01	; 1
    244a:	71 05       	cpc	r23, r1
    244c:	81 05       	cpc	r24, r1
    244e:	20 e8       	ldi	r18, 0x80	; 128
    2450:	92 07       	cpc	r25, r18
    2452:	10 f0       	brcs	.+4      	; 0x2458 <strtol+0x188>
    2454:	4f ef       	ldi	r20, 0xFF	; 255
    2456:	01 c0       	rjmp	.+2      	; 0x245a <strtol+0x18a>
    2458:	41 e0       	ldi	r20, 0x01	; 1
    245a:	21 96       	adiw	r28, 0x01	; 1
    245c:	10 81       	ld	r17, Z
    245e:	cb cf       	rjmp	.-106    	; 0x23f6 <strtol+0x126>
    2460:	20 2f       	mov	r18, r16
    2462:	21 70       	andi	r18, 0x01	; 1
    2464:	c1 14       	cp	r12, r1
    2466:	d1 04       	cpc	r13, r1
    2468:	71 f0       	breq	.+28     	; 0x2486 <strtol+0x1b6>
    246a:	44 23       	and	r20, r20
    246c:	29 f0       	breq	.+10     	; 0x2478 <strtol+0x1a8>
    246e:	21 97       	sbiw	r28, 0x01	; 1
    2470:	f6 01       	movw	r30, r12
    2472:	c0 83       	st	Z, r28
    2474:	d1 83       	std	Z+1, r29	; 0x01
    2476:	07 c0       	rjmp	.+14     	; 0x2486 <strtol+0x1b6>
    2478:	01 ff       	sbrs	r16, 1
    247a:	19 c0       	rjmp	.+50     	; 0x24ae <strtol+0x1de>
    247c:	22 97       	sbiw	r28, 0x02	; 2
    247e:	f6 01       	movw	r30, r12
    2480:	c0 83       	st	Z, r28
    2482:	d1 83       	std	Z+1, r29	; 0x01
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <strtol+0x1de>
    2486:	47 ff       	sbrs	r20, 7
    2488:	12 c0       	rjmp	.+36     	; 0x24ae <strtol+0x1de>
    248a:	22 23       	and	r18, r18
    248c:	29 f0       	breq	.+10     	; 0x2498 <strtol+0x1c8>
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	90 e8       	ldi	r25, 0x80	; 128
    2496:	04 c0       	rjmp	.+8      	; 0x24a0 <strtol+0x1d0>
    2498:	6f ef       	ldi	r22, 0xFF	; 255
    249a:	7f ef       	ldi	r23, 0xFF	; 255
    249c:	8f ef       	ldi	r24, 0xFF	; 255
    249e:	9f e7       	ldi	r25, 0x7F	; 127
    24a0:	22 e2       	ldi	r18, 0x22	; 34
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	20 93 04 66 	sts	0x6604, r18	; 0x806604 <errno>
    24a8:	30 93 05 66 	sts	0x6605, r19	; 0x806605 <errno+0x1>
    24ac:	09 c0       	rjmp	.+18     	; 0x24c0 <strtol+0x1f0>
    24ae:	22 23       	and	r18, r18
    24b0:	81 f0       	breq	.+32     	; 0x24d2 <strtol+0x202>
    24b2:	90 95       	com	r25
    24b4:	80 95       	com	r24
    24b6:	70 95       	com	r23
    24b8:	61 95       	neg	r22
    24ba:	7f 4f       	sbci	r23, 0xFF	; 255
    24bc:	8f 4f       	sbci	r24, 0xFF	; 255
    24be:	9f 4f       	sbci	r25, 0xFF	; 255
    24c0:	46 2f       	mov	r20, r22
    24c2:	37 2f       	mov	r19, r23
    24c4:	28 2f       	mov	r18, r24
    24c6:	12 c0       	rjmp	.+36     	; 0x24ec <strtol+0x21c>
    24c8:	40 e0       	ldi	r20, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0d c0       	rjmp	.+26     	; 0x24ec <strtol+0x21c>
    24d2:	97 ff       	sbrs	r25, 7
    24d4:	f5 cf       	rjmp	.-22     	; 0x24c0 <strtol+0x1f0>
    24d6:	82 e2       	ldi	r24, 0x22	; 34
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	80 93 04 66 	sts	0x6604, r24	; 0x806604 <errno>
    24de:	90 93 05 66 	sts	0x6605, r25	; 0x806605 <errno+0x1>
    24e2:	6f ef       	ldi	r22, 0xFF	; 255
    24e4:	7f ef       	ldi	r23, 0xFF	; 255
    24e6:	8f ef       	ldi	r24, 0xFF	; 255
    24e8:	9f e7       	ldi	r25, 0x7F	; 127
    24ea:	ea cf       	rjmp	.-44     	; 0x24c0 <strtol+0x1f0>
    24ec:	64 2f       	mov	r22, r20
    24ee:	73 2f       	mov	r23, r19
    24f0:	82 2f       	mov	r24, r18
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	e1 e1       	ldi	r30, 0x11	; 17
    24f8:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__+0x2>

000024fc <isspace>:
    24fc:	91 11       	cpse	r25, r1
    24fe:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__ctype_isfalse>
    2502:	80 32       	cpi	r24, 0x20	; 32
    2504:	19 f0       	breq	.+6      	; 0x250c <isspace+0x10>
    2506:	89 50       	subi	r24, 0x09	; 9
    2508:	85 50       	subi	r24, 0x05	; 5
    250a:	c8 f7       	brcc	.-14     	; 0x24fe <isspace+0x2>
    250c:	08 95       	ret

0000250e <memcpy>:
    250e:	fb 01       	movw	r30, r22
    2510:	dc 01       	movw	r26, r24
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <memcpy+0xa>
    2514:	01 90       	ld	r0, Z+
    2516:	0d 92       	st	X+, r0
    2518:	41 50       	subi	r20, 0x01	; 1
    251a:	50 40       	sbci	r21, 0x00	; 0
    251c:	d8 f7       	brcc	.-10     	; 0x2514 <memcpy+0x6>
    251e:	08 95       	ret

00002520 <strcmp>:
    2520:	fb 01       	movw	r30, r22
    2522:	dc 01       	movw	r26, r24
    2524:	8d 91       	ld	r24, X+
    2526:	01 90       	ld	r0, Z+
    2528:	80 19       	sub	r24, r0
    252a:	01 10       	cpse	r0, r1
    252c:	d9 f3       	breq	.-10     	; 0x2524 <strcmp+0x4>
    252e:	99 0b       	sbc	r25, r25
    2530:	08 95       	ret

00002532 <strcpy>:
    2532:	fb 01       	movw	r30, r22
    2534:	dc 01       	movw	r26, r24
    2536:	01 90       	ld	r0, Z+
    2538:	0d 92       	st	X+, r0
    253a:	00 20       	and	r0, r0
    253c:	e1 f7       	brne	.-8      	; 0x2536 <strcpy+0x4>
    253e:	08 95       	ret

00002540 <strncmp>:
    2540:	fb 01       	movw	r30, r22
    2542:	dc 01       	movw	r26, r24
    2544:	41 50       	subi	r20, 0x01	; 1
    2546:	50 40       	sbci	r21, 0x00	; 0
    2548:	30 f0       	brcs	.+12     	; 0x2556 <strncmp+0x16>
    254a:	8d 91       	ld	r24, X+
    254c:	01 90       	ld	r0, Z+
    254e:	80 19       	sub	r24, r0
    2550:	19 f4       	brne	.+6      	; 0x2558 <strncmp+0x18>
    2552:	00 20       	and	r0, r0
    2554:	b9 f7       	brne	.-18     	; 0x2544 <strncmp+0x4>
    2556:	88 1b       	sub	r24, r24
    2558:	99 0b       	sbc	r25, r25
    255a:	08 95       	ret

0000255c <strncpy>:
    255c:	fb 01       	movw	r30, r22
    255e:	dc 01       	movw	r26, r24
    2560:	41 50       	subi	r20, 0x01	; 1
    2562:	50 40       	sbci	r21, 0x00	; 0
    2564:	48 f0       	brcs	.+18     	; 0x2578 <strncpy+0x1c>
    2566:	01 90       	ld	r0, Z+
    2568:	0d 92       	st	X+, r0
    256a:	00 20       	and	r0, r0
    256c:	c9 f7       	brne	.-14     	; 0x2560 <strncpy+0x4>
    256e:	01 c0       	rjmp	.+2      	; 0x2572 <strncpy+0x16>
    2570:	1d 92       	st	X+, r1
    2572:	41 50       	subi	r20, 0x01	; 1
    2574:	50 40       	sbci	r21, 0x00	; 0
    2576:	e0 f7       	brcc	.-8      	; 0x2570 <strncpy+0x14>
    2578:	08 95       	ret

0000257a <vsnprintf>:
    257a:	ae e0       	ldi	r26, 0x0E	; 14
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e3 ec       	ldi	r30, 0xC3	; 195
    2580:	f2 e1       	ldi	r31, 0x12	; 18
    2582:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__prologue_saves__+0x1c>
    2586:	8c 01       	movw	r16, r24
    2588:	fa 01       	movw	r30, r20
    258a:	86 e0       	ldi	r24, 0x06	; 6
    258c:	8c 83       	std	Y+4, r24	; 0x04
    258e:	09 83       	std	Y+1, r16	; 0x01
    2590:	1a 83       	std	Y+2, r17	; 0x02
    2592:	77 ff       	sbrs	r23, 7
    2594:	02 c0       	rjmp	.+4      	; 0x259a <vsnprintf+0x20>
    2596:	60 e0       	ldi	r22, 0x00	; 0
    2598:	70 e8       	ldi	r23, 0x80	; 128
    259a:	cb 01       	movw	r24, r22
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	8d 83       	std	Y+5, r24	; 0x05
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	a9 01       	movw	r20, r18
    25a4:	bf 01       	movw	r22, r30
    25a6:	ce 01       	movw	r24, r28
    25a8:	01 96       	adiw	r24, 0x01	; 1
    25aa:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <vfprintf>
    25ae:	4d 81       	ldd	r20, Y+5	; 0x05
    25b0:	5e 81       	ldd	r21, Y+6	; 0x06
    25b2:	57 fd       	sbrc	r21, 7
    25b4:	0a c0       	rjmp	.+20     	; 0x25ca <vsnprintf+0x50>
    25b6:	2f 81       	ldd	r18, Y+7	; 0x07
    25b8:	38 85       	ldd	r19, Y+8	; 0x08
    25ba:	42 17       	cp	r20, r18
    25bc:	53 07       	cpc	r21, r19
    25be:	0c f4       	brge	.+2      	; 0x25c2 <vsnprintf+0x48>
    25c0:	9a 01       	movw	r18, r20
    25c2:	f8 01       	movw	r30, r16
    25c4:	e2 0f       	add	r30, r18
    25c6:	f3 1f       	adc	r31, r19
    25c8:	10 82       	st	Z, r1
    25ca:	2e 96       	adiw	r28, 0x0e	; 14
    25cc:	e4 e0       	ldi	r30, 0x04	; 4
    25ce:	0c 94 c5 15 	jmp	0x2b8a	; 0x2b8a <__epilogue_restores__+0x1c>

000025d2 <vfprintf>:
    25d2:	ab e0       	ldi	r26, 0x0B	; 11
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	ef ee       	ldi	r30, 0xEF	; 239
    25d8:	f2 e1       	ldi	r31, 0x12	; 18
    25da:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__prologue_saves__>
    25de:	6c 01       	movw	r12, r24
    25e0:	7b 01       	movw	r14, r22
    25e2:	8a 01       	movw	r16, r20
    25e4:	fc 01       	movw	r30, r24
    25e6:	16 82       	std	Z+6, r1	; 0x06
    25e8:	17 82       	std	Z+7, r1	; 0x07
    25ea:	83 81       	ldd	r24, Z+3	; 0x03
    25ec:	81 ff       	sbrs	r24, 1
    25ee:	cc c1       	rjmp	.+920    	; 0x2988 <vfprintf+0x3b6>
    25f0:	ce 01       	movw	r24, r28
    25f2:	01 96       	adiw	r24, 0x01	; 1
    25f4:	3c 01       	movw	r6, r24
    25f6:	f6 01       	movw	r30, r12
    25f8:	93 81       	ldd	r25, Z+3	; 0x03
    25fa:	f7 01       	movw	r30, r14
    25fc:	93 fd       	sbrc	r25, 3
    25fe:	85 91       	lpm	r24, Z+
    2600:	93 ff       	sbrs	r25, 3
    2602:	81 91       	ld	r24, Z+
    2604:	7f 01       	movw	r14, r30
    2606:	88 23       	and	r24, r24
    2608:	09 f4       	brne	.+2      	; 0x260c <vfprintf+0x3a>
    260a:	ba c1       	rjmp	.+884    	; 0x2980 <vfprintf+0x3ae>
    260c:	85 32       	cpi	r24, 0x25	; 37
    260e:	39 f4       	brne	.+14     	; 0x261e <vfprintf+0x4c>
    2610:	93 fd       	sbrc	r25, 3
    2612:	85 91       	lpm	r24, Z+
    2614:	93 ff       	sbrs	r25, 3
    2616:	81 91       	ld	r24, Z+
    2618:	7f 01       	movw	r14, r30
    261a:	85 32       	cpi	r24, 0x25	; 37
    261c:	29 f4       	brne	.+10     	; 0x2628 <vfprintf+0x56>
    261e:	b6 01       	movw	r22, r12
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
    2626:	e7 cf       	rjmp	.-50     	; 0x25f6 <vfprintf+0x24>
    2628:	91 2c       	mov	r9, r1
    262a:	21 2c       	mov	r2, r1
    262c:	31 2c       	mov	r3, r1
    262e:	ff e1       	ldi	r31, 0x1F	; 31
    2630:	f3 15       	cp	r31, r3
    2632:	d8 f0       	brcs	.+54     	; 0x266a <vfprintf+0x98>
    2634:	8b 32       	cpi	r24, 0x2B	; 43
    2636:	79 f0       	breq	.+30     	; 0x2656 <vfprintf+0x84>
    2638:	38 f4       	brcc	.+14     	; 0x2648 <vfprintf+0x76>
    263a:	80 32       	cpi	r24, 0x20	; 32
    263c:	79 f0       	breq	.+30     	; 0x265c <vfprintf+0x8a>
    263e:	83 32       	cpi	r24, 0x23	; 35
    2640:	a1 f4       	brne	.+40     	; 0x266a <vfprintf+0x98>
    2642:	23 2d       	mov	r18, r3
    2644:	20 61       	ori	r18, 0x10	; 16
    2646:	1d c0       	rjmp	.+58     	; 0x2682 <vfprintf+0xb0>
    2648:	8d 32       	cpi	r24, 0x2D	; 45
    264a:	61 f0       	breq	.+24     	; 0x2664 <vfprintf+0x92>
    264c:	80 33       	cpi	r24, 0x30	; 48
    264e:	69 f4       	brne	.+26     	; 0x266a <vfprintf+0x98>
    2650:	23 2d       	mov	r18, r3
    2652:	21 60       	ori	r18, 0x01	; 1
    2654:	16 c0       	rjmp	.+44     	; 0x2682 <vfprintf+0xb0>
    2656:	83 2d       	mov	r24, r3
    2658:	82 60       	ori	r24, 0x02	; 2
    265a:	38 2e       	mov	r3, r24
    265c:	e3 2d       	mov	r30, r3
    265e:	e4 60       	ori	r30, 0x04	; 4
    2660:	3e 2e       	mov	r3, r30
    2662:	2a c0       	rjmp	.+84     	; 0x26b8 <vfprintf+0xe6>
    2664:	f3 2d       	mov	r31, r3
    2666:	f8 60       	ori	r31, 0x08	; 8
    2668:	1d c0       	rjmp	.+58     	; 0x26a4 <vfprintf+0xd2>
    266a:	37 fc       	sbrc	r3, 7
    266c:	2d c0       	rjmp	.+90     	; 0x26c8 <vfprintf+0xf6>
    266e:	20 ed       	ldi	r18, 0xD0	; 208
    2670:	28 0f       	add	r18, r24
    2672:	2a 30       	cpi	r18, 0x0A	; 10
    2674:	40 f0       	brcs	.+16     	; 0x2686 <vfprintf+0xb4>
    2676:	8e 32       	cpi	r24, 0x2E	; 46
    2678:	b9 f4       	brne	.+46     	; 0x26a8 <vfprintf+0xd6>
    267a:	36 fc       	sbrc	r3, 6
    267c:	81 c1       	rjmp	.+770    	; 0x2980 <vfprintf+0x3ae>
    267e:	23 2d       	mov	r18, r3
    2680:	20 64       	ori	r18, 0x40	; 64
    2682:	32 2e       	mov	r3, r18
    2684:	19 c0       	rjmp	.+50     	; 0x26b8 <vfprintf+0xe6>
    2686:	36 fe       	sbrs	r3, 6
    2688:	06 c0       	rjmp	.+12     	; 0x2696 <vfprintf+0xc4>
    268a:	8a e0       	ldi	r24, 0x0A	; 10
    268c:	98 9e       	mul	r9, r24
    268e:	20 0d       	add	r18, r0
    2690:	11 24       	eor	r1, r1
    2692:	92 2e       	mov	r9, r18
    2694:	11 c0       	rjmp	.+34     	; 0x26b8 <vfprintf+0xe6>
    2696:	ea e0       	ldi	r30, 0x0A	; 10
    2698:	2e 9e       	mul	r2, r30
    269a:	20 0d       	add	r18, r0
    269c:	11 24       	eor	r1, r1
    269e:	22 2e       	mov	r2, r18
    26a0:	f3 2d       	mov	r31, r3
    26a2:	f0 62       	ori	r31, 0x20	; 32
    26a4:	3f 2e       	mov	r3, r31
    26a6:	08 c0       	rjmp	.+16     	; 0x26b8 <vfprintf+0xe6>
    26a8:	8c 36       	cpi	r24, 0x6C	; 108
    26aa:	21 f4       	brne	.+8      	; 0x26b4 <vfprintf+0xe2>
    26ac:	83 2d       	mov	r24, r3
    26ae:	80 68       	ori	r24, 0x80	; 128
    26b0:	38 2e       	mov	r3, r24
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <vfprintf+0xe6>
    26b4:	88 36       	cpi	r24, 0x68	; 104
    26b6:	41 f4       	brne	.+16     	; 0x26c8 <vfprintf+0xf6>
    26b8:	f7 01       	movw	r30, r14
    26ba:	93 fd       	sbrc	r25, 3
    26bc:	85 91       	lpm	r24, Z+
    26be:	93 ff       	sbrs	r25, 3
    26c0:	81 91       	ld	r24, Z+
    26c2:	7f 01       	movw	r14, r30
    26c4:	81 11       	cpse	r24, r1
    26c6:	b3 cf       	rjmp	.-154    	; 0x262e <vfprintf+0x5c>
    26c8:	98 2f       	mov	r25, r24
    26ca:	9f 7d       	andi	r25, 0xDF	; 223
    26cc:	95 54       	subi	r25, 0x45	; 69
    26ce:	93 30       	cpi	r25, 0x03	; 3
    26d0:	28 f4       	brcc	.+10     	; 0x26dc <vfprintf+0x10a>
    26d2:	0c 5f       	subi	r16, 0xFC	; 252
    26d4:	1f 4f       	sbci	r17, 0xFF	; 255
    26d6:	9f e3       	ldi	r25, 0x3F	; 63
    26d8:	99 83       	std	Y+1, r25	; 0x01
    26da:	0d c0       	rjmp	.+26     	; 0x26f6 <vfprintf+0x124>
    26dc:	83 36       	cpi	r24, 0x63	; 99
    26de:	31 f0       	breq	.+12     	; 0x26ec <vfprintf+0x11a>
    26e0:	83 37       	cpi	r24, 0x73	; 115
    26e2:	71 f0       	breq	.+28     	; 0x2700 <vfprintf+0x12e>
    26e4:	83 35       	cpi	r24, 0x53	; 83
    26e6:	09 f0       	breq	.+2      	; 0x26ea <vfprintf+0x118>
    26e8:	59 c0       	rjmp	.+178    	; 0x279c <vfprintf+0x1ca>
    26ea:	21 c0       	rjmp	.+66     	; 0x272e <vfprintf+0x15c>
    26ec:	f8 01       	movw	r30, r16
    26ee:	80 81       	ld	r24, Z
    26f0:	89 83       	std	Y+1, r24	; 0x01
    26f2:	0e 5f       	subi	r16, 0xFE	; 254
    26f4:	1f 4f       	sbci	r17, 0xFF	; 255
    26f6:	88 24       	eor	r8, r8
    26f8:	83 94       	inc	r8
    26fa:	91 2c       	mov	r9, r1
    26fc:	53 01       	movw	r10, r6
    26fe:	13 c0       	rjmp	.+38     	; 0x2726 <vfprintf+0x154>
    2700:	28 01       	movw	r4, r16
    2702:	f2 e0       	ldi	r31, 0x02	; 2
    2704:	4f 0e       	add	r4, r31
    2706:	51 1c       	adc	r5, r1
    2708:	f8 01       	movw	r30, r16
    270a:	a0 80       	ld	r10, Z
    270c:	b1 80       	ldd	r11, Z+1	; 0x01
    270e:	36 fe       	sbrs	r3, 6
    2710:	03 c0       	rjmp	.+6      	; 0x2718 <vfprintf+0x146>
    2712:	69 2d       	mov	r22, r9
    2714:	70 e0       	ldi	r23, 0x00	; 0
    2716:	02 c0       	rjmp	.+4      	; 0x271c <vfprintf+0x14a>
    2718:	6f ef       	ldi	r22, 0xFF	; 255
    271a:	7f ef       	ldi	r23, 0xFF	; 255
    271c:	c5 01       	movw	r24, r10
    271e:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <strnlen>
    2722:	4c 01       	movw	r8, r24
    2724:	82 01       	movw	r16, r4
    2726:	f3 2d       	mov	r31, r3
    2728:	ff 77       	andi	r31, 0x7F	; 127
    272a:	3f 2e       	mov	r3, r31
    272c:	16 c0       	rjmp	.+44     	; 0x275a <vfprintf+0x188>
    272e:	28 01       	movw	r4, r16
    2730:	22 e0       	ldi	r18, 0x02	; 2
    2732:	42 0e       	add	r4, r18
    2734:	51 1c       	adc	r5, r1
    2736:	f8 01       	movw	r30, r16
    2738:	a0 80       	ld	r10, Z
    273a:	b1 80       	ldd	r11, Z+1	; 0x01
    273c:	36 fe       	sbrs	r3, 6
    273e:	03 c0       	rjmp	.+6      	; 0x2746 <vfprintf+0x174>
    2740:	69 2d       	mov	r22, r9
    2742:	70 e0       	ldi	r23, 0x00	; 0
    2744:	02 c0       	rjmp	.+4      	; 0x274a <vfprintf+0x178>
    2746:	6f ef       	ldi	r22, 0xFF	; 255
    2748:	7f ef       	ldi	r23, 0xFF	; 255
    274a:	c5 01       	movw	r24, r10
    274c:	0e 94 cd 14 	call	0x299a	; 0x299a <strnlen_P>
    2750:	4c 01       	movw	r8, r24
    2752:	f3 2d       	mov	r31, r3
    2754:	f0 68       	ori	r31, 0x80	; 128
    2756:	3f 2e       	mov	r3, r31
    2758:	82 01       	movw	r16, r4
    275a:	33 fc       	sbrc	r3, 3
    275c:	1b c0       	rjmp	.+54     	; 0x2794 <vfprintf+0x1c2>
    275e:	82 2d       	mov	r24, r2
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	88 16       	cp	r8, r24
    2764:	99 06       	cpc	r9, r25
    2766:	b0 f4       	brcc	.+44     	; 0x2794 <vfprintf+0x1c2>
    2768:	b6 01       	movw	r22, r12
    276a:	80 e2       	ldi	r24, 0x20	; 32
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
    2772:	2a 94       	dec	r2
    2774:	f4 cf       	rjmp	.-24     	; 0x275e <vfprintf+0x18c>
    2776:	f5 01       	movw	r30, r10
    2778:	37 fc       	sbrc	r3, 7
    277a:	85 91       	lpm	r24, Z+
    277c:	37 fe       	sbrs	r3, 7
    277e:	81 91       	ld	r24, Z+
    2780:	5f 01       	movw	r10, r30
    2782:	b6 01       	movw	r22, r12
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
    278a:	21 10       	cpse	r2, r1
    278c:	2a 94       	dec	r2
    278e:	21 e0       	ldi	r18, 0x01	; 1
    2790:	82 1a       	sub	r8, r18
    2792:	91 08       	sbc	r9, r1
    2794:	81 14       	cp	r8, r1
    2796:	91 04       	cpc	r9, r1
    2798:	71 f7       	brne	.-36     	; 0x2776 <vfprintf+0x1a4>
    279a:	e8 c0       	rjmp	.+464    	; 0x296c <vfprintf+0x39a>
    279c:	84 36       	cpi	r24, 0x64	; 100
    279e:	11 f0       	breq	.+4      	; 0x27a4 <vfprintf+0x1d2>
    27a0:	89 36       	cpi	r24, 0x69	; 105
    27a2:	41 f5       	brne	.+80     	; 0x27f4 <vfprintf+0x222>
    27a4:	f8 01       	movw	r30, r16
    27a6:	37 fe       	sbrs	r3, 7
    27a8:	07 c0       	rjmp	.+14     	; 0x27b8 <vfprintf+0x1e6>
    27aa:	60 81       	ld	r22, Z
    27ac:	71 81       	ldd	r23, Z+1	; 0x01
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	0c 5f       	subi	r16, 0xFC	; 252
    27b4:	1f 4f       	sbci	r17, 0xFF	; 255
    27b6:	08 c0       	rjmp	.+16     	; 0x27c8 <vfprintf+0x1f6>
    27b8:	60 81       	ld	r22, Z
    27ba:	71 81       	ldd	r23, Z+1	; 0x01
    27bc:	07 2e       	mov	r0, r23
    27be:	00 0c       	add	r0, r0
    27c0:	88 0b       	sbc	r24, r24
    27c2:	99 0b       	sbc	r25, r25
    27c4:	0e 5f       	subi	r16, 0xFE	; 254
    27c6:	1f 4f       	sbci	r17, 0xFF	; 255
    27c8:	f3 2d       	mov	r31, r3
    27ca:	ff 76       	andi	r31, 0x6F	; 111
    27cc:	3f 2e       	mov	r3, r31
    27ce:	97 ff       	sbrs	r25, 7
    27d0:	09 c0       	rjmp	.+18     	; 0x27e4 <vfprintf+0x212>
    27d2:	90 95       	com	r25
    27d4:	80 95       	com	r24
    27d6:	70 95       	com	r23
    27d8:	61 95       	neg	r22
    27da:	7f 4f       	sbci	r23, 0xFF	; 255
    27dc:	8f 4f       	sbci	r24, 0xFF	; 255
    27de:	9f 4f       	sbci	r25, 0xFF	; 255
    27e0:	f0 68       	ori	r31, 0x80	; 128
    27e2:	3f 2e       	mov	r3, r31
    27e4:	2a e0       	ldi	r18, 0x0A	; 10
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	a3 01       	movw	r20, r6
    27ea:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__ultoa_invert>
    27ee:	88 2e       	mov	r8, r24
    27f0:	86 18       	sub	r8, r6
    27f2:	45 c0       	rjmp	.+138    	; 0x287e <vfprintf+0x2ac>
    27f4:	85 37       	cpi	r24, 0x75	; 117
    27f6:	31 f4       	brne	.+12     	; 0x2804 <vfprintf+0x232>
    27f8:	23 2d       	mov	r18, r3
    27fa:	2f 7e       	andi	r18, 0xEF	; 239
    27fc:	b2 2e       	mov	r11, r18
    27fe:	2a e0       	ldi	r18, 0x0A	; 10
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	25 c0       	rjmp	.+74     	; 0x284e <vfprintf+0x27c>
    2804:	93 2d       	mov	r25, r3
    2806:	99 7f       	andi	r25, 0xF9	; 249
    2808:	b9 2e       	mov	r11, r25
    280a:	8f 36       	cpi	r24, 0x6F	; 111
    280c:	c1 f0       	breq	.+48     	; 0x283e <vfprintf+0x26c>
    280e:	18 f4       	brcc	.+6      	; 0x2816 <vfprintf+0x244>
    2810:	88 35       	cpi	r24, 0x58	; 88
    2812:	79 f0       	breq	.+30     	; 0x2832 <vfprintf+0x260>
    2814:	b5 c0       	rjmp	.+362    	; 0x2980 <vfprintf+0x3ae>
    2816:	80 37       	cpi	r24, 0x70	; 112
    2818:	19 f0       	breq	.+6      	; 0x2820 <vfprintf+0x24e>
    281a:	88 37       	cpi	r24, 0x78	; 120
    281c:	21 f0       	breq	.+8      	; 0x2826 <vfprintf+0x254>
    281e:	b0 c0       	rjmp	.+352    	; 0x2980 <vfprintf+0x3ae>
    2820:	e9 2f       	mov	r30, r25
    2822:	e0 61       	ori	r30, 0x10	; 16
    2824:	be 2e       	mov	r11, r30
    2826:	b4 fe       	sbrs	r11, 4
    2828:	0d c0       	rjmp	.+26     	; 0x2844 <vfprintf+0x272>
    282a:	fb 2d       	mov	r31, r11
    282c:	f4 60       	ori	r31, 0x04	; 4
    282e:	bf 2e       	mov	r11, r31
    2830:	09 c0       	rjmp	.+18     	; 0x2844 <vfprintf+0x272>
    2832:	34 fe       	sbrs	r3, 4
    2834:	0a c0       	rjmp	.+20     	; 0x284a <vfprintf+0x278>
    2836:	29 2f       	mov	r18, r25
    2838:	26 60       	ori	r18, 0x06	; 6
    283a:	b2 2e       	mov	r11, r18
    283c:	06 c0       	rjmp	.+12     	; 0x284a <vfprintf+0x278>
    283e:	28 e0       	ldi	r18, 0x08	; 8
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	05 c0       	rjmp	.+10     	; 0x284e <vfprintf+0x27c>
    2844:	20 e1       	ldi	r18, 0x10	; 16
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	02 c0       	rjmp	.+4      	; 0x284e <vfprintf+0x27c>
    284a:	20 e1       	ldi	r18, 0x10	; 16
    284c:	32 e0       	ldi	r19, 0x02	; 2
    284e:	f8 01       	movw	r30, r16
    2850:	b7 fe       	sbrs	r11, 7
    2852:	07 c0       	rjmp	.+14     	; 0x2862 <vfprintf+0x290>
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	0c 5f       	subi	r16, 0xFC	; 252
    285e:	1f 4f       	sbci	r17, 0xFF	; 255
    2860:	06 c0       	rjmp	.+12     	; 0x286e <vfprintf+0x29c>
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	0e 5f       	subi	r16, 0xFE	; 254
    286c:	1f 4f       	sbci	r17, 0xFF	; 255
    286e:	a3 01       	movw	r20, r6
    2870:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__ultoa_invert>
    2874:	88 2e       	mov	r8, r24
    2876:	86 18       	sub	r8, r6
    2878:	fb 2d       	mov	r31, r11
    287a:	ff 77       	andi	r31, 0x7F	; 127
    287c:	3f 2e       	mov	r3, r31
    287e:	36 fe       	sbrs	r3, 6
    2880:	0d c0       	rjmp	.+26     	; 0x289c <vfprintf+0x2ca>
    2882:	23 2d       	mov	r18, r3
    2884:	2e 7f       	andi	r18, 0xFE	; 254
    2886:	a2 2e       	mov	r10, r18
    2888:	89 14       	cp	r8, r9
    288a:	58 f4       	brcc	.+22     	; 0x28a2 <vfprintf+0x2d0>
    288c:	34 fe       	sbrs	r3, 4
    288e:	0b c0       	rjmp	.+22     	; 0x28a6 <vfprintf+0x2d4>
    2890:	32 fc       	sbrc	r3, 2
    2892:	09 c0       	rjmp	.+18     	; 0x28a6 <vfprintf+0x2d4>
    2894:	83 2d       	mov	r24, r3
    2896:	8e 7e       	andi	r24, 0xEE	; 238
    2898:	a8 2e       	mov	r10, r24
    289a:	05 c0       	rjmp	.+10     	; 0x28a6 <vfprintf+0x2d4>
    289c:	b8 2c       	mov	r11, r8
    289e:	a3 2c       	mov	r10, r3
    28a0:	03 c0       	rjmp	.+6      	; 0x28a8 <vfprintf+0x2d6>
    28a2:	b8 2c       	mov	r11, r8
    28a4:	01 c0       	rjmp	.+2      	; 0x28a8 <vfprintf+0x2d6>
    28a6:	b9 2c       	mov	r11, r9
    28a8:	a4 fe       	sbrs	r10, 4
    28aa:	0f c0       	rjmp	.+30     	; 0x28ca <vfprintf+0x2f8>
    28ac:	fe 01       	movw	r30, r28
    28ae:	e8 0d       	add	r30, r8
    28b0:	f1 1d       	adc	r31, r1
    28b2:	80 81       	ld	r24, Z
    28b4:	80 33       	cpi	r24, 0x30	; 48
    28b6:	21 f4       	brne	.+8      	; 0x28c0 <vfprintf+0x2ee>
    28b8:	9a 2d       	mov	r25, r10
    28ba:	99 7e       	andi	r25, 0xE9	; 233
    28bc:	a9 2e       	mov	r10, r25
    28be:	09 c0       	rjmp	.+18     	; 0x28d2 <vfprintf+0x300>
    28c0:	a2 fe       	sbrs	r10, 2
    28c2:	06 c0       	rjmp	.+12     	; 0x28d0 <vfprintf+0x2fe>
    28c4:	b3 94       	inc	r11
    28c6:	b3 94       	inc	r11
    28c8:	04 c0       	rjmp	.+8      	; 0x28d2 <vfprintf+0x300>
    28ca:	8a 2d       	mov	r24, r10
    28cc:	86 78       	andi	r24, 0x86	; 134
    28ce:	09 f0       	breq	.+2      	; 0x28d2 <vfprintf+0x300>
    28d0:	b3 94       	inc	r11
    28d2:	a3 fc       	sbrc	r10, 3
    28d4:	11 c0       	rjmp	.+34     	; 0x28f8 <vfprintf+0x326>
    28d6:	a0 fe       	sbrs	r10, 0
    28d8:	06 c0       	rjmp	.+12     	; 0x28e6 <vfprintf+0x314>
    28da:	b2 14       	cp	r11, r2
    28dc:	88 f4       	brcc	.+34     	; 0x2900 <vfprintf+0x32e>
    28de:	28 0c       	add	r2, r8
    28e0:	92 2c       	mov	r9, r2
    28e2:	9b 18       	sub	r9, r11
    28e4:	0e c0       	rjmp	.+28     	; 0x2902 <vfprintf+0x330>
    28e6:	b2 14       	cp	r11, r2
    28e8:	60 f4       	brcc	.+24     	; 0x2902 <vfprintf+0x330>
    28ea:	b6 01       	movw	r22, r12
    28ec:	80 e2       	ldi	r24, 0x20	; 32
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
    28f4:	b3 94       	inc	r11
    28f6:	f7 cf       	rjmp	.-18     	; 0x28e6 <vfprintf+0x314>
    28f8:	b2 14       	cp	r11, r2
    28fa:	18 f4       	brcc	.+6      	; 0x2902 <vfprintf+0x330>
    28fc:	2b 18       	sub	r2, r11
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <vfprintf+0x332>
    2900:	98 2c       	mov	r9, r8
    2902:	21 2c       	mov	r2, r1
    2904:	a4 fe       	sbrs	r10, 4
    2906:	10 c0       	rjmp	.+32     	; 0x2928 <vfprintf+0x356>
    2908:	b6 01       	movw	r22, r12
    290a:	80 e3       	ldi	r24, 0x30	; 48
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
    2912:	a2 fe       	sbrs	r10, 2
    2914:	17 c0       	rjmp	.+46     	; 0x2944 <vfprintf+0x372>
    2916:	a1 fc       	sbrc	r10, 1
    2918:	03 c0       	rjmp	.+6      	; 0x2920 <vfprintf+0x34e>
    291a:	88 e7       	ldi	r24, 0x78	; 120
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <vfprintf+0x352>
    2920:	88 e5       	ldi	r24, 0x58	; 88
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	b6 01       	movw	r22, r12
    2926:	0c c0       	rjmp	.+24     	; 0x2940 <vfprintf+0x36e>
    2928:	8a 2d       	mov	r24, r10
    292a:	86 78       	andi	r24, 0x86	; 134
    292c:	59 f0       	breq	.+22     	; 0x2944 <vfprintf+0x372>
    292e:	a1 fe       	sbrs	r10, 1
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <vfprintf+0x364>
    2932:	8b e2       	ldi	r24, 0x2B	; 43
    2934:	01 c0       	rjmp	.+2      	; 0x2938 <vfprintf+0x366>
    2936:	80 e2       	ldi	r24, 0x20	; 32
    2938:	a7 fc       	sbrc	r10, 7
    293a:	8d e2       	ldi	r24, 0x2D	; 45
    293c:	b6 01       	movw	r22, r12
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
    2944:	89 14       	cp	r8, r9
    2946:	38 f4       	brcc	.+14     	; 0x2956 <vfprintf+0x384>
    2948:	b6 01       	movw	r22, r12
    294a:	80 e3       	ldi	r24, 0x30	; 48
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
    2952:	9a 94       	dec	r9
    2954:	f7 cf       	rjmp	.-18     	; 0x2944 <vfprintf+0x372>
    2956:	8a 94       	dec	r8
    2958:	f3 01       	movw	r30, r6
    295a:	e8 0d       	add	r30, r8
    295c:	f1 1d       	adc	r31, r1
    295e:	80 81       	ld	r24, Z
    2960:	b6 01       	movw	r22, r12
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
    2968:	81 10       	cpse	r8, r1
    296a:	f5 cf       	rjmp	.-22     	; 0x2956 <vfprintf+0x384>
    296c:	22 20       	and	r2, r2
    296e:	09 f4       	brne	.+2      	; 0x2972 <vfprintf+0x3a0>
    2970:	42 ce       	rjmp	.-892    	; 0x25f6 <vfprintf+0x24>
    2972:	b6 01       	movw	r22, r12
    2974:	80 e2       	ldi	r24, 0x20	; 32
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <fputc>
    297c:	2a 94       	dec	r2
    297e:	f6 cf       	rjmp	.-20     	; 0x296c <vfprintf+0x39a>
    2980:	f6 01       	movw	r30, r12
    2982:	86 81       	ldd	r24, Z+6	; 0x06
    2984:	97 81       	ldd	r25, Z+7	; 0x07
    2986:	02 c0       	rjmp	.+4      	; 0x298c <vfprintf+0x3ba>
    2988:	8f ef       	ldi	r24, 0xFF	; 255
    298a:	9f ef       	ldi	r25, 0xFF	; 255
    298c:	2b 96       	adiw	r28, 0x0b	; 11
    298e:	e2 e1       	ldi	r30, 0x12	; 18
    2990:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__epilogue_restores__>

00002994 <__ctype_isfalse>:
    2994:	99 27       	eor	r25, r25
    2996:	88 27       	eor	r24, r24

00002998 <__ctype_istrue>:
    2998:	08 95       	ret

0000299a <strnlen_P>:
    299a:	fc 01       	movw	r30, r24
    299c:	05 90       	lpm	r0, Z+
    299e:	61 50       	subi	r22, 0x01	; 1
    29a0:	70 40       	sbci	r23, 0x00	; 0
    29a2:	01 10       	cpse	r0, r1
    29a4:	d8 f7       	brcc	.-10     	; 0x299c <strnlen_P+0x2>
    29a6:	80 95       	com	r24
    29a8:	90 95       	com	r25
    29aa:	8e 0f       	add	r24, r30
    29ac:	9f 1f       	adc	r25, r31
    29ae:	08 95       	ret

000029b0 <strnlen>:
    29b0:	fc 01       	movw	r30, r24
    29b2:	61 50       	subi	r22, 0x01	; 1
    29b4:	70 40       	sbci	r23, 0x00	; 0
    29b6:	01 90       	ld	r0, Z+
    29b8:	01 10       	cpse	r0, r1
    29ba:	d8 f7       	brcc	.-10     	; 0x29b2 <strnlen+0x2>
    29bc:	80 95       	com	r24
    29be:	90 95       	com	r25
    29c0:	8e 0f       	add	r24, r30
    29c2:	9f 1f       	adc	r25, r31
    29c4:	08 95       	ret

000029c6 <fputc>:
    29c6:	0f 93       	push	r16
    29c8:	1f 93       	push	r17
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
    29ce:	fb 01       	movw	r30, r22
    29d0:	23 81       	ldd	r18, Z+3	; 0x03
    29d2:	21 fd       	sbrc	r18, 1
    29d4:	03 c0       	rjmp	.+6      	; 0x29dc <fputc+0x16>
    29d6:	8f ef       	ldi	r24, 0xFF	; 255
    29d8:	9f ef       	ldi	r25, 0xFF	; 255
    29da:	2c c0       	rjmp	.+88     	; 0x2a34 <fputc+0x6e>
    29dc:	22 ff       	sbrs	r18, 2
    29de:	16 c0       	rjmp	.+44     	; 0x2a0c <fputc+0x46>
    29e0:	46 81       	ldd	r20, Z+6	; 0x06
    29e2:	57 81       	ldd	r21, Z+7	; 0x07
    29e4:	24 81       	ldd	r18, Z+4	; 0x04
    29e6:	35 81       	ldd	r19, Z+5	; 0x05
    29e8:	42 17       	cp	r20, r18
    29ea:	53 07       	cpc	r21, r19
    29ec:	44 f4       	brge	.+16     	; 0x29fe <fputc+0x38>
    29ee:	a0 81       	ld	r26, Z
    29f0:	b1 81       	ldd	r27, Z+1	; 0x01
    29f2:	9d 01       	movw	r18, r26
    29f4:	2f 5f       	subi	r18, 0xFF	; 255
    29f6:	3f 4f       	sbci	r19, 0xFF	; 255
    29f8:	20 83       	st	Z, r18
    29fa:	31 83       	std	Z+1, r19	; 0x01
    29fc:	8c 93       	st	X, r24
    29fe:	26 81       	ldd	r18, Z+6	; 0x06
    2a00:	37 81       	ldd	r19, Z+7	; 0x07
    2a02:	2f 5f       	subi	r18, 0xFF	; 255
    2a04:	3f 4f       	sbci	r19, 0xFF	; 255
    2a06:	26 83       	std	Z+6, r18	; 0x06
    2a08:	37 83       	std	Z+7, r19	; 0x07
    2a0a:	14 c0       	rjmp	.+40     	; 0x2a34 <fputc+0x6e>
    2a0c:	8b 01       	movw	r16, r22
    2a0e:	ec 01       	movw	r28, r24
    2a10:	fb 01       	movw	r30, r22
    2a12:	00 84       	ldd	r0, Z+8	; 0x08
    2a14:	f1 85       	ldd	r31, Z+9	; 0x09
    2a16:	e0 2d       	mov	r30, r0
    2a18:	09 95       	icall
    2a1a:	89 2b       	or	r24, r25
    2a1c:	e1 f6       	brne	.-72     	; 0x29d6 <fputc+0x10>
    2a1e:	d8 01       	movw	r26, r16
    2a20:	16 96       	adiw	r26, 0x06	; 6
    2a22:	8d 91       	ld	r24, X+
    2a24:	9c 91       	ld	r25, X
    2a26:	17 97       	sbiw	r26, 0x07	; 7
    2a28:	01 96       	adiw	r24, 0x01	; 1
    2a2a:	16 96       	adiw	r26, 0x06	; 6
    2a2c:	8d 93       	st	X+, r24
    2a2e:	9c 93       	st	X, r25
    2a30:	17 97       	sbiw	r26, 0x07	; 7
    2a32:	ce 01       	movw	r24, r28
    2a34:	df 91       	pop	r29
    2a36:	cf 91       	pop	r28
    2a38:	1f 91       	pop	r17
    2a3a:	0f 91       	pop	r16
    2a3c:	08 95       	ret

00002a3e <__ultoa_invert>:
    2a3e:	fa 01       	movw	r30, r20
    2a40:	aa 27       	eor	r26, r26
    2a42:	28 30       	cpi	r18, 0x08	; 8
    2a44:	51 f1       	breq	.+84     	; 0x2a9a <__ultoa_invert+0x5c>
    2a46:	20 31       	cpi	r18, 0x10	; 16
    2a48:	81 f1       	breq	.+96     	; 0x2aaa <__ultoa_invert+0x6c>
    2a4a:	e8 94       	clt
    2a4c:	6f 93       	push	r22
    2a4e:	6e 7f       	andi	r22, 0xFE	; 254
    2a50:	6e 5f       	subi	r22, 0xFE	; 254
    2a52:	7f 4f       	sbci	r23, 0xFF	; 255
    2a54:	8f 4f       	sbci	r24, 0xFF	; 255
    2a56:	9f 4f       	sbci	r25, 0xFF	; 255
    2a58:	af 4f       	sbci	r26, 0xFF	; 255
    2a5a:	b1 e0       	ldi	r27, 0x01	; 1
    2a5c:	3e d0       	rcall	.+124    	; 0x2ada <__ultoa_invert+0x9c>
    2a5e:	b4 e0       	ldi	r27, 0x04	; 4
    2a60:	3c d0       	rcall	.+120    	; 0x2ada <__ultoa_invert+0x9c>
    2a62:	67 0f       	add	r22, r23
    2a64:	78 1f       	adc	r23, r24
    2a66:	89 1f       	adc	r24, r25
    2a68:	9a 1f       	adc	r25, r26
    2a6a:	a1 1d       	adc	r26, r1
    2a6c:	68 0f       	add	r22, r24
    2a6e:	79 1f       	adc	r23, r25
    2a70:	8a 1f       	adc	r24, r26
    2a72:	91 1d       	adc	r25, r1
    2a74:	a1 1d       	adc	r26, r1
    2a76:	6a 0f       	add	r22, r26
    2a78:	71 1d       	adc	r23, r1
    2a7a:	81 1d       	adc	r24, r1
    2a7c:	91 1d       	adc	r25, r1
    2a7e:	a1 1d       	adc	r26, r1
    2a80:	20 d0       	rcall	.+64     	; 0x2ac2 <__ultoa_invert+0x84>
    2a82:	09 f4       	brne	.+2      	; 0x2a86 <__ultoa_invert+0x48>
    2a84:	68 94       	set
    2a86:	3f 91       	pop	r19
    2a88:	2a e0       	ldi	r18, 0x0A	; 10
    2a8a:	26 9f       	mul	r18, r22
    2a8c:	11 24       	eor	r1, r1
    2a8e:	30 19       	sub	r19, r0
    2a90:	30 5d       	subi	r19, 0xD0	; 208
    2a92:	31 93       	st	Z+, r19
    2a94:	de f6       	brtc	.-74     	; 0x2a4c <__ultoa_invert+0xe>
    2a96:	cf 01       	movw	r24, r30
    2a98:	08 95       	ret
    2a9a:	46 2f       	mov	r20, r22
    2a9c:	47 70       	andi	r20, 0x07	; 7
    2a9e:	40 5d       	subi	r20, 0xD0	; 208
    2aa0:	41 93       	st	Z+, r20
    2aa2:	b3 e0       	ldi	r27, 0x03	; 3
    2aa4:	0f d0       	rcall	.+30     	; 0x2ac4 <__ultoa_invert+0x86>
    2aa6:	c9 f7       	brne	.-14     	; 0x2a9a <__ultoa_invert+0x5c>
    2aa8:	f6 cf       	rjmp	.-20     	; 0x2a96 <__ultoa_invert+0x58>
    2aaa:	46 2f       	mov	r20, r22
    2aac:	4f 70       	andi	r20, 0x0F	; 15
    2aae:	40 5d       	subi	r20, 0xD0	; 208
    2ab0:	4a 33       	cpi	r20, 0x3A	; 58
    2ab2:	18 f0       	brcs	.+6      	; 0x2aba <__ultoa_invert+0x7c>
    2ab4:	49 5d       	subi	r20, 0xD9	; 217
    2ab6:	31 fd       	sbrc	r19, 1
    2ab8:	40 52       	subi	r20, 0x20	; 32
    2aba:	41 93       	st	Z+, r20
    2abc:	02 d0       	rcall	.+4      	; 0x2ac2 <__ultoa_invert+0x84>
    2abe:	a9 f7       	brne	.-22     	; 0x2aaa <__ultoa_invert+0x6c>
    2ac0:	ea cf       	rjmp	.-44     	; 0x2a96 <__ultoa_invert+0x58>
    2ac2:	b4 e0       	ldi	r27, 0x04	; 4
    2ac4:	a6 95       	lsr	r26
    2ac6:	97 95       	ror	r25
    2ac8:	87 95       	ror	r24
    2aca:	77 95       	ror	r23
    2acc:	67 95       	ror	r22
    2ace:	ba 95       	dec	r27
    2ad0:	c9 f7       	brne	.-14     	; 0x2ac4 <__ultoa_invert+0x86>
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	61 05       	cpc	r22, r1
    2ad6:	71 05       	cpc	r23, r1
    2ad8:	08 95       	ret
    2ada:	9b 01       	movw	r18, r22
    2adc:	ac 01       	movw	r20, r24
    2ade:	0a 2e       	mov	r0, r26
    2ae0:	06 94       	lsr	r0
    2ae2:	57 95       	ror	r21
    2ae4:	47 95       	ror	r20
    2ae6:	37 95       	ror	r19
    2ae8:	27 95       	ror	r18
    2aea:	ba 95       	dec	r27
    2aec:	c9 f7       	brne	.-14     	; 0x2ae0 <__ultoa_invert+0xa2>
    2aee:	62 0f       	add	r22, r18
    2af0:	73 1f       	adc	r23, r19
    2af2:	84 1f       	adc	r24, r20
    2af4:	95 1f       	adc	r25, r21
    2af6:	a0 1d       	adc	r26, r0
    2af8:	08 95       	ret

00002afa <ccp_write_io>:
    2afa:	dc 01       	movw	r26, r24
    2afc:	28 ed       	ldi	r18, 0xD8	; 216
    2afe:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f0034>
    2b02:	6c 93       	st	X, r22
    2b04:	08 95       	ret

00002b06 <__mulsi3>:
    2b06:	db 01       	movw	r26, r22
    2b08:	8f 93       	push	r24
    2b0a:	9f 93       	push	r25
    2b0c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__muluhisi3>
    2b10:	bf 91       	pop	r27
    2b12:	af 91       	pop	r26
    2b14:	a2 9f       	mul	r26, r18
    2b16:	80 0d       	add	r24, r0
    2b18:	91 1d       	adc	r25, r1
    2b1a:	a3 9f       	mul	r26, r19
    2b1c:	90 0d       	add	r25, r0
    2b1e:	b2 9f       	mul	r27, r18
    2b20:	90 0d       	add	r25, r0
    2b22:	11 24       	eor	r1, r1
    2b24:	08 95       	ret

00002b26 <__muluhisi3>:
    2b26:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__umulhisi3>
    2b2a:	a5 9f       	mul	r26, r21
    2b2c:	90 0d       	add	r25, r0
    2b2e:	b4 9f       	mul	r27, r20
    2b30:	90 0d       	add	r25, r0
    2b32:	a4 9f       	mul	r26, r20
    2b34:	80 0d       	add	r24, r0
    2b36:	91 1d       	adc	r25, r1
    2b38:	11 24       	eor	r1, r1
    2b3a:	08 95       	ret

00002b3c <__prologue_saves__>:
    2b3c:	2f 92       	push	r2
    2b3e:	3f 92       	push	r3
    2b40:	4f 92       	push	r4
    2b42:	5f 92       	push	r5
    2b44:	6f 92       	push	r6
    2b46:	7f 92       	push	r7
    2b48:	8f 92       	push	r8
    2b4a:	9f 92       	push	r9
    2b4c:	af 92       	push	r10
    2b4e:	bf 92       	push	r11
    2b50:	cf 92       	push	r12
    2b52:	df 92       	push	r13
    2b54:	ef 92       	push	r14
    2b56:	ff 92       	push	r15
    2b58:	0f 93       	push	r16
    2b5a:	1f 93       	push	r17
    2b5c:	cf 93       	push	r28
    2b5e:	df 93       	push	r29
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	ca 1b       	sub	r28, r26
    2b66:	db 0b       	sbc	r29, r27
    2b68:	cd bf       	out	0x3d, r28	; 61
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	09 94       	ijmp

00002b6e <__epilogue_restores__>:
    2b6e:	2a 88       	ldd	r2, Y+18	; 0x12
    2b70:	39 88       	ldd	r3, Y+17	; 0x11
    2b72:	48 88       	ldd	r4, Y+16	; 0x10
    2b74:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b76:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b78:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b80:	b9 84       	ldd	r11, Y+9	; 0x09
    2b82:	c8 84       	ldd	r12, Y+8	; 0x08
    2b84:	df 80       	ldd	r13, Y+7	; 0x07
    2b86:	ee 80       	ldd	r14, Y+6	; 0x06
    2b88:	fd 80       	ldd	r15, Y+5	; 0x05
    2b8a:	0c 81       	ldd	r16, Y+4	; 0x04
    2b8c:	1b 81       	ldd	r17, Y+3	; 0x03
    2b8e:	aa 81       	ldd	r26, Y+2	; 0x02
    2b90:	b9 81       	ldd	r27, Y+1	; 0x01
    2b92:	ce 0f       	add	r28, r30
    2b94:	d1 1d       	adc	r29, r1
    2b96:	cd bf       	out	0x3d, r28	; 61
    2b98:	de bf       	out	0x3e, r29	; 62
    2b9a:	ed 01       	movw	r28, r26
    2b9c:	08 95       	ret

00002b9e <_exit>:
    2b9e:	f8 94       	cli

00002ba0 <__stop_program>:
    2ba0:	ff cf       	rjmp	.-2      	; 0x2ba0 <__stop_program>
