
AVR64DD32-MAIN-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004c2  00806000  0000200c  000020a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000200c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  008064c2  008064c2  00002562  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002562  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000025c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  00002600  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008122  00000000  00000000  00002a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039a3  00000000  00000000  0000ab42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028d0  00000000  00000000  0000e4e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a14  00000000  00000000  00010db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f95  00000000  00000000  000117cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000261e  00000000  00000000  00014761  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  00016d7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e7       	ldi	r29, 0x7F	; 127
      9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
      9c:	14 e6       	ldi	r17, 0x64	; 100
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b0 e6       	ldi	r27, 0x60	; 96
      a2:	ec e0       	ldi	r30, 0x0C	; 12
      a4:	f0 e2       	ldi	r31, 0x20	; 32
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 3c       	cpi	r26, 0xC2	; 194
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	24 e6       	ldi	r18, 0x64	; 100
      b4:	a2 ec       	ldi	r26, 0xC2	; 194
      b6:	b4 e6       	ldi	r27, 0x64	; 100
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 3f       	cpi	r26, 0xF4	; 244
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 3c 05 	call	0xa78	; 0xa78 <main>
      c6:	0c 94 04 10 	jmp	0x2008	; 0x2008 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <normalize>:
#include "Settings.h"
#include "ActionsVar.h"

// Pagalbinë funkcija: normalizuoja kampà á [0,360)
int16_t normalize(int16_t angle) {
	angle %= 360;
      ce:	68 e6       	ldi	r22, 0x68	; 104
      d0:	71 e0       	ldi	r23, 0x01	; 1
      d2:	0e 94 c6 0a 	call	0x158c	; 0x158c <__divmodhi4>
	if (angle < 0) angle += 360;
      d6:	99 23       	and	r25, r25
      d8:	14 f4       	brge	.+4      	; 0xde <normalize+0x10>
      da:	88 59       	subi	r24, 0x98	; 152
      dc:	9e 4f       	sbci	r25, 0xFE	; 254
	return angle;
}
      de:	08 95       	ret

000000e0 <angle_diff>:

// Pagalbinë: apskaièiuoja maþiausià kampiná atstumà
int16_t angle_diff(int16_t a, int16_t b) {
	int16_t d = abs(a - b) % 360;
      e0:	9c 01       	movw	r18, r24
      e2:	26 1b       	sub	r18, r22
      e4:	37 0b       	sbc	r19, r23
      e6:	c9 01       	movw	r24, r18
      e8:	99 23       	and	r25, r25
      ea:	24 f4       	brge	.+8      	; 0xf4 <angle_diff+0x14>
      ec:	88 27       	eor	r24, r24
      ee:	99 27       	eor	r25, r25
      f0:	82 1b       	sub	r24, r18
      f2:	93 0b       	sbc	r25, r19
      f4:	68 e6       	ldi	r22, 0x68	; 104
      f6:	71 e0       	ldi	r23, 0x01	; 1
      f8:	0e 94 c6 0a 	call	0x158c	; 0x158c <__divmodhi4>
	return (d > 180) ? 360 - d : d;
      fc:	85 3b       	cpi	r24, 0xB5	; 181
      fe:	91 05       	cpc	r25, r1
     100:	34 f0       	brlt	.+12     	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
     102:	28 e6       	ldi	r18, 0x68	; 104
     104:	31 e0       	ldi	r19, 0x01	; 1
     106:	a9 01       	movw	r20, r18
     108:	48 1b       	sub	r20, r24
     10a:	59 0b       	sbc	r21, r25
     10c:	ca 01       	movw	r24, r20
}
     10e:	08 95       	ret

00000110 <get_safe_azimuth>:

void get_safe_azimuth() {
     110:	cf 92       	push	r12
     112:	df 92       	push	r13
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
	// Galimos saugios kryptys
	int16_t safe1 = normalize((WSData.winddirection * 45) + 90);
     120:	c0 91 ea 64 	lds	r28, 0x64EA	; 0x8064ea <WSData+0x7>
     124:	2d e2       	ldi	r18, 0x2D	; 45
     126:	c2 9f       	mul	r28, r18
     128:	e0 01       	movw	r28, r0
     12a:	11 24       	eor	r1, r1
     12c:	ce 01       	movw	r24, r28
     12e:	86 5a       	subi	r24, 0xA6	; 166
     130:	9f 4f       	sbci	r25, 0xFF	; 255
     132:	0e 94 67 00 	call	0xce	; 0xce <normalize>
     136:	8c 01       	movw	r16, r24
	int16_t safe2 = normalize((WSData.winddirection * 45) - 90);
     138:	ce 01       	movw	r24, r28
     13a:	8a 55       	subi	r24, 0x5A	; 90
     13c:	91 09       	sbc	r25, r1
     13e:	0e 94 67 00 	call	0xce	; 0xce <normalize>
     142:	ec 01       	movw	r28, r24

	bool valid1 = (safe1 >= MIN_AZIMUTH && safe1 <= MAX_AZIMUTH);
     144:	c8 01       	movw	r24, r16
     146:	4e 97       	sbiw	r24, 0x1e	; 30
	bool valid2 = (safe2 >= MIN_AZIMUTH && safe2 <= MAX_AZIMUTH);
     148:	9e 01       	movw	r18, r28
     14a:	2e 51       	subi	r18, 0x1E	; 30
     14c:	31 09       	sbc	r19, r1

	if (valid1 && valid2) {
     14e:	8d 32       	cpi	r24, 0x2D	; 45
     150:	41 e0       	ldi	r20, 0x01	; 1
     152:	94 07       	cpc	r25, r20
     154:	e8 f4       	brcc	.+58     	; 0x190 <get_safe_azimuth+0x80>
     156:	2d 32       	cpi	r18, 0x2D	; 45
     158:	31 40       	sbci	r19, 0x01	; 1
     15a:	d0 f4       	brcc	.+52     	; 0x190 <get_safe_azimuth+0x80>
		int16_t d1 = angle_diff(SensorData.Azimuth, safe1);
     15c:	e0 90 c8 64 	lds	r14, 0x64C8	; 0x8064c8 <SensorData+0x4>
     160:	f0 90 c9 64 	lds	r15, 0x64C9	; 0x8064c9 <SensorData+0x5>
     164:	b8 01       	movw	r22, r16
     166:	c7 01       	movw	r24, r14
     168:	0e 94 70 00 	call	0xe0	; 0xe0 <angle_diff>
     16c:	6c 01       	movw	r12, r24
		int16_t d2 = angle_diff(SensorData.Azimuth, safe2);
     16e:	be 01       	movw	r22, r28
     170:	c7 01       	movw	r24, r14
     172:	0e 94 70 00 	call	0xe0	; 0xe0 <angle_diff>
		Target.azimuth = (d1 <= d2) ? safe1 : safe2;
     176:	8c 15       	cp	r24, r12
     178:	9d 05       	cpc	r25, r13
     17a:	1c f0       	brlt	.+6      	; 0x182 <get_safe_azimuth+0x72>
     17c:	90 2f       	mov	r25, r16
     17e:	81 2f       	mov	r24, r17
     180:	02 c0       	rjmp	.+4      	; 0x186 <get_safe_azimuth+0x76>
     182:	9c 2f       	mov	r25, r28
     184:	8d 2f       	mov	r24, r29
     186:	90 93 02 60 	sts	0x6002, r25	; 0x806002 <__DATA_REGION_ORIGIN__+0x2>
     18a:	80 93 03 60 	sts	0x6003, r24	; 0x806003 <__DATA_REGION_ORIGIN__+0x3>
	int16_t safe2 = normalize((WSData.winddirection * 45) - 90);

	bool valid1 = (safe1 >= MIN_AZIMUTH && safe1 <= MAX_AZIMUTH);
	bool valid2 = (safe2 >= MIN_AZIMUTH && safe2 <= MAX_AZIMUTH);

	if (valid1 && valid2) {
     18e:	0c c0       	rjmp	.+24     	; 0x1a8 <get_safe_azimuth+0x98>
		int16_t d1 = angle_diff(SensorData.Azimuth, safe1);
		int16_t d2 = angle_diff(SensorData.Azimuth, safe2);
		Target.azimuth = (d1 <= d2) ? safe1 : safe2;
		} else if (valid1) {
     190:	8d 32       	cpi	r24, 0x2D	; 45
     192:	91 40       	sbci	r25, 0x01	; 1
     194:	28 f4       	brcc	.+10     	; 0x1a0 <get_safe_azimuth+0x90>
		Target.azimuth = safe1;
     196:	00 93 02 60 	sts	0x6002, r16	; 0x806002 <__DATA_REGION_ORIGIN__+0x2>
     19a:	10 93 03 60 	sts	0x6003, r17	; 0x806003 <__DATA_REGION_ORIGIN__+0x3>
     19e:	04 c0       	rjmp	.+8      	; 0x1a8 <get_safe_azimuth+0x98>
		} else {
		Target.azimuth = safe2; // visada bus bent vienas tinkamas
     1a0:	c0 93 02 60 	sts	0x6002, r28	; 0x806002 <__DATA_REGION_ORIGIN__+0x2>
     1a4:	d0 93 03 60 	sts	0x6003, r29	; 0x806003 <__DATA_REGION_ORIGIN__+0x3>
	}
}
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	1f 91       	pop	r17
     1ae:	0f 91       	pop	r16
     1b0:	ff 90       	pop	r15
     1b2:	ef 90       	pop	r14
     1b4:	df 90       	pop	r13
     1b6:	cf 90       	pop	r12
     1b8:	08 95       	ret

000001ba <ReachTarget>:

void ReachTarget(){
	if (SensorData.Elevation == Target.elevation) {
     1ba:	20 91 c4 64 	lds	r18, 0x64C4	; 0x8064c4 <SensorData>
     1be:	30 91 c5 64 	lds	r19, 0x64C5	; 0x8064c5 <SensorData+0x1>
     1c2:	80 91 00 60 	lds	r24, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
     1c6:	90 91 01 60 	lds	r25, 0x6001	; 0x806001 <__DATA_REGION_ORIGIN__+0x1>
     1ca:	28 17       	cp	r18, r24
     1cc:	39 07       	cpc	r19, r25
     1ce:	29 f4       	brne	.+10     	; 0x1da <ReachTarget+0x20>
		LinearMotor_stop();
     1d0:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <LinearMotor_stop>
		LinearMotor_disable();
     1d4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <LinearMotor_disable>
     1d8:	27 c0       	rjmp	.+78     	; 0x228 <ReachTarget+0x6e>
	} 
	else if(SensorData.Elevation < (Target.elevation - ELEVATION_BACKLASH) || SensorData.Elevation > (Target.elevation + ELEVATION_BACKLASH)){
     1da:	ac 01       	movw	r20, r24
     1dc:	42 50       	subi	r20, 0x02	; 2
     1de:	51 09       	sbc	r21, r1
     1e0:	24 17       	cp	r18, r20
     1e2:	35 07       	cpc	r19, r21
     1e4:	20 f0       	brcs	.+8      	; 0x1ee <ReachTarget+0x34>
     1e6:	02 96       	adiw	r24, 0x02	; 2
     1e8:	82 17       	cp	r24, r18
     1ea:	93 07       	cpc	r25, r19
     1ec:	e8 f4       	brcc	.+58     	; 0x228 <ReachTarget+0x6e>
		LinearMotor_enable();
     1ee:	0e 94 c3 04 	call	0x986	; 0x986 <LinearMotor_enable>
		LinearMotor_start();
     1f2:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LinearMotor_start>
		if (SensorData.Elevation < (Target.elevation - ELEVATION_BACKLASH)){
     1f6:	20 91 c4 64 	lds	r18, 0x64C4	; 0x8064c4 <SensorData>
     1fa:	30 91 c5 64 	lds	r19, 0x64C5	; 0x8064c5 <SensorData+0x1>
     1fe:	80 91 00 60 	lds	r24, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
     202:	90 91 01 60 	lds	r25, 0x6001	; 0x806001 <__DATA_REGION_ORIGIN__+0x1>
     206:	ac 01       	movw	r20, r24
     208:	42 50       	subi	r20, 0x02	; 2
     20a:	51 09       	sbc	r21, r1
     20c:	24 17       	cp	r18, r20
     20e:	35 07       	cpc	r19, r21
     210:	20 f4       	brcc	.+8      	; 0x21a <ReachTarget+0x60>
			LinearMotor_set_direction(1);
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	0e 94 19 05 	call	0xa32	; 0xa32 <LinearMotor_set_direction>
     218:	07 c0       	rjmp	.+14     	; 0x228 <ReachTarget+0x6e>
		}
		else if(SensorData.Elevation > (Target.elevation + ELEVATION_BACKLASH)){
     21a:	02 96       	adiw	r24, 0x02	; 2
     21c:	82 17       	cp	r24, r18
     21e:	93 07       	cpc	r25, r19
     220:	18 f4       	brcc	.+6      	; 0x228 <ReachTarget+0x6e>
			LinearMotor_set_direction(0);
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	0e 94 19 05 	call	0xa32	; 0xa32 <LinearMotor_set_direction>
		}
	}
	if (SensorData.Azimuth == Target.azimuth) {
     228:	20 91 c8 64 	lds	r18, 0x64C8	; 0x8064c8 <SensorData+0x4>
     22c:	30 91 c9 64 	lds	r19, 0x64C9	; 0x8064c9 <SensorData+0x5>
     230:	80 91 02 60 	lds	r24, 0x6002	; 0x806002 <__DATA_REGION_ORIGIN__+0x2>
     234:	90 91 03 60 	lds	r25, 0x6003	; 0x806003 <__DATA_REGION_ORIGIN__+0x3>
     238:	28 17       	cp	r18, r24
     23a:	39 07       	cpc	r19, r25
     23c:	29 f4       	brne	.+10     	; 0x248 <ReachTarget+0x8e>
		Stepper_stop();
     23e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <Stepper_stop>
		Stepper_disable();
     242:	0e 94 9a 07 	call	0xf34	; 0xf34 <Stepper_disable>
     246:	08 95       	ret
	} 
	else  if(SensorData.Azimuth < (Target.azimuth - AZIMUTH_BACKLASH) || SensorData.Azimuth > (Target.azimuth + AZIMUTH_BACKLASH)){
     248:	ac 01       	movw	r20, r24
     24a:	45 50       	subi	r20, 0x05	; 5
     24c:	51 09       	sbc	r21, r1
     24e:	24 17       	cp	r18, r20
     250:	35 07       	cpc	r19, r21
     252:	20 f0       	brcs	.+8      	; 0x25c <ReachTarget+0xa2>
     254:	05 96       	adiw	r24, 0x05	; 5
     256:	82 17       	cp	r24, r18
     258:	93 07       	cpc	r25, r19
     25a:	e8 f4       	brcc	.+58     	; 0x296 <ReachTarget+0xdc>
		Stepper_enable();
     25c:	0e 94 87 07 	call	0xf0e	; 0xf0e <Stepper_enable>
		Stepper_start();
     260:	0e 94 ad 07 	call	0xf5a	; 0xf5a <Stepper_start>
		if (SensorData.Azimuth < (Target.azimuth - AZIMUTH_BACKLASH)){
     264:	20 91 c8 64 	lds	r18, 0x64C8	; 0x8064c8 <SensorData+0x4>
     268:	30 91 c9 64 	lds	r19, 0x64C9	; 0x8064c9 <SensorData+0x5>
     26c:	80 91 02 60 	lds	r24, 0x6002	; 0x806002 <__DATA_REGION_ORIGIN__+0x2>
     270:	90 91 03 60 	lds	r25, 0x6003	; 0x806003 <__DATA_REGION_ORIGIN__+0x3>
     274:	ac 01       	movw	r20, r24
     276:	45 50       	subi	r20, 0x05	; 5
     278:	51 09       	sbc	r21, r1
     27a:	24 17       	cp	r18, r20
     27c:	35 07       	cpc	r19, r21
     27e:	20 f4       	brcc	.+8      	; 0x288 <ReachTarget+0xce>
			Stepper_set_direction(1);
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Stepper_set_direction>
     286:	08 95       	ret
		}
		else if(SensorData.Azimuth > (Target.azimuth + AZIMUTH_BACKLASH)){
     288:	05 96       	adiw	r24, 0x05	; 5
     28a:	82 17       	cp	r24, r18
     28c:	93 07       	cpc	r25, r19
     28e:	18 f4       	brcc	.+6      	; 0x296 <ReachTarget+0xdc>
			Stepper_set_direction(0);
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Stepper_set_direction>
     296:	08 95       	ret

00000298 <work>:
		}
	}
}

void work(){
	if(WSData.windspeed > MAX_WIND){
     298:	80 91 e9 64 	lds	r24, 0x64E9	; 0x8064e9 <WSData+0x6>
     29c:	80 31       	cpi	r24, 0x10	; 16
     29e:	48 f0       	brcs	.+18     	; 0x2b2 <work+0x1a>
		get_safe_azimuth();
     2a0:	0e 94 88 00 	call	0x110	; 0x110 <get_safe_azimuth>
		Target.elevation = SAFE_ELEVATION;
     2a4:	84 e1       	ldi	r24, 0x14	; 20
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	80 93 00 60 	sts	0x6000, r24	; 0x806000 <__DATA_REGION_ORIGIN__>
     2ac:	90 93 01 60 	sts	0x6001, r25	; 0x806001 <__DATA_REGION_ORIGIN__+0x1>
     2b0:	08 95       	ret
	}
	else{
		if(WSData.lightlevel >= MIN_LIGHT_LEVEL){ // if minimum light level reached work as normal
     2b2:	80 91 eb 64 	lds	r24, 0x64EB	; 0x8064eb <WSData+0x8>
     2b6:	90 91 ec 64 	lds	r25, 0x64EC	; 0x8064ec <WSData+0x9>
     2ba:	8c 32       	cpi	r24, 0x2C	; 44
     2bc:	91 40       	sbci	r25, 0x01	; 1
     2be:	80 f0       	brcs	.+32     	; 0x2e0 <work+0x48>
			Target.azimuth = WSData.azimuth;
     2c0:	a3 ee       	ldi	r26, 0xE3	; 227
     2c2:	b4 e6       	ldi	r27, 0x64	; 100
     2c4:	8d 91       	ld	r24, X+
     2c6:	9c 91       	ld	r25, X
     2c8:	11 97       	sbiw	r26, 0x01	; 1
     2ca:	e0 e0       	ldi	r30, 0x00	; 0
     2cc:	f0 e6       	ldi	r31, 0x60	; 96
     2ce:	82 83       	std	Z+2, r24	; 0x02
     2d0:	93 83       	std	Z+3, r25	; 0x03
			Target.elevation = WSData.elevation;
     2d2:	12 96       	adiw	r26, 0x02	; 2
     2d4:	8d 91       	ld	r24, X+
     2d6:	9c 91       	ld	r25, X
     2d8:	13 97       	sbiw	r26, 0x03	; 3
     2da:	80 83       	st	Z, r24
     2dc:	91 83       	std	Z+1, r25	; 0x01
     2de:	0c c0       	rjmp	.+24     	; 0x2f8 <work+0x60>
		}
		else{ // if not go to best day position (early morning, late at evening, or just dark day)
			Target.azimuth = 180; //South
     2e0:	e0 e0       	ldi	r30, 0x00	; 0
     2e2:	f0 e6       	ldi	r31, 0x60	; 96
     2e4:	84 eb       	ldi	r24, 0xB4	; 180
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	82 83       	std	Z+2, r24	; 0x02
     2ea:	93 83       	std	Z+3, r25	; 0x03
			Target.elevation = WSData.topelevation; //day top elevation
     2ec:	80 91 e7 64 	lds	r24, 0x64E7	; 0x8064e7 <WSData+0x4>
     2f0:	90 91 e8 64 	lds	r25, 0x64E8	; 0x8064e8 <WSData+0x5>
     2f4:	80 83       	st	Z, r24
     2f6:	91 83       	std	Z+1, r25	; 0x01
		}
			ReachTarget();
     2f8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ReachTarget>
     2fc:	08 95       	ret

000002fe <ADC0_init>:

}

void ADC0_SetupSysVoltage(){
	VREF.ADC0REF = VREF_REFSEL_1V024_gc; // 1.024V = 4096| 1.024 = 10.24V|
	ADC0.MUXPOS = ADC_MUXPOS_VDDDIV10_gc; //5V = 0.5V
     2fe:	e0 e0       	ldi	r30, 0x00	; 0
     300:	f6 e0       	ldi	r31, 0x06	; 6
     302:	87 e0       	ldi	r24, 0x07	; 7
     304:	81 83       	std	Z+1, r24	; 0x01
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	82 83       	std	Z+2, r24	; 0x02
     30a:	80 83       	st	Z, r24
     30c:	08 95       	ret

0000030e <ADC0_SetupJoystick>:
     30e:	95 e0       	ldi	r25, 0x05	; 5
     310:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
     314:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     318:	08 95       	ret

0000031a <ADC0_read>:
 * appropriately.
 *
 * @return The ADC conversion result as a 12-bit value.
 */
uint16_t ADC0_read() {
    ADC0.COMMAND = ADC_STCONV_bm; // Start conversion
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7f060a>
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)); // Wait until result is ready
     320:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7f060d>
     324:	80 ff       	sbrs	r24, 0
     326:	fc cf       	rjmp	.-8      	; 0x320 <ADC0_read+0x6>
    ADC0.INTFLAGS = ADC_RESRDY_bm; // Clear result ready flag
     328:	e0 e0       	ldi	r30, 0x00	; 0
     32a:	f6 e0       	ldi	r31, 0x06	; 6
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	85 87       	std	Z+13, r24	; 0x0d
    return ADC0.RES >> 4; // Shift result if accumulation is over 16
     330:	80 89       	ldd	r24, Z+16	; 0x10
     332:	91 89       	ldd	r25, Z+17	; 0x11
}
     334:	92 95       	swap	r25
     336:	82 95       	swap	r24
     338:	8f 70       	andi	r24, 0x0F	; 15
     33a:	89 27       	eor	r24, r25
     33c:	9f 70       	andi	r25, 0x0F	; 15
     33e:	89 27       	eor	r24, r25
     340:	08 95       	ret

00000342 <CLOCK_XOSCHF_clock_init>:
#include "Settings.h"

void CLOCK_XOSCHF_clock_init()
{
	/* Enable external (32 MHz) clock input */
	ccp_write_io((uint8_t *) &CLKCTRL.XOSCHFCTRLA, CLKCTRL_SELHF_EXTCLOCK_gc | CLKCTRL_FRQRANGE_24M_gc | CLKCTRL_ENABLE_bm);
     342:	6b e0       	ldi	r22, 0x0B	; 11
     344:	80 e8       	ldi	r24, 0x80	; 128
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <ccp_write_io>

	/* Set the main clock to use external clock as source */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc);
     34c:	63 e0       	ldi	r22, 0x03	; 3
     34e:	80 e6       	ldi	r24, 0x60	; 96
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <ccp_write_io>

	/* Wait for system oscillator change to complete */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm)
     356:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
     35a:	80 fd       	sbrc	r24, 0
     35c:	fc cf       	rjmp	.-8      	; 0x356 <CLOCK_XOSCHF_clock_init+0x14>
	{};
	/* Configuration complete;*/
}
     35e:	08 95       	ret

00000360 <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
     360:	2f 92       	push	r2
     362:	3f 92       	push	r3
     364:	4f 92       	push	r4
     366:	5f 92       	push	r5
     368:	6f 92       	push	r6
     36a:	7f 92       	push	r7
     36c:	8f 92       	push	r8
     36e:	9f 92       	push	r9
     370:	af 92       	push	r10
     372:	bf 92       	push	r11
     374:	cf 92       	push	r12
     376:	df 92       	push	r13
     378:	ef 92       	push	r14
     37a:	ff 92       	push	r15
     37c:	0f 93       	push	r16
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	2b 97       	sbiw	r28, 0x0b	; 11
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	c2 2e       	mov	r12, r18
     390:	b3 2e       	mov	r11, r19
     392:	a4 2e       	mov	r10, r20
     394:	95 2e       	mov	r9, r21
     396:	86 2e       	mov	r8, r22
     398:	77 2e       	mov	r7, r23
     39a:	68 2e       	mov	r6, r24
     39c:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
     39e:	f2 2e       	mov	r15, r18
     3a0:	03 2f       	mov	r16, r19
     3a2:	14 2f       	mov	r17, r20
     3a4:	5a 87       	std	Y+10, r21	; 0x0a
     3a6:	69 83       	std	Y+1, r22	; 0x01
     3a8:	b7 2f       	mov	r27, r23
     3aa:	d8 2e       	mov	r13, r24
     3ac:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
     3ae:	e0 e0       	ldi	r30, 0x00	; 0
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     3b2:	14 c0       	rjmp	.+40     	; 0x3dc <crc8_cdma2000+0x7c>
        length++;
     3b4:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
     3b6:	2f 2d       	mov	r18, r15
     3b8:	30 2f       	mov	r19, r16
     3ba:	41 2f       	mov	r20, r17
     3bc:	5a 85       	ldd	r21, Y+10	; 0x0a
     3be:	69 81       	ldd	r22, Y+1	; 0x01
     3c0:	7b 2f       	mov	r23, r27
     3c2:	8d 2d       	mov	r24, r13
     3c4:	9e 2d       	mov	r25, r14
     3c6:	08 e0       	ldi	r16, 0x08	; 8
     3c8:	0e 94 45 0b 	call	0x168a	; 0x168a <__lshrdi3>
     3cc:	f2 2e       	mov	r15, r18
     3ce:	03 2f       	mov	r16, r19
     3d0:	14 2f       	mov	r17, r20
     3d2:	5a 87       	std	Y+10, r21	; 0x0a
     3d4:	69 83       	std	Y+1, r22	; 0x01
     3d6:	b7 2f       	mov	r27, r23
     3d8:	d8 2e       	mov	r13, r24
     3da:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     3dc:	2f 2d       	mov	r18, r15
     3de:	30 2f       	mov	r19, r16
     3e0:	41 2f       	mov	r20, r17
     3e2:	5a 85       	ldd	r21, Y+10	; 0x0a
     3e4:	69 81       	ldd	r22, Y+1	; 0x01
     3e6:	7b 2f       	mov	r23, r27
     3e8:	8d 2d       	mov	r24, r13
     3ea:	9e 2d       	mov	r25, r14
     3ec:	a0 e0       	ldi	r26, 0x00	; 0
     3ee:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__cmpdi2_s8>
     3f2:	01 f7       	brne	.-64     	; 0x3b4 <crc8_cdma2000+0x54>
     3f4:	8f ef       	ldi	r24, 0xFF	; 255
     3f6:	8a 87       	std	Y+10, r24	; 0x0a
     3f8:	cb 86       	std	Y+11, r12	; 0x0b
     3fa:	b9 82       	std	Y+1, r11	; 0x01
     3fc:	4a 2c       	mov	r4, r10
     3fe:	39 2c       	mov	r3, r9
     400:	28 2c       	mov	r2, r8
     402:	1a c0       	rjmp	.+52     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
     404:	8d 01       	movw	r16, r26
     406:	00 0f       	add	r16, r16
     408:	11 1f       	adc	r17, r17
     40a:	00 0f       	add	r16, r16
     40c:	11 1f       	adc	r17, r17
     40e:	00 0f       	add	r16, r16
     410:	11 1f       	adc	r17, r17
     412:	2b 85       	ldd	r18, Y+11	; 0x0b
     414:	39 81       	ldd	r19, Y+1	; 0x01
     416:	44 2d       	mov	r20, r4
     418:	53 2d       	mov	r21, r3
     41a:	62 2d       	mov	r22, r2
     41c:	77 2d       	mov	r23, r7
     41e:	86 2d       	mov	r24, r6
     420:	95 2d       	mov	r25, r5
     422:	0e 94 45 0b 	call	0x168a	; 0x168a <__lshrdi3>
     426:	8a 84       	ldd	r8, Y+10	; 0x0a
     428:	82 26       	eor	r8, r18
     42a:	91 2c       	mov	r9, r1
     42c:	f4 01       	movw	r30, r8
     42e:	e3 59       	subi	r30, 0x93	; 147
     430:	fc 49       	sbci	r31, 0x9C	; 156
     432:	80 81       	ld	r24, Z
     434:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
     436:	fd 01       	movw	r30, r26
     438:	df 01       	movw	r26, r30
     43a:	11 97       	sbiw	r26, 0x01	; 1
     43c:	ef 2b       	or	r30, r31
     43e:	11 f7       	brne	.-60     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     440:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
     442:	2b 96       	adiw	r28, 0x0b	; 11
     444:	cd bf       	out	0x3d, r28	; 61
     446:	de bf       	out	0x3e, r29	; 62
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	df 90       	pop	r13
     456:	cf 90       	pop	r12
     458:	bf 90       	pop	r11
     45a:	af 90       	pop	r10
     45c:	9f 90       	pop	r9
     45e:	8f 90       	pop	r8
     460:	7f 90       	pop	r7
     462:	6f 90       	pop	r6
     464:	5f 90       	pop	r5
     466:	4f 90       	pop	r4
     468:	3f 90       	pop	r3
     46a:	2f 90       	pop	r2
     46c:	08 95       	ret

0000046e <verify_crc8_cdma2000>:
 * without the CRC byte. Otherwise, it returns 0 to indicate a mismatch.
 * 
 * @param data_with_crc The input data with the CRC byte appended.
 * @return The data without the CRC byte if the checksum is valid, or 0 if invalid.
 */
uint8_t verify_crc8_cdma2000(uint64_t data_without_crc, uint8_t crc) {
     46e:	0f 93       	push	r16
     470:	cf 93       	push	r28
     472:	c2 2f       	mov	r28, r18

	return crc8_cdma2000(data_without_crc) == crc ?  data_without_crc : 0;
     474:	0e 94 b0 01 	call	0x360	; 0x360 <crc8_cdma2000>
     478:	80 13       	cpse	r24, r16
     47a:	02 c0       	rjmp	.+4      	; 0x480 <verify_crc8_cdma2000+0x12>
     47c:	8c 2f       	mov	r24, r28
     47e:	01 c0       	rjmp	.+2      	; 0x482 <verify_crc8_cdma2000+0x14>
     480:	80 e0       	ldi	r24, 0x00	; 0

     482:	cf 91       	pop	r28
     484:	0f 91       	pop	r16
     486:	08 95       	ret

00000488 <hexToUint64>:
 *  Author: Saulius
 */ 
#include "Settings.h"
#include "FOUSARTVar.h"

uint64_t hexToUint64(const char *str) {
     488:	0f 93       	push	r16
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	fc 01       	movw	r30, r24
	uint64_t result = 0;
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
	char c;

	while ((c = *str++)) {
     4a0:	3a c0       	rjmp	.+116    	; 0x516 <hexToUint64+0x8e>
		result <<= 4; // kiekvienas hex simbolis = 4 bitai
     4a2:	04 e0       	ldi	r16, 0x04	; 4
     4a4:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__ashldi3>

		if (c >= '0' && c <= '9') {
     4a8:	e0 ed       	ldi	r30, 0xD0	; 208
     4aa:	ec 0f       	add	r30, r28
     4ac:	ea 30       	cpi	r30, 0x0A	; 10
     4ae:	70 f4       	brcc	.+28     	; 0x4cc <hexToUint64+0x44>
			result |= (uint64_t)(c - '0');
     4b0:	d0 e0       	ldi	r29, 0x00	; 0
     4b2:	e0 97       	sbiw	r28, 0x30	; 48
     4b4:	ed 2f       	mov	r30, r29
     4b6:	ee 0f       	add	r30, r30
     4b8:	ee 0b       	sbc	r30, r30
     4ba:	2c 2b       	or	r18, r28
     4bc:	3d 2b       	or	r19, r29
     4be:	4e 2b       	or	r20, r30
     4c0:	5e 2b       	or	r21, r30
     4c2:	6e 2b       	or	r22, r30
     4c4:	7e 2b       	or	r23, r30
     4c6:	8e 2b       	or	r24, r30
     4c8:	9e 2b       	or	r25, r30
     4ca:	24 c0       	rjmp	.+72     	; 0x514 <hexToUint64+0x8c>
			} else if (c >= 'A' && c <= 'F') {
     4cc:	ef eb       	ldi	r30, 0xBF	; 191
     4ce:	ec 0f       	add	r30, r28
     4d0:	e6 30       	cpi	r30, 0x06	; 6
     4d2:	70 f4       	brcc	.+28     	; 0x4f0 <hexToUint64+0x68>
			result |= (uint64_t)(c - 'A' + 10);
     4d4:	d0 e0       	ldi	r29, 0x00	; 0
     4d6:	e7 97       	sbiw	r28, 0x37	; 55
     4d8:	ed 2f       	mov	r30, r29
     4da:	ee 0f       	add	r30, r30
     4dc:	ee 0b       	sbc	r30, r30
     4de:	2c 2b       	or	r18, r28
     4e0:	3d 2b       	or	r19, r29
     4e2:	4e 2b       	or	r20, r30
     4e4:	5e 2b       	or	r21, r30
     4e6:	6e 2b       	or	r22, r30
     4e8:	7e 2b       	or	r23, r30
     4ea:	8e 2b       	or	r24, r30
     4ec:	9e 2b       	or	r25, r30
     4ee:	12 c0       	rjmp	.+36     	; 0x514 <hexToUint64+0x8c>
			} else if (c >= 'a' && c <= 'f') {
     4f0:	ef e9       	ldi	r30, 0x9F	; 159
     4f2:	ec 0f       	add	r30, r28
     4f4:	e6 30       	cpi	r30, 0x06	; 6
     4f6:	a8 f4       	brcc	.+42     	; 0x522 <hexToUint64+0x9a>
			result |= (uint64_t)(c - 'a' + 10);
     4f8:	d0 e0       	ldi	r29, 0x00	; 0
     4fa:	c7 55       	subi	r28, 0x57	; 87
     4fc:	d1 09       	sbc	r29, r1
     4fe:	ed 2f       	mov	r30, r29
     500:	ee 0f       	add	r30, r30
     502:	ee 0b       	sbc	r30, r30
     504:	2c 2b       	or	r18, r28
     506:	3d 2b       	or	r19, r29
     508:	4e 2b       	or	r20, r30
     50a:	5e 2b       	or	r21, r30
     50c:	6e 2b       	or	r22, r30
     50e:	7e 2b       	or	r23, r30
     510:	8e 2b       	or	r24, r30
     512:	9e 2b       	or	r25, r30
     514:	fd 01       	movw	r30, r26

uint64_t hexToUint64(const char *str) {
	uint64_t result = 0;
	char c;

	while ((c = *str++)) {
     516:	df 01       	movw	r26, r30
     518:	11 96       	adiw	r26, 0x01	; 1
     51a:	c0 81       	ld	r28, Z
     51c:	c1 11       	cpse	r28, r1
     51e:	c1 cf       	rjmp	.-126    	; 0x4a2 <hexToUint64+0x1a>
     520:	08 c0       	rjmp	.+16     	; 0x532 <hexToUint64+0xaa>
			result |= (uint64_t)(c - 'A' + 10);
			} else if (c >= 'a' && c <= 'f') {
			result |= (uint64_t)(c - 'a' + 10);
			} else {
			// netinkamas simbolis
			return 0;
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return result;
}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	0f 91       	pop	r16
     538:	08 95       	ret

0000053a <FODataSplitter>:

void FODataSplitter(char *command) {
     53a:	7f 92       	push	r7
     53c:	8f 92       	push	r8
     53e:	9f 92       	push	r9
     540:	af 92       	push	r10
     542:	bf 92       	push	r11
     544:	cf 92       	push	r12
     546:	df 92       	push	r13
     548:	ef 92       	push	r14
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	a0 97       	sbiw	r28, 0x20	; 32
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	6c 01       	movw	r12, r24
	if (strncmp(command, "00000000000000", 14) == 0) { //if elevation angle, azimuth angle, solar cells voltage and current = 0 meaning it is FO optic fault
     560:	4e e0       	ldi	r20, 0x0E	; 14
     562:	50 e0       	ldi	r21, 0x00	; 0
     564:	6d e6       	ldi	r22, 0x6D	; 109
     566:	74 e6       	ldi	r23, 0x64	; 100
     568:	0e 94 ae 0c 	call	0x195c	; 0x195c <strncmp>
     56c:	89 2b       	or	r24, r25
     56e:	21 f4       	brne	.+8      	; 0x578 <FODataSplitter+0x3e>
		SensorData.FO_fault = true;		
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	80 93 d2 64 	sts	0x64D2, r24	; 0x8064d2 <SensorData+0xe>
     576:	db c0       	rjmp	.+438    	; 0x72e <FODataSplitter+0x1f4>
	}
	else{
		const uint8_t lengths[] = {4, 4, 3, 3, 1, 2};
     578:	86 e0       	ldi	r24, 0x06	; 6
     57a:	e3 e4       	ldi	r30, 0x43	; 67
     57c:	f3 e6       	ldi	r31, 0x63	; 99
     57e:	de 01       	movw	r26, r28
     580:	5b 96       	adiw	r26, 0x1b	; 27
     582:	01 90       	ld	r0, Z+
     584:	0d 92       	st	X+, r0
     586:	8a 95       	dec	r24
     588:	e1 f7       	brne	.-8      	; 0x582 <FODataSplitter+0x48>
		char temp[16];

		strncpy(temp, command, 15);
     58a:	4f e0       	ldi	r20, 0x0F	; 15
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	b6 01       	movw	r22, r12
     590:	ce 01       	movw	r24, r28
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	0e 94 bc 0c 	call	0x1978	; 0x1978 <strncpy>
		temp[15] = '\0';
     598:	18 8a       	std	Y+16, r1	; 0x10
		uint64_t datatocheck = hexToUint64(temp);
     59a:	ce 01       	movw	r24, r28
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	0e 94 44 02 	call	0x488	; 0x488 <hexToUint64>
     5a2:	72 2e       	mov	r7, r18
     5a4:	83 2e       	mov	r8, r19
     5a6:	94 2e       	mov	r9, r20
     5a8:	a5 2e       	mov	r10, r21
     5aa:	b6 2e       	mov	r11, r22
     5ac:	e7 2e       	mov	r14, r23
     5ae:	f8 2e       	mov	r15, r24
     5b0:	19 2f       	mov	r17, r25
		strncpy(temp, command + 15, 2); 
     5b2:	42 e0       	ldi	r20, 0x02	; 2
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	b6 01       	movw	r22, r12
     5b8:	61 5f       	subi	r22, 0xF1	; 241
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	0e 94 bc 0c 	call	0x1978	; 0x1978 <strncpy>
		temp[2] = '\0';
     5c4:	1b 82       	std	Y+3, r1	; 0x03
		uint8_t crctocheck = (uint8_t)strtol(temp, NULL, 16);
     5c6:	40 e1       	ldi	r20, 0x10	; 16
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	ce 01       	movw	r24, r28
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	0e 94 81 0b 	call	0x1702	; 0x1702 <strtol>

		if(verify_crc8_cdma2000(datatocheck, crctocheck)){ //if data valid update it
     5d6:	06 2f       	mov	r16, r22
     5d8:	27 2d       	mov	r18, r7
     5da:	38 2d       	mov	r19, r8
     5dc:	49 2d       	mov	r20, r9
     5de:	5a 2d       	mov	r21, r10
     5e0:	6b 2d       	mov	r22, r11
     5e2:	7e 2d       	mov	r23, r14
     5e4:	8f 2d       	mov	r24, r15
     5e6:	91 2f       	mov	r25, r17
     5e8:	0e 94 37 02 	call	0x46e	; 0x46e <verify_crc8_cdma2000>
     5ec:	81 11       	cpse	r24, r1
     5ee:	75 c0       	rjmp	.+234    	; 0x6da <FODataSplitter+0x1a0>
     5f0:	9b c0       	rjmp	.+310    	; 0x728 <FODataSplitter+0x1ee>
			//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
			const char *p = command;
			uint8_t EndSwitchesValue = 0;

			for (uint8_t i = 0; i < 6; i++) {
				char token[10] = {0};
     5f2:	5e 01       	movw	r10, r28
     5f4:	81 e1       	ldi	r24, 0x11	; 17
     5f6:	a8 0e       	add	r10, r24
     5f8:	b1 1c       	adc	r11, r1
     5fa:	8a e0       	ldi	r24, 0x0A	; 10
     5fc:	f5 01       	movw	r30, r10
     5fe:	11 92       	st	Z+, r1
     600:	8a 95       	dec	r24
     602:	e9 f7       	brne	.-6      	; 0x5fe <FODataSplitter+0xc4>

				memcpy(token, p, lengths[i]);
     604:	eb e1       	ldi	r30, 0x1B	; 27
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	ec 0f       	add	r30, r28
     60a:	fd 1f       	adc	r31, r29
     60c:	e1 0f       	add	r30, r17
     60e:	f1 1d       	adc	r31, r1
     610:	e0 80       	ld	r14, Z
     612:	f1 2c       	mov	r15, r1
     614:	a7 01       	movw	r20, r14
     616:	b6 01       	movw	r22, r12
     618:	c5 01       	movw	r24, r10
     61a:	0e 94 a5 0c 	call	0x194a	; 0x194a <memcpy>
				token[lengths[i]] = '\0';
     61e:	f5 01       	movw	r30, r10
     620:	ee 0d       	add	r30, r14
     622:	ff 1d       	adc	r31, r15
     624:	10 82       	st	Z, r1

				switch (i) {
     626:	12 30       	cpi	r17, 0x02	; 2
     628:	89 f1       	breq	.+98     	; 0x68c <FODataSplitter+0x152>
     62a:	28 f4       	brcc	.+10     	; 0x636 <FODataSplitter+0xfc>
     62c:	11 23       	and	r17, r17
     62e:	49 f0       	breq	.+18     	; 0x642 <FODataSplitter+0x108>
     630:	11 30       	cpi	r17, 0x01	; 1
     632:	a1 f0       	breq	.+40     	; 0x65c <FODataSplitter+0x122>
     634:	4e c0       	rjmp	.+156    	; 0x6d2 <FODataSplitter+0x198>
     636:	13 30       	cpi	r17, 0x03	; 3
     638:	b1 f1       	breq	.+108    	; 0x6a6 <FODataSplitter+0x16c>
     63a:	14 30       	cpi	r17, 0x04	; 4
     63c:	09 f4       	brne	.+2      	; 0x640 <FODataSplitter+0x106>
     63e:	40 c0       	rjmp	.+128    	; 0x6c0 <FODataSplitter+0x186>
     640:	48 c0       	rjmp	.+144    	; 0x6d2 <FODataSplitter+0x198>
					case 0: SensorData.HPElevation   = (uint16_t)strtol(token, NULL, 16); break;
     642:	40 e1       	ldi	r20, 0x10	; 16
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	ce 01       	movw	r24, r28
     64c:	41 96       	adiw	r24, 0x11	; 17
     64e:	0e 94 81 0b 	call	0x1702	; 0x1702 <strtol>
     652:	60 93 c6 64 	sts	0x64C6, r22	; 0x8064c6 <SensorData+0x2>
     656:	70 93 c7 64 	sts	0x64C7, r23	; 0x8064c7 <SensorData+0x3>
     65a:	3b c0       	rjmp	.+118    	; 0x6d2 <FODataSplitter+0x198>
					case 1: SensorData.Azimuth     = (uint16_t)strtol(token, NULL, 16)/ Angle_Precizion; break;
     65c:	40 e1       	ldi	r20, 0x10	; 16
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	ce 01       	movw	r24, r28
     666:	41 96       	adiw	r24, 0x11	; 17
     668:	0e 94 81 0b 	call	0x1702	; 0x1702 <strtol>
     66c:	9b 01       	movw	r18, r22
     66e:	36 95       	lsr	r19
     670:	27 95       	ror	r18
     672:	36 95       	lsr	r19
     674:	27 95       	ror	r18
     676:	ab e7       	ldi	r26, 0x7B	; 123
     678:	b4 e1       	ldi	r27, 0x14	; 20
     67a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__umulhisi3>
     67e:	96 95       	lsr	r25
     680:	87 95       	ror	r24
     682:	80 93 c8 64 	sts	0x64C8, r24	; 0x8064c8 <SensorData+0x4>
     686:	90 93 c9 64 	sts	0x64C9, r25	; 0x8064c9 <SensorData+0x5>
     68a:	23 c0       	rjmp	.+70     	; 0x6d2 <FODataSplitter+0x198>
					case 2: SensorData.PVU         = (uint16_t)strtol(token, NULL, 16)/ U_I_Precizion; break;
     68c:	40 e1       	ldi	r20, 0x10	; 16
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	ce 01       	movw	r24, r28
     696:	41 96       	adiw	r24, 0x11	; 17
     698:	0e 94 81 0b 	call	0x1702	; 0x1702 <strtol>
     69c:	60 93 ca 64 	sts	0x64CA, r22	; 0x8064ca <SensorData+0x6>
     6a0:	70 93 cb 64 	sts	0x64CB, r23	; 0x8064cb <SensorData+0x7>
     6a4:	16 c0       	rjmp	.+44     	; 0x6d2 <FODataSplitter+0x198>
					case 3: SensorData.PVI         = (uint16_t)strtol(token, NULL, 16)/ U_I_Precizion; break;
     6a6:	40 e1       	ldi	r20, 0x10	; 16
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	ce 01       	movw	r24, r28
     6b0:	41 96       	adiw	r24, 0x11	; 17
     6b2:	0e 94 81 0b 	call	0x1702	; 0x1702 <strtol>
     6b6:	60 93 cc 64 	sts	0x64CC, r22	; 0x8064cc <SensorData+0x8>
     6ba:	70 93 cd 64 	sts	0x64CD, r23	; 0x8064cd <SensorData+0x9>
     6be:	09 c0       	rjmp	.+18     	; 0x6d2 <FODataSplitter+0x198>
					case 4: EndSwitchesValue       = (uint8_t)strtol(token, NULL, 16); break; //common end switches value
     6c0:	40 e1       	ldi	r20, 0x10	; 16
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	ce 01       	movw	r24, r28
     6ca:	41 96       	adiw	r24, 0x11	; 17
     6cc:	0e 94 81 0b 	call	0x1702	; 0x1702 <strtol>
     6d0:	06 2f       	mov	r16, r22
				}

				p += lengths[i];
     6d2:	ce 0c       	add	r12, r14
     6d4:	df 1c       	adc	r13, r15
		if(verify_crc8_cdma2000(datatocheck, crctocheck)){ //if data valid update it
			//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
			const char *p = command;
			uint8_t EndSwitchesValue = 0;

			for (uint8_t i = 0; i < 6; i++) {
     6d6:	1f 5f       	subi	r17, 0xFF	; 255
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <FODataSplitter+0x1a4>
     6da:	10 e0       	ldi	r17, 0x00	; 0
     6dc:	00 e0       	ldi	r16, 0x00	; 0
     6de:	16 30       	cpi	r17, 0x06	; 6
     6e0:	08 f4       	brcc	.+2      	; 0x6e4 <FODataSplitter+0x1aa>
     6e2:	87 cf       	rjmp	.-242    	; 0x5f2 <FODataSplitter+0xb8>
					case 4: EndSwitchesValue       = (uint8_t)strtol(token, NULL, 16); break; //common end switches value
				}

				p += lengths[i];
			}
			SensorData.Elevation = SensorData.HPElevation / Angle_Precizion;
     6e4:	e4 ec       	ldi	r30, 0xC4	; 196
     6e6:	f4 e6       	ldi	r31, 0x64	; 100
     6e8:	22 81       	ldd	r18, Z+2	; 0x02
     6ea:	33 81       	ldd	r19, Z+3	; 0x03
     6ec:	36 95       	lsr	r19
     6ee:	27 95       	ror	r18
     6f0:	36 95       	lsr	r19
     6f2:	27 95       	ror	r18
     6f4:	ab e7       	ldi	r26, 0x7B	; 123
     6f6:	b4 e1       	ldi	r27, 0x14	; 20
     6f8:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__umulhisi3>
     6fc:	96 95       	lsr	r25
     6fe:	87 95       	ror	r24
     700:	80 83       	st	Z, r24
     702:	91 83       	std	Z+1, r25	; 0x01
			//spliting end switch value to separate end switch value according to axis
			SensorData.ElMin = (EndSwitchesValue & 0x01) ? 1 : 0;
     704:	80 2f       	mov	r24, r16
     706:	81 70       	andi	r24, 0x01	; 1
     708:	82 87       	std	Z+10, r24	; 0x0a
			SensorData.ElMax = (EndSwitchesValue & 0x02) ? 1 : 0;
     70a:	01 fb       	bst	r16, 1
     70c:	88 27       	eor	r24, r24
     70e:	80 f9       	bld	r24, 0
     710:	83 87       	std	Z+11, r24	; 0x0b
			SensorData.AzMin = (EndSwitchesValue & 0x04) ? 1 : 0;
     712:	02 fb       	bst	r16, 2
     714:	88 27       	eor	r24, r24
     716:	80 f9       	bld	r24, 0
     718:	84 87       	std	Z+12, r24	; 0x0c
			SensorData.AzMax = (EndSwitchesValue & 0x08) ? 1 : 0;
     71a:	03 fb       	bst	r16, 3
     71c:	00 27       	eor	r16, r16
     71e:	00 f9       	bld	r16, 0
     720:	05 87       	std	Z+13, r16	; 0x0d
			SensorData.FO_fault = false;
     722:	16 86       	std	Z+14, r1	; 0x0e
			SensorData.FO_data_fault = false;
     724:	17 86       	std	Z+15, r1	; 0x0f
     726:	03 c0       	rjmp	.+6      	; 0x72e <FODataSplitter+0x1f4>

		}
		else{
			//uncomment if nedded
			//screen_write_formatted_text("data is corupted!", 1, ALIGN_CENTER); // bad crc
			SensorData.FO_data_fault = true;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 d3 64 	sts	0x64D3, r24	; 0x8064d3 <SensorData+0xf>
		}	
	}


}
     72e:	a0 96       	adiw	r28, 0x20	; 32
     730:	cd bf       	out	0x3d, r28	; 61
     732:	de bf       	out	0x3e, r29	; 62
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	df 90       	pop	r13
     742:	cf 90       	pop	r12
     744:	bf 90       	pop	r11
     746:	af 90       	pop	r10
     748:	9f 90       	pop	r9
     74a:	8f 90       	pop	r8
     74c:	7f 90       	pop	r7
     74e:	08 95       	ret

00000750 <FOReceiver>:
 * This function continuously reads incoming data via USART, processes the data, 
 * and executes the appropriate command. If an error occurs or a warning is set, 
 * it handles the corresponding state. The function handles both normal command 
 * processing and error recovery.
 */
void FOReceiver() {
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	64 97       	sbiw	r28, 0x14	; 20
     762:	cd bf       	out	0x3d, r28	; 61
     764:	de bf       	out	0x3e, r29	; 62
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
     766:	fe 01       	movw	r30, r28
     768:	31 96       	adiw	r30, 0x01	; 1
     76a:	84 e1       	ldi	r24, 0x14	; 20
     76c:	df 01       	movw	r26, r30
     76e:	1d 92       	st	X+, r1
     770:	8a 95       	dec	r24
     772:	e9 f7       	brne	.-6      	; 0x76e <FOReceiver+0x1e>
    uint8_t start = 0;
	uint16_t timeout = FO_TIMEOUT_COUNTER;
     774:	08 e8       	ldi	r16, 0x88	; 136
     776:	13 e1       	ldi	r17, 0x13	; 19
 * processing and error recovery.
 */
void FOReceiver() {
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
    uint8_t start = 0;
     778:	e1 2c       	mov	r14, r1
 * and executes the appropriate command. If an error occurs or a warning is set, 
 * it handles the corresponding state. The function handles both normal command 
 * processing and error recovery.
 */
void FOReceiver() {
    uint8_t index = 0;
     77a:	f1 2c       	mov	r15, r1
     77c:	03 c0       	rjmp	.+6      	; 0x784 <FOReceiver+0x34>
            } else if (index < MESSAGE_LENGTH_FO) {
                command[index++] = c; // Store received character in command array
            }
        }
        if (c == '<') { // If received data start symbol
            start = 1;
     77e:	ee 24       	eor	r14, r14
     780:	e3 94       	inc	r14
            index = 0;
     782:	f1 2c       	mov	r15, r1
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
    uint8_t start = 0;
	uint16_t timeout = FO_TIMEOUT_COUNTER;

    while (1) {
        char c = USART1_readChar(); // Reading a character from USART
     784:	0e 94 17 09 	call	0x122e	; 0x122e <USART1_readChar>

		if (--timeout == 0) { // Timeout condition
     788:	01 50       	subi	r16, 0x01	; 1
     78a:	11 09       	sbc	r17, r1
     78c:	f1 f0       	breq	.+60     	; 0x7ca <FOReceiver+0x7a>
			break;
		}
        if (start) {
     78e:	ee 20       	and	r14, r14
     790:	c9 f0       	breq	.+50     	; 0x7c4 <FOReceiver+0x74>
            if (c == '>') { // If received data end symbol
     792:	8e 33       	cpi	r24, 0x3E	; 62
     794:	61 f4       	brne	.+24     	; 0x7ae <FOReceiver+0x5e>
               start = 0;
			   command[index] = '\0';
     796:	e1 e0       	ldi	r30, 0x01	; 1
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	ec 0f       	add	r30, r28
     79c:	fd 1f       	adc	r31, r29
     79e:	ef 0d       	add	r30, r15
     7a0:	f1 1d       	adc	r31, r1
     7a2:	10 82       	st	Z, r1
               index = 0;
               FODataSplitter(command); // Execute the received command //comment when testing lines below
     7a4:	ce 01       	movw	r24, r28
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	0e 94 9d 02 	call	0x53a	; 0x53a <FODataSplitter>
               break;
     7ac:	0e c0       	rjmp	.+28     	; 0x7ca <FOReceiver+0x7a>
            } else if (index < MESSAGE_LENGTH_FO) {
     7ae:	b3 e1       	ldi	r27, 0x13	; 19
     7b0:	bf 15       	cp	r27, r15
     7b2:	40 f0       	brcs	.+16     	; 0x7c4 <FOReceiver+0x74>
                command[index++] = c; // Store received character in command array
     7b4:	e1 e0       	ldi	r30, 0x01	; 1
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	ec 0f       	add	r30, r28
     7ba:	fd 1f       	adc	r31, r29
     7bc:	ef 0d       	add	r30, r15
     7be:	f1 1d       	adc	r31, r1
     7c0:	80 83       	st	Z, r24
     7c2:	f3 94       	inc	r15
            }
        }
        if (c == '<') { // If received data start symbol
     7c4:	8c 33       	cpi	r24, 0x3C	; 60
     7c6:	f1 f6       	brne	.-68     	; 0x784 <FOReceiver+0x34>
     7c8:	da cf       	rjmp	.-76     	; 0x77e <FOReceiver+0x2e>
            start = 1;
            index = 0;
        }
    }
     7ca:	64 96       	adiw	r28, 0x14	; 20
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	08 95       	ret

000007de <GPIO_init>:

#include "Settings.h"

void GPIO_init(){
    // Configure USART0 and USART1 pin routing
    PORTMUX.USARTROUTEA = PORTMUX_USART0_ALT1_gc | PORTMUX_USART1_ALT2_gc; // Set USART0 to alternative pins set 1, USART1 to alternative pins set 2
     7de:	e0 ee       	ldi	r30, 0xE0	; 224
     7e0:	f5 e0       	ldi	r31, 0x05	; 5
     7e2:	81 e1       	ldi	r24, 0x11	; 17
     7e4:	82 83       	std	Z+2, r24	; 0x02
    PORTMUX.TWIROUTEA = PORTMUX_TWI0_DEFAULT_gc; // Set TWI0 to default pins
     7e6:	16 82       	std	Z+6, r1	; 0x06
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;
     7e8:	83 e0       	ldi	r24, 0x03	; 3
     7ea:	87 83       	std	Z+7, r24	; 0x07
	PORTMUX.TCDROUTEA = PORTMUX_TCD0_ALT2_gc; ///< Select alternative WOC pin variant 2
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	81 87       	std	Z+9, r24	; 0x09


    // Configure Port A (PA) for RX LED, I2C SDA, SCL, USART0 TX, TX LED and XDIR
    PORTA.DIRSET = PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // Set PA2, PA3, PA4, PA7 as output (RX LED, I2C SDA, SCL, USART0 TX, TX LED, XDIR)
     7f0:	e0 e0       	ldi	r30, 0x00	; 0
     7f2:	f4 e0       	ldi	r31, 0x04	; 4
     7f4:	8c ed       	ldi	r24, 0xDC	; 220
     7f6:	81 83       	std	Z+1, r24	; 0x01
    PORTA.DIRCLR = PIN1_bm | PIN5_bm; // Set  PA1 as Joystick button,  PA5 as input (USART0 RX)
     7f8:	82 e2       	ldi	r24, 0x22	; 34
     7fa:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA1 (Joystick button)
     7fc:	88 e0       	ldi	r24, 0x08	; 8
     7fe:	81 8b       	std	Z+17, r24	; 0x11
    PORTA.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA4 (I2C SCL)
     800:	84 8b       	std	Z+20, r24	; 0x14
    PORTA.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA5 (USART0 RX)
     802:	85 8b       	std	Z+21, r24	; 0x15

    // Configure ADC pins for Joystick x and y axis
    PORTC.PIN1CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC1 (X axis)
     804:	e0 e4       	ldi	r30, 0x40	; 64
     806:	f4 e0       	ldi	r31, 0x04	; 4
     808:	91 89       	ldd	r25, Z+17	; 0x11
     80a:	98 7f       	andi	r25, 0xF8	; 248
     80c:	91 8b       	std	Z+17, r25	; 0x11
    PORTC.PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC1
     80e:	91 89       	ldd	r25, Z+17	; 0x11
     810:	94 60       	ori	r25, 0x04	; 4
     812:	91 8b       	std	Z+17, r25	; 0x11
    //PORTC.PIN1CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC1

    PORTC.PIN2CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC2 (Y axis)
     814:	92 89       	ldd	r25, Z+18	; 0x12
     816:	98 7f       	andi	r25, 0xF8	; 248
     818:	92 8b       	std	Z+18, r25	; 0x12
    PORTC.PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC2
     81a:	92 89       	ldd	r25, Z+18	; 0x12
     81c:	94 60       	ori	r25, 0x04	; 4
     81e:	92 8b       	std	Z+18, r25	; 0x12
    //PORTC.PIN2CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC2

	PORTC.DIRSET = PIN0_bm; //Set PC0 as RX LED
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	91 83       	std	Z+1, r25	; 0x01

    // Configure Port D (PD) for USART1 TX and RX
    PORTD.DIRSET = PIN2_bm | PIN3_bm | PIN5_bm; //Set PD2 as linear motor disable pin, PD3 as PWM, PD5 as direction
     824:	9c e2       	ldi	r25, 0x2C	; 44
     826:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f0461>
	//PORTD.DIRCLR = PIN4_bm; //Linear motor driver TLE9201SG error flag pin

	PORTF.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm; //Set PF1 as enable, PF2 as pulse, PIN3 as direction signals output for HBS86 driver
     82a:	e0 ea       	ldi	r30, 0xA0	; 160
     82c:	f4 e0       	ldi	r31, 0x04	; 4
     82e:	9e e0       	ldi	r25, 0x0E	; 14
     830:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRCLR = PIN4_bm | PIN5_bm; //Set PF4 as alarm and PF5 as Pend signals inputs from HBS86 driver
     832:	90 e3       	ldi	r25, 0x30	; 48
     834:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PF4
     836:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PF5
     838:	85 8b       	std	Z+21, r24	; 0x15
     83a:	08 95       	ret

0000083c <I2C_init>:
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal to release the bus
    return data;
}
     83c:	e0 e0       	ldi	r30, 0x00	; 0
     83e:	f9 e0       	ldi	r31, 0x09	; 9
     840:	82 e0       	ldi	r24, 0x02	; 2
     842:	80 83       	st	Z, r24
     844:	85 e0       	ldi	r24, 0x05	; 5
     846:	86 83       	std	Z+6, r24	; 0x06
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	83 83       	std	Z+3, r24	; 0x03
     84c:	85 83       	std	Z+5, r24	; 0x05
     84e:	08 95       	ret

00000850 <TransmitAdd>:
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	88 0f       	add	r24, r24
     854:	99 1f       	adc	r25, r25
     856:	86 2b       	or	r24, r22
     858:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7f0907>
     85c:	48 e8       	ldi	r20, 0x88	; 136
     85e:	53 e1       	ldi	r21, 0x13	; 19
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	09 c0       	rjmp	.+18     	; 0x878 <TransmitAdd+0x28>
     866:	41 50       	subi	r20, 0x01	; 1
     868:	51 09       	sbc	r21, r1
     86a:	61 09       	sbc	r22, r1
     86c:	71 09       	sbc	r23, r1
     86e:	21 f4       	brne	.+8      	; 0x878 <TransmitAdd+0x28>
     870:	83 e0       	ldi	r24, 0x03	; 3
     872:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     876:	05 c0       	rjmp	.+10     	; 0x882 <TransmitAdd+0x32>
     878:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     87c:	80 7c       	andi	r24, 0xC0	; 192
     87e:	99 f3       	breq	.-26     	; 0x866 <TransmitAdd+0x16>
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     886:	94 fd       	sbrc	r25, 4
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     88e:	9c 70       	andi	r25, 0x0C	; 12
     890:	09 f0       	breq	.+2      	; 0x894 <TransmitAdd+0x44>
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	88 23       	and	r24, r24
     896:	19 f0       	breq	.+6      	; 0x89e <TransmitAdd+0x4e>
     898:	93 e0       	ldi	r25, 0x03	; 3
     89a:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     89e:	80 93 d4 64 	sts	0x64D4, r24	; 0x8064d4 <I2C>
     8a2:	08 95       	ret

000008a4 <TransmitByte>:
     8a4:	28 2f       	mov	r18, r24
     8a6:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     8aa:	94 fd       	sbrc	r25, 4
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <TransmitByte+0xe>
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <TransmitByte+0x10>
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     8b8:	9c 70       	andi	r25, 0x0C	; 12
     8ba:	09 f0       	breq	.+2      	; 0x8be <TransmitByte+0x1a>
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	88 23       	and	r24, r24
     8c0:	19 f0       	breq	.+6      	; 0x8c8 <TransmitByte+0x24>
     8c2:	93 e0       	ldi	r25, 0x03	; 3
     8c4:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     8c8:	81 11       	cpse	r24, r1
     8ca:	14 c0       	rjmp	.+40     	; 0x8f4 <TransmitByte+0x50>
     8cc:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <__TEXT_REGION_LENGTH__+0x7f0908>
     8d0:	48 e8       	ldi	r20, 0x88	; 136
     8d2:	53 e1       	ldi	r21, 0x13	; 19
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	09 c0       	rjmp	.+18     	; 0x8ec <TransmitByte+0x48>
     8da:	41 50       	subi	r20, 0x01	; 1
     8dc:	51 09       	sbc	r21, r1
     8de:	61 09       	sbc	r22, r1
     8e0:	71 09       	sbc	r23, r1
     8e2:	21 f4       	brne	.+8      	; 0x8ec <TransmitByte+0x48>
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <TransmitByte+0x50>
     8ec:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     8f0:	96 ff       	sbrs	r25, 6
     8f2:	f3 cf       	rjmp	.-26     	; 0x8da <TransmitByte+0x36>
     8f4:	80 93 d4 64 	sts	0x64D4, r24	; 0x8064d4 <I2C>
     8f8:	08 95       	ret

000008fa <WriteToReg>:
 * @param reg Register address to write to.
 * @param data Data to write to the register.
 * 
 * This function writes the data to a specific register of an I2C device.
 */
void WriteToReg(uint8_t addr, uint8_t reg, uint8_t data) {
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	c6 2f       	mov	r28, r22
     900:	d4 2f       	mov	r29, r20
    if (!TransmitAdd(addr, WRITE)) { // Transmit address for write
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	0e 94 28 04 	call	0x850	; 0x850 <TransmitAdd>
     908:	81 11       	cpse	r24, r1
     90a:	08 c0       	rjmp	.+16     	; 0x91c <WriteToReg+0x22>
        if (!TransmitByte(reg)) { // Write register address
     90c:	8c 2f       	mov	r24, r28
     90e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <TransmitByte>
     912:	81 11       	cpse	r24, r1
     914:	03 c0       	rjmp	.+6      	; 0x91c <WriteToReg+0x22>
            TransmitByte(data); // Write the data with STOP
     916:	8d 2f       	mov	r24, r29
     918:	0e 94 52 04 	call	0x8a4	; 0x8a4 <TransmitByte>
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal
     91c:	e0 e0       	ldi	r30, 0x00	; 0
     91e:	f9 e0       	ldi	r31, 0x09	; 9
     920:	84 81       	ldd	r24, Z+4	; 0x04
     922:	83 60       	ori	r24, 0x03	; 3
     924:	84 83       	std	Z+4, r24	; 0x04
}
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <ReadButton>:
 */ 
#include "Settings.h"
#include "JoystickVar.h"

uint8_t ReadButton(){
	return !(PORTA.IN & PIN1_bm);
     92c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
     930:	86 95       	lsr	r24
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	89 27       	eor	r24, r25
}
     936:	81 70       	andi	r24, 0x01	; 1
     938:	08 95       	ret

0000093a <ReadJoystickValues>:


void ReadJoystickValues(){
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
	ADC0_SetupJoystick(Joystick_X_axis_CH);
     942:	8e e1       	ldi	r24, 0x1E	; 30
     944:	0e 94 87 01 	call	0x30e	; 0x30e <ADC0_SetupJoystick>
	Joystick.X_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps; // 5 steps total: -2,-1,0,1,2 (4096/1000 = 4,096)
     948:	0e 94 8d 01 	call	0x31a	; 0x31a <ADC0_read>
     94c:	98 50       	subi	r25, 0x08	; 8
     94e:	04 ef       	ldi	r16, 0xF4	; 244
     950:	11 e0       	ldi	r17, 0x01	; 1
     952:	b8 01       	movw	r22, r16
     954:	0e 94 c6 0a 	call	0x158c	; 0x158c <__divmodhi4>
     958:	c5 ed       	ldi	r28, 0xD5	; 213
     95a:	d4 e6       	ldi	r29, 0x64	; 100
     95c:	68 83       	st	Y, r22
     95e:	79 83       	std	Y+1, r23	; 0x01
	ADC0_SetupJoystick(Joystick_Y_axis_CH);
     960:	8d e1       	ldi	r24, 0x1D	; 29
     962:	0e 94 87 01 	call	0x30e	; 0x30e <ADC0_SetupJoystick>
	Joystick.Y_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps;
     966:	0e 94 8d 01 	call	0x31a	; 0x31a <ADC0_read>
     96a:	98 50       	subi	r25, 0x08	; 8
     96c:	b8 01       	movw	r22, r16
     96e:	0e 94 c6 0a 	call	0x158c	; 0x158c <__divmodhi4>
     972:	6a 83       	std	Y+2, r22	; 0x02
     974:	7b 83       	std	Y+3, r23	; 0x03
	Joystick.Button = ReadButton();
     976:	0e 94 96 04 	call	0x92c	; 0x92c <ReadButton>
     97a:	8c 83       	std	Y+4, r24	; 0x04
}
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <LinearMotor_enable>:
 */ 
#include "Settings.h"
#include "LinearMotorVar.h"

void LinearMotor_enable(){ //turn on TLE9201SG
	if(LinearMotor.alreadyEnabled == false){
     986:	80 91 dd 64 	lds	r24, 0x64DD	; 0x8064dd <LinearMotor+0x3>
     98a:	81 11       	cpse	r24, r1
     98c:	0e c0       	rjmp	.+28     	; 0x9aa <LinearMotor_enable+0x24>
		PORTD.OUTCLR = PIN2_bm;  // DIS=0
     98e:	84 e0       	ldi	r24, 0x04	; 4
     990:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     994:	8f e5       	ldi	r24, 0x5F	; 95
     996:	9a ee       	ldi	r25, 0xEA	; 234
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <LinearMotor_enable+0x12>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <LinearMotor_enable+0x18>
     99e:	00 00       	nop
		_delay_ms(10);
		LinearMotor.alreadyEnabled = true;
     9a0:	ea ed       	ldi	r30, 0xDA	; 218
     9a2:	f4 e6       	ldi	r31, 0x64	; 100
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	83 83       	std	Z+3, r24	; 0x03
		LinearMotor.alreadyDisabled = false;
     9a8:	14 82       	std	Z+4, r1	; 0x04
     9aa:	08 95       	ret

000009ac <LinearMotor_disable>:
	}
}

void LinearMotor_disable(){ //turn off TLE9201SG
	if(LinearMotor.alreadyDisabled == false){
     9ac:	80 91 de 64 	lds	r24, 0x64DE	; 0x8064de <LinearMotor+0x4>
     9b0:	81 11       	cpse	r24, r1
     9b2:	0e c0       	rjmp	.+28     	; 0x9d0 <LinearMotor_disable+0x24>
		PORTD.OUTSET = PIN2_bm;  // DIS=1
     9b4:	84 e0       	ldi	r24, 0x04	; 4
     9b6:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     9ba:	8f e5       	ldi	r24, 0x5F	; 95
     9bc:	9a ee       	ldi	r25, 0xEA	; 234
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	f1 f7       	brne	.-4      	; 0x9be <LinearMotor_disable+0x12>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <LinearMotor_disable+0x18>
     9c4:	00 00       	nop
		_delay_ms(10);
		LinearMotor.alreadyDisabled = true;
     9c6:	ea ed       	ldi	r30, 0xDA	; 218
     9c8:	f4 e6       	ldi	r31, 0x64	; 100
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	84 83       	std	Z+4, r24	; 0x04
		LinearMotor.alreadyEnabled = false;
     9ce:	13 82       	std	Z+3, r1	; 0x03
     9d0:	08 95       	ret

000009d2 <LinearMotor_start>:
	}
}

void LinearMotor_start(){ //starting pwm signal generation
	if(LinearMotor.alreadyStarted == false){		
     9d2:	80 91 db 64 	lds	r24, 0x64DB	; 0x8064db <LinearMotor+0x1>
     9d6:	81 11       	cpse	r24, r1
     9d8:	0d c0       	rjmp	.+26     	; 0x9f4 <LinearMotor_start+0x22>
		TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP0EN_bm; //connecting TCA to PD3
     9da:	e0 e0       	ldi	r30, 0x00	; 0
     9dc:	fa e0       	ldi	r31, 0x0A	; 10
     9de:	81 81       	ldd	r24, Z+1	; 0x01
     9e0:	80 61       	ori	r24, 0x10	; 16
     9e2:	81 83       	std	Z+1, r24	; 0x01
		TCA0.SPLIT.CTRLA |= TCA_SPLIT_ENABLE_bm; //turn on TCA back
     9e4:	80 81       	ld	r24, Z
     9e6:	81 60       	ori	r24, 0x01	; 1
     9e8:	80 83       	st	Z, r24
		LinearMotor.alreadyStarted = true;
     9ea:	ea ed       	ldi	r30, 0xDA	; 218
     9ec:	f4 e6       	ldi	r31, 0x64	; 100
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	81 83       	std	Z+1, r24	; 0x01
		LinearMotor.alreadyStoped = false;
     9f2:	12 82       	std	Z+2, r1	; 0x02
     9f4:	08 95       	ret

000009f6 <LinearMotor_stop>:
	}

}

void LinearMotor_stop(){
	if(LinearMotor.alreadyStoped == false){ //stoping pwm signal generation
     9f6:	80 91 dc 64 	lds	r24, 0x64DC	; 0x8064dc <LinearMotor+0x2>
     9fa:	81 11       	cpse	r24, r1
     9fc:	19 c0       	rjmp	.+50     	; 0xa30 <LinearMotor_stop+0x3a>
		TCA0.SPLIT.CTRLB &= ~(TCA_SPLIT_HCMP0EN_bm); //disconecting TCA from PD3
     9fe:	e0 e0       	ldi	r30, 0x00	; 0
     a00:	fa e0       	ldi	r31, 0x0A	; 10
     a02:	81 81       	ldd	r24, Z+1	; 0x01
     a04:	8f 7e       	andi	r24, 0xEF	; 239
     a06:	81 83       	std	Z+1, r24	; 0x01
		TCA0.SPLIT.CTRLA &= ~TCA_SPLIT_ENABLE_bm;  // turn off TCA
     a08:	80 81       	ld	r24, Z
     a0a:	8e 7f       	andi	r24, 0xFE	; 254
     a0c:	80 83       	st	Z, r24
		PORTD.OUTCLR = PIN3_bm; //ensure PWM low level
     a0e:	88 e0       	ldi	r24, 0x08	; 8
     a10:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
     a14:	2f ef       	ldi	r18, 0xFF	; 255
     a16:	8e e9       	ldi	r24, 0x9E	; 158
     a18:	94 e2       	ldi	r25, 0x24	; 36
     a1a:	21 50       	subi	r18, 0x01	; 1
     a1c:	80 40       	sbci	r24, 0x00	; 0
     a1e:	90 40       	sbci	r25, 0x00	; 0
     a20:	e1 f7       	brne	.-8      	; 0xa1a <LinearMotor_stop+0x24>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <LinearMotor_stop+0x2e>
     a24:	00 00       	nop
		_delay_ms(500); //preventing from error flag- 500mS of free spinning
		LinearMotor.alreadyStoped = true;
     a26:	ea ed       	ldi	r30, 0xDA	; 218
     a28:	f4 e6       	ldi	r31, 0x64	; 100
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	82 83       	std	Z+2, r24	; 0x02
		LinearMotor.alreadyStarted = false;
     a2e:	11 82       	std	Z+1, r1	; 0x01
     a30:	08 95       	ret

00000a32 <LinearMotor_set_direction>:
	}

}

void LinearMotor_set_direction(bool dir)
{
     a32:	cf 93       	push	r28
    if (dir != LinearMotor.lastDirection)  // if direction change (single time per cycle)
     a34:	90 91 da 64 	lds	r25, 0x64DA	; 0x8064da <LinearMotor>
     a38:	98 17       	cp	r25, r24
     a3a:	81 f0       	breq	.+32     	; 0xa5c <LinearMotor_set_direction+0x2a>
     a3c:	c8 2f       	mov	r28, r24
    {
		LinearMotor_stop();
     a3e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <LinearMotor_stop>
		if(dir)
     a42:	cc 23       	and	r28, r28
     a44:	21 f0       	breq	.+8      	; 0xa4e <LinearMotor_set_direction+0x1c>
            PORTD.OUTSET = PIN5_bm;   // UP
     a46:	80 e2       	ldi	r24, 0x20	; 32
     a48:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     a4c:	03 c0       	rjmp	.+6      	; 0xa54 <LinearMotor_set_direction+0x22>
		else
            PORTD.OUTCLR = PIN5_bm;   // DOWN
     a4e:	80 e2       	ldi	r24, 0x20	; 32
     a50:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
		LinearMotor_start();
     a54:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LinearMotor_start>
        LinearMotor.lastDirection = dir;
     a58:	c0 93 da 64 	sts	0x64DA, r28	; 0x8064da <LinearMotor>
    }
}
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <LinearMotor_init>:

void LinearMotor_init(){
	TCA0_init_linear_PWM(20000, 50);
     a60:	62 e3       	ldi	r22, 0x32	; 50
     a62:	80 e2       	ldi	r24, 0x20	; 32
     a64:	9e e4       	ldi	r25, 0x4E	; 78
     a66:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <TCA0_init_linear_PWM>

	PORTD.OUTCLR = PIN3_bm; //set PWM signal low
     a6a:	e0 e6       	ldi	r30, 0x60	; 96
     a6c:	f4 e0       	ldi	r31, 0x04	; 4
     a6e:	88 e0       	ldi	r24, 0x08	; 8
     a70:	86 83       	std	Z+6, r24	; 0x06
	PORTD.OUTSET = PIN2_bm; //set output disabled for TLE9201SG
     a72:	84 e0       	ldi	r24, 0x04	; 4
     a74:	85 83       	std	Z+5, r24	; 0x05
     a76:	08 95       	ret

00000a78 <main>:

#include "Settings.h"

int main(void)
{
    CLOCK_XOSCHF_clock_init();
     a78:	0e 94 a1 01 	call	0x342	; 0x342 <CLOCK_XOSCHF_clock_init>
    GPIO_init();
     a7c:	0e 94 ef 03 	call	0x7de	; 0x7de <GPIO_init>
	LinearMotor_init();
     a80:	0e 94 30 05 	call	0xa60	; 0xa60 <LinearMotor_init>
	Stepper_init();
     a84:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <Stepper_init>
    I2C_init();
     a88:	0e 94 1e 04 	call	0x83c	; 0x83c <I2C_init>
    ADC0_init();
     a8c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ADC0_init>
    USART0_init();
     a90:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <USART0_init>
    USART1_init();
     a94:	0e 94 0c 09 	call	0x1218	; 0x1218 <USART1_init>
    screen_init();
     a98:	0e 94 81 06 	call	0xd02	; 0xd02 <screen_init>
    screen_clear();
     a9c:	0e 94 c8 06 	call	0xd90	; 0xd90 <screen_clear>

	
    while (1) 
    {
		RS485Receiver(); //RS485 communication
     aa0:	0e 94 29 06 	call	0xc52	; 0xc52 <RS485Receiver>
		FOReceiver(); // Received Fiber optic data
     aa4:	0e 94 a8 03 	call	0x750	; 0x750 <FOReceiver>
		ReadJoystickValues(); //Joystick read
     aa8:	0e 94 9d 04 	call	0x93a	; 0x93a <ReadJoystickValues>
		work();
     aac:	0e 94 4c 01 	call	0x298	; 0x298 <work>
		screen_write_formatted_text("SE:%3d TE:%3d", 0, ALIGN_LEFT, SensorData.Elevation, Target.elevation);
     ab0:	00 e0       	ldi	r16, 0x00	; 0
     ab2:	10 e6       	ldi	r17, 0x60	; 96
     ab4:	f8 01       	movw	r30, r16
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	8f 93       	push	r24
     aba:	80 81       	ld	r24, Z
     abc:	8f 93       	push	r24
     abe:	c4 ec       	ldi	r28, 0xC4	; 196
     ac0:	d4 e6       	ldi	r29, 0x64	; 100
     ac2:	89 81       	ldd	r24, Y+1	; 0x01
     ac4:	8f 93       	push	r24
     ac6:	88 81       	ld	r24, Y
     ac8:	8f 93       	push	r24
     aca:	1f 92       	push	r1
     acc:	1f 92       	push	r1
     ace:	8c e7       	ldi	r24, 0x7C	; 124
     ad0:	94 e6       	ldi	r25, 0x64	; 100
     ad2:	9f 93       	push	r25
     ad4:	8f 93       	push	r24
     ad6:	0e 94 69 07 	call	0xed2	; 0xed2 <screen_write_formatted_text>
		screen_write_formatted_text("SA:%3d TA:%3d", 1, ALIGN_LEFT, SensorData.Azimuth, Target.azimuth);
     ada:	f8 01       	movw	r30, r16
     adc:	83 81       	ldd	r24, Z+3	; 0x03
     ade:	8f 93       	push	r24
     ae0:	82 81       	ldd	r24, Z+2	; 0x02
     ae2:	8f 93       	push	r24
     ae4:	8d 81       	ldd	r24, Y+5	; 0x05
     ae6:	8f 93       	push	r24
     ae8:	8c 81       	ldd	r24, Y+4	; 0x04
     aea:	8f 93       	push	r24
     aec:	1f 92       	push	r1
     aee:	11 e0       	ldi	r17, 0x01	; 1
     af0:	1f 93       	push	r17
     af2:	8a e8       	ldi	r24, 0x8A	; 138
     af4:	94 e6       	ldi	r25, 0x64	; 100
     af6:	9f 93       	push	r25
     af8:	8f 93       	push	r24
     afa:	0e 94 69 07 	call	0xed2	; 0xed2 <screen_write_formatted_text>
		screen_write_formatted_text("SCU:%4d SCI:%4d", 2, ALIGN_LEFT, SensorData.PVU, SensorData.PVI);
     afe:	89 85       	ldd	r24, Y+9	; 0x09
     b00:	8f 93       	push	r24
     b02:	88 85       	ldd	r24, Y+8	; 0x08
     b04:	8f 93       	push	r24
     b06:	8f 81       	ldd	r24, Y+7	; 0x07
     b08:	8f 93       	push	r24
     b0a:	8e 81       	ldd	r24, Y+6	; 0x06
     b0c:	8f 93       	push	r24
     b0e:	1f 92       	push	r1
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	8f 93       	push	r24
     b14:	88 e9       	ldi	r24, 0x98	; 152
     b16:	94 e6       	ldi	r25, 0x64	; 100
     b18:	9f 93       	push	r25
     b1a:	8f 93       	push	r24
     b1c:	0e 94 69 07 	call	0xed2	; 0xed2 <screen_write_formatted_text>
		screen_write_formatted_text("%03d|%03d", 4, ALIGN_CENTER, WSData.azimuth, WSData.elevation);
     b20:	c3 ee       	ldi	r28, 0xE3	; 227
     b22:	d4 e6       	ldi	r29, 0x64	; 100
     b24:	8b 81       	ldd	r24, Y+3	; 0x03
     b26:	8f 93       	push	r24
     b28:	8a 81       	ldd	r24, Y+2	; 0x02
     b2a:	8f 93       	push	r24
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	8f 93       	push	r24
     b30:	88 81       	ld	r24, Y
     b32:	8f 93       	push	r24
     b34:	1f 93       	push	r17
     b36:	84 e0       	ldi	r24, 0x04	; 4
     b38:	8f 93       	push	r24
     b3a:	88 ea       	ldi	r24, 0xA8	; 168
     b3c:	94 e6       	ldi	r25, 0x64	; 100
     b3e:	9f 93       	push	r25
     b40:	8f 93       	push	r24
     b42:	0e 94 69 07 	call	0xed2	; 0xed2 <screen_write_formatted_text>
		screen_write_formatted_text("%03d|%d|%d|%d", 5, ALIGN_CENTER, WSData.topelevation, WSData.windspeed, WSData.winddirection, WSData.lightlevel);
     b46:	9f 81       	ldd	r25, Y+7	; 0x07
     b48:	8e 81       	ldd	r24, Y+6	; 0x06
     b4a:	2d b7       	in	r18, 0x3d	; 61
     b4c:	3e b7       	in	r19, 0x3e	; 62
     b4e:	20 5e       	subi	r18, 0xE0	; 224
     b50:	3f 4f       	sbci	r19, 0xFF	; 255
     b52:	2d bf       	out	0x3d, r18	; 61
     b54:	3e bf       	out	0x3e, r19	; 62
     b56:	29 85       	ldd	r18, Y+9	; 0x09
     b58:	2f 93       	push	r18
     b5a:	28 85       	ldd	r18, Y+8	; 0x08
     b5c:	2f 93       	push	r18
     b5e:	1f 92       	push	r1
     b60:	9f 93       	push	r25
     b62:	1f 92       	push	r1
     b64:	8f 93       	push	r24
     b66:	8d 81       	ldd	r24, Y+5	; 0x05
     b68:	8f 93       	push	r24
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	8f 93       	push	r24
     b6e:	1f 93       	push	r17
     b70:	85 e0       	ldi	r24, 0x05	; 5
     b72:	8f 93       	push	r24
     b74:	82 eb       	ldi	r24, 0xB2	; 178
     b76:	94 e6       	ldi	r25, 0x64	; 100
     b78:	9f 93       	push	r25
     b7a:	8f 93       	push	r24
     b7c:	0e 94 69 07 	call	0xed2	; 0xed2 <screen_write_formatted_text>
     b80:	3f ef       	ldi	r19, 0xFF	; 255
     b82:	82 e5       	ldi	r24, 0x52	; 82
     b84:	97 e0       	ldi	r25, 0x07	; 7
     b86:	31 50       	subi	r19, 0x01	; 1
     b88:	80 40       	sbci	r24, 0x00	; 0
     b8a:	90 40       	sbci	r25, 0x00	; 0
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <main+0x10e>
     b8e:	00 c0       	rjmp	.+0      	; 0xb90 <main+0x118>
     b90:	00 00       	nop
     b92:	ed b7       	in	r30, 0x3d	; 61
     b94:	fe b7       	in	r31, 0x3e	; 62
     b96:	3c 96       	adiw	r30, 0x0c	; 12
     b98:	ed bf       	out	0x3d, r30	; 61
     b9a:	fe bf       	out	0x3e, r31	; 62
     b9c:	81 cf       	rjmp	.-254    	; 0xaa0 <main+0x28>

00000b9e <RS485_Led>:
 */ 
#include "Settings.h"

void RS485_Led(RS485_LED_t LED){

    switch (LED) {
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	51 f0       	breq	.+20     	; 0xbb6 <RS485_Led+0x18>
     ba2:	28 f0       	brcs	.+10     	; 0xbae <RS485_Led+0x10>
     ba4:	82 30       	cpi	r24, 0x02	; 2
     ba6:	59 f0       	breq	.+22     	; 0xbbe <RS485_Led+0x20>
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	69 f0       	breq	.+26     	; 0xbc6 <RS485_Led+0x28>
     bac:	08 95       	ret
	    case RX_LED_ON:
			PORTC.OUTSET = PIN0_bm;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f0445>
		break;
     bb4:	08 95       	ret
	    case RX_LED_OFF:
			PORTC.OUTCLR = PIN0_bm;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f0446>
		break;
     bbc:	08 95       	ret
	    case TX_LED_ON:
			PORTA.OUTSET = PIN6_bm;
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f0405>
		break;
     bc4:	08 95       	ret
	    case TX_LED_OFF:
			PORTA.OUTCLR = PIN6_bm;
     bc6:	80 e4       	ldi	r24, 0x40	; 64
     bc8:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f0406>
     bcc:	08 95       	ret

00000bce <RS485DataSplitter>:
 *  Author: Saulius
 */ 
#include "Settings.h"
#include "RS485USARTVar.h"

void RS485DataSplitter(char *command) {
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	2c 97       	sbiw	r28, 0x0c	; 12
     bde:	cd bf       	out	0x3d, r28	; 61
     be0:	de bf       	out	0x3e, r29	; 62
	uint16_t *fields[] = {
     be2:	2c e0       	ldi	r18, 0x0C	; 12
     be4:	e9 e4       	ldi	r30, 0x49	; 73
     be6:	f3 e6       	ldi	r31, 0x63	; 99
     be8:	de 01       	movw	r26, r28
     bea:	11 96       	adiw	r26, 0x01	; 1
     bec:	01 90       	ld	r0, Z+
     bee:	0d 92       	st	X+, r0
     bf0:	2a 95       	dec	r18
     bf2:	e1 f7       	brne	.-8      	; 0xbec <RS485DataSplitter+0x1e>
		(uint16_t*)&WSData.windspeed,
		(uint16_t*)&WSData.winddirection,
		&WSData.lightlevel
	};

	char *token = strtok(command, "|");
     bf4:	60 ec       	ldi	r22, 0xC0	; 192
     bf6:	74 e6       	ldi	r23, 0x64	; 100
     bf8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <strtok>
	for (uint8_t i = 0; token != NULL && i < 6; i++) {
     bfc:	10 e0       	ldi	r17, 0x00	; 0
     bfe:	1c c0       	rjmp	.+56     	; 0xc38 <RS485DataSplitter+0x6a>
		*fields[i] = (uint16_t)strtol(token, NULL, 10);
     c00:	e1 2f       	mov	r30, r17
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	ee 0f       	add	r30, r30
     c06:	ff 1f       	adc	r31, r31
     c08:	21 e0       	ldi	r18, 0x01	; 1
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	2c 0f       	add	r18, r28
     c0e:	3d 1f       	adc	r19, r29
     c10:	e2 0f       	add	r30, r18
     c12:	f3 1f       	adc	r31, r19
     c14:	e0 80       	ld	r14, Z
     c16:	f1 80       	ldd	r15, Z+1	; 0x01
     c18:	4a e0       	ldi	r20, 0x0A	; 10
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	0e 94 81 0b 	call	0x1702	; 0x1702 <strtol>
     c24:	f7 01       	movw	r30, r14
     c26:	60 83       	st	Z, r22
     c28:	71 83       	std	Z+1, r23	; 0x01
		token = strtok(NULL, "|");
     c2a:	60 ec       	ldi	r22, 0xC0	; 192
     c2c:	74 e6       	ldi	r23, 0x64	; 100
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 a0 0c 	call	0x1940	; 0x1940 <strtok>
		(uint16_t*)&WSData.winddirection,
		&WSData.lightlevel
	};

	char *token = strtok(command, "|");
	for (uint8_t i = 0; token != NULL && i < 6; i++) {
     c36:	1f 5f       	subi	r17, 0xFF	; 255
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	11 f0       	breq	.+4      	; 0xc40 <RS485DataSplitter+0x72>
     c3c:	16 30       	cpi	r17, 0x06	; 6
     c3e:	00 f3       	brcs	.-64     	; 0xc00 <RS485DataSplitter+0x32>
		*fields[i] = (uint16_t)strtol(token, NULL, 10);
		token = strtok(NULL, "|");
	}

}
     c40:	2c 96       	adiw	r28, 0x0c	; 12
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	08 95       	ret

00000c52 <RS485Receiver>:

void RS485Receiver() {
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	6b 97       	sbiw	r28, 0x1b	; 27
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	de bf       	out	0x3e, r29	; 62
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
     c68:	fe 01       	movw	r30, r28
     c6a:	31 96       	adiw	r30, 0x01	; 1
     c6c:	8b e1       	ldi	r24, 0x1B	; 27
     c6e:	df 01       	movw	r26, r30
     c70:	1d 92       	st	X+, r1
     c72:	8a 95       	dec	r24
     c74:	e9 f7       	brne	.-6      	; 0xc70 <RS485Receiver+0x1e>
	uint8_t start = 0;
	uint16_t timeout = RS485_TIMEOUT_COUNTER;
     c76:	08 ee       	ldi	r16, 0xE8	; 232
     c78:	13 e0       	ldi	r17, 0x03	; 3
}

void RS485Receiver() {
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
	uint8_t start = 0;
     c7a:	e1 2c       	mov	r14, r1
	}

}

void RS485Receiver() {
	uint8_t index = 0;
     c7c:	f1 2c       	mov	r15, r1
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
	uint8_t start = 0;
	uint16_t timeout = RS485_TIMEOUT_COUNTER;

	while (1) {
		char c = USART0_readChar(); // Reading a character from USART	
     c7e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <USART0_readChar>
		if (--timeout == 0) { // Timeout condition
     c82:	01 50       	subi	r16, 0x01	; 1
     c84:	11 09       	sbc	r17, r1
     c86:	39 f1       	breq	.+78     	; 0xcd6 <RS485Receiver+0x84>
			break;
		}
		if (start) {
     c88:	ee 20       	and	r14, r14
     c8a:	e1 f0       	breq	.+56     	; 0xcc4 <RS485Receiver+0x72>
			if (c == '}') { // If received data end symbol
     c8c:	8d 37       	cpi	r24, 0x7D	; 125
     c8e:	79 f4       	brne	.+30     	; 0xcae <RS485Receiver+0x5c>
				RS485_Led(RX_LED_OFF);
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	0e 94 cf 05 	call	0xb9e	; 0xb9e <RS485_Led>
				start = 0;
				command[index] = '\0';
     c96:	e1 e0       	ldi	r30, 0x01	; 1
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	ec 0f       	add	r30, r28
     c9c:	fd 1f       	adc	r31, r29
     c9e:	ef 0d       	add	r30, r15
     ca0:	f1 1d       	adc	r31, r1
     ca2:	10 82       	st	Z, r1
				index = 0;
				RS485DataSplitter(command); // Execute the received command //comment when testing lines below
     ca4:	ce 01       	movw	r24, r28
     ca6:	01 96       	adiw	r24, 0x01	; 1
     ca8:	0e 94 e7 05 	call	0xbce	; 0xbce <RS485DataSplitter>
				break;
     cac:	14 c0       	rjmp	.+40     	; 0xcd6 <RS485Receiver+0x84>
				} else if (index < MESSAGE_LENGTH_RS485) {
     cae:	ba e1       	ldi	r27, 0x1A	; 26
     cb0:	bf 15       	cp	r27, r15
     cb2:	40 f0       	brcs	.+16     	; 0xcc4 <RS485Receiver+0x72>
				command[index++] = c; // Store received character in command array
     cb4:	e1 e0       	ldi	r30, 0x01	; 1
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	ec 0f       	add	r30, r28
     cba:	fd 1f       	adc	r31, r29
     cbc:	ef 0d       	add	r30, r15
     cbe:	f1 1d       	adc	r31, r1
     cc0:	80 83       	st	Z, r24
     cc2:	f3 94       	inc	r15
			}
		}
		if (c == '{') { // If received data start symbol
     cc4:	8b 37       	cpi	r24, 0x7B	; 123
     cc6:	d9 f6       	brne	.-74     	; 0xc7e <RS485Receiver+0x2c>
			start = 1;
			index = 0;
			RS485_Led(RX_LED_ON);
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	0e 94 cf 05 	call	0xb9e	; 0xb9e <RS485_Led>
				} else if (index < MESSAGE_LENGTH_RS485) {
				command[index++] = c; // Store received character in command array
			}
		}
		if (c == '{') { // If received data start symbol
			start = 1;
     cce:	ee 24       	eor	r14, r14
     cd0:	e3 94       	inc	r14
			index = 0;
     cd2:	f1 2c       	mov	r15, r1
     cd4:	d4 cf       	rjmp	.-88     	; 0xc7e <RS485Receiver+0x2c>
			RS485_Led(RX_LED_ON);
		}
	}
     cd6:	6b 96       	adiw	r28, 0x1b	; 27
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	08 95       	ret

00000cea <screen_command>:
    if (contrast > 0x3f) {
        contrast = 0x3f;  ///< Ensure contrast does not exceed maximum
    }
    screen_command(0x81);  ///< Send command to set contrast
    screen_command(contrast);  ///< Set the contrast value
}
     cea:	48 2f       	mov	r20, r24
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	8c e3       	ldi	r24, 0x3C	; 60
     cf0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <WriteToReg>
     cf4:	08 95       	ret

00000cf6 <screen_data>:
     cf6:	48 2f       	mov	r20, r24
     cf8:	60 e4       	ldi	r22, 0x40	; 64
     cfa:	8c e3       	ldi	r24, 0x3C	; 60
     cfc:	0e 94 7d 04 	call	0x8fa	; 0x8fa <WriteToReg>
     d00:	08 95       	ret

00000d02 <screen_init>:
     d02:	cf 93       	push	r28
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	8c e3       	ldi	r24, 0x3C	; 60
     d08:	0e 94 28 04 	call	0x850	; 0x850 <TransmitAdd>
     d0c:	c0 e0       	ldi	r28, 0x00	; 0
     d0e:	08 c0       	rjmp	.+16     	; 0xd20 <screen_init+0x1e>
     d10:	ec 2f       	mov	r30, r28
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	e7 5d       	subi	r30, 0xD7	; 215
     d16:	fc 49       	sbci	r31, 0x9C	; 156
     d18:	80 81       	ld	r24, Z
     d1a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <TransmitByte>
     d1e:	cf 5f       	subi	r28, 0xFF	; 255
     d20:	ca 31       	cpi	r28, 0x1A	; 26
     d22:	b0 f3       	brcs	.-20     	; 0xd10 <screen_init+0xe>
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <screen_draw_char>:
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	d8 2f       	mov	r29, r24
     d30:	80 ee       	ldi	r24, 0xE0	; 224
     d32:	8d 0f       	add	r24, r29
     d34:	80 36       	cpi	r24, 0x60	; 96
     d36:	28 f0       	brcs	.+10     	; 0xd42 <screen_draw_char+0x1a>
     d38:	d0 3b       	cpi	r29, 0xB0	; 176
     d3a:	19 f0       	breq	.+6      	; 0xd42 <screen_draw_char+0x1a>
     d3c:	d0 3c       	cpi	r29, 0xC0	; 192
     d3e:	08 f4       	brcc	.+2      	; 0xd42 <screen_draw_char+0x1a>
     d40:	d0 e2       	ldi	r29, 0x20	; 32
     d42:	d0 3b       	cpi	r29, 0xB0	; 176
     d44:	21 f0       	breq	.+8      	; 0xd4e <screen_draw_char+0x26>
     d46:	d0 3c       	cpi	r29, 0xC0	; 192
     d48:	20 f4       	brcc	.+8      	; 0xd52 <screen_draw_char+0x2a>
     d4a:	10 e2       	ldi	r17, 0x20	; 32
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <screen_draw_char+0x2c>
     d4e:	10 e5       	ldi	r17, 0x50	; 80
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <screen_draw_char+0x2c>
     d52:	1f e5       	ldi	r17, 0x5F	; 95
     d54:	c0 e0       	ldi	r28, 0x00	; 0
     d56:	13 c0       	rjmp	.+38     	; 0xd7e <screen_draw_char+0x56>
     d58:	8d 2f       	mov	r24, r29
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	81 1b       	sub	r24, r17
     d5e:	91 09       	sbc	r25, r1
     d60:	fc 01       	movw	r30, r24
     d62:	ee 0f       	add	r30, r30
     d64:	ff 1f       	adc	r31, r31
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	e8 0f       	add	r30, r24
     d6c:	f9 1f       	adc	r31, r25
     d6e:	ec 5f       	subi	r30, 0xFC	; 252
     d70:	ff 49       	sbci	r31, 0x9F	; 159
     d72:	ec 0f       	add	r30, r28
     d74:	f1 1d       	adc	r31, r1
     d76:	80 81       	ld	r24, Z
     d78:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <screen_data>
     d7c:	cf 5f       	subi	r28, 0xFF	; 255
     d7e:	c5 30       	cpi	r28, 0x05	; 5
     d80:	58 f3       	brcs	.-42     	; 0xd58 <screen_draw_char+0x30>
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <screen_data>
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	08 95       	ret

00000d90 <screen_clear>:
 * @brief Clears the ST7567S display.
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
    for (int page = 0; page < 8; page++) {
     d98:	00 e0       	ldi	r16, 0x00	; 0
     d9a:	10 e0       	ldi	r17, 0x00	; 0
     d9c:	16 c0       	rjmp	.+44     	; 0xdca <screen_clear+0x3a>
        screen_command(0xB0 + page);  ///< Select page
     d9e:	80 eb       	ldi	r24, 0xB0	; 176
     da0:	80 0f       	add	r24, r16
     da2:	0e 94 75 06 	call	0xcea	; 0xcea <screen_command>
        screen_command(0x00);  ///< Set column address
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	0e 94 75 06 	call	0xcea	; 0xcea <screen_command>
        screen_command(0x10);  ///< Set column address
     dac:	80 e1       	ldi	r24, 0x10	; 16
     dae:	0e 94 75 06 	call	0xcea	; 0xcea <screen_command>

        for (int column = 0; column < 128; column++) {
     db2:	c0 e0       	ldi	r28, 0x00	; 0
     db4:	d0 e0       	ldi	r29, 0x00	; 0
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <screen_clear+0x30>
            screen_data(0x00);  ///< Clear each column
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <screen_data>
    for (int page = 0; page < 8; page++) {
        screen_command(0xB0 + page);  ///< Select page
        screen_command(0x00);  ///< Set column address
        screen_command(0x10);  ///< Set column address

        for (int column = 0; column < 128; column++) {
     dbe:	21 96       	adiw	r28, 0x01	; 1
     dc0:	c0 38       	cpi	r28, 0x80	; 128
     dc2:	d1 05       	cpc	r29, r1
     dc4:	cc f3       	brlt	.-14     	; 0xdb8 <screen_clear+0x28>
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
    for (int page = 0; page < 8; page++) {
     dc6:	0f 5f       	subi	r16, 0xFF	; 255
     dc8:	1f 4f       	sbci	r17, 0xFF	; 255
     dca:	08 30       	cpi	r16, 0x08	; 8
     dcc:	11 05       	cpc	r17, r1
     dce:	3c f3       	brlt	.-50     	; 0xd9e <screen_clear+0xe>
        for (int column = 0; column < 128; column++) {
            screen_data(0x00);  ///< Clear each column
        }
    }
    //screen_contrast(SSD1306_CONTRAST);  ///< Restore contrast
}
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	08 95       	ret

00000dda <screen_draw_text>:
 * the maximum allowed characters are displayed.
 * 
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	8c 01       	movw	r16, r24
     de4:	d6 2f       	mov	r29, r22
    uint8_t length = 0;
     de6:	c0 e0       	ldi	r28, 0x00	; 0
    while (*text && length < max_length) {
     de8:	05 c0       	rjmp	.+10     	; 0xdf4 <screen_draw_text+0x1a>
        screen_draw_char(*text);  ///< Draw each character in the string
     dea:	0e 94 94 06 	call	0xd28	; 0xd28 <screen_draw_char>
        text++;
     dee:	0f 5f       	subi	r16, 0xFF	; 255
     df0:	1f 4f       	sbci	r17, 0xFF	; 255
        length++;
     df2:	cf 5f       	subi	r28, 0xFF	; 255
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
    uint8_t length = 0;
    while (*text && length < max_length) {
     df4:	f8 01       	movw	r30, r16
     df6:	80 81       	ld	r24, Z
     df8:	88 23       	and	r24, r24
     dfa:	39 f0       	breq	.+14     	; 0xe0a <screen_draw_text+0x30>
     dfc:	cd 17       	cp	r28, r29
     dfe:	a8 f3       	brcs	.-22     	; 0xdea <screen_draw_text+0x10>
     e00:	04 c0       	rjmp	.+8      	; 0xe0a <screen_draw_text+0x30>
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
        screen_draw_char(' ');  ///< Fill remaining space with spaces
     e02:	80 e2       	ldi	r24, 0x20	; 32
     e04:	0e 94 94 06 	call	0xd28	; 0xd28 <screen_draw_char>
        length++;
     e08:	cf 5f       	subi	r28, 0xFF	; 255
    while (*text && length < max_length) {
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
     e0a:	cd 17       	cp	r28, r29
     e0c:	d0 f3       	brcs	.-12     	; 0xe02 <screen_draw_text+0x28>
        screen_draw_char(' ');  ///< Fill remaining space with spaces
        length++;
    }
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	08 95       	ret

00000e18 <screen_write_text>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param start_pixel The starting pixel column for the text.
 */
void screen_write_text(char *text, uint8_t line, uint8_t start_pixel) {
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	8c 01       	movw	r16, r24
     e22:	26 2f       	mov	r18, r22
     e24:	c4 2f       	mov	r28, r20
    uint8_t max_chars = (128 - start_pixel) / 6;  ///< Calculate max characters per line
     e26:	80 e8       	ldi	r24, 0x80	; 128
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	84 1b       	sub	r24, r20
     e2c:	91 09       	sbc	r25, r1
     e2e:	66 e0       	ldi	r22, 0x06	; 6
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	0e 94 c6 0a 	call	0x158c	; 0x158c <__divmodhi4>
     e36:	d6 2f       	mov	r29, r22
    screen_command(0xB0 | line);  ///< Set the page (line)
     e38:	82 2f       	mov	r24, r18
     e3a:	80 6b       	ori	r24, 0xB0	; 176
     e3c:	0e 94 75 06 	call	0xcea	; 0xcea <screen_command>
    screen_command(0x10 | (start_pixel >> 4));  ///< Set high byte of column address
     e40:	8c 2f       	mov	r24, r28
     e42:	82 95       	swap	r24
     e44:	8f 70       	andi	r24, 0x0F	; 15
     e46:	80 61       	ori	r24, 0x10	; 16
     e48:	0e 94 75 06 	call	0xcea	; 0xcea <screen_command>
    screen_command(0x00 | (start_pixel & 0x0F));  ///< Set low byte of column address
     e4c:	8c 2f       	mov	r24, r28
     e4e:	8f 70       	andi	r24, 0x0F	; 15
     e50:	0e 94 75 06 	call	0xcea	; 0xcea <screen_command>
    screen_draw_text(text, max_chars);  ///< Draw the text
     e54:	6d 2f       	mov	r22, r29
     e56:	c8 01       	movw	r24, r16
     e58:	0e 94 ed 06 	call	0xdda	; 0xdda <screen_draw_text>
}
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <calculate_start_pixel>:
 * @param max_length The maximum number of characters.
 * @param alignment The desired text alignment (left, center, right).
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
     e66:	ac 01       	movw	r20, r24
    uint8_t text_length = 0;
     e68:	90 e0       	ldi	r25, 0x00	; 0
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
     e6a:	01 c0       	rjmp	.+2      	; 0xe6e <calculate_start_pixel+0x8>
        text_length++;
     e6c:	9f 5f       	subi	r25, 0xFF	; 255
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
    uint8_t text_length = 0;
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
     e6e:	fa 01       	movw	r30, r20
     e70:	e9 0f       	add	r30, r25
     e72:	f1 1d       	adc	r31, r1
     e74:	20 81       	ld	r18, Z
     e76:	21 11       	cpse	r18, r1
     e78:	f9 cf       	rjmp	.-14     	; 0xe6c <calculate_start_pixel+0x6>
        text_length++;
    }

    uint8_t text_width = text_length * 6;  ///< Calculate the width of the text in pixels
     e7a:	89 2f       	mov	r24, r25
     e7c:	88 0f       	add	r24, r24
     e7e:	98 0f       	add	r25, r24
     e80:	29 2f       	mov	r18, r25
     e82:	22 0f       	add	r18, r18
    switch (alignment) {
     e84:	61 30       	cpi	r22, 0x01	; 1
     e86:	19 f0       	breq	.+6      	; 0xe8e <calculate_start_pixel+0x28>
     e88:	62 30       	cpi	r22, 0x02	; 2
     e8a:	69 f0       	breq	.+26     	; 0xea6 <calculate_start_pixel+0x40>
     e8c:	0f c0       	rjmp	.+30     	; 0xeac <calculate_start_pixel+0x46>
        case ALIGN_CENTER:
            return (128 - text_width) / 2;  ///< Center the text
     e8e:	80 e8       	ldi	r24, 0x80	; 128
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	ac 01       	movw	r20, r24
     e94:	42 1b       	sub	r20, r18
     e96:	51 09       	sbc	r21, r1
     e98:	ca 01       	movw	r24, r20
     e9a:	99 23       	and	r25, r25
     e9c:	0c f4       	brge	.+2      	; 0xea0 <calculate_start_pixel+0x3a>
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	95 95       	asr	r25
     ea2:	87 95       	ror	r24
     ea4:	08 95       	ret
        case ALIGN_RIGHT:
            return (128 - text_width);  ///< Right-align the text
     ea6:	80 e8       	ldi	r24, 0x80	; 128
     ea8:	82 1b       	sub	r24, r18
     eaa:	08 95       	ret
        case ALIGN_LEFT:
        default:
            return 0;  ///< Left-align the text
     eac:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     eae:	08 95       	ret

00000eb0 <screen_write_text_aligned>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_text_aligned(char *text, uint8_t line, alignment_t alignment) {
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	ec 01       	movw	r28, r24
     eb8:	16 2f       	mov	r17, r22
    uint8_t start_pixel = calculate_start_pixel(text, alignment);  ///< Calculate start pixel
     eba:	64 2f       	mov	r22, r20
     ebc:	0e 94 33 07 	call	0xe66	; 0xe66 <calculate_start_pixel>
   screen_write_text(text, line, start_pixel);
     ec0:	48 2f       	mov	r20, r24
     ec2:	61 2f       	mov	r22, r17
     ec4:	ce 01       	movw	r24, r28
     ec6:	0e 94 0c 07 	call	0xe18	; 0xe18 <screen_write_text>
}
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	1f 91       	pop	r17
     ed0:	08 95       	ret

00000ed2 <screen_write_formatted_text>:
 * 
 * @param format The format string for the text.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_formatted_text(const char *format, uint8_t line, alignment_t alignment, ...) {
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	e2 97       	sbiw	r28, 0x32	; 50
     edc:	cd bf       	out	0x3d, r28	; 61
     ede:	de bf       	out	0x3e, r29	; 62
    char textStorage[MAX_TEXT_LENGTH];  ///< Buffer for storing formatted text
    va_list args;  ///< Variable argument list

    va_start(args, alignment);  ///< Start reading variable arguments
    vsnprintf(textStorage, MAX_TEXT_LENGTH, format, args);  ///< Format the text
     ee0:	9e 01       	movw	r18, r28
     ee2:	25 5c       	subi	r18, 0xC5	; 197
     ee4:	3f 4f       	sbci	r19, 0xFF	; 255
     ee6:	4f a9       	ldd	r20, Y+55	; 0x37
     ee8:	58 ad       	ldd	r21, Y+56	; 0x38
     eea:	62 e3       	ldi	r22, 0x32	; 50
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	ce 01       	movw	r24, r28
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <vsnprintf>
    va_end(args);  ///< End reading variable arguments

    screen_write_text_aligned(textStorage, line, alignment);  ///< Write formatted text to display
     ef6:	4a ad       	ldd	r20, Y+58	; 0x3a
     ef8:	69 ad       	ldd	r22, Y+57	; 0x39
     efa:	ce 01       	movw	r24, r28
     efc:	01 96       	adiw	r24, 0x01	; 1
     efe:	0e 94 58 07 	call	0xeb0	; 0xeb0 <screen_write_text_aligned>
}
     f02:	e2 96       	adiw	r28, 0x32	; 50
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <Stepper_enable>:

// -------------------------
// Stepper Enable / Disable
// -------------------------
void Stepper_enable() {
	if(StepperMotor.alreadyEnabled == false){
     f0e:	80 91 f0 64 	lds	r24, 0x64F0	; 0x8064f0 <StepperMotor+0x3>
     f12:	81 11       	cpse	r24, r1
     f14:	0e c0       	rjmp	.+28     	; 0xf32 <Stepper_enable+0x24>
		PORTF.OUTCLR = PIN1_bm; // aktyvus LOW
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
     f1c:	8f e5       	ldi	r24, 0x5F	; 95
     f1e:	9a ee       	ldi	r25, 0xEA	; 234
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <Stepper_enable+0x12>
     f24:	00 c0       	rjmp	.+0      	; 0xf26 <Stepper_enable+0x18>
     f26:	00 00       	nop
		_delay_ms(10);
		StepperMotor.alreadyEnabled = true;
     f28:	ed ee       	ldi	r30, 0xED	; 237
     f2a:	f4 e6       	ldi	r31, 0x64	; 100
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	83 83       	std	Z+3, r24	; 0x03
		StepperMotor.alreadyDisabled = false;
     f30:	14 82       	std	Z+4, r1	; 0x04
     f32:	08 95       	ret

00000f34 <Stepper_disable>:
	}
}

void Stepper_disable() {
	if(StepperMotor.alreadyDisabled == false){
     f34:	80 91 f1 64 	lds	r24, 0x64F1	; 0x8064f1 <StepperMotor+0x4>
     f38:	81 11       	cpse	r24, r1
     f3a:	0e c0       	rjmp	.+28     	; 0xf58 <Stepper_disable+0x24>
		PORTF.OUTSET = PIN1_bm; // HIGH = inactive
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f04a5>
     f42:	8f e5       	ldi	r24, 0x5F	; 95
     f44:	9a ee       	ldi	r25, 0xEA	; 234
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <Stepper_disable+0x12>
     f4a:	00 c0       	rjmp	.+0      	; 0xf4c <Stepper_disable+0x18>
     f4c:	00 00       	nop
		_delay_ms(10);
		StepperMotor.alreadyDisabled = true;
     f4e:	ed ee       	ldi	r30, 0xED	; 237
     f50:	f4 e6       	ldi	r31, 0x64	; 100
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	84 83       	std	Z+4, r24	; 0x04
		StepperMotor.alreadyEnabled = false;
     f56:	13 82       	std	Z+3, r1	; 0x03
     f58:	08 95       	ret

00000f5a <Stepper_start>:

// -------------------------
// Stepper Start / Stop
// -------------------------
void Stepper_start() {
	if(StepperMotor.alreadyStarted == false){
     f5a:	80 91 ee 64 	lds	r24, 0x64EE	; 0x8064ee <StepperMotor+0x1>
     f5e:	81 11       	cpse	r24, r1
     f60:	0d c0       	rjmp	.+26     	; 0xf7c <Stepper_start+0x22>
		TCD0.FAULTCTRL |= (TCD_CMPAEN_bm | TCD_CMPBEN_bm | TCD_CMPCEN_bm);
     f62:	e0 e8       	ldi	r30, 0x80	; 128
     f64:	fb e0       	ldi	r31, 0x0B	; 11
     f66:	82 89       	ldd	r24, Z+18	; 0x12
     f68:	80 67       	ori	r24, 0x70	; 112
     f6a:	82 8b       	std	Z+18, r24	; 0x12
		TCD0.CTRLA |= TCD_ENABLE_bm;
     f6c:	80 81       	ld	r24, Z
     f6e:	81 60       	ori	r24, 0x01	; 1
     f70:	80 83       	st	Z, r24
		StepperMotor.alreadyStarted = true;
     f72:	ed ee       	ldi	r30, 0xED	; 237
     f74:	f4 e6       	ldi	r31, 0x64	; 100
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	81 83       	std	Z+1, r24	; 0x01
		StepperMotor.alreadyStoped = false;
     f7a:	12 82       	std	Z+2, r1	; 0x02
     f7c:	08 95       	ret

00000f7e <Stepper_stop>:
	}
}


void Stepper_stop() {
	if(StepperMotor.alreadyStoped == false){
     f7e:	80 91 ef 64 	lds	r24, 0x64EF	; 0x8064ef <StepperMotor+0x2>
     f82:	81 11       	cpse	r24, r1
     f84:	10 c0       	rjmp	.+32     	; 0xfa6 <Stepper_stop+0x28>
		TCD0.CTRLA &= ~TCD_ENABLE_bm;
     f86:	e0 e8       	ldi	r30, 0x80	; 128
     f88:	fb e0       	ldi	r31, 0x0B	; 11
     f8a:	80 81       	ld	r24, Z
     f8c:	8e 7f       	andi	r24, 0xFE	; 254
     f8e:	80 83       	st	Z, r24
		TCD0.FAULTCTRL &= ~(TCD_CMPAEN_bm | TCD_CMPBEN_bm | TCD_CMPCEN_bm); //disconnecting PF2 from TCD counter
     f90:	82 89       	ldd	r24, Z+18	; 0x12
     f92:	8f 78       	andi	r24, 0x8F	; 143
     f94:	82 8b       	std	Z+18, r24	; 0x12
		PORTF.OUTCLR = PIN2_bm;
     f96:	84 e0       	ldi	r24, 0x04	; 4
     f98:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
		StepperMotor.alreadyStoped = true;
     f9c:	ed ee       	ldi	r30, 0xED	; 237
     f9e:	f4 e6       	ldi	r31, 0x64	; 100
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	82 83       	std	Z+2, r24	; 0x02
		StepperMotor.alreadyStarted = false;
     fa4:	11 82       	std	Z+1, r1	; 0x01
     fa6:	08 95       	ret

00000fa8 <Stepper_set_direction>:

// -------------------------
// Stepper Direction
// -------------------------
void Stepper_set_direction(bool dir) {
	if (dir != StepperMotor.lastDirection)  // if direction change (single time per cycle)
     fa8:	90 91 ed 64 	lds	r25, 0x64ED	; 0x8064ed <StepperMotor>
     fac:	98 17       	cp	r25, r24
     fae:	59 f0       	breq	.+22     	; 0xfc6 <Stepper_set_direction+0x1e>
	{
		if (dir)
     fb0:	88 23       	and	r24, r24
     fb2:	21 f0       	breq	.+8      	; 0xfbc <Stepper_set_direction+0x14>
			PORTF.OUTSET = PIN3_bm;
     fb4:	98 e0       	ldi	r25, 0x08	; 8
     fb6:	90 93 a5 04 	sts	0x04A5, r25	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f04a5>
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <Stepper_set_direction+0x1a>
		else
			PORTF.OUTCLR = PIN3_bm;
     fbc:	98 e0       	ldi	r25, 0x08	; 8
     fbe:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
		StepperMotor.lastDirection = dir;
     fc2:	80 93 ed 64 	sts	0x64ED, r24	; 0x8064ed <StepperMotor>
     fc6:	08 95       	ret

00000fc8 <Stepper_init>:
// Init function
// -------------------------
void Stepper_init() {

	// Default PWM
	TCD0_init_stepper_PWM(51200, 50); // 51.2kHz, 50% duty
     fc8:	42 e3       	ldi	r20, 0x32	; 50
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	78 ec       	ldi	r23, 0xC8	; 200
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 84 08 	call	0x1108	; 0x1108 <TCD0_init_stepper_PWM>

	// Set idle states
	PORTF.OUTCLR = PIN2_bm; // pulse low
     fd6:	e0 ea       	ldi	r30, 0xA0	; 160
     fd8:	f4 e0       	ldi	r31, 0x04	; 4
     fda:	84 e0       	ldi	r24, 0x04	; 4
     fdc:	86 83       	std	Z+6, r24	; 0x06
	PORTF.OUTSET = PIN1_bm; // disable
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	85 83       	std	Z+5, r24	; 0x05
	PORTF.OUTCLR = PIN3_bm; // default direction
     fe2:	88 e0       	ldi	r24, 0x08	; 8
     fe4:	86 83       	std	Z+6, r24	; 0x06
     fe6:	08 95       	ret

00000fe8 <TCA0_init_linear_PWM>:
 *  Author: Saulius
 */ 
#include "Settings.h"

void TCA0_init_linear_PWM(uint16_t freq_hz, uint8_t duty_percent) //Auto TCA prescaler selection, that give us Frequency range: ~366Hz - ~93kHz. TLE9201SG max 20kHz
{
     fe8:	8f 92       	push	r8
     fea:	9f 92       	push	r9
     fec:	af 92       	push	r10
     fee:	bf 92       	push	r11
     ff0:	cf 92       	push	r12
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	68 97       	sbiw	r28, 0x18	; 24
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	7c 01       	movw	r14, r24
    100c:	c6 2e       	mov	r12, r22
	const uint16_t prescalers[] = {1, 2, 4, 8, 16, 64, 256, 1024};
    100e:	80 e1       	ldi	r24, 0x10	; 16
    1010:	e5 e5       	ldi	r30, 0x55	; 85
    1012:	f3 e6       	ldi	r31, 0x63	; 99
    1014:	de 01       	movw	r26, r28
    1016:	11 96       	adiw	r26, 0x01	; 1
    1018:	01 90       	ld	r0, Z+
    101a:	0d 92       	st	X+, r0
    101c:	8a 95       	dec	r24
    101e:	e1 f7       	brne	.-8      	; 0x1018 <TCA0_init_linear_PWM+0x30>
	const uint8_t clk_select[] = {
    1020:	88 e0       	ldi	r24, 0x08	; 8
    1022:	e5 e6       	ldi	r30, 0x65	; 101
    1024:	f3 e6       	ldi	r31, 0x63	; 99
    1026:	de 01       	movw	r26, r28
    1028:	51 96       	adiw	r26, 0x11	; 17
    102a:	01 90       	ld	r0, Z+
    102c:	0d 92       	st	X+, r0
    102e:	8a 95       	dec	r24
    1030:	e1 f7       	brne	.-8      	; 0x102a <TCA0_init_linear_PWM+0x42>

	uint8_t chosen_clk = 0;
	uint8_t period = 0;

	// surandam tinkamà prescaler
	for (uint8_t i = 0; i < 8; i++) {
    1032:	d1 2c       	mov	r13, r1
    1034:	38 c0       	rjmp	.+112    	; 0x10a6 <TCA0_init_linear_PWM+0xbe>
		uint32_t f_timer = F_CPU / prescalers[i];
    1036:	0d 2d       	mov	r16, r13
    1038:	10 e0       	ldi	r17, 0x00	; 0
    103a:	f8 01       	movw	r30, r16
    103c:	ee 0f       	add	r30, r30
    103e:	ff 1f       	adc	r31, r31
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	8c 0f       	add	r24, r28
    1046:	9d 1f       	adc	r25, r29
    1048:	e8 0f       	add	r30, r24
    104a:	f9 1f       	adc	r31, r25
    104c:	20 81       	ld	r18, Z
    104e:	31 81       	ldd	r19, Z+1	; 0x01
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	76 e3       	ldi	r23, 0x36	; 54
    1058:	8e e6       	ldi	r24, 0x6E	; 110
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__divmodsi4>
		uint32_t tmp_period = (f_timer / freq_hz) - 1;
    1060:	47 01       	movw	r8, r14
    1062:	a1 2c       	mov	r10, r1
    1064:	b1 2c       	mov	r11, r1
    1066:	ca 01       	movw	r24, r20
    1068:	b9 01       	movw	r22, r18
    106a:	a5 01       	movw	r20, r10
    106c:	94 01       	movw	r18, r8
    106e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__udivmodsi4>
    1072:	da 01       	movw	r26, r20
    1074:	c9 01       	movw	r24, r18
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	a1 09       	sbc	r26, r1
    107a:	b1 09       	sbc	r27, r1

		if (tmp_period <= 255 && tmp_period >= 1) {
    107c:	ba 01       	movw	r22, r20
    107e:	a9 01       	movw	r20, r18
    1080:	42 50       	subi	r20, 0x02	; 2
    1082:	51 09       	sbc	r21, r1
    1084:	61 09       	sbc	r22, r1
    1086:	71 09       	sbc	r23, r1
    1088:	4f 3f       	cpi	r20, 0xFF	; 255
    108a:	51 05       	cpc	r21, r1
    108c:	61 05       	cpc	r22, r1
    108e:	71 05       	cpc	r23, r1
    1090:	48 f4       	brcc	.+18     	; 0x10a4 <TCA0_init_linear_PWM+0xbc>
			period = (uint8_t)tmp_period;
    1092:	f8 2e       	mov	r15, r24
			chosen_clk = clk_select[i];
    1094:	e1 e1       	ldi	r30, 0x11	; 17
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	ec 0f       	add	r30, r28
    109a:	fd 1f       	adc	r31, r29
    109c:	e0 0f       	add	r30, r16
    109e:	f1 1f       	adc	r31, r17
    10a0:	10 81       	ld	r17, Z
			break; // radom maþiausià tinkamà prescaler
    10a2:	06 c0       	rjmp	.+12     	; 0x10b0 <TCA0_init_linear_PWM+0xc8>

	uint8_t chosen_clk = 0;
	uint8_t period = 0;

	// surandam tinkamà prescaler
	for (uint8_t i = 0; i < 8; i++) {
    10a4:	d3 94       	inc	r13
    10a6:	97 e0       	ldi	r25, 0x07	; 7
    10a8:	9d 15       	cp	r25, r13
    10aa:	28 f6       	brcc	.-118    	; 0x1036 <TCA0_init_linear_PWM+0x4e>
		TCA_SINGLE_CLKSEL_DIV256_gc,
		TCA_SINGLE_CLKSEL_DIV1024_gc
	};

	uint8_t chosen_clk = 0;
	uint8_t period = 0;
    10ac:	f1 2c       	mov	r15, r1
		TCA_SINGLE_CLKSEL_DIV64_gc,
		TCA_SINGLE_CLKSEL_DIV256_gc,
		TCA_SINGLE_CLKSEL_DIV1024_gc
	};

	uint8_t chosen_clk = 0;
    10ae:	10 e0       	ldi	r17, 0x00	; 0
			break; // radom maþiausià tinkamà prescaler
		}
	}

	// duty skaièiavimas
	uint8_t duty = (uint32_t)period * duty_percent / 100;
    10b0:	2f 2d       	mov	r18, r15
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	ac 2d       	mov	r26, r12
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__umulhisi3>
    10bc:	24 e6       	ldi	r18, 0x64	; 100
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__udivmodsi4>
	if (duty > period) duty = period;
    10c8:	f2 16       	cp	r15, r18
    10ca:	08 f4       	brcc	.+2      	; 0x10ce <TCA0_init_linear_PWM+0xe6>
    10cc:	2f 2d       	mov	r18, r15

	// konfigûracija
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;  // WOx ant PORTD
    10ce:	83 e0       	ldi	r24, 0x03	; 3
    10d0:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <__TEXT_REGION_LENGTH__+0x7f05e7>

	TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;   // Split mode
    10d4:	e0 e0       	ldi	r30, 0x00	; 0
    10d6:	fa e0       	ldi	r31, 0x0A	; 10
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	83 83       	std	Z+3, r24	; 0x03
	TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm;    // enable WO3 (HCMP0 ? PD3)
    10dc:	80 e1       	ldi	r24, 0x10	; 16
    10de:	81 83       	std	Z+1, r24	; 0x01

	TCA0.SPLIT.HPER  = period;
    10e0:	f7 a2       	std	Z+39, r15	; 0x27
	TCA0.SPLIT.HCMP0 = duty;
    10e2:	21 a7       	std	Z+41, r18	; 0x29

	TCA0.SPLIT.CTRLA = chosen_clk | TCA_SPLIT_ENABLE_bm; // paleidþiam su pasirinktu prescaler
    10e4:	11 60       	ori	r17, 0x01	; 1
    10e6:	10 83       	st	Z, r17
}
    10e8:	68 96       	adiw	r28, 0x18	; 24
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	df 90       	pop	r13
    10fc:	cf 90       	pop	r12
    10fe:	bf 90       	pop	r11
    1100:	af 90       	pop	r10
    1102:	9f 90       	pop	r9
    1104:	8f 90       	pop	r8
    1106:	08 95       	ret

00001108 <TCD0_init_stepper_PWM>:
 * @date 2025-01-09
 */

#include "Settings.h"

void TCD0_init_stepper_PWM(uint32_t freq_hz, uint8_t duty_percent) {
    1108:	cf 92       	push	r12
    110a:	df 92       	push	r13
    110c:	ef 92       	push	r14
    110e:	ff 92       	push	r15
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	14 2f       	mov	r17, r20

	// Calculate compare registers
	uint16_t cmpbclr = (F_CPU / (4 * freq_hz * 2)) - 1;
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	aa 1f       	adc	r26, r26
    1124:	bb 1f       	adc	r27, r27
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	aa 1f       	adc	r26, r26
    112c:	bb 1f       	adc	r27, r27
    112e:	9c 01       	movw	r18, r24
    1130:	ad 01       	movw	r20, r26
    1132:	22 0f       	add	r18, r18
    1134:	33 1f       	adc	r19, r19
    1136:	44 1f       	adc	r20, r20
    1138:	55 1f       	adc	r21, r21
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	76 e3       	ldi	r23, 0x36	; 54
    113e:	8e e6       	ldi	r24, 0x6E	; 110
    1140:	91 e0       	ldi	r25, 0x01	; 1
    1142:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__udivmodsi4>
    1146:	e9 01       	movw	r28, r18
    1148:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t cmpaset = (uint16_t)(cmpbclr * (duty_percent / 100.0)) + 1;
    114a:	61 2f       	mov	r22, r17
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 cd 09 	call	0x139a	; 0x139a <__floatsisf>
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	48 ec       	ldi	r20, 0xC8	; 200
    115c:	52 e4       	ldi	r21, 0x42	; 66
    115e:	0e 94 2a 09 	call	0x1254	; 0x1254 <__divsf3>
    1162:	6b 01       	movw	r12, r22
    1164:	7c 01       	movw	r14, r24
    1166:	be 01       	movw	r22, r28
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 cb 09 	call	0x1396	; 0x1396 <__floatunsisf>
    1170:	a7 01       	movw	r20, r14
    1172:	96 01       	movw	r18, r12
    1174:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__mulsf3>
    1178:	0e 94 9c 09 	call	0x1338	; 0x1338 <__fixunssfsi>
    117c:	6f 5f       	subi	r22, 0xFF	; 255
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t cmpbset = cmpbclr - cmpaset - 1;
    1180:	ce 01       	movw	r24, r28
    1182:	86 1b       	sub	r24, r22
    1184:	97 0b       	sbc	r25, r23
    1186:	01 97       	sbiw	r24, 0x01	; 1

	// Set TCD compare registers
	TCD0.CMPBCLR = cmpbclr;
    1188:	00 e8       	ldi	r16, 0x80	; 128
    118a:	1b e0       	ldi	r17, 0x0B	; 11
    118c:	f8 01       	movw	r30, r16
    118e:	c6 a7       	std	Z+46, r28	; 0x2e
    1190:	d7 a7       	std	Z+47, r29	; 0x2f
	TCD0.CMPBSET = cmpbset;
    1192:	84 a7       	std	Z+44, r24	; 0x2c
    1194:	95 a7       	std	Z+45, r25	; 0x2d
	TCD0.CMPASET = cmpaset;
    1196:	60 a7       	std	Z+40, r22	; 0x28
    1198:	71 a7       	std	Z+41, r23	; 0x29

	ccp_write_io((uint8_t *) &TCD0.FAULTCTRL, TCD_CMPCEN_bm); ///< Enable WOC on PF2
    119a:	60 e4       	ldi	r22, 0x40	; 64
    119c:	82 e9       	ldi	r24, 0x92	; 146
    119e:	9b e0       	ldi	r25, 0x0B	; 11
    11a0:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <ccp_write_io>
	TCD0.CTRLB = TCD_WGMODE_DS_gc; ///< Set waveform mode to double slope
    11a4:	83 e0       	ldi	r24, 0x03	; 3
    11a6:	f8 01       	movw	r30, r16
    11a8:	81 83       	std	Z+1, r24	; 0x01

	while (!(TCD0.STATUS & TCD_ENRDY_bm));
    11aa:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
    11ae:	80 ff       	sbrs	r24, 0
    11b0:	fc cf       	rjmp	.-8      	; 0x11aa <TCD0_init_stepper_PWM+0xa2>

	// Ájungiam WOC iðëjimà
	TCD0.FAULTCTRL = TCD_CMPAEN_bm | TCD_CMPBEN_bm | TCD_CMPCEN_bm;
    11b2:	e0 e8       	ldi	r30, 0x80	; 128
    11b4:	fb e0       	ldi	r31, 0x0B	; 11
    11b6:	80 e7       	ldi	r24, 0x70	; 112
    11b8:	82 8b       	std	Z+18, r24	; 0x12

	// Paleidþiam su prescaler = 4
	TCD0.CTRLA = TCD_CLKSEL_CLKPER_gc | TCD_CNTPRES_DIV4_gc;
    11ba:	88 e6       	ldi	r24, 0x68	; 104
    11bc:	80 83       	st	Z, r24


	// Palaukti, kol sinchronizuosis
	while (!(TCD0.STATUS & TCD_ENRDY_bm));
    11be:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
    11c2:	80 ff       	sbrs	r24, 0
    11c4:	fc cf       	rjmp	.-8      	; 0x11be <TCD0_init_stepper_PWM+0xb6>
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	1f 91       	pop	r17
    11cc:	0f 91       	pop	r16
    11ce:	ff 90       	pop	r15
    11d0:	ef 90       	pop	r14
    11d2:	df 90       	pop	r13
    11d4:	cf 90       	pop	r12
    11d6:	08 95       	ret

000011d8 <USART0_init>:
 * @return 0 on success.
 */
int USART1_printChar(char c, FILE *stream) {
	USART1_sendChar(c); // Send character
	return 0;
}
    11d8:	e0 e0       	ldi	r30, 0x00	; 0
    11da:	f8 e0       	ldi	r31, 0x08	; 8
    11dc:	83 e8       	ldi	r24, 0x83	; 131
    11de:	96 e0       	ldi	r25, 0x06	; 6
    11e0:	80 87       	std	Z+8, r24	; 0x08
    11e2:	91 87       	std	Z+9, r25	; 0x09
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	85 83       	std	Z+5, r24	; 0x05
    11e8:	82 ec       	ldi	r24, 0xC2	; 194
    11ea:	86 83       	std	Z+6, r24	; 0x06
    11ec:	83 e0       	ldi	r24, 0x03	; 3
    11ee:	87 83       	std	Z+7, r24	; 0x07
    11f0:	08 95       	ret

000011f2 <USART0_readChar>:
    11f2:	80 e8       	ldi	r24, 0x80	; 128
    11f4:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    11f8:	88 ee       	ldi	r24, 0xE8	; 232
    11fa:	93 e0       	ldi	r25, 0x03	; 3
    11fc:	a0 e0       	ldi	r26, 0x00	; 0
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	04 c0       	rjmp	.+8      	; 0x120a <USART0_readChar+0x18>
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	a1 09       	sbc	r26, r1
    1206:	b1 09       	sbc	r27, r1
    1208:	21 f0       	breq	.+8      	; 0x1212 <USART0_readChar+0x20>
    120a:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    120e:	22 23       	and	r18, r18
    1210:	c4 f7       	brge	.-16     	; 0x1202 <USART0_readChar+0x10>
    1212:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
    1216:	08 95       	ret

00001218 <USART1_init>:
    1218:	e0 e2       	ldi	r30, 0x20	; 32
    121a:	f8 e0       	ldi	r31, 0x08	; 8
    121c:	81 ea       	ldi	r24, 0xA1	; 161
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	80 87       	std	Z+8, r24	; 0x08
    1222:	91 87       	std	Z+9, r25	; 0x09
    1224:	82 e8       	ldi	r24, 0x82	; 130
    1226:	86 83       	std	Z+6, r24	; 0x06
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	87 83       	std	Z+7, r24	; 0x07
    122c:	08 95       	ret

0000122e <USART1_readChar>:
 * If a timeout occurs, it returns a predefined warning.
 * 
 * @return The received character.
 */
char USART1_readChar() {
	USART1.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    122e:	80 e8       	ldi	r24, 0x80	; 128
    1230:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f0824>
	uint32_t timeout_counter = FO_TIMEOUT_COUNTER; // Set a timeout counter
    1234:	88 e8       	ldi	r24, 0x88	; 136
    1236:	93 e1       	ldi	r25, 0x13	; 19
    1238:	a0 e0       	ldi	r26, 0x00	; 0
    123a:	b0 e0       	ldi	r27, 0x00	; 0
	while (!(USART1.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
    123c:	04 c0       	rjmp	.+8      	; 0x1246 <USART1_readChar+0x18>
		if (--timeout_counter == 0) { // Timeout condition
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	a1 09       	sbc	r26, r1
    1242:	b1 09       	sbc	r27, r1
    1244:	21 f0       	breq	.+8      	; 0x124e <USART1_readChar+0x20>
 * @return The received character.
 */
char USART1_readChar() {
	USART1.STATUS = USART_RXCIF_bm; // Clear buffer before reading
	uint32_t timeout_counter = FO_TIMEOUT_COUNTER; // Set a timeout counter
	while (!(USART1.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
    1246:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f0824>
    124a:	22 23       	and	r18, r18
    124c:	c4 f7       	brge	.-16     	; 0x123e <USART1_readChar+0x10>
		if (--timeout_counter == 0) { // Timeout condition
			break;
		}
	}
	return USART1.RXDATAL; // Return received character
    124e:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f0820>
}
    1252:	08 95       	ret

00001254 <__divsf3>:
    1254:	0e 94 3e 09 	call	0x127c	; 0x127c <__divsf3x>
    1258:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__fp_round>
    125c:	0e 94 18 0a 	call	0x1430	; 0x1430 <__fp_pscB>
    1260:	58 f0       	brcs	.+22     	; 0x1278 <__divsf3+0x24>
    1262:	0e 94 11 0a 	call	0x1422	; 0x1422 <__fp_pscA>
    1266:	40 f0       	brcs	.+16     	; 0x1278 <__divsf3+0x24>
    1268:	29 f4       	brne	.+10     	; 0x1274 <__divsf3+0x20>
    126a:	5f 3f       	cpi	r21, 0xFF	; 255
    126c:	29 f0       	breq	.+10     	; 0x1278 <__divsf3+0x24>
    126e:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__fp_inf>
    1272:	51 11       	cpse	r21, r1
    1274:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__fp_szero>
    1278:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__fp_nan>

0000127c <__divsf3x>:
    127c:	0e 94 30 0a 	call	0x1460	; 0x1460 <__fp_split3>
    1280:	68 f3       	brcs	.-38     	; 0x125c <__divsf3+0x8>

00001282 <__divsf3_pse>:
    1282:	99 23       	and	r25, r25
    1284:	b1 f3       	breq	.-20     	; 0x1272 <__divsf3+0x1e>
    1286:	55 23       	and	r21, r21
    1288:	91 f3       	breq	.-28     	; 0x126e <__divsf3+0x1a>
    128a:	95 1b       	sub	r25, r21
    128c:	55 0b       	sbc	r21, r21
    128e:	bb 27       	eor	r27, r27
    1290:	aa 27       	eor	r26, r26
    1292:	62 17       	cp	r22, r18
    1294:	73 07       	cpc	r23, r19
    1296:	84 07       	cpc	r24, r20
    1298:	38 f0       	brcs	.+14     	; 0x12a8 <__divsf3_pse+0x26>
    129a:	9f 5f       	subi	r25, 0xFF	; 255
    129c:	5f 4f       	sbci	r21, 0xFF	; 255
    129e:	22 0f       	add	r18, r18
    12a0:	33 1f       	adc	r19, r19
    12a2:	44 1f       	adc	r20, r20
    12a4:	aa 1f       	adc	r26, r26
    12a6:	a9 f3       	breq	.-22     	; 0x1292 <__divsf3_pse+0x10>
    12a8:	35 d0       	rcall	.+106    	; 0x1314 <__divsf3_pse+0x92>
    12aa:	0e 2e       	mov	r0, r30
    12ac:	3a f0       	brmi	.+14     	; 0x12bc <__divsf3_pse+0x3a>
    12ae:	e0 e8       	ldi	r30, 0x80	; 128
    12b0:	32 d0       	rcall	.+100    	; 0x1316 <__divsf3_pse+0x94>
    12b2:	91 50       	subi	r25, 0x01	; 1
    12b4:	50 40       	sbci	r21, 0x00	; 0
    12b6:	e6 95       	lsr	r30
    12b8:	00 1c       	adc	r0, r0
    12ba:	ca f7       	brpl	.-14     	; 0x12ae <__divsf3_pse+0x2c>
    12bc:	2b d0       	rcall	.+86     	; 0x1314 <__divsf3_pse+0x92>
    12be:	fe 2f       	mov	r31, r30
    12c0:	29 d0       	rcall	.+82     	; 0x1314 <__divsf3_pse+0x92>
    12c2:	66 0f       	add	r22, r22
    12c4:	77 1f       	adc	r23, r23
    12c6:	88 1f       	adc	r24, r24
    12c8:	bb 1f       	adc	r27, r27
    12ca:	26 17       	cp	r18, r22
    12cc:	37 07       	cpc	r19, r23
    12ce:	48 07       	cpc	r20, r24
    12d0:	ab 07       	cpc	r26, r27
    12d2:	b0 e8       	ldi	r27, 0x80	; 128
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <__divsf3_pse+0x56>
    12d6:	bb 0b       	sbc	r27, r27
    12d8:	80 2d       	mov	r24, r0
    12da:	bf 01       	movw	r22, r30
    12dc:	ff 27       	eor	r31, r31
    12de:	93 58       	subi	r25, 0x83	; 131
    12e0:	5f 4f       	sbci	r21, 0xFF	; 255
    12e2:	3a f0       	brmi	.+14     	; 0x12f2 <__divsf3_pse+0x70>
    12e4:	9e 3f       	cpi	r25, 0xFE	; 254
    12e6:	51 05       	cpc	r21, r1
    12e8:	78 f0       	brcs	.+30     	; 0x1308 <__divsf3_pse+0x86>
    12ea:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__fp_inf>
    12ee:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__fp_szero>
    12f2:	5f 3f       	cpi	r21, 0xFF	; 255
    12f4:	e4 f3       	brlt	.-8      	; 0x12ee <__divsf3_pse+0x6c>
    12f6:	98 3e       	cpi	r25, 0xE8	; 232
    12f8:	d4 f3       	brlt	.-12     	; 0x12ee <__divsf3_pse+0x6c>
    12fa:	86 95       	lsr	r24
    12fc:	77 95       	ror	r23
    12fe:	67 95       	ror	r22
    1300:	b7 95       	ror	r27
    1302:	f7 95       	ror	r31
    1304:	9f 5f       	subi	r25, 0xFF	; 255
    1306:	c9 f7       	brne	.-14     	; 0x12fa <__divsf3_pse+0x78>
    1308:	88 0f       	add	r24, r24
    130a:	91 1d       	adc	r25, r1
    130c:	96 95       	lsr	r25
    130e:	87 95       	ror	r24
    1310:	97 f9       	bld	r25, 7
    1312:	08 95       	ret
    1314:	e1 e0       	ldi	r30, 0x01	; 1
    1316:	66 0f       	add	r22, r22
    1318:	77 1f       	adc	r23, r23
    131a:	88 1f       	adc	r24, r24
    131c:	bb 1f       	adc	r27, r27
    131e:	62 17       	cp	r22, r18
    1320:	73 07       	cpc	r23, r19
    1322:	84 07       	cpc	r24, r20
    1324:	ba 07       	cpc	r27, r26
    1326:	20 f0       	brcs	.+8      	; 0x1330 <__divsf3_pse+0xae>
    1328:	62 1b       	sub	r22, r18
    132a:	73 0b       	sbc	r23, r19
    132c:	84 0b       	sbc	r24, r20
    132e:	ba 0b       	sbc	r27, r26
    1330:	ee 1f       	adc	r30, r30
    1332:	88 f7       	brcc	.-30     	; 0x1316 <__divsf3_pse+0x94>
    1334:	e0 95       	com	r30
    1336:	08 95       	ret

00001338 <__fixunssfsi>:
    1338:	0e 94 38 0a 	call	0x1470	; 0x1470 <__fp_splitA>
    133c:	88 f0       	brcs	.+34     	; 0x1360 <__fixunssfsi+0x28>
    133e:	9f 57       	subi	r25, 0x7F	; 127
    1340:	98 f0       	brcs	.+38     	; 0x1368 <__fixunssfsi+0x30>
    1342:	b9 2f       	mov	r27, r25
    1344:	99 27       	eor	r25, r25
    1346:	b7 51       	subi	r27, 0x17	; 23
    1348:	b0 f0       	brcs	.+44     	; 0x1376 <__fixunssfsi+0x3e>
    134a:	e1 f0       	breq	.+56     	; 0x1384 <__fixunssfsi+0x4c>
    134c:	66 0f       	add	r22, r22
    134e:	77 1f       	adc	r23, r23
    1350:	88 1f       	adc	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	1a f0       	brmi	.+6      	; 0x135c <__fixunssfsi+0x24>
    1356:	ba 95       	dec	r27
    1358:	c9 f7       	brne	.-14     	; 0x134c <__fixunssfsi+0x14>
    135a:	14 c0       	rjmp	.+40     	; 0x1384 <__fixunssfsi+0x4c>
    135c:	b1 30       	cpi	r27, 0x01	; 1
    135e:	91 f0       	breq	.+36     	; 0x1384 <__fixunssfsi+0x4c>
    1360:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fp_zero>
    1364:	b1 e0       	ldi	r27, 0x01	; 1
    1366:	08 95       	ret
    1368:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__fp_zero>
    136c:	67 2f       	mov	r22, r23
    136e:	78 2f       	mov	r23, r24
    1370:	88 27       	eor	r24, r24
    1372:	b8 5f       	subi	r27, 0xF8	; 248
    1374:	39 f0       	breq	.+14     	; 0x1384 <__fixunssfsi+0x4c>
    1376:	b9 3f       	cpi	r27, 0xF9	; 249
    1378:	cc f3       	brlt	.-14     	; 0x136c <__fixunssfsi+0x34>
    137a:	86 95       	lsr	r24
    137c:	77 95       	ror	r23
    137e:	67 95       	ror	r22
    1380:	b3 95       	inc	r27
    1382:	d9 f7       	brne	.-10     	; 0x137a <__fixunssfsi+0x42>
    1384:	3e f4       	brtc	.+14     	; 0x1394 <__fixunssfsi+0x5c>
    1386:	90 95       	com	r25
    1388:	80 95       	com	r24
    138a:	70 95       	com	r23
    138c:	61 95       	neg	r22
    138e:	7f 4f       	sbci	r23, 0xFF	; 255
    1390:	8f 4f       	sbci	r24, 0xFF	; 255
    1392:	9f 4f       	sbci	r25, 0xFF	; 255
    1394:	08 95       	ret

00001396 <__floatunsisf>:
    1396:	e8 94       	clt
    1398:	09 c0       	rjmp	.+18     	; 0x13ac <__floatsisf+0x12>

0000139a <__floatsisf>:
    139a:	97 fb       	bst	r25, 7
    139c:	3e f4       	brtc	.+14     	; 0x13ac <__floatsisf+0x12>
    139e:	90 95       	com	r25
    13a0:	80 95       	com	r24
    13a2:	70 95       	com	r23
    13a4:	61 95       	neg	r22
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	8f 4f       	sbci	r24, 0xFF	; 255
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	99 23       	and	r25, r25
    13ae:	a9 f0       	breq	.+42     	; 0x13da <__floatsisf+0x40>
    13b0:	f9 2f       	mov	r31, r25
    13b2:	96 e9       	ldi	r25, 0x96	; 150
    13b4:	bb 27       	eor	r27, r27
    13b6:	93 95       	inc	r25
    13b8:	f6 95       	lsr	r31
    13ba:	87 95       	ror	r24
    13bc:	77 95       	ror	r23
    13be:	67 95       	ror	r22
    13c0:	b7 95       	ror	r27
    13c2:	f1 11       	cpse	r31, r1
    13c4:	f8 cf       	rjmp	.-16     	; 0x13b6 <__floatsisf+0x1c>
    13c6:	fa f4       	brpl	.+62     	; 0x1406 <__floatsisf+0x6c>
    13c8:	bb 0f       	add	r27, r27
    13ca:	11 f4       	brne	.+4      	; 0x13d0 <__floatsisf+0x36>
    13cc:	60 ff       	sbrs	r22, 0
    13ce:	1b c0       	rjmp	.+54     	; 0x1406 <__floatsisf+0x6c>
    13d0:	6f 5f       	subi	r22, 0xFF	; 255
    13d2:	7f 4f       	sbci	r23, 0xFF	; 255
    13d4:	8f 4f       	sbci	r24, 0xFF	; 255
    13d6:	9f 4f       	sbci	r25, 0xFF	; 255
    13d8:	16 c0       	rjmp	.+44     	; 0x1406 <__floatsisf+0x6c>
    13da:	88 23       	and	r24, r24
    13dc:	11 f0       	breq	.+4      	; 0x13e2 <__floatsisf+0x48>
    13de:	96 e9       	ldi	r25, 0x96	; 150
    13e0:	11 c0       	rjmp	.+34     	; 0x1404 <__floatsisf+0x6a>
    13e2:	77 23       	and	r23, r23
    13e4:	21 f0       	breq	.+8      	; 0x13ee <__floatsisf+0x54>
    13e6:	9e e8       	ldi	r25, 0x8E	; 142
    13e8:	87 2f       	mov	r24, r23
    13ea:	76 2f       	mov	r23, r22
    13ec:	05 c0       	rjmp	.+10     	; 0x13f8 <__floatsisf+0x5e>
    13ee:	66 23       	and	r22, r22
    13f0:	71 f0       	breq	.+28     	; 0x140e <__floatsisf+0x74>
    13f2:	96 e8       	ldi	r25, 0x86	; 134
    13f4:	86 2f       	mov	r24, r22
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	2a f0       	brmi	.+10     	; 0x1406 <__floatsisf+0x6c>
    13fc:	9a 95       	dec	r25
    13fe:	66 0f       	add	r22, r22
    1400:	77 1f       	adc	r23, r23
    1402:	88 1f       	adc	r24, r24
    1404:	da f7       	brpl	.-10     	; 0x13fc <__floatsisf+0x62>
    1406:	88 0f       	add	r24, r24
    1408:	96 95       	lsr	r25
    140a:	87 95       	ror	r24
    140c:	97 f9       	bld	r25, 7
    140e:	08 95       	ret

00001410 <__fp_inf>:
    1410:	97 f9       	bld	r25, 7
    1412:	9f 67       	ori	r25, 0x7F	; 127
    1414:	80 e8       	ldi	r24, 0x80	; 128
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	08 95       	ret

0000141c <__fp_nan>:
    141c:	9f ef       	ldi	r25, 0xFF	; 255
    141e:	80 ec       	ldi	r24, 0xC0	; 192
    1420:	08 95       	ret

00001422 <__fp_pscA>:
    1422:	00 24       	eor	r0, r0
    1424:	0a 94       	dec	r0
    1426:	16 16       	cp	r1, r22
    1428:	17 06       	cpc	r1, r23
    142a:	18 06       	cpc	r1, r24
    142c:	09 06       	cpc	r0, r25
    142e:	08 95       	ret

00001430 <__fp_pscB>:
    1430:	00 24       	eor	r0, r0
    1432:	0a 94       	dec	r0
    1434:	12 16       	cp	r1, r18
    1436:	13 06       	cpc	r1, r19
    1438:	14 06       	cpc	r1, r20
    143a:	05 06       	cpc	r0, r21
    143c:	08 95       	ret

0000143e <__fp_round>:
    143e:	09 2e       	mov	r0, r25
    1440:	03 94       	inc	r0
    1442:	00 0c       	add	r0, r0
    1444:	11 f4       	brne	.+4      	; 0x144a <__fp_round+0xc>
    1446:	88 23       	and	r24, r24
    1448:	52 f0       	brmi	.+20     	; 0x145e <__fp_round+0x20>
    144a:	bb 0f       	add	r27, r27
    144c:	40 f4       	brcc	.+16     	; 0x145e <__fp_round+0x20>
    144e:	bf 2b       	or	r27, r31
    1450:	11 f4       	brne	.+4      	; 0x1456 <__fp_round+0x18>
    1452:	60 ff       	sbrs	r22, 0
    1454:	04 c0       	rjmp	.+8      	; 0x145e <__fp_round+0x20>
    1456:	6f 5f       	subi	r22, 0xFF	; 255
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	8f 4f       	sbci	r24, 0xFF	; 255
    145c:	9f 4f       	sbci	r25, 0xFF	; 255
    145e:	08 95       	ret

00001460 <__fp_split3>:
    1460:	57 fd       	sbrc	r21, 7
    1462:	90 58       	subi	r25, 0x80	; 128
    1464:	44 0f       	add	r20, r20
    1466:	55 1f       	adc	r21, r21
    1468:	59 f0       	breq	.+22     	; 0x1480 <__fp_splitA+0x10>
    146a:	5f 3f       	cpi	r21, 0xFF	; 255
    146c:	71 f0       	breq	.+28     	; 0x148a <__fp_splitA+0x1a>
    146e:	47 95       	ror	r20

00001470 <__fp_splitA>:
    1470:	88 0f       	add	r24, r24
    1472:	97 fb       	bst	r25, 7
    1474:	99 1f       	adc	r25, r25
    1476:	61 f0       	breq	.+24     	; 0x1490 <__fp_splitA+0x20>
    1478:	9f 3f       	cpi	r25, 0xFF	; 255
    147a:	79 f0       	breq	.+30     	; 0x149a <__fp_splitA+0x2a>
    147c:	87 95       	ror	r24
    147e:	08 95       	ret
    1480:	12 16       	cp	r1, r18
    1482:	13 06       	cpc	r1, r19
    1484:	14 06       	cpc	r1, r20
    1486:	55 1f       	adc	r21, r21
    1488:	f2 cf       	rjmp	.-28     	; 0x146e <__fp_split3+0xe>
    148a:	46 95       	lsr	r20
    148c:	f1 df       	rcall	.-30     	; 0x1470 <__fp_splitA>
    148e:	08 c0       	rjmp	.+16     	; 0x14a0 <__fp_splitA+0x30>
    1490:	16 16       	cp	r1, r22
    1492:	17 06       	cpc	r1, r23
    1494:	18 06       	cpc	r1, r24
    1496:	99 1f       	adc	r25, r25
    1498:	f1 cf       	rjmp	.-30     	; 0x147c <__fp_splitA+0xc>
    149a:	86 95       	lsr	r24
    149c:	71 05       	cpc	r23, r1
    149e:	61 05       	cpc	r22, r1
    14a0:	08 94       	sec
    14a2:	08 95       	ret

000014a4 <__fp_zero>:
    14a4:	e8 94       	clt

000014a6 <__fp_szero>:
    14a6:	bb 27       	eor	r27, r27
    14a8:	66 27       	eor	r22, r22
    14aa:	77 27       	eor	r23, r23
    14ac:	cb 01       	movw	r24, r22
    14ae:	97 f9       	bld	r25, 7
    14b0:	08 95       	ret

000014b2 <__mulsf3>:
    14b2:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3x>
    14b6:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__fp_round>
    14ba:	0e 94 11 0a 	call	0x1422	; 0x1422 <__fp_pscA>
    14be:	38 f0       	brcs	.+14     	; 0x14ce <__mulsf3+0x1c>
    14c0:	0e 94 18 0a 	call	0x1430	; 0x1430 <__fp_pscB>
    14c4:	20 f0       	brcs	.+8      	; 0x14ce <__mulsf3+0x1c>
    14c6:	95 23       	and	r25, r21
    14c8:	11 f0       	breq	.+4      	; 0x14ce <__mulsf3+0x1c>
    14ca:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__fp_inf>
    14ce:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__fp_nan>
    14d2:	11 24       	eor	r1, r1
    14d4:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__fp_szero>

000014d8 <__mulsf3x>:
    14d8:	0e 94 30 0a 	call	0x1460	; 0x1460 <__fp_split3>
    14dc:	70 f3       	brcs	.-36     	; 0x14ba <__mulsf3+0x8>

000014de <__mulsf3_pse>:
    14de:	95 9f       	mul	r25, r21
    14e0:	c1 f3       	breq	.-16     	; 0x14d2 <__mulsf3+0x20>
    14e2:	95 0f       	add	r25, r21
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	55 1f       	adc	r21, r21
    14e8:	62 9f       	mul	r22, r18
    14ea:	f0 01       	movw	r30, r0
    14ec:	72 9f       	mul	r23, r18
    14ee:	bb 27       	eor	r27, r27
    14f0:	f0 0d       	add	r31, r0
    14f2:	b1 1d       	adc	r27, r1
    14f4:	63 9f       	mul	r22, r19
    14f6:	aa 27       	eor	r26, r26
    14f8:	f0 0d       	add	r31, r0
    14fa:	b1 1d       	adc	r27, r1
    14fc:	aa 1f       	adc	r26, r26
    14fe:	64 9f       	mul	r22, r20
    1500:	66 27       	eor	r22, r22
    1502:	b0 0d       	add	r27, r0
    1504:	a1 1d       	adc	r26, r1
    1506:	66 1f       	adc	r22, r22
    1508:	82 9f       	mul	r24, r18
    150a:	22 27       	eor	r18, r18
    150c:	b0 0d       	add	r27, r0
    150e:	a1 1d       	adc	r26, r1
    1510:	62 1f       	adc	r22, r18
    1512:	73 9f       	mul	r23, r19
    1514:	b0 0d       	add	r27, r0
    1516:	a1 1d       	adc	r26, r1
    1518:	62 1f       	adc	r22, r18
    151a:	83 9f       	mul	r24, r19
    151c:	a0 0d       	add	r26, r0
    151e:	61 1d       	adc	r22, r1
    1520:	22 1f       	adc	r18, r18
    1522:	74 9f       	mul	r23, r20
    1524:	33 27       	eor	r19, r19
    1526:	a0 0d       	add	r26, r0
    1528:	61 1d       	adc	r22, r1
    152a:	23 1f       	adc	r18, r19
    152c:	84 9f       	mul	r24, r20
    152e:	60 0d       	add	r22, r0
    1530:	21 1d       	adc	r18, r1
    1532:	82 2f       	mov	r24, r18
    1534:	76 2f       	mov	r23, r22
    1536:	6a 2f       	mov	r22, r26
    1538:	11 24       	eor	r1, r1
    153a:	9f 57       	subi	r25, 0x7F	; 127
    153c:	50 40       	sbci	r21, 0x00	; 0
    153e:	9a f0       	brmi	.+38     	; 0x1566 <__mulsf3_pse+0x88>
    1540:	f1 f0       	breq	.+60     	; 0x157e <__mulsf3_pse+0xa0>
    1542:	88 23       	and	r24, r24
    1544:	4a f0       	brmi	.+18     	; 0x1558 <__mulsf3_pse+0x7a>
    1546:	ee 0f       	add	r30, r30
    1548:	ff 1f       	adc	r31, r31
    154a:	bb 1f       	adc	r27, r27
    154c:	66 1f       	adc	r22, r22
    154e:	77 1f       	adc	r23, r23
    1550:	88 1f       	adc	r24, r24
    1552:	91 50       	subi	r25, 0x01	; 1
    1554:	50 40       	sbci	r21, 0x00	; 0
    1556:	a9 f7       	brne	.-22     	; 0x1542 <__mulsf3_pse+0x64>
    1558:	9e 3f       	cpi	r25, 0xFE	; 254
    155a:	51 05       	cpc	r21, r1
    155c:	80 f0       	brcs	.+32     	; 0x157e <__mulsf3_pse+0xa0>
    155e:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__fp_inf>
    1562:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__fp_szero>
    1566:	5f 3f       	cpi	r21, 0xFF	; 255
    1568:	e4 f3       	brlt	.-8      	; 0x1562 <__mulsf3_pse+0x84>
    156a:	98 3e       	cpi	r25, 0xE8	; 232
    156c:	d4 f3       	brlt	.-12     	; 0x1562 <__mulsf3_pse+0x84>
    156e:	86 95       	lsr	r24
    1570:	77 95       	ror	r23
    1572:	67 95       	ror	r22
    1574:	b7 95       	ror	r27
    1576:	f7 95       	ror	r31
    1578:	e7 95       	ror	r30
    157a:	9f 5f       	subi	r25, 0xFF	; 255
    157c:	c1 f7       	brne	.-16     	; 0x156e <__mulsf3_pse+0x90>
    157e:	fe 2b       	or	r31, r30
    1580:	88 0f       	add	r24, r24
    1582:	91 1d       	adc	r25, r1
    1584:	96 95       	lsr	r25
    1586:	87 95       	ror	r24
    1588:	97 f9       	bld	r25, 7
    158a:	08 95       	ret

0000158c <__divmodhi4>:
    158c:	97 fb       	bst	r25, 7
    158e:	07 2e       	mov	r0, r23
    1590:	16 f4       	brtc	.+4      	; 0x1596 <__divmodhi4+0xa>
    1592:	00 94       	com	r0
    1594:	07 d0       	rcall	.+14     	; 0x15a4 <__divmodhi4_neg1>
    1596:	77 fd       	sbrc	r23, 7
    1598:	09 d0       	rcall	.+18     	; 0x15ac <__divmodhi4_neg2>
    159a:	0e 94 6d 0b 	call	0x16da	; 0x16da <__udivmodhi4>
    159e:	07 fc       	sbrc	r0, 7
    15a0:	05 d0       	rcall	.+10     	; 0x15ac <__divmodhi4_neg2>
    15a2:	3e f4       	brtc	.+14     	; 0x15b2 <__divmodhi4_exit>

000015a4 <__divmodhi4_neg1>:
    15a4:	90 95       	com	r25
    15a6:	81 95       	neg	r24
    15a8:	9f 4f       	sbci	r25, 0xFF	; 255
    15aa:	08 95       	ret

000015ac <__divmodhi4_neg2>:
    15ac:	70 95       	com	r23
    15ae:	61 95       	neg	r22
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255

000015b2 <__divmodhi4_exit>:
    15b2:	08 95       	ret

000015b4 <__udivmodsi4>:
    15b4:	a1 e2       	ldi	r26, 0x21	; 33
    15b6:	1a 2e       	mov	r1, r26
    15b8:	aa 1b       	sub	r26, r26
    15ba:	bb 1b       	sub	r27, r27
    15bc:	fd 01       	movw	r30, r26
    15be:	0d c0       	rjmp	.+26     	; 0x15da <__udivmodsi4_ep>

000015c0 <__udivmodsi4_loop>:
    15c0:	aa 1f       	adc	r26, r26
    15c2:	bb 1f       	adc	r27, r27
    15c4:	ee 1f       	adc	r30, r30
    15c6:	ff 1f       	adc	r31, r31
    15c8:	a2 17       	cp	r26, r18
    15ca:	b3 07       	cpc	r27, r19
    15cc:	e4 07       	cpc	r30, r20
    15ce:	f5 07       	cpc	r31, r21
    15d0:	20 f0       	brcs	.+8      	; 0x15da <__udivmodsi4_ep>
    15d2:	a2 1b       	sub	r26, r18
    15d4:	b3 0b       	sbc	r27, r19
    15d6:	e4 0b       	sbc	r30, r20
    15d8:	f5 0b       	sbc	r31, r21

000015da <__udivmodsi4_ep>:
    15da:	66 1f       	adc	r22, r22
    15dc:	77 1f       	adc	r23, r23
    15de:	88 1f       	adc	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	1a 94       	dec	r1
    15e4:	69 f7       	brne	.-38     	; 0x15c0 <__udivmodsi4_loop>
    15e6:	60 95       	com	r22
    15e8:	70 95       	com	r23
    15ea:	80 95       	com	r24
    15ec:	90 95       	com	r25
    15ee:	9b 01       	movw	r18, r22
    15f0:	ac 01       	movw	r20, r24
    15f2:	bd 01       	movw	r22, r26
    15f4:	cf 01       	movw	r24, r30
    15f6:	08 95       	ret

000015f8 <__divmodsi4>:
    15f8:	05 2e       	mov	r0, r21
    15fa:	97 fb       	bst	r25, 7
    15fc:	1e f4       	brtc	.+6      	; 0x1604 <__divmodsi4+0xc>
    15fe:	00 94       	com	r0
    1600:	0e 94 13 0b 	call	0x1626	; 0x1626 <__negsi2>
    1604:	57 fd       	sbrc	r21, 7
    1606:	07 d0       	rcall	.+14     	; 0x1616 <__divmodsi4_neg2>
    1608:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__udivmodsi4>
    160c:	07 fc       	sbrc	r0, 7
    160e:	03 d0       	rcall	.+6      	; 0x1616 <__divmodsi4_neg2>
    1610:	4e f4       	brtc	.+18     	; 0x1624 <__divmodsi4_exit>
    1612:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__negsi2>

00001616 <__divmodsi4_neg2>:
    1616:	50 95       	com	r21
    1618:	40 95       	com	r20
    161a:	30 95       	com	r19
    161c:	21 95       	neg	r18
    161e:	3f 4f       	sbci	r19, 0xFF	; 255
    1620:	4f 4f       	sbci	r20, 0xFF	; 255
    1622:	5f 4f       	sbci	r21, 0xFF	; 255

00001624 <__divmodsi4_exit>:
    1624:	08 95       	ret

00001626 <__negsi2>:
    1626:	90 95       	com	r25
    1628:	80 95       	com	r24
    162a:	70 95       	com	r23
    162c:	61 95       	neg	r22
    162e:	7f 4f       	sbci	r23, 0xFF	; 255
    1630:	8f 4f       	sbci	r24, 0xFF	; 255
    1632:	9f 4f       	sbci	r25, 0xFF	; 255
    1634:	08 95       	ret

00001636 <__umulhisi3>:
    1636:	a2 9f       	mul	r26, r18
    1638:	b0 01       	movw	r22, r0
    163a:	b3 9f       	mul	r27, r19
    163c:	c0 01       	movw	r24, r0
    163e:	a3 9f       	mul	r26, r19
    1640:	70 0d       	add	r23, r0
    1642:	81 1d       	adc	r24, r1
    1644:	11 24       	eor	r1, r1
    1646:	91 1d       	adc	r25, r1
    1648:	b2 9f       	mul	r27, r18
    164a:	70 0d       	add	r23, r0
    164c:	81 1d       	adc	r24, r1
    164e:	11 24       	eor	r1, r1
    1650:	91 1d       	adc	r25, r1
    1652:	08 95       	ret

00001654 <__ashldi3>:
    1654:	0f 93       	push	r16
    1656:	08 30       	cpi	r16, 0x08	; 8
    1658:	90 f0       	brcs	.+36     	; 0x167e <__ashldi3+0x2a>
    165a:	98 2f       	mov	r25, r24
    165c:	87 2f       	mov	r24, r23
    165e:	76 2f       	mov	r23, r22
    1660:	65 2f       	mov	r22, r21
    1662:	54 2f       	mov	r21, r20
    1664:	43 2f       	mov	r20, r19
    1666:	32 2f       	mov	r19, r18
    1668:	22 27       	eor	r18, r18
    166a:	08 50       	subi	r16, 0x08	; 8
    166c:	f4 cf       	rjmp	.-24     	; 0x1656 <__ashldi3+0x2>
    166e:	22 0f       	add	r18, r18
    1670:	33 1f       	adc	r19, r19
    1672:	44 1f       	adc	r20, r20
    1674:	55 1f       	adc	r21, r21
    1676:	66 1f       	adc	r22, r22
    1678:	77 1f       	adc	r23, r23
    167a:	88 1f       	adc	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	0a 95       	dec	r16
    1680:	b2 f7       	brpl	.-20     	; 0x166e <__ashldi3+0x1a>
    1682:	0f 91       	pop	r16
    1684:	08 95       	ret

00001686 <__ashrdi3>:
    1686:	97 fb       	bst	r25, 7
    1688:	10 f8       	bld	r1, 0

0000168a <__lshrdi3>:
    168a:	16 94       	lsr	r1
    168c:	00 08       	sbc	r0, r0
    168e:	0f 93       	push	r16
    1690:	08 30       	cpi	r16, 0x08	; 8
    1692:	98 f0       	brcs	.+38     	; 0x16ba <__lshrdi3+0x30>
    1694:	08 50       	subi	r16, 0x08	; 8
    1696:	23 2f       	mov	r18, r19
    1698:	34 2f       	mov	r19, r20
    169a:	45 2f       	mov	r20, r21
    169c:	56 2f       	mov	r21, r22
    169e:	67 2f       	mov	r22, r23
    16a0:	78 2f       	mov	r23, r24
    16a2:	89 2f       	mov	r24, r25
    16a4:	90 2d       	mov	r25, r0
    16a6:	f4 cf       	rjmp	.-24     	; 0x1690 <__lshrdi3+0x6>
    16a8:	05 94       	asr	r0
    16aa:	97 95       	ror	r25
    16ac:	87 95       	ror	r24
    16ae:	77 95       	ror	r23
    16b0:	67 95       	ror	r22
    16b2:	57 95       	ror	r21
    16b4:	47 95       	ror	r20
    16b6:	37 95       	ror	r19
    16b8:	27 95       	ror	r18
    16ba:	0a 95       	dec	r16
    16bc:	aa f7       	brpl	.-22     	; 0x16a8 <__lshrdi3+0x1e>
    16be:	0f 91       	pop	r16
    16c0:	08 95       	ret

000016c2 <__cmpdi2_s8>:
    16c2:	00 24       	eor	r0, r0
    16c4:	a7 fd       	sbrc	r26, 7
    16c6:	00 94       	com	r0
    16c8:	2a 17       	cp	r18, r26
    16ca:	30 05       	cpc	r19, r0
    16cc:	40 05       	cpc	r20, r0
    16ce:	50 05       	cpc	r21, r0
    16d0:	60 05       	cpc	r22, r0
    16d2:	70 05       	cpc	r23, r0
    16d4:	80 05       	cpc	r24, r0
    16d6:	90 05       	cpc	r25, r0
    16d8:	08 95       	ret

000016da <__udivmodhi4>:
    16da:	aa 1b       	sub	r26, r26
    16dc:	bb 1b       	sub	r27, r27
    16de:	51 e1       	ldi	r21, 0x11	; 17
    16e0:	07 c0       	rjmp	.+14     	; 0x16f0 <__udivmodhi4_ep>

000016e2 <__udivmodhi4_loop>:
    16e2:	aa 1f       	adc	r26, r26
    16e4:	bb 1f       	adc	r27, r27
    16e6:	a6 17       	cp	r26, r22
    16e8:	b7 07       	cpc	r27, r23
    16ea:	10 f0       	brcs	.+4      	; 0x16f0 <__udivmodhi4_ep>
    16ec:	a6 1b       	sub	r26, r22
    16ee:	b7 0b       	sbc	r27, r23

000016f0 <__udivmodhi4_ep>:
    16f0:	88 1f       	adc	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	5a 95       	dec	r21
    16f6:	a9 f7       	brne	.-22     	; 0x16e2 <__udivmodhi4_loop>
    16f8:	80 95       	com	r24
    16fa:	90 95       	com	r25
    16fc:	bc 01       	movw	r22, r24
    16fe:	cd 01       	movw	r24, r26
    1700:	08 95       	ret

00001702 <strtol>:
    1702:	a0 e0       	ldi	r26, 0x00	; 0
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e7 e8       	ldi	r30, 0x87	; 135
    1708:	fb e0       	ldi	r31, 0x0B	; 11
    170a:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__prologue_saves__+0x2>
    170e:	5c 01       	movw	r10, r24
    1710:	6b 01       	movw	r12, r22
    1712:	7a 01       	movw	r14, r20
    1714:	61 15       	cp	r22, r1
    1716:	71 05       	cpc	r23, r1
    1718:	19 f0       	breq	.+6      	; 0x1720 <strtol+0x1e>
    171a:	fb 01       	movw	r30, r22
    171c:	80 83       	st	Z, r24
    171e:	91 83       	std	Z+1, r25	; 0x01
    1720:	e1 14       	cp	r14, r1
    1722:	f1 04       	cpc	r15, r1
    1724:	29 f0       	breq	.+10     	; 0x1730 <strtol+0x2e>
    1726:	c7 01       	movw	r24, r14
    1728:	02 97       	sbiw	r24, 0x02	; 2
    172a:	83 97       	sbiw	r24, 0x23	; 35
    172c:	08 f0       	brcs	.+2      	; 0x1730 <strtol+0x2e>
    172e:	e5 c0       	rjmp	.+458    	; 0x18fa <strtol+0x1f8>
    1730:	e5 01       	movw	r28, r10
    1732:	21 96       	adiw	r28, 0x01	; 1
    1734:	f5 01       	movw	r30, r10
    1736:	10 81       	ld	r17, Z
    1738:	81 2f       	mov	r24, r17
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 97 0c 	call	0x192e	; 0x192e <isspace>
    1740:	89 2b       	or	r24, r25
    1742:	11 f0       	breq	.+4      	; 0x1748 <strtol+0x46>
    1744:	5e 01       	movw	r10, r28
    1746:	f4 cf       	rjmp	.-24     	; 0x1730 <strtol+0x2e>
    1748:	1d 32       	cpi	r17, 0x2D	; 45
    174a:	29 f4       	brne	.+10     	; 0x1756 <strtol+0x54>
    174c:	21 96       	adiw	r28, 0x01	; 1
    174e:	f5 01       	movw	r30, r10
    1750:	11 81       	ldd	r17, Z+1	; 0x01
    1752:	01 e0       	ldi	r16, 0x01	; 1
    1754:	07 c0       	rjmp	.+14     	; 0x1764 <strtol+0x62>
    1756:	1b 32       	cpi	r17, 0x2B	; 43
    1758:	21 f4       	brne	.+8      	; 0x1762 <strtol+0x60>
    175a:	e5 01       	movw	r28, r10
    175c:	22 96       	adiw	r28, 0x02	; 2
    175e:	f5 01       	movw	r30, r10
    1760:	11 81       	ldd	r17, Z+1	; 0x01
    1762:	00 e0       	ldi	r16, 0x00	; 0
    1764:	e1 14       	cp	r14, r1
    1766:	f1 04       	cpc	r15, r1
    1768:	09 f1       	breq	.+66     	; 0x17ac <strtol+0xaa>
    176a:	f0 e1       	ldi	r31, 0x10	; 16
    176c:	ef 16       	cp	r14, r31
    176e:	f1 04       	cpc	r15, r1
    1770:	29 f4       	brne	.+10     	; 0x177c <strtol+0x7a>
    1772:	3f c0       	rjmp	.+126    	; 0x17f2 <strtol+0xf0>
    1774:	10 e3       	ldi	r17, 0x30	; 48
    1776:	e1 14       	cp	r14, r1
    1778:	f1 04       	cpc	r15, r1
    177a:	21 f1       	breq	.+72     	; 0x17c4 <strtol+0xc2>
    177c:	28 e0       	ldi	r18, 0x08	; 8
    177e:	e2 16       	cp	r14, r18
    1780:	f1 04       	cpc	r15, r1
    1782:	01 f1       	breq	.+64     	; 0x17c4 <strtol+0xc2>
    1784:	54 f4       	brge	.+20     	; 0x179a <strtol+0x98>
    1786:	e2 e0       	ldi	r30, 0x02	; 2
    1788:	ee 16       	cp	r14, r30
    178a:	f1 04       	cpc	r15, r1
    178c:	21 f5       	brne	.+72     	; 0x17d6 <strtol+0xd4>
    178e:	81 2c       	mov	r8, r1
    1790:	91 2c       	mov	r9, r1
    1792:	a1 2c       	mov	r10, r1
    1794:	b0 e4       	ldi	r27, 0x40	; 64
    1796:	bb 2e       	mov	r11, r27
    1798:	3e c0       	rjmp	.+124    	; 0x1816 <strtol+0x114>
    179a:	fa e0       	ldi	r31, 0x0A	; 10
    179c:	ef 16       	cp	r14, r31
    179e:	f1 04       	cpc	r15, r1
    17a0:	39 f0       	breq	.+14     	; 0x17b0 <strtol+0xae>
    17a2:	20 e1       	ldi	r18, 0x10	; 16
    17a4:	e2 16       	cp	r14, r18
    17a6:	f1 04       	cpc	r15, r1
    17a8:	b1 f4       	brne	.+44     	; 0x17d6 <strtol+0xd4>
    17aa:	30 c0       	rjmp	.+96     	; 0x180c <strtol+0x10a>
    17ac:	10 33       	cpi	r17, 0x30	; 48
    17ae:	19 f1       	breq	.+70     	; 0x17f6 <strtol+0xf4>
    17b0:	fa e0       	ldi	r31, 0x0A	; 10
    17b2:	ef 2e       	mov	r14, r31
    17b4:	f1 2c       	mov	r15, r1
    17b6:	ac ec       	ldi	r26, 0xCC	; 204
    17b8:	8a 2e       	mov	r8, r26
    17ba:	98 2c       	mov	r9, r8
    17bc:	a8 2c       	mov	r10, r8
    17be:	ac e0       	ldi	r26, 0x0C	; 12
    17c0:	ba 2e       	mov	r11, r26
    17c2:	29 c0       	rjmp	.+82     	; 0x1816 <strtol+0x114>
    17c4:	78 e0       	ldi	r23, 0x08	; 8
    17c6:	e7 2e       	mov	r14, r23
    17c8:	f1 2c       	mov	r15, r1
    17ca:	81 2c       	mov	r8, r1
    17cc:	91 2c       	mov	r9, r1
    17ce:	a1 2c       	mov	r10, r1
    17d0:	e0 e1       	ldi	r30, 0x10	; 16
    17d2:	be 2e       	mov	r11, r30
    17d4:	20 c0       	rjmp	.+64     	; 0x1816 <strtol+0x114>
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e8       	ldi	r25, 0x80	; 128
    17de:	97 01       	movw	r18, r14
    17e0:	0f 2c       	mov	r0, r15
    17e2:	00 0c       	add	r0, r0
    17e4:	44 0b       	sbc	r20, r20
    17e6:	55 0b       	sbc	r21, r21
    17e8:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__udivmodsi4>
    17ec:	49 01       	movw	r8, r18
    17ee:	5a 01       	movw	r10, r20
    17f0:	12 c0       	rjmp	.+36     	; 0x1816 <strtol+0x114>
    17f2:	10 33       	cpi	r17, 0x30	; 48
    17f4:	59 f4       	brne	.+22     	; 0x180c <strtol+0x10a>
    17f6:	88 81       	ld	r24, Y
    17f8:	8f 7d       	andi	r24, 0xDF	; 223
    17fa:	88 35       	cpi	r24, 0x58	; 88
    17fc:	09 f0       	breq	.+2      	; 0x1800 <strtol+0xfe>
    17fe:	ba cf       	rjmp	.-140    	; 0x1774 <strtol+0x72>
    1800:	19 81       	ldd	r17, Y+1	; 0x01
    1802:	22 96       	adiw	r28, 0x02	; 2
    1804:	02 60       	ori	r16, 0x02	; 2
    1806:	80 e1       	ldi	r24, 0x10	; 16
    1808:	e8 2e       	mov	r14, r24
    180a:	f1 2c       	mov	r15, r1
    180c:	81 2c       	mov	r8, r1
    180e:	91 2c       	mov	r9, r1
    1810:	a1 2c       	mov	r10, r1
    1812:	68 e0       	ldi	r22, 0x08	; 8
    1814:	b6 2e       	mov	r11, r22
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	cb 01       	movw	r24, r22
    181e:	27 01       	movw	r4, r14
    1820:	0f 2c       	mov	r0, r15
    1822:	00 0c       	add	r0, r0
    1824:	66 08       	sbc	r6, r6
    1826:	77 08       	sbc	r7, r7
    1828:	fe 01       	movw	r30, r28
    182a:	50 ed       	ldi	r21, 0xD0	; 208
    182c:	35 2e       	mov	r3, r21
    182e:	31 0e       	add	r3, r17
    1830:	29 e0       	ldi	r18, 0x09	; 9
    1832:	23 15       	cp	r18, r3
    1834:	70 f4       	brcc	.+28     	; 0x1852 <strtol+0x150>
    1836:	2f eb       	ldi	r18, 0xBF	; 191
    1838:	21 0f       	add	r18, r17
    183a:	2a 31       	cpi	r18, 0x1A	; 26
    183c:	18 f4       	brcc	.+6      	; 0x1844 <strtol+0x142>
    183e:	39 ec       	ldi	r19, 0xC9	; 201
    1840:	33 2e       	mov	r3, r19
    1842:	06 c0       	rjmp	.+12     	; 0x1850 <strtol+0x14e>
    1844:	2f e9       	ldi	r18, 0x9F	; 159
    1846:	21 0f       	add	r18, r17
    1848:	2a 31       	cpi	r18, 0x1A	; 26
    184a:	18 f5       	brcc	.+70     	; 0x1892 <strtol+0x190>
    184c:	29 ea       	ldi	r18, 0xA9	; 169
    184e:	32 2e       	mov	r3, r18
    1850:	31 0e       	add	r3, r17
    1852:	23 2d       	mov	r18, r3
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	2e 15       	cp	r18, r14
    1858:	3f 05       	cpc	r19, r15
    185a:	dc f4       	brge	.+54     	; 0x1892 <strtol+0x190>
    185c:	47 fd       	sbrc	r20, 7
    185e:	16 c0       	rjmp	.+44     	; 0x188c <strtol+0x18a>
    1860:	86 16       	cp	r8, r22
    1862:	97 06       	cpc	r9, r23
    1864:	a8 06       	cpc	r10, r24
    1866:	b9 06       	cpc	r11, r25
    1868:	70 f0       	brcs	.+28     	; 0x1886 <strtol+0x184>
    186a:	a3 01       	movw	r20, r6
    186c:	92 01       	movw	r18, r4
    186e:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__mulsi3>
    1872:	63 0d       	add	r22, r3
    1874:	71 1d       	adc	r23, r1
    1876:	81 1d       	adc	r24, r1
    1878:	91 1d       	adc	r25, r1
    187a:	61 30       	cpi	r22, 0x01	; 1
    187c:	71 05       	cpc	r23, r1
    187e:	81 05       	cpc	r24, r1
    1880:	20 e8       	ldi	r18, 0x80	; 128
    1882:	92 07       	cpc	r25, r18
    1884:	10 f0       	brcs	.+4      	; 0x188a <strtol+0x188>
    1886:	4f ef       	ldi	r20, 0xFF	; 255
    1888:	01 c0       	rjmp	.+2      	; 0x188c <strtol+0x18a>
    188a:	41 e0       	ldi	r20, 0x01	; 1
    188c:	21 96       	adiw	r28, 0x01	; 1
    188e:	10 81       	ld	r17, Z
    1890:	cb cf       	rjmp	.-106    	; 0x1828 <strtol+0x126>
    1892:	20 2f       	mov	r18, r16
    1894:	21 70       	andi	r18, 0x01	; 1
    1896:	c1 14       	cp	r12, r1
    1898:	d1 04       	cpc	r13, r1
    189a:	71 f0       	breq	.+28     	; 0x18b8 <strtol+0x1b6>
    189c:	44 23       	and	r20, r20
    189e:	29 f0       	breq	.+10     	; 0x18aa <strtol+0x1a8>
    18a0:	21 97       	sbiw	r28, 0x01	; 1
    18a2:	f6 01       	movw	r30, r12
    18a4:	c0 83       	st	Z, r28
    18a6:	d1 83       	std	Z+1, r29	; 0x01
    18a8:	07 c0       	rjmp	.+14     	; 0x18b8 <strtol+0x1b6>
    18aa:	01 ff       	sbrs	r16, 1
    18ac:	19 c0       	rjmp	.+50     	; 0x18e0 <strtol+0x1de>
    18ae:	22 97       	sbiw	r28, 0x02	; 2
    18b0:	f6 01       	movw	r30, r12
    18b2:	c0 83       	st	Z, r28
    18b4:	d1 83       	std	Z+1, r29	; 0x01
    18b6:	14 c0       	rjmp	.+40     	; 0x18e0 <strtol+0x1de>
    18b8:	47 ff       	sbrs	r20, 7
    18ba:	12 c0       	rjmp	.+36     	; 0x18e0 <strtol+0x1de>
    18bc:	22 23       	and	r18, r18
    18be:	29 f0       	breq	.+10     	; 0x18ca <strtol+0x1c8>
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e8       	ldi	r25, 0x80	; 128
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <strtol+0x1d0>
    18ca:	6f ef       	ldi	r22, 0xFF	; 255
    18cc:	7f ef       	ldi	r23, 0xFF	; 255
    18ce:	8f ef       	ldi	r24, 0xFF	; 255
    18d0:	9f e7       	ldi	r25, 0x7F	; 127
    18d2:	22 e2       	ldi	r18, 0x22	; 34
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	20 93 f2 64 	sts	0x64F2, r18	; 0x8064f2 <errno>
    18da:	30 93 f3 64 	sts	0x64F3, r19	; 0x8064f3 <errno+0x1>
    18de:	09 c0       	rjmp	.+18     	; 0x18f2 <strtol+0x1f0>
    18e0:	22 23       	and	r18, r18
    18e2:	81 f0       	breq	.+32     	; 0x1904 <strtol+0x202>
    18e4:	90 95       	com	r25
    18e6:	80 95       	com	r24
    18e8:	70 95       	com	r23
    18ea:	61 95       	neg	r22
    18ec:	7f 4f       	sbci	r23, 0xFF	; 255
    18ee:	8f 4f       	sbci	r24, 0xFF	; 255
    18f0:	9f 4f       	sbci	r25, 0xFF	; 255
    18f2:	46 2f       	mov	r20, r22
    18f4:	37 2f       	mov	r19, r23
    18f6:	28 2f       	mov	r18, r24
    18f8:	12 c0       	rjmp	.+36     	; 0x191e <strtol+0x21c>
    18fa:	40 e0       	ldi	r20, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0d c0       	rjmp	.+26     	; 0x191e <strtol+0x21c>
    1904:	97 ff       	sbrs	r25, 7
    1906:	f5 cf       	rjmp	.-22     	; 0x18f2 <strtol+0x1f0>
    1908:	82 e2       	ldi	r24, 0x22	; 34
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	80 93 f2 64 	sts	0x64F2, r24	; 0x8064f2 <errno>
    1910:	90 93 f3 64 	sts	0x64F3, r25	; 0x8064f3 <errno+0x1>
    1914:	6f ef       	ldi	r22, 0xFF	; 255
    1916:	7f ef       	ldi	r23, 0xFF	; 255
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	9f e7       	ldi	r25, 0x7F	; 127
    191c:	ea cf       	rjmp	.-44     	; 0x18f2 <strtol+0x1f0>
    191e:	64 2f       	mov	r22, r20
    1920:	73 2f       	mov	r23, r19
    1922:	82 2f       	mov	r24, r18
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	e1 e1       	ldi	r30, 0x11	; 17
    192a:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <__epilogue_restores__+0x2>

0000192e <isspace>:
    192e:	91 11       	cpse	r25, r1
    1930:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__ctype_isfalse>
    1934:	80 32       	cpi	r24, 0x20	; 32
    1936:	19 f0       	breq	.+6      	; 0x193e <isspace+0x10>
    1938:	89 50       	subi	r24, 0x09	; 9
    193a:	85 50       	subi	r24, 0x05	; 5
    193c:	c8 f7       	brcc	.-14     	; 0x1930 <isspace+0x2>
    193e:	08 95       	ret

00001940 <strtok>:
    1940:	42 ec       	ldi	r20, 0xC2	; 194
    1942:	54 e6       	ldi	r21, 0x64	; 100
    1944:	0e 94 cb 0c 	call	0x1996	; 0x1996 <strtok_r>
    1948:	08 95       	ret

0000194a <memcpy>:
    194a:	fb 01       	movw	r30, r22
    194c:	dc 01       	movw	r26, r24
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <memcpy+0xa>
    1950:	01 90       	ld	r0, Z+
    1952:	0d 92       	st	X+, r0
    1954:	41 50       	subi	r20, 0x01	; 1
    1956:	50 40       	sbci	r21, 0x00	; 0
    1958:	d8 f7       	brcc	.-10     	; 0x1950 <memcpy+0x6>
    195a:	08 95       	ret

0000195c <strncmp>:
    195c:	fb 01       	movw	r30, r22
    195e:	dc 01       	movw	r26, r24
    1960:	41 50       	subi	r20, 0x01	; 1
    1962:	50 40       	sbci	r21, 0x00	; 0
    1964:	30 f0       	brcs	.+12     	; 0x1972 <strncmp+0x16>
    1966:	8d 91       	ld	r24, X+
    1968:	01 90       	ld	r0, Z+
    196a:	80 19       	sub	r24, r0
    196c:	19 f4       	brne	.+6      	; 0x1974 <strncmp+0x18>
    196e:	00 20       	and	r0, r0
    1970:	b9 f7       	brne	.-18     	; 0x1960 <strncmp+0x4>
    1972:	88 1b       	sub	r24, r24
    1974:	99 0b       	sbc	r25, r25
    1976:	08 95       	ret

00001978 <strncpy>:
    1978:	fb 01       	movw	r30, r22
    197a:	dc 01       	movw	r26, r24
    197c:	41 50       	subi	r20, 0x01	; 1
    197e:	50 40       	sbci	r21, 0x00	; 0
    1980:	48 f0       	brcs	.+18     	; 0x1994 <strncpy+0x1c>
    1982:	01 90       	ld	r0, Z+
    1984:	0d 92       	st	X+, r0
    1986:	00 20       	and	r0, r0
    1988:	c9 f7       	brne	.-14     	; 0x197c <strncpy+0x4>
    198a:	01 c0       	rjmp	.+2      	; 0x198e <strncpy+0x16>
    198c:	1d 92       	st	X+, r1
    198e:	41 50       	subi	r20, 0x01	; 1
    1990:	50 40       	sbci	r21, 0x00	; 0
    1992:	e0 f7       	brcc	.-8      	; 0x198c <strncpy+0x14>
    1994:	08 95       	ret

00001996 <strtok_r>:
    1996:	fa 01       	movw	r30, r20
    1998:	a1 91       	ld	r26, Z+
    199a:	b0 81       	ld	r27, Z
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	19 f4       	brne	.+6      	; 0x19a6 <strtok_r+0x10>
    19a0:	10 97       	sbiw	r26, 0x00	; 0
    19a2:	e1 f0       	breq	.+56     	; 0x19dc <strtok_r+0x46>
    19a4:	cd 01       	movw	r24, r26
    19a6:	dc 01       	movw	r26, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0d 90       	ld	r0, X+
    19ac:	00 20       	and	r0, r0
    19ae:	11 f4       	brne	.+4      	; 0x19b4 <strtok_r+0x1e>
    19b0:	c0 01       	movw	r24, r0
    19b2:	13 c0       	rjmp	.+38     	; 0x19da <strtok_r+0x44>
    19b4:	fb 01       	movw	r30, r22
    19b6:	21 91       	ld	r18, Z+
    19b8:	22 23       	and	r18, r18
    19ba:	19 f0       	breq	.+6      	; 0x19c2 <strtok_r+0x2c>
    19bc:	20 15       	cp	r18, r0
    19be:	d9 f7       	brne	.-10     	; 0x19b6 <strtok_r+0x20>
    19c0:	f3 cf       	rjmp	.-26     	; 0x19a8 <strtok_r+0x12>
    19c2:	fb 01       	movw	r30, r22
    19c4:	21 91       	ld	r18, Z+
    19c6:	20 15       	cp	r18, r0
    19c8:	19 f4       	brne	.+6      	; 0x19d0 <strtok_r+0x3a>
    19ca:	1e 92       	st	-X, r1
    19cc:	11 96       	adiw	r26, 0x01	; 1
    19ce:	06 c0       	rjmp	.+12     	; 0x19dc <strtok_r+0x46>
    19d0:	22 23       	and	r18, r18
    19d2:	c1 f7       	brne	.-16     	; 0x19c4 <strtok_r+0x2e>
    19d4:	0d 90       	ld	r0, X+
    19d6:	00 20       	and	r0, r0
    19d8:	a1 f7       	brne	.-24     	; 0x19c2 <strtok_r+0x2c>
    19da:	d0 01       	movw	r26, r0
    19dc:	fa 01       	movw	r30, r20
    19de:	a1 93       	st	Z+, r26
    19e0:	b0 83       	st	Z, r27
    19e2:	08 95       	ret

000019e4 <vsnprintf>:
    19e4:	ae e0       	ldi	r26, 0x0E	; 14
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e8 ef       	ldi	r30, 0xF8	; 248
    19ea:	fc e0       	ldi	r31, 0x0C	; 12
    19ec:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__prologue_saves__+0x1c>
    19f0:	8c 01       	movw	r16, r24
    19f2:	fa 01       	movw	r30, r20
    19f4:	86 e0       	ldi	r24, 0x06	; 6
    19f6:	8c 83       	std	Y+4, r24	; 0x04
    19f8:	09 83       	std	Y+1, r16	; 0x01
    19fa:	1a 83       	std	Y+2, r17	; 0x02
    19fc:	77 ff       	sbrs	r23, 7
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <vsnprintf+0x20>
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	70 e8       	ldi	r23, 0x80	; 128
    1a04:	cb 01       	movw	r24, r22
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	8d 83       	std	Y+5, r24	; 0x05
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	a9 01       	movw	r20, r18
    1a0e:	bf 01       	movw	r22, r30
    1a10:	ce 01       	movw	r24, r28
    1a12:	01 96       	adiw	r24, 0x01	; 1
    1a14:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <vfprintf>
    1a18:	4d 81       	ldd	r20, Y+5	; 0x05
    1a1a:	5e 81       	ldd	r21, Y+6	; 0x06
    1a1c:	57 fd       	sbrc	r21, 7
    1a1e:	0a c0       	rjmp	.+20     	; 0x1a34 <vsnprintf+0x50>
    1a20:	2f 81       	ldd	r18, Y+7	; 0x07
    1a22:	38 85       	ldd	r19, Y+8	; 0x08
    1a24:	42 17       	cp	r20, r18
    1a26:	53 07       	cpc	r21, r19
    1a28:	0c f4       	brge	.+2      	; 0x1a2c <vsnprintf+0x48>
    1a2a:	9a 01       	movw	r18, r20
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	e2 0f       	add	r30, r18
    1a30:	f3 1f       	adc	r31, r19
    1a32:	10 82       	st	Z, r1
    1a34:	2e 96       	adiw	r28, 0x0e	; 14
    1a36:	e4 e0       	ldi	r30, 0x04	; 4
    1a38:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__epilogue_restores__+0x1c>

00001a3c <vfprintf>:
    1a3c:	ab e0       	ldi	r26, 0x0B	; 11
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e4 e2       	ldi	r30, 0x24	; 36
    1a42:	fd e0       	ldi	r31, 0x0D	; 13
    1a44:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__prologue_saves__>
    1a48:	6c 01       	movw	r12, r24
    1a4a:	7b 01       	movw	r14, r22
    1a4c:	8a 01       	movw	r16, r20
    1a4e:	fc 01       	movw	r30, r24
    1a50:	16 82       	std	Z+6, r1	; 0x06
    1a52:	17 82       	std	Z+7, r1	; 0x07
    1a54:	83 81       	ldd	r24, Z+3	; 0x03
    1a56:	81 ff       	sbrs	r24, 1
    1a58:	cc c1       	rjmp	.+920    	; 0x1df2 <vfprintf+0x3b6>
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	3c 01       	movw	r6, r24
    1a60:	f6 01       	movw	r30, r12
    1a62:	93 81       	ldd	r25, Z+3	; 0x03
    1a64:	f7 01       	movw	r30, r14
    1a66:	93 fd       	sbrc	r25, 3
    1a68:	85 91       	lpm	r24, Z+
    1a6a:	93 ff       	sbrs	r25, 3
    1a6c:	81 91       	ld	r24, Z+
    1a6e:	7f 01       	movw	r14, r30
    1a70:	88 23       	and	r24, r24
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <vfprintf+0x3a>
    1a74:	ba c1       	rjmp	.+884    	; 0x1dea <vfprintf+0x3ae>
    1a76:	85 32       	cpi	r24, 0x25	; 37
    1a78:	39 f4       	brne	.+14     	; 0x1a88 <vfprintf+0x4c>
    1a7a:	93 fd       	sbrc	r25, 3
    1a7c:	85 91       	lpm	r24, Z+
    1a7e:	93 ff       	sbrs	r25, 3
    1a80:	81 91       	ld	r24, Z+
    1a82:	7f 01       	movw	r14, r30
    1a84:	85 32       	cpi	r24, 0x25	; 37
    1a86:	29 f4       	brne	.+10     	; 0x1a92 <vfprintf+0x56>
    1a88:	b6 01       	movw	r22, r12
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <fputc>
    1a90:	e7 cf       	rjmp	.-50     	; 0x1a60 <vfprintf+0x24>
    1a92:	91 2c       	mov	r9, r1
    1a94:	21 2c       	mov	r2, r1
    1a96:	31 2c       	mov	r3, r1
    1a98:	ff e1       	ldi	r31, 0x1F	; 31
    1a9a:	f3 15       	cp	r31, r3
    1a9c:	d8 f0       	brcs	.+54     	; 0x1ad4 <vfprintf+0x98>
    1a9e:	8b 32       	cpi	r24, 0x2B	; 43
    1aa0:	79 f0       	breq	.+30     	; 0x1ac0 <vfprintf+0x84>
    1aa2:	38 f4       	brcc	.+14     	; 0x1ab2 <vfprintf+0x76>
    1aa4:	80 32       	cpi	r24, 0x20	; 32
    1aa6:	79 f0       	breq	.+30     	; 0x1ac6 <vfprintf+0x8a>
    1aa8:	83 32       	cpi	r24, 0x23	; 35
    1aaa:	a1 f4       	brne	.+40     	; 0x1ad4 <vfprintf+0x98>
    1aac:	23 2d       	mov	r18, r3
    1aae:	20 61       	ori	r18, 0x10	; 16
    1ab0:	1d c0       	rjmp	.+58     	; 0x1aec <vfprintf+0xb0>
    1ab2:	8d 32       	cpi	r24, 0x2D	; 45
    1ab4:	61 f0       	breq	.+24     	; 0x1ace <vfprintf+0x92>
    1ab6:	80 33       	cpi	r24, 0x30	; 48
    1ab8:	69 f4       	brne	.+26     	; 0x1ad4 <vfprintf+0x98>
    1aba:	23 2d       	mov	r18, r3
    1abc:	21 60       	ori	r18, 0x01	; 1
    1abe:	16 c0       	rjmp	.+44     	; 0x1aec <vfprintf+0xb0>
    1ac0:	83 2d       	mov	r24, r3
    1ac2:	82 60       	ori	r24, 0x02	; 2
    1ac4:	38 2e       	mov	r3, r24
    1ac6:	e3 2d       	mov	r30, r3
    1ac8:	e4 60       	ori	r30, 0x04	; 4
    1aca:	3e 2e       	mov	r3, r30
    1acc:	2a c0       	rjmp	.+84     	; 0x1b22 <vfprintf+0xe6>
    1ace:	f3 2d       	mov	r31, r3
    1ad0:	f8 60       	ori	r31, 0x08	; 8
    1ad2:	1d c0       	rjmp	.+58     	; 0x1b0e <vfprintf+0xd2>
    1ad4:	37 fc       	sbrc	r3, 7
    1ad6:	2d c0       	rjmp	.+90     	; 0x1b32 <vfprintf+0xf6>
    1ad8:	20 ed       	ldi	r18, 0xD0	; 208
    1ada:	28 0f       	add	r18, r24
    1adc:	2a 30       	cpi	r18, 0x0A	; 10
    1ade:	40 f0       	brcs	.+16     	; 0x1af0 <vfprintf+0xb4>
    1ae0:	8e 32       	cpi	r24, 0x2E	; 46
    1ae2:	b9 f4       	brne	.+46     	; 0x1b12 <vfprintf+0xd6>
    1ae4:	36 fc       	sbrc	r3, 6
    1ae6:	81 c1       	rjmp	.+770    	; 0x1dea <vfprintf+0x3ae>
    1ae8:	23 2d       	mov	r18, r3
    1aea:	20 64       	ori	r18, 0x40	; 64
    1aec:	32 2e       	mov	r3, r18
    1aee:	19 c0       	rjmp	.+50     	; 0x1b22 <vfprintf+0xe6>
    1af0:	36 fe       	sbrs	r3, 6
    1af2:	06 c0       	rjmp	.+12     	; 0x1b00 <vfprintf+0xc4>
    1af4:	8a e0       	ldi	r24, 0x0A	; 10
    1af6:	98 9e       	mul	r9, r24
    1af8:	20 0d       	add	r18, r0
    1afa:	11 24       	eor	r1, r1
    1afc:	92 2e       	mov	r9, r18
    1afe:	11 c0       	rjmp	.+34     	; 0x1b22 <vfprintf+0xe6>
    1b00:	ea e0       	ldi	r30, 0x0A	; 10
    1b02:	2e 9e       	mul	r2, r30
    1b04:	20 0d       	add	r18, r0
    1b06:	11 24       	eor	r1, r1
    1b08:	22 2e       	mov	r2, r18
    1b0a:	f3 2d       	mov	r31, r3
    1b0c:	f0 62       	ori	r31, 0x20	; 32
    1b0e:	3f 2e       	mov	r3, r31
    1b10:	08 c0       	rjmp	.+16     	; 0x1b22 <vfprintf+0xe6>
    1b12:	8c 36       	cpi	r24, 0x6C	; 108
    1b14:	21 f4       	brne	.+8      	; 0x1b1e <vfprintf+0xe2>
    1b16:	83 2d       	mov	r24, r3
    1b18:	80 68       	ori	r24, 0x80	; 128
    1b1a:	38 2e       	mov	r3, r24
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <vfprintf+0xe6>
    1b1e:	88 36       	cpi	r24, 0x68	; 104
    1b20:	41 f4       	brne	.+16     	; 0x1b32 <vfprintf+0xf6>
    1b22:	f7 01       	movw	r30, r14
    1b24:	93 fd       	sbrc	r25, 3
    1b26:	85 91       	lpm	r24, Z+
    1b28:	93 ff       	sbrs	r25, 3
    1b2a:	81 91       	ld	r24, Z+
    1b2c:	7f 01       	movw	r14, r30
    1b2e:	81 11       	cpse	r24, r1
    1b30:	b3 cf       	rjmp	.-154    	; 0x1a98 <vfprintf+0x5c>
    1b32:	98 2f       	mov	r25, r24
    1b34:	9f 7d       	andi	r25, 0xDF	; 223
    1b36:	95 54       	subi	r25, 0x45	; 69
    1b38:	93 30       	cpi	r25, 0x03	; 3
    1b3a:	28 f4       	brcc	.+10     	; 0x1b46 <vfprintf+0x10a>
    1b3c:	0c 5f       	subi	r16, 0xFC	; 252
    1b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b40:	9f e3       	ldi	r25, 0x3F	; 63
    1b42:	99 83       	std	Y+1, r25	; 0x01
    1b44:	0d c0       	rjmp	.+26     	; 0x1b60 <vfprintf+0x124>
    1b46:	83 36       	cpi	r24, 0x63	; 99
    1b48:	31 f0       	breq	.+12     	; 0x1b56 <vfprintf+0x11a>
    1b4a:	83 37       	cpi	r24, 0x73	; 115
    1b4c:	71 f0       	breq	.+28     	; 0x1b6a <vfprintf+0x12e>
    1b4e:	83 35       	cpi	r24, 0x53	; 83
    1b50:	09 f0       	breq	.+2      	; 0x1b54 <vfprintf+0x118>
    1b52:	59 c0       	rjmp	.+178    	; 0x1c06 <vfprintf+0x1ca>
    1b54:	21 c0       	rjmp	.+66     	; 0x1b98 <vfprintf+0x15c>
    1b56:	f8 01       	movw	r30, r16
    1b58:	80 81       	ld	r24, Z
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	0e 5f       	subi	r16, 0xFE	; 254
    1b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b60:	88 24       	eor	r8, r8
    1b62:	83 94       	inc	r8
    1b64:	91 2c       	mov	r9, r1
    1b66:	53 01       	movw	r10, r6
    1b68:	13 c0       	rjmp	.+38     	; 0x1b90 <vfprintf+0x154>
    1b6a:	28 01       	movw	r4, r16
    1b6c:	f2 e0       	ldi	r31, 0x02	; 2
    1b6e:	4f 0e       	add	r4, r31
    1b70:	51 1c       	adc	r5, r1
    1b72:	f8 01       	movw	r30, r16
    1b74:	a0 80       	ld	r10, Z
    1b76:	b1 80       	ldd	r11, Z+1	; 0x01
    1b78:	36 fe       	sbrs	r3, 6
    1b7a:	03 c0       	rjmp	.+6      	; 0x1b82 <vfprintf+0x146>
    1b7c:	69 2d       	mov	r22, r9
    1b7e:	70 e0       	ldi	r23, 0x00	; 0
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <vfprintf+0x14a>
    1b82:	6f ef       	ldi	r22, 0xFF	; 255
    1b84:	7f ef       	ldi	r23, 0xFF	; 255
    1b86:	c5 01       	movw	r24, r10
    1b88:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <strnlen>
    1b8c:	4c 01       	movw	r8, r24
    1b8e:	82 01       	movw	r16, r4
    1b90:	f3 2d       	mov	r31, r3
    1b92:	ff 77       	andi	r31, 0x7F	; 127
    1b94:	3f 2e       	mov	r3, r31
    1b96:	16 c0       	rjmp	.+44     	; 0x1bc4 <vfprintf+0x188>
    1b98:	28 01       	movw	r4, r16
    1b9a:	22 e0       	ldi	r18, 0x02	; 2
    1b9c:	42 0e       	add	r4, r18
    1b9e:	51 1c       	adc	r5, r1
    1ba0:	f8 01       	movw	r30, r16
    1ba2:	a0 80       	ld	r10, Z
    1ba4:	b1 80       	ldd	r11, Z+1	; 0x01
    1ba6:	36 fe       	sbrs	r3, 6
    1ba8:	03 c0       	rjmp	.+6      	; 0x1bb0 <vfprintf+0x174>
    1baa:	69 2d       	mov	r22, r9
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <vfprintf+0x178>
    1bb0:	6f ef       	ldi	r22, 0xFF	; 255
    1bb2:	7f ef       	ldi	r23, 0xFF	; 255
    1bb4:	c5 01       	movw	r24, r10
    1bb6:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <strnlen_P>
    1bba:	4c 01       	movw	r8, r24
    1bbc:	f3 2d       	mov	r31, r3
    1bbe:	f0 68       	ori	r31, 0x80	; 128
    1bc0:	3f 2e       	mov	r3, r31
    1bc2:	82 01       	movw	r16, r4
    1bc4:	33 fc       	sbrc	r3, 3
    1bc6:	1b c0       	rjmp	.+54     	; 0x1bfe <vfprintf+0x1c2>
    1bc8:	82 2d       	mov	r24, r2
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	88 16       	cp	r8, r24
    1bce:	99 06       	cpc	r9, r25
    1bd0:	b0 f4       	brcc	.+44     	; 0x1bfe <vfprintf+0x1c2>
    1bd2:	b6 01       	movw	r22, r12
    1bd4:	80 e2       	ldi	r24, 0x20	; 32
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <fputc>
    1bdc:	2a 94       	dec	r2
    1bde:	f4 cf       	rjmp	.-24     	; 0x1bc8 <vfprintf+0x18c>
    1be0:	f5 01       	movw	r30, r10
    1be2:	37 fc       	sbrc	r3, 7
    1be4:	85 91       	lpm	r24, Z+
    1be6:	37 fe       	sbrs	r3, 7
    1be8:	81 91       	ld	r24, Z+
    1bea:	5f 01       	movw	r10, r30
    1bec:	b6 01       	movw	r22, r12
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <fputc>
    1bf4:	21 10       	cpse	r2, r1
    1bf6:	2a 94       	dec	r2
    1bf8:	21 e0       	ldi	r18, 0x01	; 1
    1bfa:	82 1a       	sub	r8, r18
    1bfc:	91 08       	sbc	r9, r1
    1bfe:	81 14       	cp	r8, r1
    1c00:	91 04       	cpc	r9, r1
    1c02:	71 f7       	brne	.-36     	; 0x1be0 <vfprintf+0x1a4>
    1c04:	e8 c0       	rjmp	.+464    	; 0x1dd6 <vfprintf+0x39a>
    1c06:	84 36       	cpi	r24, 0x64	; 100
    1c08:	11 f0       	breq	.+4      	; 0x1c0e <vfprintf+0x1d2>
    1c0a:	89 36       	cpi	r24, 0x69	; 105
    1c0c:	41 f5       	brne	.+80     	; 0x1c5e <vfprintf+0x222>
    1c0e:	f8 01       	movw	r30, r16
    1c10:	37 fe       	sbrs	r3, 7
    1c12:	07 c0       	rjmp	.+14     	; 0x1c22 <vfprintf+0x1e6>
    1c14:	60 81       	ld	r22, Z
    1c16:	71 81       	ldd	r23, Z+1	; 0x01
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	93 81       	ldd	r25, Z+3	; 0x03
    1c1c:	0c 5f       	subi	r16, 0xFC	; 252
    1c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c20:	08 c0       	rjmp	.+16     	; 0x1c32 <vfprintf+0x1f6>
    1c22:	60 81       	ld	r22, Z
    1c24:	71 81       	ldd	r23, Z+1	; 0x01
    1c26:	07 2e       	mov	r0, r23
    1c28:	00 0c       	add	r0, r0
    1c2a:	88 0b       	sbc	r24, r24
    1c2c:	99 0b       	sbc	r25, r25
    1c2e:	0e 5f       	subi	r16, 0xFE	; 254
    1c30:	1f 4f       	sbci	r17, 0xFF	; 255
    1c32:	f3 2d       	mov	r31, r3
    1c34:	ff 76       	andi	r31, 0x6F	; 111
    1c36:	3f 2e       	mov	r3, r31
    1c38:	97 ff       	sbrs	r25, 7
    1c3a:	09 c0       	rjmp	.+18     	; 0x1c4e <vfprintf+0x212>
    1c3c:	90 95       	com	r25
    1c3e:	80 95       	com	r24
    1c40:	70 95       	com	r23
    1c42:	61 95       	neg	r22
    1c44:	7f 4f       	sbci	r23, 0xFF	; 255
    1c46:	8f 4f       	sbci	r24, 0xFF	; 255
    1c48:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4a:	f0 68       	ori	r31, 0x80	; 128
    1c4c:	3f 2e       	mov	r3, r31
    1c4e:	2a e0       	ldi	r18, 0x0A	; 10
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	a3 01       	movw	r20, r6
    1c54:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__ultoa_invert>
    1c58:	88 2e       	mov	r8, r24
    1c5a:	86 18       	sub	r8, r6
    1c5c:	45 c0       	rjmp	.+138    	; 0x1ce8 <vfprintf+0x2ac>
    1c5e:	85 37       	cpi	r24, 0x75	; 117
    1c60:	31 f4       	brne	.+12     	; 0x1c6e <vfprintf+0x232>
    1c62:	23 2d       	mov	r18, r3
    1c64:	2f 7e       	andi	r18, 0xEF	; 239
    1c66:	b2 2e       	mov	r11, r18
    1c68:	2a e0       	ldi	r18, 0x0A	; 10
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	25 c0       	rjmp	.+74     	; 0x1cb8 <vfprintf+0x27c>
    1c6e:	93 2d       	mov	r25, r3
    1c70:	99 7f       	andi	r25, 0xF9	; 249
    1c72:	b9 2e       	mov	r11, r25
    1c74:	8f 36       	cpi	r24, 0x6F	; 111
    1c76:	c1 f0       	breq	.+48     	; 0x1ca8 <vfprintf+0x26c>
    1c78:	18 f4       	brcc	.+6      	; 0x1c80 <vfprintf+0x244>
    1c7a:	88 35       	cpi	r24, 0x58	; 88
    1c7c:	79 f0       	breq	.+30     	; 0x1c9c <vfprintf+0x260>
    1c7e:	b5 c0       	rjmp	.+362    	; 0x1dea <vfprintf+0x3ae>
    1c80:	80 37       	cpi	r24, 0x70	; 112
    1c82:	19 f0       	breq	.+6      	; 0x1c8a <vfprintf+0x24e>
    1c84:	88 37       	cpi	r24, 0x78	; 120
    1c86:	21 f0       	breq	.+8      	; 0x1c90 <vfprintf+0x254>
    1c88:	b0 c0       	rjmp	.+352    	; 0x1dea <vfprintf+0x3ae>
    1c8a:	e9 2f       	mov	r30, r25
    1c8c:	e0 61       	ori	r30, 0x10	; 16
    1c8e:	be 2e       	mov	r11, r30
    1c90:	b4 fe       	sbrs	r11, 4
    1c92:	0d c0       	rjmp	.+26     	; 0x1cae <vfprintf+0x272>
    1c94:	fb 2d       	mov	r31, r11
    1c96:	f4 60       	ori	r31, 0x04	; 4
    1c98:	bf 2e       	mov	r11, r31
    1c9a:	09 c0       	rjmp	.+18     	; 0x1cae <vfprintf+0x272>
    1c9c:	34 fe       	sbrs	r3, 4
    1c9e:	0a c0       	rjmp	.+20     	; 0x1cb4 <vfprintf+0x278>
    1ca0:	29 2f       	mov	r18, r25
    1ca2:	26 60       	ori	r18, 0x06	; 6
    1ca4:	b2 2e       	mov	r11, r18
    1ca6:	06 c0       	rjmp	.+12     	; 0x1cb4 <vfprintf+0x278>
    1ca8:	28 e0       	ldi	r18, 0x08	; 8
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	05 c0       	rjmp	.+10     	; 0x1cb8 <vfprintf+0x27c>
    1cae:	20 e1       	ldi	r18, 0x10	; 16
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <vfprintf+0x27c>
    1cb4:	20 e1       	ldi	r18, 0x10	; 16
    1cb6:	32 e0       	ldi	r19, 0x02	; 2
    1cb8:	f8 01       	movw	r30, r16
    1cba:	b7 fe       	sbrs	r11, 7
    1cbc:	07 c0       	rjmp	.+14     	; 0x1ccc <vfprintf+0x290>
    1cbe:	60 81       	ld	r22, Z
    1cc0:	71 81       	ldd	r23, Z+1	; 0x01
    1cc2:	82 81       	ldd	r24, Z+2	; 0x02
    1cc4:	93 81       	ldd	r25, Z+3	; 0x03
    1cc6:	0c 5f       	subi	r16, 0xFC	; 252
    1cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cca:	06 c0       	rjmp	.+12     	; 0x1cd8 <vfprintf+0x29c>
    1ccc:	60 81       	ld	r22, Z
    1cce:	71 81       	ldd	r23, Z+1	; 0x01
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 5f       	subi	r16, 0xFE	; 254
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	a3 01       	movw	r20, r6
    1cda:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__ultoa_invert>
    1cde:	88 2e       	mov	r8, r24
    1ce0:	86 18       	sub	r8, r6
    1ce2:	fb 2d       	mov	r31, r11
    1ce4:	ff 77       	andi	r31, 0x7F	; 127
    1ce6:	3f 2e       	mov	r3, r31
    1ce8:	36 fe       	sbrs	r3, 6
    1cea:	0d c0       	rjmp	.+26     	; 0x1d06 <vfprintf+0x2ca>
    1cec:	23 2d       	mov	r18, r3
    1cee:	2e 7f       	andi	r18, 0xFE	; 254
    1cf0:	a2 2e       	mov	r10, r18
    1cf2:	89 14       	cp	r8, r9
    1cf4:	58 f4       	brcc	.+22     	; 0x1d0c <vfprintf+0x2d0>
    1cf6:	34 fe       	sbrs	r3, 4
    1cf8:	0b c0       	rjmp	.+22     	; 0x1d10 <vfprintf+0x2d4>
    1cfa:	32 fc       	sbrc	r3, 2
    1cfc:	09 c0       	rjmp	.+18     	; 0x1d10 <vfprintf+0x2d4>
    1cfe:	83 2d       	mov	r24, r3
    1d00:	8e 7e       	andi	r24, 0xEE	; 238
    1d02:	a8 2e       	mov	r10, r24
    1d04:	05 c0       	rjmp	.+10     	; 0x1d10 <vfprintf+0x2d4>
    1d06:	b8 2c       	mov	r11, r8
    1d08:	a3 2c       	mov	r10, r3
    1d0a:	03 c0       	rjmp	.+6      	; 0x1d12 <vfprintf+0x2d6>
    1d0c:	b8 2c       	mov	r11, r8
    1d0e:	01 c0       	rjmp	.+2      	; 0x1d12 <vfprintf+0x2d6>
    1d10:	b9 2c       	mov	r11, r9
    1d12:	a4 fe       	sbrs	r10, 4
    1d14:	0f c0       	rjmp	.+30     	; 0x1d34 <vfprintf+0x2f8>
    1d16:	fe 01       	movw	r30, r28
    1d18:	e8 0d       	add	r30, r8
    1d1a:	f1 1d       	adc	r31, r1
    1d1c:	80 81       	ld	r24, Z
    1d1e:	80 33       	cpi	r24, 0x30	; 48
    1d20:	21 f4       	brne	.+8      	; 0x1d2a <vfprintf+0x2ee>
    1d22:	9a 2d       	mov	r25, r10
    1d24:	99 7e       	andi	r25, 0xE9	; 233
    1d26:	a9 2e       	mov	r10, r25
    1d28:	09 c0       	rjmp	.+18     	; 0x1d3c <vfprintf+0x300>
    1d2a:	a2 fe       	sbrs	r10, 2
    1d2c:	06 c0       	rjmp	.+12     	; 0x1d3a <vfprintf+0x2fe>
    1d2e:	b3 94       	inc	r11
    1d30:	b3 94       	inc	r11
    1d32:	04 c0       	rjmp	.+8      	; 0x1d3c <vfprintf+0x300>
    1d34:	8a 2d       	mov	r24, r10
    1d36:	86 78       	andi	r24, 0x86	; 134
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <vfprintf+0x300>
    1d3a:	b3 94       	inc	r11
    1d3c:	a3 fc       	sbrc	r10, 3
    1d3e:	11 c0       	rjmp	.+34     	; 0x1d62 <vfprintf+0x326>
    1d40:	a0 fe       	sbrs	r10, 0
    1d42:	06 c0       	rjmp	.+12     	; 0x1d50 <vfprintf+0x314>
    1d44:	b2 14       	cp	r11, r2
    1d46:	88 f4       	brcc	.+34     	; 0x1d6a <vfprintf+0x32e>
    1d48:	28 0c       	add	r2, r8
    1d4a:	92 2c       	mov	r9, r2
    1d4c:	9b 18       	sub	r9, r11
    1d4e:	0e c0       	rjmp	.+28     	; 0x1d6c <vfprintf+0x330>
    1d50:	b2 14       	cp	r11, r2
    1d52:	60 f4       	brcc	.+24     	; 0x1d6c <vfprintf+0x330>
    1d54:	b6 01       	movw	r22, r12
    1d56:	80 e2       	ldi	r24, 0x20	; 32
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <fputc>
    1d5e:	b3 94       	inc	r11
    1d60:	f7 cf       	rjmp	.-18     	; 0x1d50 <vfprintf+0x314>
    1d62:	b2 14       	cp	r11, r2
    1d64:	18 f4       	brcc	.+6      	; 0x1d6c <vfprintf+0x330>
    1d66:	2b 18       	sub	r2, r11
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <vfprintf+0x332>
    1d6a:	98 2c       	mov	r9, r8
    1d6c:	21 2c       	mov	r2, r1
    1d6e:	a4 fe       	sbrs	r10, 4
    1d70:	10 c0       	rjmp	.+32     	; 0x1d92 <vfprintf+0x356>
    1d72:	b6 01       	movw	r22, r12
    1d74:	80 e3       	ldi	r24, 0x30	; 48
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <fputc>
    1d7c:	a2 fe       	sbrs	r10, 2
    1d7e:	17 c0       	rjmp	.+46     	; 0x1dae <vfprintf+0x372>
    1d80:	a1 fc       	sbrc	r10, 1
    1d82:	03 c0       	rjmp	.+6      	; 0x1d8a <vfprintf+0x34e>
    1d84:	88 e7       	ldi	r24, 0x78	; 120
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <vfprintf+0x352>
    1d8a:	88 e5       	ldi	r24, 0x58	; 88
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	b6 01       	movw	r22, r12
    1d90:	0c c0       	rjmp	.+24     	; 0x1daa <vfprintf+0x36e>
    1d92:	8a 2d       	mov	r24, r10
    1d94:	86 78       	andi	r24, 0x86	; 134
    1d96:	59 f0       	breq	.+22     	; 0x1dae <vfprintf+0x372>
    1d98:	a1 fe       	sbrs	r10, 1
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <vfprintf+0x364>
    1d9c:	8b e2       	ldi	r24, 0x2B	; 43
    1d9e:	01 c0       	rjmp	.+2      	; 0x1da2 <vfprintf+0x366>
    1da0:	80 e2       	ldi	r24, 0x20	; 32
    1da2:	a7 fc       	sbrc	r10, 7
    1da4:	8d e2       	ldi	r24, 0x2D	; 45
    1da6:	b6 01       	movw	r22, r12
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <fputc>
    1dae:	89 14       	cp	r8, r9
    1db0:	38 f4       	brcc	.+14     	; 0x1dc0 <vfprintf+0x384>
    1db2:	b6 01       	movw	r22, r12
    1db4:	80 e3       	ldi	r24, 0x30	; 48
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <fputc>
    1dbc:	9a 94       	dec	r9
    1dbe:	f7 cf       	rjmp	.-18     	; 0x1dae <vfprintf+0x372>
    1dc0:	8a 94       	dec	r8
    1dc2:	f3 01       	movw	r30, r6
    1dc4:	e8 0d       	add	r30, r8
    1dc6:	f1 1d       	adc	r31, r1
    1dc8:	80 81       	ld	r24, Z
    1dca:	b6 01       	movw	r22, r12
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <fputc>
    1dd2:	81 10       	cpse	r8, r1
    1dd4:	f5 cf       	rjmp	.-22     	; 0x1dc0 <vfprintf+0x384>
    1dd6:	22 20       	and	r2, r2
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <vfprintf+0x3a0>
    1dda:	42 ce       	rjmp	.-892    	; 0x1a60 <vfprintf+0x24>
    1ddc:	b6 01       	movw	r22, r12
    1dde:	80 e2       	ldi	r24, 0x20	; 32
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <fputc>
    1de6:	2a 94       	dec	r2
    1de8:	f6 cf       	rjmp	.-20     	; 0x1dd6 <vfprintf+0x39a>
    1dea:	f6 01       	movw	r30, r12
    1dec:	86 81       	ldd	r24, Z+6	; 0x06
    1dee:	97 81       	ldd	r25, Z+7	; 0x07
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <vfprintf+0x3ba>
    1df2:	8f ef       	ldi	r24, 0xFF	; 255
    1df4:	9f ef       	ldi	r25, 0xFF	; 255
    1df6:	2b 96       	adiw	r28, 0x0b	; 11
    1df8:	e2 e1       	ldi	r30, 0x12	; 18
    1dfa:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__epilogue_restores__>

00001dfe <__ctype_isfalse>:
    1dfe:	99 27       	eor	r25, r25
    1e00:	88 27       	eor	r24, r24

00001e02 <__ctype_istrue>:
    1e02:	08 95       	ret

00001e04 <strnlen_P>:
    1e04:	fc 01       	movw	r30, r24
    1e06:	05 90       	lpm	r0, Z+
    1e08:	61 50       	subi	r22, 0x01	; 1
    1e0a:	70 40       	sbci	r23, 0x00	; 0
    1e0c:	01 10       	cpse	r0, r1
    1e0e:	d8 f7       	brcc	.-10     	; 0x1e06 <strnlen_P+0x2>
    1e10:	80 95       	com	r24
    1e12:	90 95       	com	r25
    1e14:	8e 0f       	add	r24, r30
    1e16:	9f 1f       	adc	r25, r31
    1e18:	08 95       	ret

00001e1a <strnlen>:
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	61 50       	subi	r22, 0x01	; 1
    1e1e:	70 40       	sbci	r23, 0x00	; 0
    1e20:	01 90       	ld	r0, Z+
    1e22:	01 10       	cpse	r0, r1
    1e24:	d8 f7       	brcc	.-10     	; 0x1e1c <strnlen+0x2>
    1e26:	80 95       	com	r24
    1e28:	90 95       	com	r25
    1e2a:	8e 0f       	add	r24, r30
    1e2c:	9f 1f       	adc	r25, r31
    1e2e:	08 95       	ret

00001e30 <fputc>:
    1e30:	0f 93       	push	r16
    1e32:	1f 93       	push	r17
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	fb 01       	movw	r30, r22
    1e3a:	23 81       	ldd	r18, Z+3	; 0x03
    1e3c:	21 fd       	sbrc	r18, 1
    1e3e:	03 c0       	rjmp	.+6      	; 0x1e46 <fputc+0x16>
    1e40:	8f ef       	ldi	r24, 0xFF	; 255
    1e42:	9f ef       	ldi	r25, 0xFF	; 255
    1e44:	2c c0       	rjmp	.+88     	; 0x1e9e <fputc+0x6e>
    1e46:	22 ff       	sbrs	r18, 2
    1e48:	16 c0       	rjmp	.+44     	; 0x1e76 <fputc+0x46>
    1e4a:	46 81       	ldd	r20, Z+6	; 0x06
    1e4c:	57 81       	ldd	r21, Z+7	; 0x07
    1e4e:	24 81       	ldd	r18, Z+4	; 0x04
    1e50:	35 81       	ldd	r19, Z+5	; 0x05
    1e52:	42 17       	cp	r20, r18
    1e54:	53 07       	cpc	r21, r19
    1e56:	44 f4       	brge	.+16     	; 0x1e68 <fputc+0x38>
    1e58:	a0 81       	ld	r26, Z
    1e5a:	b1 81       	ldd	r27, Z+1	; 0x01
    1e5c:	9d 01       	movw	r18, r26
    1e5e:	2f 5f       	subi	r18, 0xFF	; 255
    1e60:	3f 4f       	sbci	r19, 0xFF	; 255
    1e62:	20 83       	st	Z, r18
    1e64:	31 83       	std	Z+1, r19	; 0x01
    1e66:	8c 93       	st	X, r24
    1e68:	26 81       	ldd	r18, Z+6	; 0x06
    1e6a:	37 81       	ldd	r19, Z+7	; 0x07
    1e6c:	2f 5f       	subi	r18, 0xFF	; 255
    1e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e70:	26 83       	std	Z+6, r18	; 0x06
    1e72:	37 83       	std	Z+7, r19	; 0x07
    1e74:	14 c0       	rjmp	.+40     	; 0x1e9e <fputc+0x6e>
    1e76:	8b 01       	movw	r16, r22
    1e78:	ec 01       	movw	r28, r24
    1e7a:	fb 01       	movw	r30, r22
    1e7c:	00 84       	ldd	r0, Z+8	; 0x08
    1e7e:	f1 85       	ldd	r31, Z+9	; 0x09
    1e80:	e0 2d       	mov	r30, r0
    1e82:	09 95       	icall
    1e84:	89 2b       	or	r24, r25
    1e86:	e1 f6       	brne	.-72     	; 0x1e40 <fputc+0x10>
    1e88:	d8 01       	movw	r26, r16
    1e8a:	16 96       	adiw	r26, 0x06	; 6
    1e8c:	8d 91       	ld	r24, X+
    1e8e:	9c 91       	ld	r25, X
    1e90:	17 97       	sbiw	r26, 0x07	; 7
    1e92:	01 96       	adiw	r24, 0x01	; 1
    1e94:	16 96       	adiw	r26, 0x06	; 6
    1e96:	8d 93       	st	X+, r24
    1e98:	9c 93       	st	X, r25
    1e9a:	17 97       	sbiw	r26, 0x07	; 7
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	1f 91       	pop	r17
    1ea4:	0f 91       	pop	r16
    1ea6:	08 95       	ret

00001ea8 <__ultoa_invert>:
    1ea8:	fa 01       	movw	r30, r20
    1eaa:	aa 27       	eor	r26, r26
    1eac:	28 30       	cpi	r18, 0x08	; 8
    1eae:	51 f1       	breq	.+84     	; 0x1f04 <__ultoa_invert+0x5c>
    1eb0:	20 31       	cpi	r18, 0x10	; 16
    1eb2:	81 f1       	breq	.+96     	; 0x1f14 <__ultoa_invert+0x6c>
    1eb4:	e8 94       	clt
    1eb6:	6f 93       	push	r22
    1eb8:	6e 7f       	andi	r22, 0xFE	; 254
    1eba:	6e 5f       	subi	r22, 0xFE	; 254
    1ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebe:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec2:	af 4f       	sbci	r26, 0xFF	; 255
    1ec4:	b1 e0       	ldi	r27, 0x01	; 1
    1ec6:	3e d0       	rcall	.+124    	; 0x1f44 <__ultoa_invert+0x9c>
    1ec8:	b4 e0       	ldi	r27, 0x04	; 4
    1eca:	3c d0       	rcall	.+120    	; 0x1f44 <__ultoa_invert+0x9c>
    1ecc:	67 0f       	add	r22, r23
    1ece:	78 1f       	adc	r23, r24
    1ed0:	89 1f       	adc	r24, r25
    1ed2:	9a 1f       	adc	r25, r26
    1ed4:	a1 1d       	adc	r26, r1
    1ed6:	68 0f       	add	r22, r24
    1ed8:	79 1f       	adc	r23, r25
    1eda:	8a 1f       	adc	r24, r26
    1edc:	91 1d       	adc	r25, r1
    1ede:	a1 1d       	adc	r26, r1
    1ee0:	6a 0f       	add	r22, r26
    1ee2:	71 1d       	adc	r23, r1
    1ee4:	81 1d       	adc	r24, r1
    1ee6:	91 1d       	adc	r25, r1
    1ee8:	a1 1d       	adc	r26, r1
    1eea:	20 d0       	rcall	.+64     	; 0x1f2c <__ultoa_invert+0x84>
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <__ultoa_invert+0x48>
    1eee:	68 94       	set
    1ef0:	3f 91       	pop	r19
    1ef2:	2a e0       	ldi	r18, 0x0A	; 10
    1ef4:	26 9f       	mul	r18, r22
    1ef6:	11 24       	eor	r1, r1
    1ef8:	30 19       	sub	r19, r0
    1efa:	30 5d       	subi	r19, 0xD0	; 208
    1efc:	31 93       	st	Z+, r19
    1efe:	de f6       	brtc	.-74     	; 0x1eb6 <__ultoa_invert+0xe>
    1f00:	cf 01       	movw	r24, r30
    1f02:	08 95       	ret
    1f04:	46 2f       	mov	r20, r22
    1f06:	47 70       	andi	r20, 0x07	; 7
    1f08:	40 5d       	subi	r20, 0xD0	; 208
    1f0a:	41 93       	st	Z+, r20
    1f0c:	b3 e0       	ldi	r27, 0x03	; 3
    1f0e:	0f d0       	rcall	.+30     	; 0x1f2e <__ultoa_invert+0x86>
    1f10:	c9 f7       	brne	.-14     	; 0x1f04 <__ultoa_invert+0x5c>
    1f12:	f6 cf       	rjmp	.-20     	; 0x1f00 <__ultoa_invert+0x58>
    1f14:	46 2f       	mov	r20, r22
    1f16:	4f 70       	andi	r20, 0x0F	; 15
    1f18:	40 5d       	subi	r20, 0xD0	; 208
    1f1a:	4a 33       	cpi	r20, 0x3A	; 58
    1f1c:	18 f0       	brcs	.+6      	; 0x1f24 <__ultoa_invert+0x7c>
    1f1e:	49 5d       	subi	r20, 0xD9	; 217
    1f20:	31 fd       	sbrc	r19, 1
    1f22:	40 52       	subi	r20, 0x20	; 32
    1f24:	41 93       	st	Z+, r20
    1f26:	02 d0       	rcall	.+4      	; 0x1f2c <__ultoa_invert+0x84>
    1f28:	a9 f7       	brne	.-22     	; 0x1f14 <__ultoa_invert+0x6c>
    1f2a:	ea cf       	rjmp	.-44     	; 0x1f00 <__ultoa_invert+0x58>
    1f2c:	b4 e0       	ldi	r27, 0x04	; 4
    1f2e:	a6 95       	lsr	r26
    1f30:	97 95       	ror	r25
    1f32:	87 95       	ror	r24
    1f34:	77 95       	ror	r23
    1f36:	67 95       	ror	r22
    1f38:	ba 95       	dec	r27
    1f3a:	c9 f7       	brne	.-14     	; 0x1f2e <__ultoa_invert+0x86>
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	61 05       	cpc	r22, r1
    1f40:	71 05       	cpc	r23, r1
    1f42:	08 95       	ret
    1f44:	9b 01       	movw	r18, r22
    1f46:	ac 01       	movw	r20, r24
    1f48:	0a 2e       	mov	r0, r26
    1f4a:	06 94       	lsr	r0
    1f4c:	57 95       	ror	r21
    1f4e:	47 95       	ror	r20
    1f50:	37 95       	ror	r19
    1f52:	27 95       	ror	r18
    1f54:	ba 95       	dec	r27
    1f56:	c9 f7       	brne	.-14     	; 0x1f4a <__ultoa_invert+0xa2>
    1f58:	62 0f       	add	r22, r18
    1f5a:	73 1f       	adc	r23, r19
    1f5c:	84 1f       	adc	r24, r20
    1f5e:	95 1f       	adc	r25, r21
    1f60:	a0 1d       	adc	r26, r0
    1f62:	08 95       	ret

00001f64 <ccp_write_io>:
    1f64:	dc 01       	movw	r26, r24
    1f66:	28 ed       	ldi	r18, 0xD8	; 216
    1f68:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f0034>
    1f6c:	6c 93       	st	X, r22
    1f6e:	08 95       	ret

00001f70 <__mulsi3>:
    1f70:	db 01       	movw	r26, r22
    1f72:	8f 93       	push	r24
    1f74:	9f 93       	push	r25
    1f76:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__muluhisi3>
    1f7a:	bf 91       	pop	r27
    1f7c:	af 91       	pop	r26
    1f7e:	a2 9f       	mul	r26, r18
    1f80:	80 0d       	add	r24, r0
    1f82:	91 1d       	adc	r25, r1
    1f84:	a3 9f       	mul	r26, r19
    1f86:	90 0d       	add	r25, r0
    1f88:	b2 9f       	mul	r27, r18
    1f8a:	90 0d       	add	r25, r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	08 95       	ret

00001f90 <__muluhisi3>:
    1f90:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__umulhisi3>
    1f94:	a5 9f       	mul	r26, r21
    1f96:	90 0d       	add	r25, r0
    1f98:	b4 9f       	mul	r27, r20
    1f9a:	90 0d       	add	r25, r0
    1f9c:	a4 9f       	mul	r26, r20
    1f9e:	80 0d       	add	r24, r0
    1fa0:	91 1d       	adc	r25, r1
    1fa2:	11 24       	eor	r1, r1
    1fa4:	08 95       	ret

00001fa6 <__prologue_saves__>:
    1fa6:	2f 92       	push	r2
    1fa8:	3f 92       	push	r3
    1faa:	4f 92       	push	r4
    1fac:	5f 92       	push	r5
    1fae:	6f 92       	push	r6
    1fb0:	7f 92       	push	r7
    1fb2:	8f 92       	push	r8
    1fb4:	9f 92       	push	r9
    1fb6:	af 92       	push	r10
    1fb8:	bf 92       	push	r11
    1fba:	cf 92       	push	r12
    1fbc:	df 92       	push	r13
    1fbe:	ef 92       	push	r14
    1fc0:	ff 92       	push	r15
    1fc2:	0f 93       	push	r16
    1fc4:	1f 93       	push	r17
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	ca 1b       	sub	r28, r26
    1fd0:	db 0b       	sbc	r29, r27
    1fd2:	cd bf       	out	0x3d, r28	; 61
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	09 94       	ijmp

00001fd8 <__epilogue_restores__>:
    1fd8:	2a 88       	ldd	r2, Y+18	; 0x12
    1fda:	39 88       	ldd	r3, Y+17	; 0x11
    1fdc:	48 88       	ldd	r4, Y+16	; 0x10
    1fde:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fe0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fe2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fe4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fe6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fe8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fea:	b9 84       	ldd	r11, Y+9	; 0x09
    1fec:	c8 84       	ldd	r12, Y+8	; 0x08
    1fee:	df 80       	ldd	r13, Y+7	; 0x07
    1ff0:	ee 80       	ldd	r14, Y+6	; 0x06
    1ff2:	fd 80       	ldd	r15, Y+5	; 0x05
    1ff4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ff6:	1b 81       	ldd	r17, Y+3	; 0x03
    1ff8:	aa 81       	ldd	r26, Y+2	; 0x02
    1ffa:	b9 81       	ldd	r27, Y+1	; 0x01
    1ffc:	ce 0f       	add	r28, r30
    1ffe:	d1 1d       	adc	r29, r1
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	ed 01       	movw	r28, r26
    2006:	08 95       	ret

00002008 <_exit>:
    2008:	f8 94       	cli

0000200a <__stop_program>:
    200a:	ff cf       	rjmp	.-2      	; 0x200a <__stop_program>
