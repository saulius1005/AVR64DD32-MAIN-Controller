
AVR64DD32-MAIN-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000566  00806000  000027d2  00002866  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007c  00806566  00806566  00002dcc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002dcc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002e28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  00002e68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008d86  00000000  00000000  000032c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b8f  00000000  00000000  0000c046  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d77  00000000  00000000  0000fbd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bb4  00000000  00000000  0001294c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003212  00000000  00000000  00013500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d3f  00000000  00000000  00016712  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  00019451  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e7       	ldi	r29, 0x7F	; 127
      9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
      9c:	15 e6       	ldi	r17, 0x65	; 101
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b0 e6       	ldi	r27, 0x60	; 96
      a2:	e2 ed       	ldi	r30, 0xD2	; 210
      a4:	f7 e2       	ldi	r31, 0x27	; 39
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 36       	cpi	r26, 0x66	; 102
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	25 e6       	ldi	r18, 0x65	; 101
      b4:	a6 e6       	ldi	r26, 0x66	; 102
      b6:	b5 e6       	ldi	r27, 0x65	; 101
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 3e       	cpi	r26, 0xE2	; 226
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 a1 06 	call	0xd42	; 0xd42 <main>
      c6:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <normalize>:
		LinearMotor.noChangeCount = 0;
	}

	// 8. Iðsaugom paskutinæ reikðmæ
	Target.lastElevation = SensorData.HPElevation;
}
      ce:	68 e6       	ldi	r22, 0x68	; 104
      d0:	71 e0       	ldi	r23, 0x01	; 1
      d2:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__divmodhi4>
      d6:	99 23       	and	r25, r25
      d8:	14 f4       	brge	.+4      	; 0xde <normalize+0x10>
      da:	88 59       	subi	r24, 0x98	; 152
      dc:	9e 4f       	sbci	r25, 0xFE	; 254
      de:	08 95       	ret

000000e0 <angle_diff>:
      e0:	9c 01       	movw	r18, r24
      e2:	26 1b       	sub	r18, r22
      e4:	37 0b       	sbc	r19, r23
      e6:	c9 01       	movw	r24, r18
      e8:	99 23       	and	r25, r25
      ea:	24 f4       	brge	.+8      	; 0xf4 <angle_diff+0x14>
      ec:	88 27       	eor	r24, r24
      ee:	99 27       	eor	r25, r25
      f0:	82 1b       	sub	r24, r18
      f2:	93 0b       	sbc	r25, r19
      f4:	68 e6       	ldi	r22, 0x68	; 104
      f6:	71 e0       	ldi	r23, 0x01	; 1
      f8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__divmodhi4>
      fc:	85 3b       	cpi	r24, 0xB5	; 181
      fe:	91 05       	cpc	r25, r1
     100:	34 f0       	brlt	.+12     	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
     102:	28 e6       	ldi	r18, 0x68	; 104
     104:	31 e0       	ldi	r19, 0x01	; 1
     106:	a9 01       	movw	r20, r18
     108:	48 1b       	sub	r20, r24
     10a:	59 0b       	sbc	r21, r25
     10c:	ca 01       	movw	r24, r20
     10e:	08 95       	ret

00000110 <get_safe_azimuth>:
     110:	cf 92       	push	r12
     112:	df 92       	push	r13
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	c0 91 c0 65 	lds	r28, 0x65C0	; 0x8065c0 <WSData+0x7>
     124:	2d e2       	ldi	r18, 0x2D	; 45
     126:	c2 9f       	mul	r28, r18
     128:	e0 01       	movw	r28, r0
     12a:	11 24       	eor	r1, r1
     12c:	ce 01       	movw	r24, r28
     12e:	86 5a       	subi	r24, 0xA6	; 166
     130:	9f 4f       	sbci	r25, 0xFF	; 255
     132:	0e 94 67 00 	call	0xce	; 0xce <normalize>
     136:	8c 01       	movw	r16, r24
     138:	ce 01       	movw	r24, r28
     13a:	8a 55       	subi	r24, 0x5A	; 90
     13c:	91 09       	sbc	r25, r1
     13e:	0e 94 67 00 	call	0xce	; 0xce <normalize>
     142:	ec 01       	movw	r28, r24
     144:	c8 01       	movw	r24, r16
     146:	4e 97       	sbiw	r24, 0x1e	; 30
     148:	9e 01       	movw	r18, r28
     14a:	2e 51       	subi	r18, 0x1E	; 30
     14c:	31 09       	sbc	r19, r1
     14e:	8d 32       	cpi	r24, 0x2D	; 45
     150:	41 e0       	ldi	r20, 0x01	; 1
     152:	94 07       	cpc	r25, r20
     154:	e8 f4       	brcc	.+58     	; 0x190 <get_safe_azimuth+0x80>
     156:	2d 32       	cpi	r18, 0x2D	; 45
     158:	31 40       	sbci	r19, 0x01	; 1
     15a:	d0 f4       	brcc	.+52     	; 0x190 <get_safe_azimuth+0x80>
     15c:	e0 90 6c 65 	lds	r14, 0x656C	; 0x80656c <SensorData+0x4>
     160:	f0 90 6d 65 	lds	r15, 0x656D	; 0x80656d <SensorData+0x5>
     164:	b8 01       	movw	r22, r16
     166:	c7 01       	movw	r24, r14
     168:	0e 94 70 00 	call	0xe0	; 0xe0 <angle_diff>
     16c:	6c 01       	movw	r12, r24
     16e:	be 01       	movw	r22, r28
     170:	c7 01       	movw	r24, r14
     172:	0e 94 70 00 	call	0xe0	; 0xe0 <angle_diff>
     176:	8c 15       	cp	r24, r12
     178:	9d 05       	cpc	r25, r13
     17a:	1c f0       	brlt	.+6      	; 0x182 <get_safe_azimuth+0x72>
     17c:	90 2f       	mov	r25, r16
     17e:	81 2f       	mov	r24, r17
     180:	02 c0       	rjmp	.+4      	; 0x186 <get_safe_azimuth+0x76>
     182:	9c 2f       	mov	r25, r28
     184:	8d 2f       	mov	r24, r29
     186:	90 93 4f 60 	sts	0x604F, r25	; 0x80604f <Target+0x5>
     18a:	80 93 50 60 	sts	0x6050, r24	; 0x806050 <Target+0x6>
     18e:	0c c0       	rjmp	.+24     	; 0x1a8 <get_safe_azimuth+0x98>
     190:	8d 32       	cpi	r24, 0x2D	; 45
     192:	91 40       	sbci	r25, 0x01	; 1
     194:	28 f4       	brcc	.+10     	; 0x1a0 <get_safe_azimuth+0x90>
     196:	00 93 4f 60 	sts	0x604F, r16	; 0x80604f <Target+0x5>
     19a:	10 93 50 60 	sts	0x6050, r17	; 0x806050 <Target+0x6>
     19e:	04 c0       	rjmp	.+8      	; 0x1a8 <get_safe_azimuth+0x98>
     1a0:	c0 93 4f 60 	sts	0x604F, r28	; 0x80604f <Target+0x5>
     1a4:	d0 93 50 60 	sts	0x6050, r29	; 0x806050 <Target+0x6>
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	1f 91       	pop	r17
     1ae:	0f 91       	pop	r16
     1b0:	ff 90       	pop	r15
     1b2:	ef 90       	pop	r14
     1b4:	df 90       	pop	r13
     1b6:	cf 90       	pop	r12
     1b8:	08 95       	ret

000001ba <MotorControl>:


//Motor control function wrtited based on void LinearMotorControl()
void MotorControl(MotorControlObj* m)
{
     1ba:	8f 92       	push	r8
     1bc:	9f 92       	push	r9
     1be:	af 92       	push	r10
     1c0:	bf 92       	push	r11
     1c2:	cf 92       	push	r12
     1c4:	df 92       	push	r13
     1c6:	ef 92       	push	r14
     1c8:	ff 92       	push	r15
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	ec 01       	movw	r28, r24
	// 1. FO jungtis
	if (SensorData.FO_lost_connecton_fault) {
     1d4:	80 91 7b 65 	lds	r24, 0x657B	; 0x80657b <SensorData+0x13>
     1d8:	88 23       	and	r24, r24
     1da:	39 f0       	breq	.+14     	; 0x1ea <MotorControl+0x30>
		m->iface.stop();
     1dc:	ef 81       	ldd	r30, Y+7	; 0x07
     1de:	f8 85       	ldd	r31, Y+8	; 0x08
     1e0:	09 95       	icall
		m->iface.disable();
     1e2:	eb 81       	ldd	r30, Y+3	; 0x03
     1e4:	fc 81       	ldd	r31, Y+4	; 0x04
     1e6:	09 95       	icall
		return;
     1e8:	19 c1       	rjmp	.+562    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	}

	// 2. Tikslas pasiektas
	if (*m->sensor.position == *m->sensor.target) {
     1ea:	ef 85       	ldd	r30, Y+15	; 0x0f
     1ec:	f8 89       	ldd	r31, Y+16	; 0x10
     1ee:	20 81       	ld	r18, Z
     1f0:	31 81       	ldd	r19, Z+1	; 0x01
     1f2:	ef 89       	ldd	r30, Y+23	; 0x17
     1f4:	f8 8d       	ldd	r31, Y+24	; 0x18
     1f6:	80 81       	ld	r24, Z
     1f8:	91 81       	ldd	r25, Z+1	; 0x01
     1fa:	28 17       	cp	r18, r24
     1fc:	39 07       	cpc	r19, r25
     1fe:	81 f4       	brne	.+32     	; 0x220 <MotorControl+0x66>
		m->iface.stop();
     200:	ef 81       	ldd	r30, Y+7	; 0x07
     202:	f8 85       	ldd	r31, Y+8	; 0x08
     204:	09 95       	icall
		m->iface.disable();
     206:	eb 81       	ldd	r30, Y+3	; 0x03
     208:	fc 81       	ldd	r31, Y+4	; 0x04
     20a:	09 95       	icall
		*m->sensor.faultFlag = false;
     20c:	eb 89       	ldd	r30, Y+19	; 0x13
     20e:	fc 89       	ldd	r31, Y+20	; 0x14
     210:	10 82       	st	Z, r1
		*m->sensor.targetReached = true;
     212:	e9 8d       	ldd	r30, Y+25	; 0x19
     214:	fa 8d       	ldd	r31, Y+26	; 0x1a
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	80 83       	st	Z, r24
		m->stuckCount = 0;
     21a:	1b 8e       	std	Y+27, r1	; 0x1b
		m->noChangeCount = 0;
     21c:	1c 8e       	std	Y+28, r1	; 0x1c
		return;
     21e:	fe c0       	rjmp	.+508    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	}

	// 2.1  Nuskaitomi elektriniai parametrai
	*m->voltage = m->iface.read_voltage(); //read and save voltage
     220:	09 a1       	ldd	r16, Y+33	; 0x21
     222:	1a a1       	ldd	r17, Y+34	; 0x22
     224:	eb 85       	ldd	r30, Y+11	; 0x0b
     226:	fc 85       	ldd	r31, Y+12	; 0x0c
     228:	09 95       	icall
     22a:	f8 01       	movw	r30, r16
     22c:	80 83       	st	Z, r24
     22e:	91 83       	std	Z+1, r25	; 0x01
	*m->current = m->iface.read_current(); //read and save current
     230:	0b a1       	ldd	r16, Y+35	; 0x23
     232:	1c a1       	ldd	r17, Y+36	; 0x24
     234:	ed 85       	ldd	r30, Y+13	; 0x0d
     236:	fe 85       	ldd	r31, Y+14	; 0x0e
     238:	09 95       	icall
     23a:	f8 01       	movw	r30, r16
     23c:	80 83       	st	Z, r24
     23e:	91 83       	std	Z+1, r25	; 0x01

	// 3. Backlash logika
	bool inBacklash = (*m->sensor.position >= (*m->sensor.target - m->backlash)) &&
     240:	ef 85       	ldd	r30, Y+15	; 0x0f
     242:	f8 89       	ldd	r31, Y+16	; 0x10
     244:	80 81       	ld	r24, Z
     246:	91 81       	ldd	r25, Z+1	; 0x01
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	ef 89       	ldd	r30, Y+23	; 0x17
     24e:	f8 8d       	ldd	r31, Y+24	; 0x18
     250:	40 81       	ld	r20, Z
     252:	51 81       	ldd	r21, Z+1	; 0x01
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	0d 8d       	ldd	r16, Y+29	; 0x1d
     25a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     25c:	2f 8d       	ldd	r18, Y+31	; 0x1f
     25e:	38 a1       	ldd	r19, Y+32	; 0x20
     260:	6a 01       	movw	r12, r20
     262:	7b 01       	movw	r14, r22
     264:	c0 1a       	sub	r12, r16
     266:	d1 0a       	sbc	r13, r17
     268:	e2 0a       	sbc	r14, r18
     26a:	f3 0a       	sbc	r15, r19
     26c:	8c 15       	cp	r24, r12
     26e:	9d 05       	cpc	r25, r13
     270:	ae 05       	cpc	r26, r14
     272:	bf 05       	cpc	r27, r15
     274:	5c f0       	brlt	.+22     	; 0x28c <MotorControl+0xd2>
	(*m->sensor.position <= (*m->sensor.target + m->backlash));
     276:	40 0f       	add	r20, r16
     278:	51 1f       	adc	r21, r17
     27a:	62 1f       	adc	r22, r18
     27c:	73 1f       	adc	r23, r19
	// 2.1  Nuskaitomi elektriniai parametrai
	*m->voltage = m->iface.read_voltage(); //read and save voltage
	*m->current = m->iface.read_current(); //read and save current

	// 3. Backlash logika
	bool inBacklash = (*m->sensor.position >= (*m->sensor.target - m->backlash)) &&
     27e:	48 17       	cp	r20, r24
     280:	59 07       	cpc	r21, r25
     282:	6a 07       	cpc	r22, r26
     284:	7b 07       	cpc	r23, r27
     286:	24 f4       	brge	.+8      	; 0x290 <MotorControl+0xd6>
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	03 c0       	rjmp	.+6      	; 0x292 <MotorControl+0xd8>
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	01 c0       	rjmp	.+2      	; 0x292 <MotorControl+0xd8>
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	89 2f       	mov	r24, r25
     294:	81 70       	andi	r24, 0x01	; 1
	(*m->sensor.position <= (*m->sensor.target + m->backlash));

	if (!inBacklash || !*m->sensor.targetReached) {
     296:	29 f0       	breq	.+10     	; 0x2a2 <MotorControl+0xe8>
     298:	e9 8d       	ldd	r30, Y+25	; 0x19
     29a:	fa 8d       	ldd	r31, Y+26	; 0x1a
     29c:	80 81       	ld	r24, Z
     29e:	81 11       	cpse	r24, r1
     2a0:	09 c0       	rjmp	.+18     	; 0x2b4 <MotorControl+0xfa>
		m->iface.start();
     2a2:	ed 81       	ldd	r30, Y+5	; 0x05
     2a4:	fe 81       	ldd	r31, Y+6	; 0x06
     2a6:	09 95       	icall
		m->iface.enable();
     2a8:	e9 81       	ldd	r30, Y+1	; 0x01
     2aa:	fa 81       	ldd	r31, Y+2	; 0x02
     2ac:	09 95       	icall
		*m->sensor.targetReached = false;
     2ae:	e9 8d       	ldd	r30, Y+25	; 0x19
     2b0:	fa 8d       	ldd	r31, Y+26	; 0x1a
     2b2:	10 82       	st	Z, r1
	}

	// 4. Pokytis
	int32_t delta = (int32_t)(*m->sensor.positionFiltered) - (int32_t)(*m->sensor.lastPosition);
     2b4:	e9 89       	ldd	r30, Y+17	; 0x11
     2b6:	fa 89       	ldd	r31, Y+18	; 0x12
     2b8:	c0 80       	ld	r12, Z
     2ba:	d1 80       	ldd	r13, Z+1	; 0x01
     2bc:	e1 2c       	mov	r14, r1
     2be:	f1 2c       	mov	r15, r1
     2c0:	ed 89       	ldd	r30, Y+21	; 0x15
     2c2:	fe 89       	ldd	r31, Y+22	; 0x16
     2c4:	80 81       	ld	r24, Z
     2c6:	91 81       	ldd	r25, Z+1	; 0x01
     2c8:	c8 1a       	sub	r12, r24
     2ca:	d9 0a       	sbc	r13, r25
     2cc:	e1 08       	sbc	r14, r1
     2ce:	f1 08       	sbc	r15, r1
	if (delta > -SENSOR_DEADBAND && delta < SENSOR_DEADBAND) {
     2d0:	d7 01       	movw	r26, r14
     2d2:	c6 01       	movw	r24, r12
     2d4:	43 96       	adiw	r24, 0x13	; 19
     2d6:	a1 1d       	adc	r26, r1
     2d8:	b1 1d       	adc	r27, r1
     2da:	87 97       	sbiw	r24, 0x27	; 39
     2dc:	a1 05       	cpc	r26, r1
     2de:	b1 05       	cpc	r27, r1
     2e0:	18 f4       	brcc	.+6      	; 0x2e8 <MotorControl+0x12e>
		delta = 0;
     2e2:	c1 2c       	mov	r12, r1
     2e4:	d1 2c       	mov	r13, r1
     2e6:	76 01       	movw	r14, r12
	}

	// 5. Kryptis
	if (*m->sensor.position < *m->sensor.target) {
     2e8:	ef 85       	ldd	r30, Y+15	; 0x0f
     2ea:	f8 89       	ldd	r31, Y+16	; 0x10
     2ec:	20 81       	ld	r18, Z
     2ee:	31 81       	ldd	r19, Z+1	; 0x01
     2f0:	ef 89       	ldd	r30, Y+23	; 0x17
     2f2:	f8 8d       	ldd	r31, Y+24	; 0x18
     2f4:	80 81       	ld	r24, Z
     2f6:	91 81       	ldd	r25, Z+1	; 0x01
     2f8:	28 17       	cp	r18, r24
     2fa:	39 07       	cpc	r19, r25
     2fc:	28 f4       	brcc	.+10     	; 0x308 <MotorControl+0x14e>
		m->iface.set_direction(1);
     2fe:	e9 85       	ldd	r30, Y+9	; 0x09
     300:	fa 85       	ldd	r31, Y+10	; 0x0a
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	09 95       	icall
     306:	07 c0       	rjmp	.+14     	; 0x316 <MotorControl+0x15c>
		} else if (*m->sensor.position > *m->sensor.target) {
     308:	82 17       	cp	r24, r18
     30a:	93 07       	cpc	r25, r19
     30c:	20 f4       	brcc	.+8      	; 0x316 <MotorControl+0x15c>
		m->iface.set_direction(0);
     30e:	e9 85       	ldd	r30, Y+9	; 0x09
     310:	fa 85       	ldd	r31, Y+10	; 0x0a
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	09 95       	icall
	}

	// 6. Uþstrigimo tikrinimas (neteisinga kryptis)
	if (*m->sensor.position < (*m->sensor.target - m->backlash)) {
     316:	ef 85       	ldd	r30, Y+15	; 0x0f
     318:	f8 89       	ldd	r31, Y+16	; 0x10
     31a:	80 81       	ld	r24, Z
     31c:	91 81       	ldd	r25, Z+1	; 0x01
     31e:	a0 e0       	ldi	r26, 0x00	; 0
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	ef 89       	ldd	r30, Y+23	; 0x17
     324:	f8 8d       	ldd	r31, Y+24	; 0x18
     326:	40 81       	ld	r20, Z
     328:	51 81       	ldd	r21, Z+1	; 0x01
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	0d 8d       	ldd	r16, Y+29	; 0x1d
     330:	1e 8d       	ldd	r17, Y+30	; 0x1e
     332:	2f 8d       	ldd	r18, Y+31	; 0x1f
     334:	38 a1       	ldd	r19, Y+32	; 0x20
     336:	4a 01       	movw	r8, r20
     338:	5b 01       	movw	r10, r22
     33a:	80 1a       	sub	r8, r16
     33c:	91 0a       	sbc	r9, r17
     33e:	a2 0a       	sbc	r10, r18
     340:	b3 0a       	sbc	r11, r19
     342:	88 15       	cp	r24, r8
     344:	99 05       	cpc	r25, r9
     346:	aa 05       	cpc	r26, r10
     348:	bb 05       	cpc	r27, r11
     34a:	fc f4       	brge	.+62     	; 0x38a <MotorControl+0x1d0>
		if (delta < -SENSOR_DEADBAND && ++m->stuckCount >= STUCK_LIMIT) {
     34c:	fc ee       	ldi	r31, 0xEC	; 236
     34e:	cf 16       	cp	r12, r31
     350:	ff ef       	ldi	r31, 0xFF	; 255
     352:	df 06       	cpc	r13, r31
     354:	ef 06       	cpc	r14, r31
     356:	ff 06       	cpc	r15, r31
     358:	84 f4       	brge	.+32     	; 0x37a <MotorControl+0x1c0>
     35a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     35c:	8f 5f       	subi	r24, 0xFF	; 255
     35e:	8b 8f       	std	Y+27, r24	; 0x1b
     360:	82 30       	cpi	r24, 0x02	; 2
     362:	58 f0       	brcs	.+22     	; 0x37a <MotorControl+0x1c0>
			*m->sensor.faultFlag = true;
     364:	eb 89       	ldd	r30, Y+19	; 0x13
     366:	fc 89       	ldd	r31, Y+20	; 0x14
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	80 83       	st	Z, r24
			m->iface.stop();
     36c:	ef 81       	ldd	r30, Y+7	; 0x07
     36e:	f8 85       	ldd	r31, Y+8	; 0x08
     370:	09 95       	icall
			m->iface.disable();
     372:	eb 81       	ldd	r30, Y+3	; 0x03
     374:	fc 81       	ldd	r31, Y+4	; 0x04
     376:	09 95       	icall
     378:	2f c0       	rjmp	.+94     	; 0x3d8 <MotorControl+0x21e>
			} else if (delta > SENSOR_DEADBAND) {
     37a:	85 e1       	ldi	r24, 0x15	; 21
     37c:	c8 16       	cp	r12, r24
     37e:	d1 04       	cpc	r13, r1
     380:	e1 04       	cpc	r14, r1
     382:	f1 04       	cpc	r15, r1
     384:	4c f1       	brlt	.+82     	; 0x3d8 <MotorControl+0x21e>
			m->stuckCount = 0;
     386:	1b 8e       	std	Y+27, r1	; 0x1b
     388:	27 c0       	rjmp	.+78     	; 0x3d8 <MotorControl+0x21e>
		}
		} else if (*m->sensor.position > (*m->sensor.target + m->backlash)) {
     38a:	40 0f       	add	r20, r16
     38c:	51 1f       	adc	r21, r17
     38e:	62 1f       	adc	r22, r18
     390:	73 1f       	adc	r23, r19
     392:	48 17       	cp	r20, r24
     394:	59 07       	cpc	r21, r25
     396:	6a 07       	cpc	r22, r26
     398:	7b 07       	cpc	r23, r27
     39a:	f4 f4       	brge	.+60     	; 0x3d8 <MotorControl+0x21e>
		if (delta > SENSOR_DEADBAND && ++m->stuckCount >= STUCK_LIMIT) {
     39c:	e5 e1       	ldi	r30, 0x15	; 21
     39e:	ce 16       	cp	r12, r30
     3a0:	d1 04       	cpc	r13, r1
     3a2:	e1 04       	cpc	r14, r1
     3a4:	f1 04       	cpc	r15, r1
     3a6:	84 f0       	brlt	.+32     	; 0x3c8 <MotorControl+0x20e>
     3a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3aa:	8f 5f       	subi	r24, 0xFF	; 255
     3ac:	8b 8f       	std	Y+27, r24	; 0x1b
     3ae:	82 30       	cpi	r24, 0x02	; 2
     3b0:	58 f0       	brcs	.+22     	; 0x3c8 <MotorControl+0x20e>
			*m->sensor.faultFlag = true;
     3b2:	eb 89       	ldd	r30, Y+19	; 0x13
     3b4:	fc 89       	ldd	r31, Y+20	; 0x14
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	80 83       	st	Z, r24
			m->iface.stop();
     3ba:	ef 81       	ldd	r30, Y+7	; 0x07
     3bc:	f8 85       	ldd	r31, Y+8	; 0x08
     3be:	09 95       	icall
			m->iface.disable();
     3c0:	eb 81       	ldd	r30, Y+3	; 0x03
     3c2:	fc 81       	ldd	r31, Y+4	; 0x04
     3c4:	09 95       	icall
     3c6:	08 c0       	rjmp	.+16     	; 0x3d8 <MotorControl+0x21e>
			} else if (delta < -SENSOR_DEADBAND) {
     3c8:	fc ee       	ldi	r31, 0xEC	; 236
     3ca:	cf 16       	cp	r12, r31
     3cc:	ff ef       	ldi	r31, 0xFF	; 255
     3ce:	df 06       	cpc	r13, r31
     3d0:	ef 06       	cpc	r14, r31
     3d2:	ff 06       	cpc	r15, r31
     3d4:	0c f4       	brge	.+2      	; 0x3d8 <MotorControl+0x21e>
			m->stuckCount = 0;
     3d6:	1b 8e       	std	Y+27, r1	; 0x1b
		}
	}

	// 7. Uþstrigimas vietoje
	if (delta == 0 && !*m->sensor.targetReached) {
     3d8:	cd 28       	or	r12, r13
     3da:	ce 28       	or	r12, r14
     3dc:	cf 28       	or	r12, r15
     3de:	a9 f4       	brne	.+42     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3e0:	e9 8d       	ldd	r30, Y+25	; 0x19
     3e2:	fa 8d       	ldd	r31, Y+26	; 0x1a
     3e4:	80 81       	ld	r24, Z
     3e6:	81 11       	cpse	r24, r1
     3e8:	10 c0       	rjmp	.+32     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		if (++m->noChangeCount >= STUCK_LIMIT) {
     3ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3ec:	8f 5f       	subi	r24, 0xFF	; 255
     3ee:	8c 8f       	std	Y+28, r24	; 0x1c
     3f0:	82 30       	cpi	r24, 0x02	; 2
     3f2:	60 f0       	brcs	.+24     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			*m->sensor.faultFlag = true;
     3f4:	eb 89       	ldd	r30, Y+19	; 0x13
     3f6:	fc 89       	ldd	r31, Y+20	; 0x14
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	80 83       	st	Z, r24
			m->iface.stop();
     3fc:	ef 81       	ldd	r30, Y+7	; 0x07
     3fe:	f8 85       	ldd	r31, Y+8	; 0x08
     400:	09 95       	icall
			m->iface.disable();
     402:	eb 81       	ldd	r30, Y+3	; 0x03
     404:	fc 81       	ldd	r31, Y+4	; 0x04
     406:	09 95       	icall
     408:	01 c0       	rjmp	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		}
		} else {
		m->noChangeCount = 0;
     40a:	1c 8e       	std	Y+28, r1	; 0x1c
	}

	// 8. Atnaujinam paskutinæ reikðmæ
	*m->sensor.lastPosition = *m->sensor.positionFiltered;
     40c:	ed 89       	ldd	r30, Y+21	; 0x15
     40e:	fe 89       	ldd	r31, Y+22	; 0x16
     410:	a9 89       	ldd	r26, Y+17	; 0x11
     412:	ba 89       	ldd	r27, Y+18	; 0x12
     414:	8d 91       	ld	r24, X+
     416:	9c 91       	ld	r25, X
     418:	80 83       	st	Z, r24
     41a:	91 83       	std	Z+1, r25	; 0x01
}
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	ef 90       	pop	r14
     428:	df 90       	pop	r13
     42a:	cf 90       	pop	r12
     42c:	bf 90       	pop	r11
     42e:	af 90       	pop	r10
     430:	9f 90       	pop	r9
     432:	8f 90       	pop	r8
     434:	08 95       	ret

00000436 <work>:

void work(){
	if(WSData.windspeed > MAX_WIND){
     436:	80 91 bf 65 	lds	r24, 0x65BF	; 0x8065bf <WSData+0x6>
     43a:	80 31       	cpi	r24, 0x10	; 16
     43c:	48 f0       	brcs	.+18     	; 0x450 <work+0x1a>
		get_safe_azimuth();
     43e:	0e 94 88 00 	call	0x110	; 0x110 <get_safe_azimuth>
		Target.elevation = SAFE_ELEVATION;
     442:	84 e1       	ldi	r24, 0x14	; 20
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	80 93 4a 60 	sts	0x604A, r24	; 0x80604a <Target>
     44a:	90 93 4b 60 	sts	0x604B, r25	; 0x80604b <Target+0x1>
     44e:	08 95       	ret
	}
	else{
		if(WSData.lightlevel >= MIN_LIGHT_LEVEL){ // if minimum light level reached work as normal
     450:	80 91 c1 65 	lds	r24, 0x65C1	; 0x8065c1 <WSData+0x8>
     454:	90 91 c2 65 	lds	r25, 0x65C2	; 0x8065c2 <WSData+0x9>
     458:	8c 32       	cpi	r24, 0x2C	; 44
     45a:	91 40       	sbci	r25, 0x01	; 1
     45c:	80 f0       	brcs	.+32     	; 0x47e <work+0x48>
			Target.azimuth = WSData.azimuth;
     45e:	a9 eb       	ldi	r26, 0xB9	; 185
     460:	b5 e6       	ldi	r27, 0x65	; 101
     462:	8d 91       	ld	r24, X+
     464:	9c 91       	ld	r25, X
     466:	11 97       	sbiw	r26, 0x01	; 1
     468:	ea e4       	ldi	r30, 0x4A	; 74
     46a:	f0 e6       	ldi	r31, 0x60	; 96
     46c:	85 83       	std	Z+5, r24	; 0x05
     46e:	96 83       	std	Z+6, r25	; 0x06
			Target.elevation = WSData.elevation;
     470:	12 96       	adiw	r26, 0x02	; 2
     472:	8d 91       	ld	r24, X+
     474:	9c 91       	ld	r25, X
     476:	13 97       	sbiw	r26, 0x03	; 3
     478:	80 83       	st	Z, r24
     47a:	91 83       	std	Z+1, r25	; 0x01
     47c:	0c c0       	rjmp	.+24     	; 0x496 <work+0x60>
		}
		else{ // if not go to best day position (early morning, late at evening, or just dark day)
			Target.azimuth = 180; //South
     47e:	ea e4       	ldi	r30, 0x4A	; 74
     480:	f0 e6       	ldi	r31, 0x60	; 96
     482:	84 eb       	ldi	r24, 0xB4	; 180
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	85 83       	std	Z+5, r24	; 0x05
     488:	96 83       	std	Z+6, r25	; 0x06
			Target.elevation = WSData.topelevation; //day top elevation
     48a:	80 91 bd 65 	lds	r24, 0x65BD	; 0x8065bd <WSData+0x4>
     48e:	90 91 be 65 	lds	r25, 0x65BE	; 0x8065be <WSData+0x5>
     492:	80 83       	st	Z, r24
     494:	91 83       	std	Z+1, r25	; 0x01
		}
				//ReachTarget();
				//StepperControl();
				//LinearMotorControl();
				MotorControl(&LinearMotorCtrl);
     496:	85 e2       	ldi	r24, 0x25	; 37
     498:	90 e6       	ldi	r25, 0x60	; 96
     49a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MotorControl>
				MotorControl(&StepperMotorCtrl);
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e6       	ldi	r25, 0x60	; 96
     4a2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MotorControl>
     4a6:	08 95       	ret

000004a8 <ADC0_init>:
 * - Prescaler: Division by 4
 * - Resolution: 12-bit
 * - Enables the ADC.
 */
void ADC0_init() {
    ADC0.CTRLB = ADC_SAMPNUM_ACC128_gc; // 1 measurements
     4a8:	e0 e0       	ldi	r30, 0x00	; 0
     4aa:	f6 e0       	ldi	r31, 0x06	; 6
     4ac:	87 e0       	ldi	r24, 0x07	; 7
     4ae:	81 83       	std	Z+1, r24	; 0x01
    ADC0.CTRLC = ADC_PRESC_DIV4_gc; // 24Mhz / 16 ADC speed
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	82 83       	std	Z+2, r24	; 0x02
    ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_12BIT_gc; // 12-bit resolution
     4b4:	80 83       	st	Z, r24
     4b6:	08 95       	ret

000004b8 <ADC0_SetupJoystick>:
}


void ADC0_SetupJoystick(uint8_t axis) {
    VREF.ADC0REF = VREF_REFSEL_VDD_gc;
     4b8:	95 e0       	ldi	r25, 0x05	; 5
     4ba:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    ADC0.MUXPOS = axis;
     4be:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     4c2:	08 95       	ret

000004c4 <ADC0_SetupLinearMotor>:

}

void ADC0_SetupLinearMotor(uint8_t parameter) {
	switch (parameter)
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	39 f4       	brne	.+14     	; 0x4d6 <ADC0_SetupLinearMotor+0x12>
	{
		case 1: //I
			VREF.ADC0REF = VREF_REFSEL_4V096_gc; // up to 9,21A (if MCU Vcc== 4.096V)| 0A= 0.4096V| 4.096- 0.4096 = 3,6864V/0,4 = 9.21A | max current at normal working conditions for linear motor is ~4A			
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
			ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc; //PD1
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
		break;
     4d4:	08 95       	ret
		default://U
			VREF.ADC0REF = VREF_REFSEL_2V048_gc; //AMC1311 full range is 2.0V for linear motor 2.0V = 30.0V (300k)
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
			ADC0.MUXPOS = ADC_MUXPOS_AIN31_gc; //PC3
     4dc:	8f e1       	ldi	r24, 0x1F	; 31
     4de:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     4e2:	08 95       	ret

000004e4 <ADC0_SetupStepper>:
	}

}

void ADC0_SetupStepper(uint8_t parameter) {
	switch (parameter)
     4e4:	81 30       	cpi	r24, 0x01	; 1
     4e6:	39 f4       	brne	.+14     	; 0x4f6 <ADC0_SetupStepper+0x12>
	{
		case 1: //I
			VREF.ADC0REF = VREF_REFSEL_4V096_gc; // up to 9,21A (if MCU Vcc== 4.096V)| 0A= 0.4096V| 4.096- 0.4096 = 3,6864V/0,4 = 9.21A | max current at normal working conditions for stepper motor is ~6A
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
			ADC0.MUXPOS = ADC_MUXPOS_AIN16_gc; //PF0
     4ee:	80 e1       	ldi	r24, 0x10	; 16
     4f0:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
		break;
     4f4:	08 95       	ret
		default://U
			VREF.ADC0REF = VREF_REFSEL_2V048_gc; //AMC1311 full range is 2.0V for stepper 2.0V = 71.0V (710k)
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
			ADC0.MUXPOS = ADC_MUXPOS_AIN6_gc; //PD6
     4fc:	86 e0       	ldi	r24, 0x06	; 6
     4fe:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     502:	08 95       	ret

00000504 <ADC0_SetupSysVoltage>:
	}

}

void ADC0_SetupSysVoltage(){
	VREF.ADC0REF = VREF_REFSEL_1V024_gc; // 1.024V = 4096| 1.024 = 10.24V|
     504:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
	ADC0.MUXPOS = ADC_MUXPOS_VDDDIV10_gc; //5V = 0.5V
     508:	84 e4       	ldi	r24, 0x44	; 68
     50a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     50e:	08 95       	ret

00000510 <ADC0_read>:
 * appropriately.
 *
 * @return The ADC conversion result as a 12-bit value.
 */
uint16_t ADC0_read() {
    ADC0.COMMAND = ADC_STCONV_bm; // Start conversion
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7f060a>
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)); // Wait until result is ready
     516:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7f060d>
     51a:	80 ff       	sbrs	r24, 0
     51c:	fc cf       	rjmp	.-8      	; 0x516 <ADC0_read+0x6>
    ADC0.INTFLAGS = ADC_RESRDY_bm; // Clear result ready flag
     51e:	e0 e0       	ldi	r30, 0x00	; 0
     520:	f6 e0       	ldi	r31, 0x06	; 6
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	85 87       	std	Z+13, r24	; 0x0d
    return ADC0.RES >> 4; // Shift result if accumulation is over 16
     526:	80 89       	ldd	r24, Z+16	; 0x10
     528:	91 89       	ldd	r25, Z+17	; 0x11
}
     52a:	92 95       	swap	r25
     52c:	82 95       	swap	r24
     52e:	8f 70       	andi	r24, 0x0F	; 15
     530:	89 27       	eor	r24, r25
     532:	9f 70       	andi	r25, 0x0F	; 15
     534:	89 27       	eor	r24, r25
     536:	08 95       	ret

00000538 <Read_MCU_Voltge>:

uint16_t Read_MCU_Voltge(){
ADC0_SetupSysVoltage();
     538:	0e 94 82 02 	call	0x504	; 0x504 <ADC0_SetupSysVoltage>
return ADC0_read()*0.25; //ADC value * 10.26V (full adc range) / 4096 (Full adc range steps) exp: 1856 * 0.25 = 464 (4.64V)
     53c:	0e 94 88 02 	call	0x510	; 0x510 <ADC0_read>
     540:	bc 01       	movw	r22, r24
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__floatunsisf>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	40 e8       	ldi	r20, 0x80	; 128
     550:	5e e3       	ldi	r21, 0x3E	; 62
     552:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     556:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__fixunssfsi>
}
     55a:	cb 01       	movw	r24, r22
     55c:	08 95       	ret

0000055e <CLOCK_XOSCHF_clock_init>:
#include "Settings.h"

void CLOCK_XOSCHF_clock_init()
{
	/* Enable external (32 MHz) clock input */
	ccp_write_io((uint8_t *) &CLKCTRL.XOSCHFCTRLA, CLKCTRL_SELHF_EXTCLOCK_gc | CLKCTRL_FRQRANGE_24M_gc | CLKCTRL_ENABLE_bm);
     55e:	6b e0       	ldi	r22, 0x0B	; 11
     560:	80 e8       	ldi	r24, 0x80	; 128
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 95 13 	call	0x272a	; 0x272a <ccp_write_io>

	/* Set the main clock to use external clock as source */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc);
     568:	63 e0       	ldi	r22, 0x03	; 3
     56a:	80 e6       	ldi	r24, 0x60	; 96
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 95 13 	call	0x272a	; 0x272a <ccp_write_io>

	/* Wait for system oscillator change to complete */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm)
     572:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
     576:	80 fd       	sbrc	r24, 0
     578:	fc cf       	rjmp	.-8      	; 0x572 <CLOCK_XOSCHF_clock_init+0x14>
	{};
	/* Configuration complete;*/
}
     57a:	08 95       	ret

0000057c <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
     57c:	2f 92       	push	r2
     57e:	3f 92       	push	r3
     580:	4f 92       	push	r4
     582:	5f 92       	push	r5
     584:	6f 92       	push	r6
     586:	7f 92       	push	r7
     588:	8f 92       	push	r8
     58a:	9f 92       	push	r9
     58c:	af 92       	push	r10
     58e:	bf 92       	push	r11
     590:	cf 92       	push	r12
     592:	df 92       	push	r13
     594:	ef 92       	push	r14
     596:	ff 92       	push	r15
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	2b 97       	sbiw	r28, 0x0b	; 11
     5a6:	cd bf       	out	0x3d, r28	; 61
     5a8:	de bf       	out	0x3e, r29	; 62
     5aa:	c2 2e       	mov	r12, r18
     5ac:	b3 2e       	mov	r11, r19
     5ae:	a4 2e       	mov	r10, r20
     5b0:	95 2e       	mov	r9, r21
     5b2:	86 2e       	mov	r8, r22
     5b4:	77 2e       	mov	r7, r23
     5b6:	68 2e       	mov	r6, r24
     5b8:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
     5ba:	f2 2e       	mov	r15, r18
     5bc:	03 2f       	mov	r16, r19
     5be:	14 2f       	mov	r17, r20
     5c0:	5a 87       	std	Y+10, r21	; 0x0a
     5c2:	69 83       	std	Y+1, r22	; 0x01
     5c4:	b7 2f       	mov	r27, r23
     5c6:	d8 2e       	mov	r13, r24
     5c8:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
     5ca:	e0 e0       	ldi	r30, 0x00	; 0
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     5ce:	14 c0       	rjmp	.+40     	; 0x5f8 <crc8_cdma2000+0x7c>
        length++;
     5d0:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
     5d2:	2f 2d       	mov	r18, r15
     5d4:	30 2f       	mov	r19, r16
     5d6:	41 2f       	mov	r20, r17
     5d8:	5a 85       	ldd	r21, Y+10	; 0x0a
     5da:	69 81       	ldd	r22, Y+1	; 0x01
     5dc:	7b 2f       	mov	r23, r27
     5de:	8d 2d       	mov	r24, r13
     5e0:	9e 2d       	mov	r25, r14
     5e2:	08 e0       	ldi	r16, 0x08	; 8
     5e4:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__lshrdi3>
     5e8:	f2 2e       	mov	r15, r18
     5ea:	03 2f       	mov	r16, r19
     5ec:	14 2f       	mov	r17, r20
     5ee:	5a 87       	std	Y+10, r21	; 0x0a
     5f0:	69 83       	std	Y+1, r22	; 0x01
     5f2:	b7 2f       	mov	r27, r23
     5f4:	d8 2e       	mov	r13, r24
     5f6:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     5f8:	2f 2d       	mov	r18, r15
     5fa:	30 2f       	mov	r19, r16
     5fc:	41 2f       	mov	r20, r17
     5fe:	5a 85       	ldd	r21, Y+10	; 0x0a
     600:	69 81       	ldd	r22, Y+1	; 0x01
     602:	7b 2f       	mov	r23, r27
     604:	8d 2d       	mov	r24, r13
     606:	9e 2d       	mov	r25, r14
     608:	a0 e0       	ldi	r26, 0x00	; 0
     60a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__cmpdi2_s8>
     60e:	01 f7       	brne	.-64     	; 0x5d0 <crc8_cdma2000+0x54>
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	8a 87       	std	Y+10, r24	; 0x0a
     614:	cb 86       	std	Y+11, r12	; 0x0b
     616:	b9 82       	std	Y+1, r11	; 0x01
     618:	4a 2c       	mov	r4, r10
     61a:	39 2c       	mov	r3, r9
     61c:	28 2c       	mov	r2, r8
     61e:	1a c0       	rjmp	.+52     	; 0x654 <crc8_cdma2000+0xd8>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
     620:	8d 01       	movw	r16, r26
     622:	00 0f       	add	r16, r16
     624:	11 1f       	adc	r17, r17
     626:	00 0f       	add	r16, r16
     628:	11 1f       	adc	r17, r17
     62a:	00 0f       	add	r16, r16
     62c:	11 1f       	adc	r17, r17
     62e:	2b 85       	ldd	r18, Y+11	; 0x0b
     630:	39 81       	ldd	r19, Y+1	; 0x01
     632:	44 2d       	mov	r20, r4
     634:	53 2d       	mov	r21, r3
     636:	62 2d       	mov	r22, r2
     638:	77 2d       	mov	r23, r7
     63a:	86 2d       	mov	r24, r6
     63c:	95 2d       	mov	r25, r5
     63e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__lshrdi3>
     642:	8a 84       	ldd	r8, Y+10	; 0x0a
     644:	82 26       	eor	r8, r18
     646:	91 2c       	mov	r9, r1
     648:	f4 01       	movw	r30, r8
     64a:	e3 54       	subi	r30, 0x43	; 67
     64c:	fc 49       	sbci	r31, 0x9C	; 156
     64e:	80 81       	ld	r24, Z
     650:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
     652:	fd 01       	movw	r30, r26
     654:	df 01       	movw	r26, r30
     656:	11 97       	sbiw	r26, 0x01	; 1
     658:	ef 2b       	or	r30, r31
     65a:	11 f7       	brne	.-60     	; 0x620 <crc8_cdma2000+0xa4>
     65c:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
     65e:	2b 96       	adiw	r28, 0x0b	; 11
     660:	cd bf       	out	0x3d, r28	; 61
     662:	de bf       	out	0x3e, r29	; 62
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	bf 90       	pop	r11
     676:	af 90       	pop	r10
     678:	9f 90       	pop	r9
     67a:	8f 90       	pop	r8
     67c:	7f 90       	pop	r7
     67e:	6f 90       	pop	r6
     680:	5f 90       	pop	r5
     682:	4f 90       	pop	r4
     684:	3f 90       	pop	r3
     686:	2f 90       	pop	r2
     688:	08 95       	ret

0000068a <verify_crc8_cdma2000>:
 * without the CRC byte. Otherwise, it returns 0 to indicate a mismatch.
 * 
 * @param data_with_crc The input data with the CRC byte appended.
 * @return The data without the CRC byte if the checksum is valid, or 0 if invalid.
 */
uint8_t verify_crc8_cdma2000(uint64_t data_without_crc, uint8_t crc) {
     68a:	0f 93       	push	r16
     68c:	cf 93       	push	r28
     68e:	c2 2f       	mov	r28, r18

	return crc8_cdma2000(data_without_crc) == crc ?  data_without_crc : 0;
     690:	0e 94 be 02 	call	0x57c	; 0x57c <crc8_cdma2000>
     694:	80 13       	cpse	r24, r16
     696:	02 c0       	rjmp	.+4      	; 0x69c <verify_crc8_cdma2000+0x12>
     698:	8c 2f       	mov	r24, r28
     69a:	01 c0       	rjmp	.+2      	; 0x69e <verify_crc8_cdma2000+0x14>
     69c:	80 e0       	ldi	r24, 0x00	; 0

     69e:	cf 91       	pop	r28
     6a0:	0f 91       	pop	r16
     6a2:	08 95       	ret

000006a4 <hexToUint64>:
 *  Author: Saulius
 */ 
#include "Settings.h"
#include "FOUSARTVar.h"

uint64_t hexToUint64(const char *str) {
     6a4:	0f 93       	push	r16
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	fc 01       	movw	r30, r24
	uint64_t result = 0;
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	40 e0       	ldi	r20, 0x00	; 0
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e0       	ldi	r25, 0x00	; 0
	char c;

	while ((c = *str++)) {
     6bc:	3a c0       	rjmp	.+116    	; 0x732 <hexToUint64+0x8e>
		result <<= 4; // kiekvienas hex simbolis = 4 bitai
     6be:	04 e0       	ldi	r16, 0x04	; 4
     6c0:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__ashldi3>

		if (c >= '0' && c <= '9') {
     6c4:	e0 ed       	ldi	r30, 0xD0	; 208
     6c6:	ec 0f       	add	r30, r28
     6c8:	ea 30       	cpi	r30, 0x0A	; 10
     6ca:	70 f4       	brcc	.+28     	; 0x6e8 <hexToUint64+0x44>
			result |= (uint64_t)(c - '0');
     6cc:	d0 e0       	ldi	r29, 0x00	; 0
     6ce:	e0 97       	sbiw	r28, 0x30	; 48
     6d0:	ed 2f       	mov	r30, r29
     6d2:	ee 0f       	add	r30, r30
     6d4:	ee 0b       	sbc	r30, r30
     6d6:	2c 2b       	or	r18, r28
     6d8:	3d 2b       	or	r19, r29
     6da:	4e 2b       	or	r20, r30
     6dc:	5e 2b       	or	r21, r30
     6de:	6e 2b       	or	r22, r30
     6e0:	7e 2b       	or	r23, r30
     6e2:	8e 2b       	or	r24, r30
     6e4:	9e 2b       	or	r25, r30
     6e6:	24 c0       	rjmp	.+72     	; 0x730 <hexToUint64+0x8c>
			} else if (c >= 'A' && c <= 'F') {
     6e8:	ef eb       	ldi	r30, 0xBF	; 191
     6ea:	ec 0f       	add	r30, r28
     6ec:	e6 30       	cpi	r30, 0x06	; 6
     6ee:	70 f4       	brcc	.+28     	; 0x70c <hexToUint64+0x68>
			result |= (uint64_t)(c - 'A' + 10);
     6f0:	d0 e0       	ldi	r29, 0x00	; 0
     6f2:	e7 97       	sbiw	r28, 0x37	; 55
     6f4:	ed 2f       	mov	r30, r29
     6f6:	ee 0f       	add	r30, r30
     6f8:	ee 0b       	sbc	r30, r30
     6fa:	2c 2b       	or	r18, r28
     6fc:	3d 2b       	or	r19, r29
     6fe:	4e 2b       	or	r20, r30
     700:	5e 2b       	or	r21, r30
     702:	6e 2b       	or	r22, r30
     704:	7e 2b       	or	r23, r30
     706:	8e 2b       	or	r24, r30
     708:	9e 2b       	or	r25, r30
     70a:	12 c0       	rjmp	.+36     	; 0x730 <hexToUint64+0x8c>
			} else if (c >= 'a' && c <= 'f') {
     70c:	ef e9       	ldi	r30, 0x9F	; 159
     70e:	ec 0f       	add	r30, r28
     710:	e6 30       	cpi	r30, 0x06	; 6
     712:	a8 f4       	brcc	.+42     	; 0x73e <hexToUint64+0x9a>
			result |= (uint64_t)(c - 'a' + 10);
     714:	d0 e0       	ldi	r29, 0x00	; 0
     716:	c7 55       	subi	r28, 0x57	; 87
     718:	d1 09       	sbc	r29, r1
     71a:	ed 2f       	mov	r30, r29
     71c:	ee 0f       	add	r30, r30
     71e:	ee 0b       	sbc	r30, r30
     720:	2c 2b       	or	r18, r28
     722:	3d 2b       	or	r19, r29
     724:	4e 2b       	or	r20, r30
     726:	5e 2b       	or	r21, r30
     728:	6e 2b       	or	r22, r30
     72a:	7e 2b       	or	r23, r30
     72c:	8e 2b       	or	r24, r30
     72e:	9e 2b       	or	r25, r30
     730:	fd 01       	movw	r30, r26

uint64_t hexToUint64(const char *str) {
	uint64_t result = 0;
	char c;

	while ((c = *str++)) {
     732:	df 01       	movw	r26, r30
     734:	11 96       	adiw	r26, 0x01	; 1
     736:	c0 81       	ld	r28, Z
     738:	c1 11       	cpse	r28, r1
     73a:	c1 cf       	rjmp	.-126    	; 0x6be <hexToUint64+0x1a>
     73c:	08 c0       	rjmp	.+16     	; 0x74e <hexToUint64+0xaa>
			result |= (uint64_t)(c - 'A' + 10);
			} else if (c >= 'a' && c <= 'f') {
			result |= (uint64_t)(c - 'a' + 10);
			} else {
			// netinkamas simbolis
			return 0;
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return result;
}
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	0f 91       	pop	r16
     754:	08 95       	ret

00000756 <FODataSplitter>:

void FODataSplitter(char *command) {
     756:	7f 92       	push	r7
     758:	8f 92       	push	r8
     75a:	9f 92       	push	r9
     75c:	af 92       	push	r10
     75e:	bf 92       	push	r11
     760:	cf 92       	push	r12
     762:	df 92       	push	r13
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	a0 97       	sbiw	r28, 0x20	; 32
     776:	cd bf       	out	0x3d, r28	; 61
     778:	de bf       	out	0x3e, r29	; 62
     77a:	6c 01       	movw	r12, r24
	if (strncmp(command, "00000000000000", 14) == 0) { //if elevation angle, azimuth angle, solar cells voltage and current = 0 meaning it is FO optic fault: bad signal
     77c:	4e e0       	ldi	r20, 0x0E	; 14
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	6d eb       	ldi	r22, 0xBD	; 189
     782:	74 e6       	ldi	r23, 0x64	; 100
     784:	0e 94 91 10 	call	0x2122	; 0x2122 <strncmp>
     788:	89 2b       	or	r24, r25
     78a:	21 f4       	brne	.+8      	; 0x794 <FODataSplitter+0x3e>
		SensorData.FO_bad_signal_fault = true; //exp. hard bended fo
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 78 65 	sts	0x6578, r24	; 0x806578 <SensorData+0x10>
     792:	dc c0       	rjmp	.+440    	; 0x94c <FODataSplitter+0x1f6>
	}
	else{
		const uint8_t lengths[] = {4, 4, 3, 3, 1, 2};
     794:	86 e0       	ldi	r24, 0x06	; 6
     796:	e3 e9       	ldi	r30, 0x93	; 147
     798:	f3 e6       	ldi	r31, 0x63	; 99
     79a:	de 01       	movw	r26, r28
     79c:	5b 96       	adiw	r26, 0x1b	; 27
     79e:	01 90       	ld	r0, Z+
     7a0:	0d 92       	st	X+, r0
     7a2:	8a 95       	dec	r24
     7a4:	e1 f7       	brne	.-8      	; 0x79e <FODataSplitter+0x48>
		char temp[16];

		strncpy(temp, command, 15);
     7a6:	4f e0       	ldi	r20, 0x0F	; 15
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	b6 01       	movw	r22, r12
     7ac:	ce 01       	movw	r24, r28
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	0e 94 9f 10 	call	0x213e	; 0x213e <strncpy>
		temp[15] = '\0';
     7b4:	18 8a       	std	Y+16, r1	; 0x10
		uint64_t datatocheck = hexToUint64(temp);
     7b6:	ce 01       	movw	r24, r28
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	0e 94 52 03 	call	0x6a4	; 0x6a4 <hexToUint64>
     7be:	72 2e       	mov	r7, r18
     7c0:	83 2e       	mov	r8, r19
     7c2:	94 2e       	mov	r9, r20
     7c4:	a5 2e       	mov	r10, r21
     7c6:	b6 2e       	mov	r11, r22
     7c8:	e7 2e       	mov	r14, r23
     7ca:	f8 2e       	mov	r15, r24
     7cc:	19 2f       	mov	r17, r25
		strncpy(temp, command + 15, 2); 
     7ce:	42 e0       	ldi	r20, 0x02	; 2
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	b6 01       	movw	r22, r12
     7d4:	61 5f       	subi	r22, 0xF1	; 241
     7d6:	7f 4f       	sbci	r23, 0xFF	; 255
     7d8:	ce 01       	movw	r24, r28
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	0e 94 9f 10 	call	0x213e	; 0x213e <strncpy>
		temp[2] = '\0';
     7e0:	1b 82       	std	Y+3, r1	; 0x03
		uint8_t crctocheck = (uint8_t)strtol(temp, NULL, 16);
     7e2:	40 e1       	ldi	r20, 0x10	; 16
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	ce 01       	movw	r24, r28
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <strtol>

		if(verify_crc8_cdma2000(datatocheck, crctocheck)){ //if data valid update it
     7f2:	06 2f       	mov	r16, r22
     7f4:	27 2d       	mov	r18, r7
     7f6:	38 2d       	mov	r19, r8
     7f8:	49 2d       	mov	r20, r9
     7fa:	5a 2d       	mov	r21, r10
     7fc:	6b 2d       	mov	r22, r11
     7fe:	7e 2d       	mov	r23, r14
     800:	8f 2d       	mov	r24, r15
     802:	91 2f       	mov	r25, r17
     804:	0e 94 45 03 	call	0x68a	; 0x68a <verify_crc8_cdma2000>
     808:	81 11       	cpse	r24, r1
     80a:	69 c0       	rjmp	.+210    	; 0x8de <FODataSplitter+0x188>
     80c:	9c c0       	rjmp	.+312    	; 0x946 <FODataSplitter+0x1f0>
			//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
			const char *p = command;
			uint8_t EndSwitchesValue = 0;

			for (uint8_t i = 0; i < 6; i++) {
				char token[10] = {0};
     80e:	5e 01       	movw	r10, r28
     810:	81 e1       	ldi	r24, 0x11	; 17
     812:	a8 0e       	add	r10, r24
     814:	b1 1c       	adc	r11, r1
     816:	8a e0       	ldi	r24, 0x0A	; 10
     818:	f5 01       	movw	r30, r10
     81a:	11 92       	st	Z+, r1
     81c:	8a 95       	dec	r24
     81e:	e9 f7       	brne	.-6      	; 0x81a <FODataSplitter+0xc4>

				memcpy(token, p, lengths[i]);
     820:	eb e1       	ldi	r30, 0x1B	; 27
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	ec 0f       	add	r30, r28
     826:	fd 1f       	adc	r31, r29
     828:	e1 0f       	add	r30, r17
     82a:	f1 1d       	adc	r31, r1
     82c:	e0 80       	ld	r14, Z
     82e:	f1 2c       	mov	r15, r1
     830:	a7 01       	movw	r20, r14
     832:	b6 01       	movw	r22, r12
     834:	c5 01       	movw	r24, r10
     836:	0e 94 78 10 	call	0x20f0	; 0x20f0 <memcpy>
				token[lengths[i]] = '\0';
     83a:	f5 01       	movw	r30, r10
     83c:	ee 0d       	add	r30, r14
     83e:	ff 1d       	adc	r31, r15
     840:	10 82       	st	Z, r1

				switch (i) {
     842:	12 30       	cpi	r17, 0x02	; 2
     844:	29 f1       	breq	.+74     	; 0x890 <FODataSplitter+0x13a>
     846:	28 f4       	brcc	.+10     	; 0x852 <FODataSplitter+0xfc>
     848:	11 23       	and	r17, r17
     84a:	41 f0       	breq	.+16     	; 0x85c <FODataSplitter+0x106>
     84c:	11 30       	cpi	r17, 0x01	; 1
     84e:	99 f0       	breq	.+38     	; 0x876 <FODataSplitter+0x120>
     850:	42 c0       	rjmp	.+132    	; 0x8d6 <FODataSplitter+0x180>
     852:	13 30       	cpi	r17, 0x03	; 3
     854:	51 f1       	breq	.+84     	; 0x8aa <FODataSplitter+0x154>
     856:	14 30       	cpi	r17, 0x04	; 4
     858:	a9 f1       	breq	.+106    	; 0x8c4 <FODataSplitter+0x16e>
     85a:	3d c0       	rjmp	.+122    	; 0x8d6 <FODataSplitter+0x180>
					case 0: SensorData.HPElevation   = (uint16_t)strtol(token, NULL, 16); break;
     85c:	40 e1       	ldi	r20, 0x10	; 16
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	ce 01       	movw	r24, r28
     866:	41 96       	adiw	r24, 0x11	; 17
     868:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <strtol>
     86c:	60 93 6a 65 	sts	0x656A, r22	; 0x80656a <SensorData+0x2>
     870:	70 93 6b 65 	sts	0x656B, r23	; 0x80656b <SensorData+0x3>
     874:	30 c0       	rjmp	.+96     	; 0x8d6 <FODataSplitter+0x180>
					case 1: SensorData.HPAzimuth     = (uint16_t)strtol(token, NULL, 16); break;
     876:	40 e1       	ldi	r20, 0x10	; 16
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	ce 01       	movw	r24, r28
     880:	41 96       	adiw	r24, 0x11	; 17
     882:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <strtol>
     886:	60 93 6e 65 	sts	0x656E, r22	; 0x80656e <SensorData+0x6>
     88a:	70 93 6f 65 	sts	0x656F, r23	; 0x80656f <SensorData+0x7>
     88e:	23 c0       	rjmp	.+70     	; 0x8d6 <FODataSplitter+0x180>
					case 2: SensorData.PVU         = (uint16_t)strtol(token, NULL, 16)/ U_I_Precizion; break;
     890:	40 e1       	ldi	r20, 0x10	; 16
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	ce 01       	movw	r24, r28
     89a:	41 96       	adiw	r24, 0x11	; 17
     89c:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <strtol>
     8a0:	60 93 70 65 	sts	0x6570, r22	; 0x806570 <SensorData+0x8>
     8a4:	70 93 71 65 	sts	0x6571, r23	; 0x806571 <SensorData+0x9>
     8a8:	16 c0       	rjmp	.+44     	; 0x8d6 <FODataSplitter+0x180>
					case 3: SensorData.PVI         = (uint16_t)strtol(token, NULL, 16)/ U_I_Precizion; break;
     8aa:	40 e1       	ldi	r20, 0x10	; 16
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	ce 01       	movw	r24, r28
     8b4:	41 96       	adiw	r24, 0x11	; 17
     8b6:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <strtol>
     8ba:	60 93 72 65 	sts	0x6572, r22	; 0x806572 <SensorData+0xa>
     8be:	70 93 73 65 	sts	0x6573, r23	; 0x806573 <SensorData+0xb>
     8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <FODataSplitter+0x180>
					case 4: EndSwitchesValue       = (uint8_t)strtol(token, NULL, 16); break; //common end switches value
     8c4:	40 e1       	ldi	r20, 0x10	; 16
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	ce 01       	movw	r24, r28
     8ce:	41 96       	adiw	r24, 0x11	; 17
     8d0:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <strtol>
     8d4:	06 2f       	mov	r16, r22
				}

				p += lengths[i];
     8d6:	ce 0c       	add	r12, r14
     8d8:	df 1c       	adc	r13, r15
		if(verify_crc8_cdma2000(datatocheck, crctocheck)){ //if data valid update it
			//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
			const char *p = command;
			uint8_t EndSwitchesValue = 0;

			for (uint8_t i = 0; i < 6; i++) {
     8da:	1f 5f       	subi	r17, 0xFF	; 255
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <FODataSplitter+0x18c>
     8de:	10 e0       	ldi	r17, 0x00	; 0
     8e0:	00 e0       	ldi	r16, 0x00	; 0
     8e2:	16 30       	cpi	r17, 0x06	; 6
     8e4:	08 f4       	brcc	.+2      	; 0x8e8 <FODataSplitter+0x192>
     8e6:	93 cf       	rjmp	.-218    	; 0x80e <FODataSplitter+0xb8>
					case 4: EndSwitchesValue       = (uint8_t)strtol(token, NULL, 16); break; //common end switches value
				}

				p += lengths[i];
			}
			SensorData.Elevation = SensorData.HPElevation / Angle_Precizion;
     8e8:	e8 e6       	ldi	r30, 0x68	; 104
     8ea:	f5 e6       	ldi	r31, 0x65	; 101
     8ec:	22 81       	ldd	r18, Z+2	; 0x02
     8ee:	33 81       	ldd	r19, Z+3	; 0x03
     8f0:	36 95       	lsr	r19
     8f2:	27 95       	ror	r18
     8f4:	36 95       	lsr	r19
     8f6:	27 95       	ror	r18
     8f8:	ab e7       	ldi	r26, 0x7B	; 123
     8fa:	b4 e1       	ldi	r27, 0x14	; 20
     8fc:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__umulhisi3>
     900:	96 95       	lsr	r25
     902:	87 95       	ror	r24
     904:	80 83       	st	Z, r24
     906:	91 83       	std	Z+1, r25	; 0x01
			SensorData.Azimuth = SensorData.HPAzimuth / Angle_Precizion;
     908:	26 81       	ldd	r18, Z+6	; 0x06
     90a:	37 81       	ldd	r19, Z+7	; 0x07
     90c:	36 95       	lsr	r19
     90e:	27 95       	ror	r18
     910:	36 95       	lsr	r19
     912:	27 95       	ror	r18
     914:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__umulhisi3>
     918:	96 95       	lsr	r25
     91a:	87 95       	ror	r24
     91c:	84 83       	std	Z+4, r24	; 0x04
     91e:	95 83       	std	Z+5, r25	; 0x05
			//spliting end switch value to separate end switch value according to axis
			SensorData.ElMin = (EndSwitchesValue & 0x01) ? 1 : 0;
     920:	80 2f       	mov	r24, r16
     922:	81 70       	andi	r24, 0x01	; 1
     924:	84 87       	std	Z+12, r24	; 0x0c
			SensorData.ElMax = (EndSwitchesValue & 0x02) ? 1 : 0;
     926:	01 fb       	bst	r16, 1
     928:	88 27       	eor	r24, r24
     92a:	80 f9       	bld	r24, 0
     92c:	85 87       	std	Z+13, r24	; 0x0d
			SensorData.AzMin = (EndSwitchesValue & 0x04) ? 1 : 0;
     92e:	02 fb       	bst	r16, 2
     930:	88 27       	eor	r24, r24
     932:	80 f9       	bld	r24, 0
     934:	86 87       	std	Z+14, r24	; 0x0e
			SensorData.AzMax = (EndSwitchesValue & 0x08) ? 1 : 0;
     936:	03 fb       	bst	r16, 3
     938:	00 27       	eor	r16, r16
     93a:	00 f9       	bld	r16, 0
     93c:	07 87       	std	Z+15, r16	; 0x0f
			SensorData.FO_bad_signal_fault = false; //reset error
     93e:	10 8a       	std	Z+16, r1	; 0x10
			SensorData.FO_data_fault = false; //reset error
     940:	12 8a       	std	Z+18, r1	; 0x12
			SensorData.FO_lost_signal_fault = false; //reset error
     942:	11 8a       	std	Z+17, r1	; 0x11
     944:	03 c0       	rjmp	.+6      	; 0x94c <FODataSplitter+0x1f6>

		}
		else{
			//uncomment if nedded
			//screen_write_formatted_text("data is corupted!", 1, ALIGN_CENTER); // bad crc
			SensorData.FO_data_fault = true;
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	80 93 7a 65 	sts	0x657A, r24	; 0x80657a <SensorData+0x12>
		}	
	}
}
     94c:	a0 96       	adiw	r28, 0x20	; 32
     94e:	cd bf       	out	0x3d, r28	; 61
     950:	de bf       	out	0x3e, r29	; 62
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ff 90       	pop	r15
     95c:	ef 90       	pop	r14
     95e:	df 90       	pop	r13
     960:	cf 90       	pop	r12
     962:	bf 90       	pop	r11
     964:	af 90       	pop	r10
     966:	9f 90       	pop	r9
     968:	8f 90       	pop	r8
     96a:	7f 90       	pop	r7
     96c:	08 95       	ret

0000096e <FOReceiver>:
 * This function continuously reads incoming data via USART, processes the data, 
 * and executes the appropriate command. If an error occurs or a warning is set, 
 * it handles the corresponding state. The function handles both normal command 
 * processing and error recovery.
 */
void FOReceiver() {
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	64 97       	sbiw	r28, 0x14	; 20
     97e:	cd bf       	out	0x3d, r28	; 61
     980:	de bf       	out	0x3e, r29	; 62
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
     982:	fe 01       	movw	r30, r28
     984:	31 96       	adiw	r30, 0x01	; 1
     986:	84 e1       	ldi	r24, 0x14	; 20
     988:	df 01       	movw	r26, r30
     98a:	1d 92       	st	X+, r1
     98c:	8a 95       	dec	r24
     98e:	e9 f7       	brne	.-6      	; 0x98a <FOReceiver+0x1c>
    uint8_t start = 0;
	uint8_t timeout = 0;
	SensorData.FO_lost_signal_fault = false;
     990:	10 92 79 65 	sts	0x6579, r1	; 0x806579 <SensorData+0x11>
 */
void FOReceiver() {
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
    uint8_t start = 0;
	uint8_t timeout = 0;
     994:	10 e0       	ldi	r17, 0x00	; 0
 * processing and error recovery.
 */
void FOReceiver() {
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
    uint8_t start = 0;
     996:	f1 2c       	mov	r15, r1
 * and executes the appropriate command. If an error occurs or a warning is set, 
 * it handles the corresponding state. The function handles both normal command 
 * processing and error recovery.
 */
void FOReceiver() {
    uint8_t index = 0;
     998:	00 e0       	ldi	r16, 0x00	; 0
     99a:	03 c0       	rjmp	.+6      	; 0x9a2 <FOReceiver+0x34>
            } else if (index < MESSAGE_LENGTH_FO) {
                command[index++] = c; // Store received character in command array
            }
        }
        if (c == '<') { // If received data start symbol
            start = 1;
     99c:	ff 24       	eor	r15, r15
     99e:	f3 94       	inc	r15
            index = 0;
     9a0:	00 e0       	ldi	r16, 0x00	; 0
    uint8_t start = 0;
	uint8_t timeout = 0;
	SensorData.FO_lost_signal_fault = false;

    while (1) {
        char c = USART1_readChar(); // Reading a character from USART
     9a2:	0e 94 31 0a 	call	0x1462	; 0x1462 <USART1_readChar>

		if(SensorData.FO_lost_signal_fault){
     9a6:	90 91 79 65 	lds	r25, 0x6579	; 0x806579 <SensorData+0x11>
     9aa:	99 23       	and	r25, r25
     9ac:	39 f0       	breq	.+14     	; 0x9bc <FOReceiver+0x4e>
			if (++timeout == CountForError_FO) { // Timeout condition if usart1 reading is halted
     9ae:	1f 5f       	subi	r17, 0xFF	; 255
     9b0:	13 30       	cpi	r17, 0x03	; 3
     9b2:	21 f4       	brne	.+8      	; 0x9bc <FOReceiver+0x4e>
				SensorData.FO_lost_connecton_fault = true;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	80 93 7b 65 	sts	0x657B, r24	; 0x80657b <SensorData+0x13>
				break;
     9ba:	2c c0       	rjmp	.+88     	; 0xa14 <FOReceiver+0xa6>
			}
		}
        if (start) {
     9bc:	ff 20       	and	r15, r15
     9be:	39 f1       	breq	.+78     	; 0xa0e <FOReceiver+0xa0>
			
            if (c == '>') { // If received data end symbol			
     9c0:	8e 33       	cpi	r24, 0x3E	; 62
     9c2:	d9 f4       	brne	.+54     	; 0x9fa <FOReceiver+0x8c>
				start = 0;
				command[index] = '\0';
     9c4:	e1 e0       	ldi	r30, 0x01	; 1
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	ec 0f       	add	r30, r28
     9ca:	fd 1f       	adc	r31, r29
     9cc:	e0 0f       	add	r30, r16
     9ce:	f1 1d       	adc	r31, r1
     9d0:	10 82       	st	Z, r1
				index = 0;
				if (strcmp(command, SensorData.FreshDataPack) != 0){ //only if message is different
     9d2:	6f e7       	ldi	r22, 0x7F	; 127
     9d4:	75 e6       	ldi	r23, 0x65	; 101
     9d6:	ce 01       	movw	r24, r28
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	0e 94 81 10 	call	0x2102	; 0x2102 <strcmp>
     9de:	89 2b       	or	r24, r25
     9e0:	21 f0       	breq	.+8      	; 0x9ea <FOReceiver+0x7c>
					FODataSplitter(command); // Execute the received command //comment when testing lines below
     9e2:	ce 01       	movw	r24, r28
     9e4:	01 96       	adiw	r24, 0x01	; 1
     9e6:	0e 94 ab 03 	call	0x756	; 0x756 <FODataSplitter>
				}
				strcpy(SensorData.FreshDataPack, command); // prevents from same message data splitting
     9ea:	be 01       	movw	r22, r28
     9ec:	6f 5f       	subi	r22, 0xFF	; 255
     9ee:	7f 4f       	sbci	r23, 0xFF	; 255
     9f0:	8f e7       	ldi	r24, 0x7F	; 127
     9f2:	95 e6       	ldi	r25, 0x65	; 101
     9f4:	0e 94 8a 10 	call	0x2114	; 0x2114 <strcpy>
				break;
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <FOReceiver+0xa6>
            } else if (index < MESSAGE_LENGTH_FO) {
     9fa:	04 31       	cpi	r16, 0x14	; 20
     9fc:	40 f4       	brcc	.+16     	; 0xa0e <FOReceiver+0xa0>
                command[index++] = c; // Store received character in command array
     9fe:	e1 e0       	ldi	r30, 0x01	; 1
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	ec 0f       	add	r30, r28
     a04:	fd 1f       	adc	r31, r29
     a06:	e0 0f       	add	r30, r16
     a08:	f1 1d       	adc	r31, r1
     a0a:	80 83       	st	Z, r24
     a0c:	0f 5f       	subi	r16, 0xFF	; 255
            }
        }
        if (c == '<') { // If received data start symbol
     a0e:	8c 33       	cpi	r24, 0x3C	; 60
     a10:	41 f6       	brne	.-112    	; 0x9a2 <FOReceiver+0x34>
     a12:	c4 cf       	rjmp	.-120    	; 0x99c <FOReceiver+0x2e>
            start = 1;
            index = 0;
        }
    }
}
     a14:	64 96       	adiw	r28, 0x14	; 20
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	1f 91       	pop	r17
     a20:	0f 91       	pop	r16
     a22:	ff 90       	pop	r15
     a24:	08 95       	ret

00000a26 <GPIO_init>:

#include "Settings.h"

void GPIO_init(){
    // Configure USART0 and USART1 pin routing
    PORTMUX.USARTROUTEA = PORTMUX_USART0_ALT1_gc | PORTMUX_USART1_ALT2_gc; // Set USART0 to alternative pins set 1, USART1 to alternative pins set 2
     a26:	e0 ee       	ldi	r30, 0xE0	; 224
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	81 e1       	ldi	r24, 0x11	; 17
     a2c:	82 83       	std	Z+2, r24	; 0x02
    PORTMUX.TWIROUTEA = PORTMUX_TWI0_DEFAULT_gc; // Set TWI0 to default pins
     a2e:	16 82       	std	Z+6, r1	; 0x06
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;
     a30:	83 e0       	ldi	r24, 0x03	; 3
     a32:	87 83       	std	Z+7, r24	; 0x07
	PORTMUX.TCDROUTEA = PORTMUX_TCD0_ALT2_gc; ///< Select alternative WOC pin variant 2
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	81 87       	std	Z+9, r24	; 0x09


    // Configure Port A (PA) for RX LED, I2C SDA, SCL, USART0 TX, TX LED and XDIR
    PORTA.DIRSET = PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // Set PA2, PA3, PA4, PA7 as output (RX LED, I2C SDA, SCL, USART0 TX, TX LED, XDIR)
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f4 e0       	ldi	r31, 0x04	; 4
     a3c:	8c ed       	ldi	r24, 0xDC	; 220
     a3e:	81 83       	std	Z+1, r24	; 0x01
    PORTA.DIRCLR = PIN1_bm | PIN5_bm; // Set  PA1 as Joystick button,  PA5 as input (USART0 RX)
     a40:	82 e2       	ldi	r24, 0x22	; 34
     a42:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA1 (Joystick button)
     a44:	88 e0       	ldi	r24, 0x08	; 8
     a46:	81 8b       	std	Z+17, r24	; 0x11
    PORTA.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA4 (I2C SCL)
     a48:	84 8b       	std	Z+20, r24	; 0x14
    PORTA.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA5 (USART0 RX)
     a4a:	85 8b       	std	Z+21, r24	; 0x15

    // Configure ADC pins for Joystick x and y axis
    PORTC.PIN1CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC1 (X axis)
     a4c:	e0 e4       	ldi	r30, 0x40	; 64
     a4e:	f4 e0       	ldi	r31, 0x04	; 4
     a50:	91 89       	ldd	r25, Z+17	; 0x11
     a52:	98 7f       	andi	r25, 0xF8	; 248
     a54:	91 8b       	std	Z+17, r25	; 0x11
    PORTC.PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC1
     a56:	91 89       	ldd	r25, Z+17	; 0x11
     a58:	94 60       	ori	r25, 0x04	; 4
     a5a:	91 8b       	std	Z+17, r25	; 0x11
    PORTC.PIN1CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC1
     a5c:	91 89       	ldd	r25, Z+17	; 0x11
     a5e:	97 7f       	andi	r25, 0xF7	; 247
     a60:	91 8b       	std	Z+17, r25	; 0x11

    PORTC.PIN2CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC2 (Y axis)
     a62:	92 89       	ldd	r25, Z+18	; 0x12
     a64:	98 7f       	andi	r25, 0xF8	; 248
     a66:	92 8b       	std	Z+18, r25	; 0x12
    PORTC.PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC2
     a68:	92 89       	ldd	r25, Z+18	; 0x12
     a6a:	94 60       	ori	r25, 0x04	; 4
     a6c:	92 8b       	std	Z+18, r25	; 0x12
    PORTC.PIN2CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC2
     a6e:	92 89       	ldd	r25, Z+18	; 0x12
     a70:	97 7f       	andi	r25, 0xF7	; 247
     a72:	92 8b       	std	Z+18, r25	; 0x12

	PORTC.DIRSET = PIN0_bm; //Set PC0 as RX LED
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	91 83       	std	Z+1, r25	; 0x01

    // Configure Port D (PD) for USART1 TX and RX
    PORTD.DIRSET = PIN2_bm | PIN3_bm | PIN5_bm; //Set PD2 as linear motor disable pin, PD3 as PWM, PD5 as direction
     a78:	9c e2       	ldi	r25, 0x2C	; 44
     a7a:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f0461>
	//PORTD.DIRCLR = PIN4_bm; //Linear motor driver TLE9201SG error flag pin

	PORTF.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm; //Set PF1 as enable, PF2 as pulse, PIN3 as direction signals output for HBS86 driver
     a7e:	e0 ea       	ldi	r30, 0xA0	; 160
     a80:	f4 e0       	ldi	r31, 0x04	; 4
     a82:	9e e0       	ldi	r25, 0x0E	; 14
     a84:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRCLR = PIN4_bm | PIN5_bm; //Set PF4 as alarm and PF5 as Pend signals inputs from HBS86 driver
     a86:	90 e3       	ldi	r25, 0x30	; 48
     a88:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PF4
     a8a:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PF5
     a8c:	85 8b       	std	Z+21, r24	; 0x15
     a8e:	08 95       	ret

00000a90 <I2C_init>:
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal to release the bus
    return data;
}
     a90:	e0 e0       	ldi	r30, 0x00	; 0
     a92:	f9 e0       	ldi	r31, 0x09	; 9
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	80 83       	st	Z, r24
     a98:	85 e0       	ldi	r24, 0x05	; 5
     a9a:	86 83       	std	Z+6, r24	; 0x06
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	83 83       	std	Z+3, r24	; 0x03
     aa0:	85 83       	std	Z+5, r24	; 0x05
     aa2:	08 95       	ret

00000aa4 <TransmitAdd>:
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	86 2b       	or	r24, r22
     aac:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7f0907>
     ab0:	48 e8       	ldi	r20, 0x88	; 136
     ab2:	53 e1       	ldi	r21, 0x13	; 19
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	09 c0       	rjmp	.+18     	; 0xacc <TransmitAdd+0x28>
     aba:	41 50       	subi	r20, 0x01	; 1
     abc:	51 09       	sbc	r21, r1
     abe:	61 09       	sbc	r22, r1
     ac0:	71 09       	sbc	r23, r1
     ac2:	21 f4       	brne	.+8      	; 0xacc <TransmitAdd+0x28>
     ac4:	83 e0       	ldi	r24, 0x03	; 3
     ac6:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     aca:	05 c0       	rjmp	.+10     	; 0xad6 <TransmitAdd+0x32>
     acc:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     ad0:	80 7c       	andi	r24, 0xC0	; 192
     ad2:	99 f3       	breq	.-26     	; 0xaba <TransmitAdd+0x16>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     ada:	94 fd       	sbrc	r25, 4
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     ae2:	9c 70       	andi	r25, 0x0C	; 12
     ae4:	09 f0       	breq	.+2      	; 0xae8 <TransmitAdd+0x44>
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	88 23       	and	r24, r24
     aea:	19 f0       	breq	.+6      	; 0xaf2 <TransmitAdd+0x4e>
     aec:	93 e0       	ldi	r25, 0x03	; 3
     aee:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     af2:	80 93 a7 65 	sts	0x65A7, r24	; 0x8065a7 <I2C>
     af6:	08 95       	ret

00000af8 <TransmitByte>:
     af8:	28 2f       	mov	r18, r24
     afa:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     afe:	94 fd       	sbrc	r25, 4
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <TransmitByte+0xe>
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	01 c0       	rjmp	.+2      	; 0xb08 <TransmitByte+0x10>
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b0c:	9c 70       	andi	r25, 0x0C	; 12
     b0e:	09 f0       	breq	.+2      	; 0xb12 <TransmitByte+0x1a>
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	88 23       	and	r24, r24
     b14:	19 f0       	breq	.+6      	; 0xb1c <TransmitByte+0x24>
     b16:	93 e0       	ldi	r25, 0x03	; 3
     b18:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     b1c:	81 11       	cpse	r24, r1
     b1e:	14 c0       	rjmp	.+40     	; 0xb48 <TransmitByte+0x50>
     b20:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <__TEXT_REGION_LENGTH__+0x7f0908>
     b24:	48 e8       	ldi	r20, 0x88	; 136
     b26:	53 e1       	ldi	r21, 0x13	; 19
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	09 c0       	rjmp	.+18     	; 0xb40 <TransmitByte+0x48>
     b2e:	41 50       	subi	r20, 0x01	; 1
     b30:	51 09       	sbc	r21, r1
     b32:	61 09       	sbc	r22, r1
     b34:	71 09       	sbc	r23, r1
     b36:	21 f4       	brne	.+8      	; 0xb40 <TransmitByte+0x48>
     b38:	83 e0       	ldi	r24, 0x03	; 3
     b3a:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <TransmitByte+0x50>
     b40:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b44:	96 ff       	sbrs	r25, 6
     b46:	f3 cf       	rjmp	.-26     	; 0xb2e <TransmitByte+0x36>
     b48:	80 93 a7 65 	sts	0x65A7, r24	; 0x8065a7 <I2C>
     b4c:	08 95       	ret

00000b4e <WriteToReg>:
 * @param reg Register address to write to.
 * @param data Data to write to the register.
 * 
 * This function writes the data to a specific register of an I2C device.
 */
void WriteToReg(uint8_t addr, uint8_t reg, uint8_t data) {
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	c6 2f       	mov	r28, r22
     b54:	d4 2f       	mov	r29, r20
    if (!TransmitAdd(addr, WRITE)) { // Transmit address for write
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	0e 94 52 05 	call	0xaa4	; 0xaa4 <TransmitAdd>
     b5c:	81 11       	cpse	r24, r1
     b5e:	08 c0       	rjmp	.+16     	; 0xb70 <WriteToReg+0x22>
        if (!TransmitByte(reg)) { // Write register address
     b60:	8c 2f       	mov	r24, r28
     b62:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <TransmitByte>
     b66:	81 11       	cpse	r24, r1
     b68:	03 c0       	rjmp	.+6      	; 0xb70 <WriteToReg+0x22>
            TransmitByte(data); // Write the data with STOP
     b6a:	8d 2f       	mov	r24, r29
     b6c:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <TransmitByte>
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal
     b70:	e0 e0       	ldi	r30, 0x00	; 0
     b72:	f9 e0       	ldi	r31, 0x09	; 9
     b74:	84 81       	ldd	r24, Z+4	; 0x04
     b76:	83 60       	ori	r24, 0x03	; 3
     b78:	84 83       	std	Z+4, r24	; 0x04
}
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <ReadButton>:
 */ 
#include "Settings.h"
#include "JoystickVar.h"

uint8_t ReadButton(){
	return !(PORTA.IN & PIN1_bm);
     b80:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
     b84:	86 95       	lsr	r24
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	89 27       	eor	r24, r25
}
     b8a:	81 70       	andi	r24, 0x01	; 1
     b8c:	08 95       	ret

00000b8e <ReadJoystickValues>:


void ReadJoystickValues(){
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
	ADC0_SetupJoystick(Joystick_X_axis_CH);
     b96:	8e e1       	ldi	r24, 0x1E	; 30
     b98:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ADC0_SetupJoystick>
	Joystick.X_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps; // 5 steps total: -2,-1,0,1,2 (4096/1000 = 4,096)
     b9c:	0e 94 88 02 	call	0x510	; 0x510 <ADC0_read>
     ba0:	98 50       	subi	r25, 0x08	; 8
     ba2:	04 ef       	ldi	r16, 0xF4	; 244
     ba4:	11 e0       	ldi	r17, 0x01	; 1
     ba6:	b8 01       	movw	r22, r16
     ba8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__divmodhi4>
     bac:	c8 ea       	ldi	r28, 0xA8	; 168
     bae:	d5 e6       	ldi	r29, 0x65	; 101
     bb0:	68 83       	st	Y, r22
     bb2:	79 83       	std	Y+1, r23	; 0x01
	ADC0_SetupJoystick(Joystick_Y_axis_CH);
     bb4:	8d e1       	ldi	r24, 0x1D	; 29
     bb6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <ADC0_SetupJoystick>
	Joystick.Y_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps;
     bba:	0e 94 88 02 	call	0x510	; 0x510 <ADC0_read>
     bbe:	98 50       	subi	r25, 0x08	; 8
     bc0:	b8 01       	movw	r22, r16
     bc2:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__divmodhi4>
     bc6:	6a 83       	std	Y+2, r22	; 0x02
     bc8:	7b 83       	std	Y+3, r23	; 0x03
	Joystick.Button = ReadButton();
     bca:	0e 94 c0 05 	call	0xb80	; 0xb80 <ReadButton>
     bce:	8c 83       	std	Y+4, r24	; 0x04
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	08 95       	ret

00000bda <SelectWindow>:


void SelectWindow(){
	if(Joystick.Y_Axis >= 1)
     bda:	80 91 aa 65 	lds	r24, 0x65AA	; 0x8065aa <Joystick+0x2>
     bde:	90 91 ab 65 	lds	r25, 0x65AB	; 0x8065ab <Joystick+0x3>
     be2:	18 16       	cp	r1, r24
     be4:	19 06       	cpc	r1, r25
     be6:	1c f4       	brge	.+6      	; 0xbee <SelectWindow+0x14>
		show.window = 1;
     be8:	21 e0       	ldi	r18, 0x01	; 1
     bea:	20 93 ce 65 	sts	0x65CE, r18	; 0x8065ce <show>
	if(Joystick.Y_Axis <= -1)
     bee:	99 23       	and	r25, r25
     bf0:	14 f4       	brge	.+4      	; 0xbf6 <SelectWindow+0x1c>
		show.window = 0;
     bf2:	10 92 ce 65 	sts	0x65CE, r1	; 0x8065ce <show>
     bf6:	08 95       	ret

00000bf8 <LinearMotor_enable>:
	PORTD.OUTSET = PIN2_bm; //set output disabled for TLE9201SG
};

bool Read_LinearMotor_EF(){ // false if driver has a error (overheat, linear motor stuck and so on)
	return PORTD.IN & PIN4_bm;
}
     bf8:	80 91 b1 65 	lds	r24, 0x65B1	; 0x8065b1 <LinearMotor+0x3>
     bfc:	81 11       	cpse	r24, r1
     bfe:	0b c0       	rjmp	.+22     	; 0xc16 <LinearMotor_enable+0x1e>
     c00:	84 e0       	ldi	r24, 0x04	; 4
     c02:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
     c06:	88 e2       	ldi	r24, 0x28	; 40
     c08:	8a 95       	dec	r24
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <LinearMotor_enable+0x10>
     c0c:	ee ea       	ldi	r30, 0xAE	; 174
     c0e:	f5 e6       	ldi	r31, 0x65	; 101
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	83 83       	std	Z+3, r24	; 0x03
     c14:	14 82       	std	Z+4, r1	; 0x04
     c16:	08 95       	ret

00000c18 <LinearMotor_disable>:
     c18:	80 91 b2 65 	lds	r24, 0x65B2	; 0x8065b2 <LinearMotor+0x4>
     c1c:	81 11       	cpse	r24, r1
     c1e:	0b c0       	rjmp	.+22     	; 0xc36 <LinearMotor_disable+0x1e>
     c20:	84 e0       	ldi	r24, 0x04	; 4
     c22:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     c26:	88 e2       	ldi	r24, 0x28	; 40
     c28:	8a 95       	dec	r24
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <LinearMotor_disable+0x10>
     c2c:	ee ea       	ldi	r30, 0xAE	; 174
     c2e:	f5 e6       	ldi	r31, 0x65	; 101
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	84 83       	std	Z+4, r24	; 0x04
     c34:	13 82       	std	Z+3, r1	; 0x03
     c36:	08 95       	ret

00000c38 <LinearMotor_start>:
     c38:	80 91 af 65 	lds	r24, 0x65AF	; 0x8065af <LinearMotor+0x1>
     c3c:	81 11       	cpse	r24, r1
     c3e:	0d c0       	rjmp	.+26     	; 0xc5a <LinearMotor_start+0x22>
     c40:	e0 e0       	ldi	r30, 0x00	; 0
     c42:	fa e0       	ldi	r31, 0x0A	; 10
     c44:	81 81       	ldd	r24, Z+1	; 0x01
     c46:	80 61       	ori	r24, 0x10	; 16
     c48:	81 83       	std	Z+1, r24	; 0x01
     c4a:	80 81       	ld	r24, Z
     c4c:	81 60       	ori	r24, 0x01	; 1
     c4e:	80 83       	st	Z, r24
     c50:	ee ea       	ldi	r30, 0xAE	; 174
     c52:	f5 e6       	ldi	r31, 0x65	; 101
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	81 83       	std	Z+1, r24	; 0x01
     c58:	12 82       	std	Z+2, r1	; 0x02
     c5a:	08 95       	ret

00000c5c <LinearMotor_stop>:
     c5c:	80 91 b0 65 	lds	r24, 0x65B0	; 0x8065b0 <LinearMotor+0x2>
     c60:	81 11       	cpse	r24, r1
     c62:	19 c0       	rjmp	.+50     	; 0xc96 <LinearMotor_stop+0x3a>
     c64:	e0 e0       	ldi	r30, 0x00	; 0
     c66:	fa e0       	ldi	r31, 0x0A	; 10
     c68:	81 81       	ldd	r24, Z+1	; 0x01
     c6a:	8f 7e       	andi	r24, 0xEF	; 239
     c6c:	81 83       	std	Z+1, r24	; 0x01
     c6e:	80 81       	ld	r24, Z
     c70:	8e 7f       	andi	r24, 0xFE	; 254
     c72:	80 83       	st	Z, r24
     c74:	88 e0       	ldi	r24, 0x08	; 8
     c76:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
     c7a:	2f ef       	ldi	r18, 0xFF	; 255
     c7c:	8e e9       	ldi	r24, 0x9E	; 158
     c7e:	94 e2       	ldi	r25, 0x24	; 36
     c80:	21 50       	subi	r18, 0x01	; 1
     c82:	80 40       	sbci	r24, 0x00	; 0
     c84:	90 40       	sbci	r25, 0x00	; 0
     c86:	e1 f7       	brne	.-8      	; 0xc80 <LinearMotor_stop+0x24>
     c88:	00 c0       	rjmp	.+0      	; 0xc8a <LinearMotor_stop+0x2e>
     c8a:	00 00       	nop
     c8c:	ee ea       	ldi	r30, 0xAE	; 174
     c8e:	f5 e6       	ldi	r31, 0x65	; 101
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	82 83       	std	Z+2, r24	; 0x02
     c94:	11 82       	std	Z+1, r1	; 0x01
     c96:	08 95       	ret

00000c98 <LinearMotor_set_direction>:
     c98:	cf 93       	push	r28
     c9a:	90 91 ae 65 	lds	r25, 0x65AE	; 0x8065ae <LinearMotor>
     c9e:	98 17       	cp	r25, r24
     ca0:	99 f0       	breq	.+38     	; 0xcc8 <LinearMotor_set_direction+0x30>
     ca2:	c8 2f       	mov	r28, r24
     ca4:	0e 94 2e 06 	call	0xc5c	; 0xc5c <LinearMotor_stop>
     ca8:	cc 23       	and	r28, r28
     caa:	21 f0       	breq	.+8      	; 0xcb4 <LinearMotor_set_direction+0x1c>
     cac:	80 e2       	ldi	r24, 0x20	; 32
     cae:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     cb2:	03 c0       	rjmp	.+6      	; 0xcba <LinearMotor_set_direction+0x22>
     cb4:	80 e2       	ldi	r24, 0x20	; 32
     cb6:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
     cba:	88 e2       	ldi	r24, 0x28	; 40
     cbc:	8a 95       	dec	r24
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <LinearMotor_set_direction+0x24>
     cc0:	0e 94 1c 06 	call	0xc38	; 0xc38 <LinearMotor_start>
     cc4:	c0 93 ae 65 	sts	0x65AE, r28	; 0x8065ae <LinearMotor>
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <LinearMotor_init>:
     ccc:	62 e3       	ldi	r22, 0x32	; 50
     cce:	80 e2       	ldi	r24, 0x20	; 32
     cd0:	9e e4       	ldi	r25, 0x4E	; 78
     cd2:	0e 94 17 09 	call	0x122e	; 0x122e <TCA0_init_linear_PWM>
     cd6:	84 e0       	ldi	r24, 0x04	; 4
     cd8:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     cdc:	08 95       	ret

00000cde <Read_LinearMotor_Voltage>:

uint16_t Read_LinearMotor_Voltage(){
	ADC0_SetupLinearMotor(0);
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <ADC0_SetupLinearMotor>
	return (ADC0_read() * 0.075) * LinearMotor_Voltage_Compensation_koef; // same as ADC read/2000 * 30V (300k) / 2V(AMC1131 full range) )
     ce4:	0e 94 88 02 	call	0x510	; 0x510 <ADC0_read>
     ce8:	bc 01       	movw	r22, r24
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__floatunsisf>
     cf2:	2a e9       	ldi	r18, 0x9A	; 154
     cf4:	39 e9       	ldi	r19, 0x99	; 153
     cf6:	49 e9       	ldi	r20, 0x99	; 153
     cf8:	5d e3       	ldi	r21, 0x3D	; 61
     cfa:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     cfe:	23 e8       	ldi	r18, 0x83	; 131
     d00:	3d ed       	ldi	r19, 0xDD	; 221
     d02:	4c e7       	ldi	r20, 0x7C	; 124
     d04:	5f e3       	ldi	r21, 0x3F	; 63
     d06:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
     d0a:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__fixunssfsi>
}
     d0e:	cb 01       	movw	r24, r22
     d10:	08 95       	ret

00000d12 <Read_LinearMotor_Current>:

int16_t Read_LinearMotor_Current(){
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
	ADC0_SetupLinearMotor(1);
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	0e 94 62 02 	call	0x4c4	; 0x4c4 <ADC0_SetupLinearMotor>
	return ((int16_t)ADC0_read() - (int16_t)Read_MCU_Voltge())/4;
     d1c:	0e 94 88 02 	call	0x510	; 0x510 <ADC0_read>
     d20:	ec 01       	movw	r28, r24
     d22:	0e 94 9c 02 	call	0x538	; 0x538 <Read_MCU_Voltge>
     d26:	9e 01       	movw	r18, r28
     d28:	28 1b       	sub	r18, r24
     d2a:	39 0b       	sbc	r19, r25
     d2c:	c9 01       	movw	r24, r18
     d2e:	99 23       	and	r25, r25
     d30:	0c f4       	brge	.+2      	; 0xd34 <Read_LinearMotor_Current+0x22>
     d32:	03 96       	adiw	r24, 0x03	; 3
     d34:	95 95       	asr	r25
     d36:	87 95       	ror	r24
     d38:	95 95       	asr	r25
     d3a:	87 95       	ror	r24
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	08 95       	ret

00000d42 <main>:

#include "Settings.h"

int main(void)
{
    CLOCK_XOSCHF_clock_init();
     d42:	0e 94 af 02 	call	0x55e	; 0x55e <CLOCK_XOSCHF_clock_init>
    GPIO_init();
     d46:	0e 94 13 05 	call	0xa26	; 0xa26 <GPIO_init>
	LinearMotor_init();
     d4a:	0e 94 66 06 	call	0xccc	; 0xccc <LinearMotor_init>
	Stepper_init();
     d4e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <Stepper_init>
    I2C_init();
     d52:	0e 94 48 05 	call	0xa90	; 0xa90 <I2C_init>
    ADC0_init();
     d56:	0e 94 54 02 	call	0x4a8	; 0x4a8 <ADC0_init>
    USART0_init();
     d5a:	0e 94 06 0a 	call	0x140c	; 0x140c <USART0_init>
    USART1_init();
     d5e:	0e 94 26 0a 	call	0x144c	; 0x144c <USART1_init>
    screen_init();
     d62:	0e 94 74 07 	call	0xee8	; 0xee8 <screen_init>
    screen_clear();
     d66:	0e 94 bb 07 	call	0xf76	; 0xf76 <screen_clear>
	//TCB_init();
    while (1) 
    {
		RS485Receiver(); //RS485 communication
     d6a:	0e 94 1c 07 	call	0xe38	; 0xe38 <RS485Receiver>
		FOReceiver(); // Received Fiber optic data
     d6e:	0e 94 b7 04 	call	0x96e	; 0x96e <FOReceiver>
		ReadJoystickValues(); //Joystick read
     d72:	0e 94 c7 05 	call	0xb8e	; 0xb8e <ReadJoystickValues>
		work();
     d76:	0e 94 1b 02 	call	0x436	; 0x436 <work>
		SelectWindow();
     d7a:	0e 94 ed 05 	call	0xbda	; 0xbda <SelectWindow>
		windows();
     d7e:	0e 94 15 0b 	call	0x162a	; 0x162a <windows>
     d82:	f3 cf       	rjmp	.-26     	; 0xd6a <main+0x28>

00000d84 <RS485_Led>:
 */ 
#include "Settings.h"

void RS485_Led(RS485_LED_t LED){

    switch (LED) {
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	51 f0       	breq	.+20     	; 0xd9c <RS485_Led+0x18>
     d88:	28 f0       	brcs	.+10     	; 0xd94 <RS485_Led+0x10>
     d8a:	82 30       	cpi	r24, 0x02	; 2
     d8c:	59 f0       	breq	.+22     	; 0xda4 <RS485_Led+0x20>
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	69 f0       	breq	.+26     	; 0xdac <RS485_Led+0x28>
     d92:	08 95       	ret
	    case RX_LED_ON:
			PORTC.OUTSET = PIN0_bm;
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f0445>
		break;
     d9a:	08 95       	ret
	    case RX_LED_OFF:
			PORTC.OUTCLR = PIN0_bm;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f0446>
		break;
     da2:	08 95       	ret
	    case TX_LED_ON:
			PORTA.OUTSET = PIN6_bm;
     da4:	80 e4       	ldi	r24, 0x40	; 64
     da6:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f0405>
		break;
     daa:	08 95       	ret
	    case TX_LED_OFF:
			PORTA.OUTCLR = PIN6_bm;
     dac:	80 e4       	ldi	r24, 0x40	; 64
     dae:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f0406>
     db2:	08 95       	ret

00000db4 <RS485DataSplitter>:
 *  Author: Saulius
 */ 
#include "Settings.h"
#include "RS485USARTVar.h"

void RS485DataSplitter(char *command) {
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	1f 93       	push	r17
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	2c 97       	sbiw	r28, 0x0c	; 12
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	de bf       	out	0x3e, r29	; 62
	uint16_t *fields[] = {
     dc8:	2c e0       	ldi	r18, 0x0C	; 12
     dca:	e9 e9       	ldi	r30, 0x99	; 153
     dcc:	f3 e6       	ldi	r31, 0x63	; 99
     dce:	de 01       	movw	r26, r28
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	01 90       	ld	r0, Z+
     dd4:	0d 92       	st	X+, r0
     dd6:	2a 95       	dec	r18
     dd8:	e1 f7       	brne	.-8      	; 0xdd2 <RS485DataSplitter+0x1e>
		(uint16_t*)&WSData.windspeed,
		(uint16_t*)&WSData.winddirection,
		&WSData.lightlevel
	};

	char *token = strtok(command, "|");
     dda:	6c ec       	ldi	r22, 0xCC	; 204
     ddc:	74 e6       	ldi	r23, 0x64	; 100
     dde:	0e 94 73 10 	call	0x20e6	; 0x20e6 <strtok>
	for (uint8_t i = 0; token != NULL && i < 6; i++) {
     de2:	10 e0       	ldi	r17, 0x00	; 0
     de4:	1c c0       	rjmp	.+56     	; 0xe1e <RS485DataSplitter+0x6a>
		*fields[i] = (uint16_t)strtol(token, NULL, 10);
     de6:	e1 2f       	mov	r30, r17
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	ee 0f       	add	r30, r30
     dec:	ff 1f       	adc	r31, r31
     dee:	21 e0       	ldi	r18, 0x01	; 1
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	2c 0f       	add	r18, r28
     df4:	3d 1f       	adc	r19, r29
     df6:	e2 0f       	add	r30, r18
     df8:	f3 1f       	adc	r31, r19
     dfa:	e0 80       	ld	r14, Z
     dfc:	f1 80       	ldd	r15, Z+1	; 0x01
     dfe:	4a e0       	ldi	r20, 0x0A	; 10
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <strtol>
     e0a:	f7 01       	movw	r30, r14
     e0c:	60 83       	st	Z, r22
     e0e:	71 83       	std	Z+1, r23	; 0x01
		token = strtok(NULL, "|");
     e10:	6c ec       	ldi	r22, 0xCC	; 204
     e12:	74 e6       	ldi	r23, 0x64	; 100
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 73 10 	call	0x20e6	; 0x20e6 <strtok>
		(uint16_t*)&WSData.winddirection,
		&WSData.lightlevel
	};

	char *token = strtok(command, "|");
	for (uint8_t i = 0; token != NULL && i < 6; i++) {
     e1c:	1f 5f       	subi	r17, 0xFF	; 255
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	11 f0       	breq	.+4      	; 0xe26 <RS485DataSplitter+0x72>
     e22:	16 30       	cpi	r17, 0x06	; 6
     e24:	00 f3       	brcs	.-64     	; 0xde6 <RS485DataSplitter+0x32>
		*fields[i] = (uint16_t)strtol(token, NULL, 10);
		token = strtok(NULL, "|");
	}

}
     e26:	2c 96       	adiw	r28, 0x0c	; 12
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	ff 90       	pop	r15
     e34:	ef 90       	pop	r14
     e36:	08 95       	ret

00000e38 <RS485Receiver>:

void RS485Receiver() {
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	6b 97       	sbiw	r28, 0x1b	; 27
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	de bf       	out	0x3e, r29	; 62
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
     e4e:	fe 01       	movw	r30, r28
     e50:	31 96       	adiw	r30, 0x01	; 1
     e52:	8b e1       	ldi	r24, 0x1B	; 27
     e54:	df 01       	movw	r26, r30
     e56:	1d 92       	st	X+, r1
     e58:	8a 95       	dec	r24
     e5a:	e9 f7       	brne	.-6      	; 0xe56 <RS485Receiver+0x1e>
	uint8_t start = 0;
	uint16_t timeout = RS485_TIMEOUT_COUNTER;
     e5c:	08 ee       	ldi	r16, 0xE8	; 232
     e5e:	13 e0       	ldi	r17, 0x03	; 3
}

void RS485Receiver() {
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
	uint8_t start = 0;
     e60:	e1 2c       	mov	r14, r1
	}

}

void RS485Receiver() {
	uint8_t index = 0;
     e62:	f1 2c       	mov	r15, r1
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
	uint8_t start = 0;
	uint16_t timeout = RS485_TIMEOUT_COUNTER;

	while (1) {
		char c = USART0_readChar(); // Reading a character from USART	
     e64:	0e 94 13 0a 	call	0x1426	; 0x1426 <USART0_readChar>
		if (--timeout == 0) { // Timeout condition
     e68:	01 50       	subi	r16, 0x01	; 1
     e6a:	11 09       	sbc	r17, r1
     e6c:	39 f1       	breq	.+78     	; 0xebc <RS485Receiver+0x84>
			break;
		}
		if (start) {
     e6e:	ee 20       	and	r14, r14
     e70:	e1 f0       	breq	.+56     	; 0xeaa <RS485Receiver+0x72>
			if (c == '}') { // If received data end symbol
     e72:	8d 37       	cpi	r24, 0x7D	; 125
     e74:	79 f4       	brne	.+30     	; 0xe94 <RS485Receiver+0x5c>
				RS485_Led(RX_LED_OFF);
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	0e 94 c2 06 	call	0xd84	; 0xd84 <RS485_Led>
				start = 0;
				command[index] = '\0';
     e7c:	e1 e0       	ldi	r30, 0x01	; 1
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	ec 0f       	add	r30, r28
     e82:	fd 1f       	adc	r31, r29
     e84:	ef 0d       	add	r30, r15
     e86:	f1 1d       	adc	r31, r1
     e88:	10 82       	st	Z, r1
				index = 0;
				RS485DataSplitter(command); // Execute the received command //comment when testing lines below
     e8a:	ce 01       	movw	r24, r28
     e8c:	01 96       	adiw	r24, 0x01	; 1
     e8e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <RS485DataSplitter>
				break;
     e92:	14 c0       	rjmp	.+40     	; 0xebc <RS485Receiver+0x84>
				} else if (index < MESSAGE_LENGTH_RS485) {
     e94:	ba e1       	ldi	r27, 0x1A	; 26
     e96:	bf 15       	cp	r27, r15
     e98:	40 f0       	brcs	.+16     	; 0xeaa <RS485Receiver+0x72>
				command[index++] = c; // Store received character in command array
     e9a:	e1 e0       	ldi	r30, 0x01	; 1
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	ec 0f       	add	r30, r28
     ea0:	fd 1f       	adc	r31, r29
     ea2:	ef 0d       	add	r30, r15
     ea4:	f1 1d       	adc	r31, r1
     ea6:	80 83       	st	Z, r24
     ea8:	f3 94       	inc	r15
			}
		}
		if (c == '{') { // If received data start symbol
     eaa:	8b 37       	cpi	r24, 0x7B	; 123
     eac:	d9 f6       	brne	.-74     	; 0xe64 <RS485Receiver+0x2c>
			start = 1;
			index = 0;
			RS485_Led(RX_LED_ON);
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	0e 94 c2 06 	call	0xd84	; 0xd84 <RS485_Led>
				} else if (index < MESSAGE_LENGTH_RS485) {
				command[index++] = c; // Store received character in command array
			}
		}
		if (c == '{') { // If received data start symbol
			start = 1;
     eb4:	ee 24       	eor	r14, r14
     eb6:	e3 94       	inc	r14
			index = 0;
     eb8:	f1 2c       	mov	r15, r1
     eba:	d4 cf       	rjmp	.-88     	; 0xe64 <RS485Receiver+0x2c>
			RS485_Led(RX_LED_ON);
		}
	}
     ebc:	6b 96       	adiw	r28, 0x1b	; 27
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	ff 90       	pop	r15
     ecc:	ef 90       	pop	r14
     ece:	08 95       	ret

00000ed0 <screen_command>:
    if (contrast > 0x3f) {
        contrast = 0x3f;  ///< Ensure contrast does not exceed maximum
    }
    screen_command(0x81);  ///< Send command to set contrast
    screen_command(contrast);  ///< Set the contrast value
}
     ed0:	48 2f       	mov	r20, r24
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	8c e3       	ldi	r24, 0x3C	; 60
     ed6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <WriteToReg>
     eda:	08 95       	ret

00000edc <screen_data>:
     edc:	48 2f       	mov	r20, r24
     ede:	60 e4       	ldi	r22, 0x40	; 64
     ee0:	8c e3       	ldi	r24, 0x3C	; 60
     ee2:	0e 94 a7 05 	call	0xb4e	; 0xb4e <WriteToReg>
     ee6:	08 95       	ret

00000ee8 <screen_init>:
     ee8:	cf 93       	push	r28
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	8c e3       	ldi	r24, 0x3C	; 60
     eee:	0e 94 52 05 	call	0xaa4	; 0xaa4 <TransmitAdd>
     ef2:	c0 e0       	ldi	r28, 0x00	; 0
     ef4:	08 c0       	rjmp	.+16     	; 0xf06 <screen_init+0x1e>
     ef6:	ec 2f       	mov	r30, r28
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	e7 58       	subi	r30, 0x87	; 135
     efc:	fc 49       	sbci	r31, 0x9C	; 156
     efe:	80 81       	ld	r24, Z
     f00:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <TransmitByte>
     f04:	cf 5f       	subi	r28, 0xFF	; 255
     f06:	ca 31       	cpi	r28, 0x1A	; 26
     f08:	b0 f3       	brcs	.-20     	; 0xef6 <screen_init+0xe>
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <screen_draw_char>:
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	d8 2f       	mov	r29, r24
     f16:	80 ee       	ldi	r24, 0xE0	; 224
     f18:	8d 0f       	add	r24, r29
     f1a:	80 36       	cpi	r24, 0x60	; 96
     f1c:	28 f0       	brcs	.+10     	; 0xf28 <screen_draw_char+0x1a>
     f1e:	d0 3b       	cpi	r29, 0xB0	; 176
     f20:	19 f0       	breq	.+6      	; 0xf28 <screen_draw_char+0x1a>
     f22:	d0 3c       	cpi	r29, 0xC0	; 192
     f24:	08 f4       	brcc	.+2      	; 0xf28 <screen_draw_char+0x1a>
     f26:	d0 e2       	ldi	r29, 0x20	; 32
     f28:	d0 3b       	cpi	r29, 0xB0	; 176
     f2a:	21 f0       	breq	.+8      	; 0xf34 <screen_draw_char+0x26>
     f2c:	d0 3c       	cpi	r29, 0xC0	; 192
     f2e:	20 f4       	brcc	.+8      	; 0xf38 <screen_draw_char+0x2a>
     f30:	10 e2       	ldi	r17, 0x20	; 32
     f32:	03 c0       	rjmp	.+6      	; 0xf3a <screen_draw_char+0x2c>
     f34:	10 e5       	ldi	r17, 0x50	; 80
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <screen_draw_char+0x2c>
     f38:	1f e5       	ldi	r17, 0x5F	; 95
     f3a:	c0 e0       	ldi	r28, 0x00	; 0
     f3c:	13 c0       	rjmp	.+38     	; 0xf64 <screen_draw_char+0x56>
     f3e:	8d 2f       	mov	r24, r29
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	81 1b       	sub	r24, r17
     f44:	91 09       	sbc	r25, r1
     f46:	fc 01       	movw	r30, r24
     f48:	ee 0f       	add	r30, r30
     f4a:	ff 1f       	adc	r31, r31
     f4c:	ee 0f       	add	r30, r30
     f4e:	ff 1f       	adc	r31, r31
     f50:	e8 0f       	add	r30, r24
     f52:	f9 1f       	adc	r31, r25
     f54:	ec 5a       	subi	r30, 0xAC	; 172
     f56:	ff 49       	sbci	r31, 0x9F	; 159
     f58:	ec 0f       	add	r30, r28
     f5a:	f1 1d       	adc	r31, r1
     f5c:	80 81       	ld	r24, Z
     f5e:	0e 94 6e 07 	call	0xedc	; 0xedc <screen_data>
     f62:	cf 5f       	subi	r28, 0xFF	; 255
     f64:	c5 30       	cpi	r28, 0x05	; 5
     f66:	58 f3       	brcs	.-42     	; 0xf3e <screen_draw_char+0x30>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	0e 94 6e 07 	call	0xedc	; 0xedc <screen_data>
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	1f 91       	pop	r17
     f74:	08 95       	ret

00000f76 <screen_clear>:
 * @brief Clears the ST7567S display.
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
    for (int page = 0; page < 8; page++) {
     f7e:	00 e0       	ldi	r16, 0x00	; 0
     f80:	10 e0       	ldi	r17, 0x00	; 0
     f82:	16 c0       	rjmp	.+44     	; 0xfb0 <screen_clear+0x3a>
        screen_command(0xB0 + page);  ///< Select page
     f84:	80 eb       	ldi	r24, 0xB0	; 176
     f86:	80 0f       	add	r24, r16
     f88:	0e 94 68 07 	call	0xed0	; 0xed0 <screen_command>
        screen_command(0x00);  ///< Set column address
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	0e 94 68 07 	call	0xed0	; 0xed0 <screen_command>
        screen_command(0x10);  ///< Set column address
     f92:	80 e1       	ldi	r24, 0x10	; 16
     f94:	0e 94 68 07 	call	0xed0	; 0xed0 <screen_command>

        for (int column = 0; column < 128; column++) {
     f98:	c0 e0       	ldi	r28, 0x00	; 0
     f9a:	d0 e0       	ldi	r29, 0x00	; 0
     f9c:	04 c0       	rjmp	.+8      	; 0xfa6 <screen_clear+0x30>
            screen_data(0x00);  ///< Clear each column
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	0e 94 6e 07 	call	0xedc	; 0xedc <screen_data>
    for (int page = 0; page < 8; page++) {
        screen_command(0xB0 + page);  ///< Select page
        screen_command(0x00);  ///< Set column address
        screen_command(0x10);  ///< Set column address

        for (int column = 0; column < 128; column++) {
     fa4:	21 96       	adiw	r28, 0x01	; 1
     fa6:	c0 38       	cpi	r28, 0x80	; 128
     fa8:	d1 05       	cpc	r29, r1
     faa:	cc f3       	brlt	.-14     	; 0xf9e <screen_clear+0x28>
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
    for (int page = 0; page < 8; page++) {
     fac:	0f 5f       	subi	r16, 0xFF	; 255
     fae:	1f 4f       	sbci	r17, 0xFF	; 255
     fb0:	08 30       	cpi	r16, 0x08	; 8
     fb2:	11 05       	cpc	r17, r1
     fb4:	3c f3       	brlt	.-50     	; 0xf84 <screen_clear+0xe>
        for (int column = 0; column < 128; column++) {
            screen_data(0x00);  ///< Clear each column
        }
    }
    //screen_contrast(SSD1306_CONTRAST);  ///< Restore contrast
}
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	08 95       	ret

00000fc0 <screen_draw_text>:
 * the maximum allowed characters are displayed.
 * 
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	8c 01       	movw	r16, r24
     fca:	d6 2f       	mov	r29, r22
    uint8_t length = 0;
     fcc:	c0 e0       	ldi	r28, 0x00	; 0
    while (*text && length < max_length) {
     fce:	05 c0       	rjmp	.+10     	; 0xfda <screen_draw_text+0x1a>
        screen_draw_char(*text);  ///< Draw each character in the string
     fd0:	0e 94 87 07 	call	0xf0e	; 0xf0e <screen_draw_char>
        text++;
     fd4:	0f 5f       	subi	r16, 0xFF	; 255
     fd6:	1f 4f       	sbci	r17, 0xFF	; 255
        length++;
     fd8:	cf 5f       	subi	r28, 0xFF	; 255
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
    uint8_t length = 0;
    while (*text && length < max_length) {
     fda:	f8 01       	movw	r30, r16
     fdc:	80 81       	ld	r24, Z
     fde:	88 23       	and	r24, r24
     fe0:	39 f0       	breq	.+14     	; 0xff0 <screen_draw_text+0x30>
     fe2:	cd 17       	cp	r28, r29
     fe4:	a8 f3       	brcs	.-22     	; 0xfd0 <screen_draw_text+0x10>
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <screen_draw_text+0x30>
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
        screen_draw_char(' ');  ///< Fill remaining space with spaces
     fe8:	80 e2       	ldi	r24, 0x20	; 32
     fea:	0e 94 87 07 	call	0xf0e	; 0xf0e <screen_draw_char>
        length++;
     fee:	cf 5f       	subi	r28, 0xFF	; 255
    while (*text && length < max_length) {
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
     ff0:	cd 17       	cp	r28, r29
     ff2:	d0 f3       	brcs	.-12     	; 0xfe8 <screen_draw_text+0x28>
        screen_draw_char(' ');  ///< Fill remaining space with spaces
        length++;
    }
}
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	08 95       	ret

00000ffe <screen_write_text>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param start_pixel The starting pixel column for the text.
 */
void screen_write_text(char *text, uint8_t line, uint8_t start_pixel) {
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	8c 01       	movw	r16, r24
    1008:	26 2f       	mov	r18, r22
    100a:	c4 2f       	mov	r28, r20
    uint8_t max_chars = (128 - start_pixel) / 6;  ///< Calculate max characters per line
    100c:	80 e8       	ldi	r24, 0x80	; 128
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	84 1b       	sub	r24, r20
    1012:	91 09       	sbc	r25, r1
    1014:	66 e0       	ldi	r22, 0x06	; 6
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__divmodhi4>
    101c:	d6 2f       	mov	r29, r22
    screen_command(0xB0 | line);  ///< Set the page (line)
    101e:	82 2f       	mov	r24, r18
    1020:	80 6b       	ori	r24, 0xB0	; 176
    1022:	0e 94 68 07 	call	0xed0	; 0xed0 <screen_command>
    screen_command(0x10 | (start_pixel >> 4));  ///< Set high byte of column address
    1026:	8c 2f       	mov	r24, r28
    1028:	82 95       	swap	r24
    102a:	8f 70       	andi	r24, 0x0F	; 15
    102c:	80 61       	ori	r24, 0x10	; 16
    102e:	0e 94 68 07 	call	0xed0	; 0xed0 <screen_command>
    screen_command(0x00 | (start_pixel & 0x0F));  ///< Set low byte of column address
    1032:	8c 2f       	mov	r24, r28
    1034:	8f 70       	andi	r24, 0x0F	; 15
    1036:	0e 94 68 07 	call	0xed0	; 0xed0 <screen_command>
    screen_draw_text(text, max_chars);  ///< Draw the text
    103a:	6d 2f       	mov	r22, r29
    103c:	c8 01       	movw	r24, r16
    103e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <screen_draw_text>
}
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	08 95       	ret

0000104c <calculate_start_pixel>:
 * @param max_length The maximum number of characters.
 * @param alignment The desired text alignment (left, center, right).
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
    104c:	ac 01       	movw	r20, r24
    uint8_t text_length = 0;
    104e:	90 e0       	ldi	r25, 0x00	; 0
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <calculate_start_pixel+0x8>
        text_length++;
    1052:	9f 5f       	subi	r25, 0xFF	; 255
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
    uint8_t text_length = 0;
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
    1054:	fa 01       	movw	r30, r20
    1056:	e9 0f       	add	r30, r25
    1058:	f1 1d       	adc	r31, r1
    105a:	20 81       	ld	r18, Z
    105c:	21 11       	cpse	r18, r1
    105e:	f9 cf       	rjmp	.-14     	; 0x1052 <calculate_start_pixel+0x6>
        text_length++;
    }

    uint8_t text_width = text_length * 6;  ///< Calculate the width of the text in pixels
    1060:	89 2f       	mov	r24, r25
    1062:	88 0f       	add	r24, r24
    1064:	98 0f       	add	r25, r24
    1066:	29 2f       	mov	r18, r25
    1068:	22 0f       	add	r18, r18
    switch (alignment) {
    106a:	61 30       	cpi	r22, 0x01	; 1
    106c:	19 f0       	breq	.+6      	; 0x1074 <calculate_start_pixel+0x28>
    106e:	62 30       	cpi	r22, 0x02	; 2
    1070:	69 f0       	breq	.+26     	; 0x108c <calculate_start_pixel+0x40>
    1072:	0f c0       	rjmp	.+30     	; 0x1092 <calculate_start_pixel+0x46>
        case ALIGN_CENTER:
            return (128 - text_width) / 2;  ///< Center the text
    1074:	80 e8       	ldi	r24, 0x80	; 128
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	ac 01       	movw	r20, r24
    107a:	42 1b       	sub	r20, r18
    107c:	51 09       	sbc	r21, r1
    107e:	ca 01       	movw	r24, r20
    1080:	99 23       	and	r25, r25
    1082:	0c f4       	brge	.+2      	; 0x1086 <calculate_start_pixel+0x3a>
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	95 95       	asr	r25
    1088:	87 95       	ror	r24
    108a:	08 95       	ret
        case ALIGN_RIGHT:
            return (128 - text_width);  ///< Right-align the text
    108c:	80 e8       	ldi	r24, 0x80	; 128
    108e:	82 1b       	sub	r24, r18
    1090:	08 95       	ret
        case ALIGN_LEFT:
        default:
            return 0;  ///< Left-align the text
    1092:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1094:	08 95       	ret

00001096 <screen_write_text_aligned>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_text_aligned(char *text, uint8_t line, alignment_t alignment) {
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
    109e:	16 2f       	mov	r17, r22
    uint8_t start_pixel = calculate_start_pixel(text, alignment);  ///< Calculate start pixel
    10a0:	64 2f       	mov	r22, r20
    10a2:	0e 94 26 08 	call	0x104c	; 0x104c <calculate_start_pixel>
   screen_write_text(text, line, start_pixel);
    10a6:	48 2f       	mov	r20, r24
    10a8:	61 2f       	mov	r22, r17
    10aa:	ce 01       	movw	r24, r28
    10ac:	0e 94 ff 07 	call	0xffe	; 0xffe <screen_write_text>
}
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	08 95       	ret

000010b8 <screen_write_formatted_text>:
 * 
 * @param format The format string for the text.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_formatted_text(const char *format, uint8_t line, alignment_t alignment, ...) {
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	e2 97       	sbiw	r28, 0x32	; 50
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	de bf       	out	0x3e, r29	; 62
    char textStorage[MAX_TEXT_LENGTH];  ///< Buffer for storing formatted text
    va_list args;  ///< Variable argument list

    va_start(args, alignment);  ///< Start reading variable arguments
    vsnprintf(textStorage, MAX_TEXT_LENGTH, format, args);  ///< Format the text
    10c6:	9e 01       	movw	r18, r28
    10c8:	25 5c       	subi	r18, 0xC5	; 197
    10ca:	3f 4f       	sbci	r19, 0xFF	; 255
    10cc:	4f a9       	ldd	r20, Y+55	; 0x37
    10ce:	58 ad       	ldd	r21, Y+56	; 0x38
    10d0:	62 e3       	ldi	r22, 0x32	; 50
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	ce 01       	movw	r24, r28
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	0e 94 d5 10 	call	0x21aa	; 0x21aa <vsnprintf>
    va_end(args);  ///< End reading variable arguments

    screen_write_text_aligned(textStorage, line, alignment);  ///< Write formatted text to display
    10dc:	4a ad       	ldd	r20, Y+58	; 0x3a
    10de:	69 ad       	ldd	r22, Y+57	; 0x39
    10e0:	ce 01       	movw	r24, r28
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	0e 94 4b 08 	call	0x1096	; 0x1096 <screen_write_text_aligned>
}
    10e8:	e2 96       	adiw	r28, 0x32	; 50
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <Stepper_enable>:
	return !(PORTF.IN & PIN5_bm);
}

bool Read_Stepper_ALM(){ // true if driver has a error (overheat, stepepr stuck and so on)
	return !(PORTF.IN & PIN4_bm);
}
    10f4:	80 91 c6 65 	lds	r24, 0x65C6	; 0x8065c6 <StepperMotor+0x3>
    10f8:	81 11       	cpse	r24, r1
    10fa:	11 c0       	rjmp	.+34     	; 0x111e <Stepper_enable+0x2a>
    10fc:	82 e0       	ldi	r24, 0x02	; 2
    10fe:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
    1102:	2f ef       	ldi	r18, 0xFF	; 255
    1104:	8b e4       	ldi	r24, 0x4B	; 75
    1106:	9d e1       	ldi	r25, 0x1D	; 29
    1108:	21 50       	subi	r18, 0x01	; 1
    110a:	80 40       	sbci	r24, 0x00	; 0
    110c:	90 40       	sbci	r25, 0x00	; 0
    110e:	e1 f7       	brne	.-8      	; 0x1108 <Stepper_enable+0x14>
    1110:	00 c0       	rjmp	.+0      	; 0x1112 <Stepper_enable+0x1e>
    1112:	00 00       	nop
    1114:	e3 ec       	ldi	r30, 0xC3	; 195
    1116:	f5 e6       	ldi	r31, 0x65	; 101
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	83 83       	std	Z+3, r24	; 0x03
    111c:	14 82       	std	Z+4, r1	; 0x04
    111e:	08 95       	ret

00001120 <Stepper_disable>:
    1120:	80 91 c7 65 	lds	r24, 0x65C7	; 0x8065c7 <StepperMotor+0x4>
    1124:	81 11       	cpse	r24, r1
    1126:	08 c0       	rjmp	.+16     	; 0x1138 <Stepper_disable+0x18>
    1128:	82 e0       	ldi	r24, 0x02	; 2
    112a:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f04a5>
    112e:	e3 ec       	ldi	r30, 0xC3	; 195
    1130:	f5 e6       	ldi	r31, 0x65	; 101
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	84 83       	std	Z+4, r24	; 0x04
    1136:	13 82       	std	Z+3, r1	; 0x03
    1138:	08 95       	ret

0000113a <Stepper_start>:
    113a:	80 91 c4 65 	lds	r24, 0x65C4	; 0x8065c4 <StepperMotor+0x1>
    113e:	81 11       	cpse	r24, r1
    1140:	0e c0       	rjmp	.+28     	; 0x115e <Stepper_start+0x24>
    1142:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
    1146:	80 ff       	sbrs	r24, 0
    1148:	fc cf       	rjmp	.-8      	; 0x1142 <Stepper_start+0x8>
    114a:	e0 e8       	ldi	r30, 0x80	; 128
    114c:	fb e0       	ldi	r31, 0x0B	; 11
    114e:	80 81       	ld	r24, Z
    1150:	81 60       	ori	r24, 0x01	; 1
    1152:	80 83       	st	Z, r24
    1154:	e3 ec       	ldi	r30, 0xC3	; 195
    1156:	f5 e6       	ldi	r31, 0x65	; 101
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	81 83       	std	Z+1, r24	; 0x01
    115c:	12 82       	std	Z+2, r1	; 0x02
    115e:	08 95       	ret

00001160 <Stepper_stop>:
    1160:	80 91 c5 65 	lds	r24, 0x65C5	; 0x8065c5 <StepperMotor+0x2>
    1164:	81 11       	cpse	r24, r1
    1166:	0e c0       	rjmp	.+28     	; 0x1184 <Stepper_stop+0x24>
    1168:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
    116c:	80 ff       	sbrs	r24, 0
    116e:	fc cf       	rjmp	.-8      	; 0x1168 <Stepper_stop+0x8>
    1170:	e0 e8       	ldi	r30, 0x80	; 128
    1172:	fb e0       	ldi	r31, 0x0B	; 11
    1174:	80 81       	ld	r24, Z
    1176:	8e 7f       	andi	r24, 0xFE	; 254
    1178:	80 83       	st	Z, r24
    117a:	e3 ec       	ldi	r30, 0xC3	; 195
    117c:	f5 e6       	ldi	r31, 0x65	; 101
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	82 83       	std	Z+2, r24	; 0x02
    1182:	11 82       	std	Z+1, r1	; 0x01
    1184:	08 95       	ret

00001186 <Stepper_set_direction>:
    1186:	cf 93       	push	r28
    1188:	90 91 c3 65 	lds	r25, 0x65C3	; 0x8065c3 <StepperMotor>
    118c:	98 17       	cp	r25, r24
    118e:	99 f0       	breq	.+38     	; 0x11b6 <Stepper_set_direction+0x30>
    1190:	c8 2f       	mov	r28, r24
    1192:	0e 94 b0 08 	call	0x1160	; 0x1160 <Stepper_stop>
    1196:	cc 23       	and	r28, r28
    1198:	21 f0       	breq	.+8      	; 0x11a2 <Stepper_set_direction+0x1c>
    119a:	88 e0       	ldi	r24, 0x08	; 8
    119c:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f04a5>
    11a0:	03 c0       	rjmp	.+6      	; 0x11a8 <Stepper_set_direction+0x22>
    11a2:	88 e0       	ldi	r24, 0x08	; 8
    11a4:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
    11a8:	80 e2       	ldi	r24, 0x20	; 32
    11aa:	8a 95       	dec	r24
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <Stepper_set_direction+0x24>
    11ae:	0e 94 9d 08 	call	0x113a	; 0x113a <Stepper_start>
    11b2:	c0 93 c3 65 	sts	0x65C3, r28	; 0x8065c3 <StepperMotor>
    11b6:	cf 91       	pop	r28
    11b8:	08 95       	ret

000011ba <Stepper_init>:
    11ba:	42 e3       	ldi	r20, 0x32	; 50
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	79 e1       	ldi	r23, 0x19	; 25
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 a7 09 	call	0x134e	; 0x134e <TCD0_init_stepper_PWM>
    11c8:	08 95       	ret

000011ca <Read_Stepper_Voltage>:

uint16_t Read_Stepper_Voltage(){
	ADC0_SetupStepper(0);
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <ADC0_SetupStepper>
	return (ADC0_read() * 0.1775) * Stepper_Voltage_Compensation_koef;
    11d0:	0e 94 88 02 	call	0x510	; 0x510 <ADC0_read>
    11d4:	bc 01       	movw	r22, r24
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__floatunsisf>
    11de:	2f e8       	ldi	r18, 0x8F	; 143
    11e0:	32 ec       	ldi	r19, 0xC2	; 194
    11e2:	45 e3       	ldi	r20, 0x35	; 53
    11e4:	5e e3       	ldi	r21, 0x3E	; 62
    11e6:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
    11ea:	26 e6       	ldi	r18, 0x66	; 102
    11ec:	36 e6       	ldi	r19, 0x66	; 102
    11ee:	46 e8       	ldi	r20, 0x86	; 134
    11f0:	5f e3       	ldi	r21, 0x3F	; 63
    11f2:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
    11f6:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__fixunssfsi>
}
    11fa:	cb 01       	movw	r24, r22
    11fc:	08 95       	ret

000011fe <Read_Stepper_Current>:

int16_t Read_Stepper_Current(){
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
	ADC0_SetupStepper(1);
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	0e 94 72 02 	call	0x4e4	; 0x4e4 <ADC0_SetupStepper>
	return ((int16_t)ADC0_read() - (int16_t)Read_MCU_Voltge())/4;
    1208:	0e 94 88 02 	call	0x510	; 0x510 <ADC0_read>
    120c:	ec 01       	movw	r28, r24
    120e:	0e 94 9c 02 	call	0x538	; 0x538 <Read_MCU_Voltge>
    1212:	9e 01       	movw	r18, r28
    1214:	28 1b       	sub	r18, r24
    1216:	39 0b       	sbc	r19, r25
    1218:	c9 01       	movw	r24, r18
    121a:	99 23       	and	r25, r25
    121c:	0c f4       	brge	.+2      	; 0x1220 <Read_Stepper_Current+0x22>
    121e:	03 96       	adiw	r24, 0x03	; 3
    1220:	95 95       	asr	r25
    1222:	87 95       	ror	r24
    1224:	95 95       	asr	r25
    1226:	87 95       	ror	r24
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	08 95       	ret

0000122e <TCA0_init_linear_PWM>:
 *  Author: Saulius
 */ 
#include "Settings.h"

void TCA0_init_linear_PWM(uint16_t freq_hz, uint8_t duty_percent) //Auto TCA prescaler selection, that give us Frequency range: ~366Hz - ~93kHz. TLE9201SG max 20kHz
{
    122e:	8f 92       	push	r8
    1230:	9f 92       	push	r9
    1232:	af 92       	push	r10
    1234:	bf 92       	push	r11
    1236:	cf 92       	push	r12
    1238:	df 92       	push	r13
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	68 97       	sbiw	r28, 0x18	; 24
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	7c 01       	movw	r14, r24
    1252:	c6 2e       	mov	r12, r22
	const uint16_t prescalers[] = {1, 2, 4, 8, 16, 64, 256, 1024};
    1254:	80 e1       	ldi	r24, 0x10	; 16
    1256:	e5 ea       	ldi	r30, 0xA5	; 165
    1258:	f3 e6       	ldi	r31, 0x63	; 99
    125a:	de 01       	movw	r26, r28
    125c:	11 96       	adiw	r26, 0x01	; 1
    125e:	01 90       	ld	r0, Z+
    1260:	0d 92       	st	X+, r0
    1262:	8a 95       	dec	r24
    1264:	e1 f7       	brne	.-8      	; 0x125e <TCA0_init_linear_PWM+0x30>
	const uint8_t clk_select[] = {
    1266:	88 e0       	ldi	r24, 0x08	; 8
    1268:	e5 eb       	ldi	r30, 0xB5	; 181
    126a:	f3 e6       	ldi	r31, 0x63	; 99
    126c:	de 01       	movw	r26, r28
    126e:	51 96       	adiw	r26, 0x11	; 17
    1270:	01 90       	ld	r0, Z+
    1272:	0d 92       	st	X+, r0
    1274:	8a 95       	dec	r24
    1276:	e1 f7       	brne	.-8      	; 0x1270 <TCA0_init_linear_PWM+0x42>

	uint8_t chosen_clk = 0;
	uint8_t period = 0;

	// surandam tinkamà prescaler
	for (uint8_t i = 0; i < 8; i++) {
    1278:	d1 2c       	mov	r13, r1
    127a:	38 c0       	rjmp	.+112    	; 0x12ec <TCA0_init_linear_PWM+0xbe>
		uint32_t f_timer = F_CPU / prescalers[i];
    127c:	0d 2d       	mov	r16, r13
    127e:	10 e0       	ldi	r17, 0x00	; 0
    1280:	f8 01       	movw	r30, r16
    1282:	ee 0f       	add	r30, r30
    1284:	ff 1f       	adc	r31, r31
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	8c 0f       	add	r24, r28
    128c:	9d 1f       	adc	r25, r29
    128e:	e8 0f       	add	r30, r24
    1290:	f9 1f       	adc	r31, r25
    1292:	20 81       	ld	r18, Z
    1294:	31 81       	ldd	r19, Z+1	; 0x01
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	76 e3       	ldi	r23, 0x36	; 54
    129e:	8e e6       	ldi	r24, 0x6E	; 110
    12a0:	91 e0       	ldi	r25, 0x01	; 1
    12a2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__divmodsi4>
		uint32_t tmp_period = (f_timer / freq_hz) - 1;
    12a6:	47 01       	movw	r8, r14
    12a8:	a1 2c       	mov	r10, r1
    12aa:	b1 2c       	mov	r11, r1
    12ac:	ca 01       	movw	r24, r20
    12ae:	b9 01       	movw	r22, r18
    12b0:	a5 01       	movw	r20, r10
    12b2:	94 01       	movw	r18, r8
    12b4:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__udivmodsi4>
    12b8:	da 01       	movw	r26, r20
    12ba:	c9 01       	movw	r24, r18
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	a1 09       	sbc	r26, r1
    12c0:	b1 09       	sbc	r27, r1

		if (tmp_period <= 255 && tmp_period >= 1) {
    12c2:	ba 01       	movw	r22, r20
    12c4:	a9 01       	movw	r20, r18
    12c6:	42 50       	subi	r20, 0x02	; 2
    12c8:	51 09       	sbc	r21, r1
    12ca:	61 09       	sbc	r22, r1
    12cc:	71 09       	sbc	r23, r1
    12ce:	4f 3f       	cpi	r20, 0xFF	; 255
    12d0:	51 05       	cpc	r21, r1
    12d2:	61 05       	cpc	r22, r1
    12d4:	71 05       	cpc	r23, r1
    12d6:	48 f4       	brcc	.+18     	; 0x12ea <TCA0_init_linear_PWM+0xbc>
			period = (uint8_t)tmp_period;
    12d8:	f8 2e       	mov	r15, r24
			chosen_clk = clk_select[i];
    12da:	e1 e1       	ldi	r30, 0x11	; 17
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	ec 0f       	add	r30, r28
    12e0:	fd 1f       	adc	r31, r29
    12e2:	e0 0f       	add	r30, r16
    12e4:	f1 1f       	adc	r31, r17
    12e6:	10 81       	ld	r17, Z
			break; // radom maþiausià tinkamà prescaler
    12e8:	06 c0       	rjmp	.+12     	; 0x12f6 <TCA0_init_linear_PWM+0xc8>

	uint8_t chosen_clk = 0;
	uint8_t period = 0;

	// surandam tinkamà prescaler
	for (uint8_t i = 0; i < 8; i++) {
    12ea:	d3 94       	inc	r13
    12ec:	97 e0       	ldi	r25, 0x07	; 7
    12ee:	9d 15       	cp	r25, r13
    12f0:	28 f6       	brcc	.-118    	; 0x127c <TCA0_init_linear_PWM+0x4e>
		TCA_SINGLE_CLKSEL_DIV256_gc,
		TCA_SINGLE_CLKSEL_DIV1024_gc
	};

	uint8_t chosen_clk = 0;
	uint8_t period = 0;
    12f2:	f1 2c       	mov	r15, r1
		TCA_SINGLE_CLKSEL_DIV64_gc,
		TCA_SINGLE_CLKSEL_DIV256_gc,
		TCA_SINGLE_CLKSEL_DIV1024_gc
	};

	uint8_t chosen_clk = 0;
    12f4:	10 e0       	ldi	r17, 0x00	; 0
			break; // radom maþiausià tinkamà prescaler
		}
	}

	// duty skaièiavimas
	uint8_t duty = (uint32_t)period * duty_percent / 100;
    12f6:	2f 2d       	mov	r18, r15
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	ac 2d       	mov	r26, r12
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__umulhisi3>
    1302:	24 e6       	ldi	r18, 0x64	; 100
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__udivmodsi4>
	if (duty > period) duty = period;
    130e:	f2 16       	cp	r15, r18
    1310:	08 f4       	brcc	.+2      	; 0x1314 <TCA0_init_linear_PWM+0xe6>
    1312:	2f 2d       	mov	r18, r15

	// konfigûracija
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;  // WOx ant PORTD
    1314:	83 e0       	ldi	r24, 0x03	; 3
    1316:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <__TEXT_REGION_LENGTH__+0x7f05e7>

	TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;   // Split mode
    131a:	e0 e0       	ldi	r30, 0x00	; 0
    131c:	fa e0       	ldi	r31, 0x0A	; 10
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	83 83       	std	Z+3, r24	; 0x03
	TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm;    // enable WO3 (HCMP0 ? PD3)
    1322:	80 e1       	ldi	r24, 0x10	; 16
    1324:	81 83       	std	Z+1, r24	; 0x01

	TCA0.SPLIT.HPER  = period;
    1326:	f7 a2       	std	Z+39, r15	; 0x27
	TCA0.SPLIT.HCMP0 = duty;
    1328:	21 a7       	std	Z+41, r18	; 0x29

	TCA0.SPLIT.CTRLA = chosen_clk | TCA_SPLIT_ENABLE_bm; // paleidþiam su pasirinktu prescaler
    132a:	11 60       	ori	r17, 0x01	; 1
    132c:	10 83       	st	Z, r17
}
    132e:	68 96       	adiw	r28, 0x18	; 24
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	ff 90       	pop	r15
    133e:	ef 90       	pop	r14
    1340:	df 90       	pop	r13
    1342:	cf 90       	pop	r12
    1344:	bf 90       	pop	r11
    1346:	af 90       	pop	r10
    1348:	9f 90       	pop	r9
    134a:	8f 90       	pop	r8
    134c:	08 95       	ret

0000134e <TCD0_init_stepper_PWM>:
 * @date 2025-01-09
 */

#include "Settings.h"

void TCD0_init_stepper_PWM(uint32_t freq_hz, uint8_t duty_percent) {
    134e:	cf 92       	push	r12
    1350:	df 92       	push	r13
    1352:	ef 92       	push	r14
    1354:	ff 92       	push	r15
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	14 2f       	mov	r17, r20

	// Calculate compare registers
	uint16_t cmpbclr = (F_CPU / (4 * freq_hz * 2)) - 1;
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	aa 1f       	adc	r26, r26
    136a:	bb 1f       	adc	r27, r27
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	aa 1f       	adc	r26, r26
    1372:	bb 1f       	adc	r27, r27
    1374:	9c 01       	movw	r18, r24
    1376:	ad 01       	movw	r20, r26
    1378:	22 0f       	add	r18, r18
    137a:	33 1f       	adc	r19, r19
    137c:	44 1f       	adc	r20, r20
    137e:	55 1f       	adc	r21, r21
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	76 e3       	ldi	r23, 0x36	; 54
    1384:	8e e6       	ldi	r24, 0x6E	; 110
    1386:	91 e0       	ldi	r25, 0x01	; 1
    1388:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__udivmodsi4>
    138c:	e9 01       	movw	r28, r18
    138e:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t cmpaset = (uint16_t)(cmpbclr * (duty_percent / 100.0)) + 1;
    1390:	61 2f       	mov	r22, r17
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__floatsisf>
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	48 ec       	ldi	r20, 0xC8	; 200
    13a2:	52 e4       	ldi	r21, 0x42	; 66
    13a4:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__divsf3>
    13a8:	6b 01       	movw	r12, r22
    13aa:	7c 01       	movw	r14, r24
    13ac:	be 01       	movw	r22, r28
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__floatunsisf>
    13b6:	a7 01       	movw	r20, r14
    13b8:	96 01       	movw	r18, r12
    13ba:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__mulsf3>
    13be:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <__fixunssfsi>
    13c2:	6f 5f       	subi	r22, 0xFF	; 255
    13c4:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t cmpbset = cmpbclr - cmpaset - 1;
    13c6:	ce 01       	movw	r24, r28
    13c8:	86 1b       	sub	r24, r22
    13ca:	97 0b       	sbc	r25, r23
    13cc:	01 97       	sbiw	r24, 0x01	; 1

	// Set TCD compare registers
	TCD0.CMPBCLR = cmpbclr;
    13ce:	00 e8       	ldi	r16, 0x80	; 128
    13d0:	1b e0       	ldi	r17, 0x0B	; 11
    13d2:	f8 01       	movw	r30, r16
    13d4:	c6 a7       	std	Z+46, r28	; 0x2e
    13d6:	d7 a7       	std	Z+47, r29	; 0x2f
	TCD0.CMPBSET = cmpbset;
    13d8:	84 a7       	std	Z+44, r24	; 0x2c
    13da:	95 a7       	std	Z+45, r25	; 0x2d
	TCD0.CMPASET = cmpaset;
    13dc:	60 a7       	std	Z+40, r22	; 0x28
    13de:	71 a7       	std	Z+41, r23	; 0x29

	ccp_write_io((uint8_t *) &TCD0.FAULTCTRL, TCD_CMPCEN_bm); ///< Enable WOC on PF2
    13e0:	60 e4       	ldi	r22, 0x40	; 64
    13e2:	82 e9       	ldi	r24, 0x92	; 146
    13e4:	9b e0       	ldi	r25, 0x0B	; 11
    13e6:	0e 94 95 13 	call	0x272a	; 0x272a <ccp_write_io>
	TCD0.CTRLB = TCD_WGMODE_DS_gc; ///< Set waveform mode to double slope
    13ea:	83 e0       	ldi	r24, 0x03	; 3
    13ec:	f8 01       	movw	r30, r16
    13ee:	81 83       	std	Z+1, r24	; 0x01
	// Ájungiam WOC iðëjimà
	//TCD0.FAULTCTRL = TCD_CMPAEN_bm | TCD_CMPBEN_bm | TCD_CMPCEN_bm;

	// Paleidþiam su prescaler = 4
	//TCD0.CTRLA = TCD_CLKSEL_CLKPER_gc | TCD_CNTPRES_DIV4_gc;
	ccp_write_io((uint8_t *) &TCD0.CTRLA, TCD_CLKSEL_CLKPER_gc | TCD_CNTPRES_DIV4_gc);
    13f0:	68 e6       	ldi	r22, 0x68	; 104
    13f2:	80 e8       	ldi	r24, 0x80	; 128
    13f4:	9b e0       	ldi	r25, 0x0B	; 11
    13f6:	0e 94 95 13 	call	0x272a	; 0x272a <ccp_write_io>
	// Palaukti, kol sinchronizuosis
	//while (!(TCD0.STATUS & TCD_ENRDY_bm));
/*
			while (!(TCD0.STATUS & TCD_ENRDY_bm));
			TCD0.CTRLA |= TCD_ENABLE_bm;*/
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ff 90       	pop	r15
    1404:	ef 90       	pop	r14
    1406:	df 90       	pop	r13
    1408:	cf 90       	pop	r12
    140a:	08 95       	ret

0000140c <USART0_init>:
 * @return 0 on success.
 */
int USART1_printChar(char c, FILE *stream) {
	USART1_sendChar(c); // Send character
	return 0;
}
    140c:	e0 e0       	ldi	r30, 0x00	; 0
    140e:	f8 e0       	ldi	r31, 0x08	; 8
    1410:	83 e8       	ldi	r24, 0x83	; 131
    1412:	96 e0       	ldi	r25, 0x06	; 6
    1414:	80 87       	std	Z+8, r24	; 0x08
    1416:	91 87       	std	Z+9, r25	; 0x09
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	85 83       	std	Z+5, r24	; 0x05
    141c:	82 ec       	ldi	r24, 0xC2	; 194
    141e:	86 83       	std	Z+6, r24	; 0x06
    1420:	83 e0       	ldi	r24, 0x03	; 3
    1422:	87 83       	std	Z+7, r24	; 0x07
    1424:	08 95       	ret

00001426 <USART0_readChar>:
    1426:	80 e8       	ldi	r24, 0x80	; 128
    1428:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    142c:	88 ee       	ldi	r24, 0xE8	; 232
    142e:	93 e0       	ldi	r25, 0x03	; 3
    1430:	a0 e0       	ldi	r26, 0x00	; 0
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	04 c0       	rjmp	.+8      	; 0x143e <USART0_readChar+0x18>
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	a1 09       	sbc	r26, r1
    143a:	b1 09       	sbc	r27, r1
    143c:	21 f0       	breq	.+8      	; 0x1446 <USART0_readChar+0x20>
    143e:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    1442:	22 23       	and	r18, r18
    1444:	c4 f7       	brge	.-16     	; 0x1436 <USART0_readChar+0x10>
    1446:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
    144a:	08 95       	ret

0000144c <USART1_init>:
    144c:	e0 e2       	ldi	r30, 0x20	; 32
    144e:	f8 e0       	ldi	r31, 0x08	; 8
    1450:	81 ea       	ldi	r24, 0xA1	; 161
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	80 87       	std	Z+8, r24	; 0x08
    1456:	91 87       	std	Z+9, r25	; 0x09
    1458:	82 e8       	ldi	r24, 0x82	; 130
    145a:	86 83       	std	Z+6, r24	; 0x06
    145c:	83 e0       	ldi	r24, 0x03	; 3
    145e:	87 83       	std	Z+7, r24	; 0x07
    1460:	08 95       	ret

00001462 <USART1_readChar>:
 * If a timeout occurs, it returns a predefined warning.
 * 
 * @return The received character.
 */
char USART1_readChar() {
	USART1.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    1462:	80 e8       	ldi	r24, 0x80	; 128
    1464:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f0824>
	uint32_t timeout_counter = FO_TIMEOUT_COUNTER; // Set a timeout counter
    1468:	80 e9       	ldi	r24, 0x90	; 144
    146a:	90 ed       	ldi	r25, 0xD0	; 208
    146c:	a3 e0       	ldi	r26, 0x03	; 3
    146e:	b0 e0       	ldi	r27, 0x00	; 0
	while (!(USART1.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
    1470:	08 c0       	rjmp	.+16     	; 0x1482 <USART1_readChar+0x20>
		if (--timeout_counter == 0) { // Timeout condition
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	a1 09       	sbc	r26, r1
    1476:	b1 09       	sbc	r27, r1
    1478:	21 f4       	brne	.+8      	; 0x1482 <USART1_readChar+0x20>
			//screen_write_formatted_text("USART1 timeout", 0, ALIGN_LEFT);// uncomment for timeout number finding, when timeout number is set corectly this line should not to be visible at all. if timeout is to small you will see this line 
			//_delay_ms(100);
			//screen_write_formatted_text("              ", 0, ALIGN_LEFT);
			SensorData.FO_lost_signal_fault = true;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	80 93 79 65 	sts	0x6579, r24	; 0x806579 <SensorData+0x11>
			break; //just exit from this while cycle
    1480:	04 c0       	rjmp	.+8      	; 0x148a <USART1_readChar+0x28>
 * @return The received character.
 */
char USART1_readChar() {
	USART1.STATUS = USART_RXCIF_bm; // Clear buffer before reading
	uint32_t timeout_counter = FO_TIMEOUT_COUNTER; // Set a timeout counter
	while (!(USART1.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
    1482:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f0824>
    1486:	22 23       	and	r18, r18
    1488:	a4 f7       	brge	.-24     	; 0x1472 <USART1_readChar+0x10>
			SensorData.FO_lost_signal_fault = true;
			break; //just exit from this while cycle

		}
	}
	return USART1.RXDATAL; // Return received character
    148a:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f0820>
}
    148e:	08 95       	ret

00001490 <screenUpdater>:
 */

#include "Settings.h"
#include "windowsVar.h"

bool screenUpdater(uint8_t window){
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	60 97       	sbiw	r28, 0x10	; 16
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	18 2f       	mov	r17, r24
	uint16_t values[MAX_VARS]={0};
    14a2:	fe 01       	movw	r30, r28
    14a4:	31 96       	adiw	r30, 0x01	; 1
    14a6:	80 e1       	ldi	r24, 0x10	; 16
    14a8:	df 01       	movw	r26, r30
    14aa:	1d 92       	st	X+, r1
    14ac:	8a 95       	dec	r24
    14ae:	e9 f7       	brne	.-6      	; 0x14aa <screenUpdater+0x1a>
	bool update = false;

	if(show.lastWindow != window)
    14b0:	80 91 cf 65 	lds	r24, 0x65CF	; 0x8065cf <show+0x1>
    14b4:	81 13       	cpse	r24, r17
		screen_clear();
    14b6:	0e 94 bb 07 	call	0xf76	; 0xf76 <screen_clear>
	switch (window){
    14ba:	11 23       	and	r17, r17
    14bc:	21 f0       	breq	.+8      	; 0x14c6 <screenUpdater+0x36>
    14be:	11 30       	cpi	r17, 0x01	; 1
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <screenUpdater+0x34>
    14c2:	51 c0       	rjmp	.+162    	; 0x1566 <screenUpdater+0xd6>
    14c4:	a8 c0       	rjmp	.+336    	; 0x1616 <screenUpdater+0x186>
		case 0:
			values[0] = WSData.elevation;
    14c6:	a9 eb       	ldi	r26, 0xB9	; 185
    14c8:	b5 e6       	ldi	r27, 0x65	; 101
    14ca:	12 96       	adiw	r26, 0x02	; 2
    14cc:	8d 91       	ld	r24, X+
    14ce:	9c 91       	ld	r25, X
    14d0:	13 97       	sbiw	r26, 0x03	; 3
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	9a 83       	std	Y+2, r25	; 0x02
			values[1] = SensorData.Elevation;
    14d6:	e8 e6       	ldi	r30, 0x68	; 104
    14d8:	f5 e6       	ldi	r31, 0x65	; 101
    14da:	80 81       	ld	r24, Z
    14dc:	91 81       	ldd	r25, Z+1	; 0x01
    14de:	8b 83       	std	Y+3, r24	; 0x03
    14e0:	9c 83       	std	Y+4, r25	; 0x04
			values[2] = WSData.azimuth;
    14e2:	8d 91       	ld	r24, X+
    14e4:	9c 91       	ld	r25, X
    14e6:	8d 83       	std	Y+5, r24	; 0x05
    14e8:	9e 83       	std	Y+6, r25	; 0x06
			values[3] = SensorData.Azimuth;
    14ea:	84 81       	ldd	r24, Z+4	; 0x04
    14ec:	95 81       	ldd	r25, Z+5	; 0x05
    14ee:	8f 83       	std	Y+7, r24	; 0x07
    14f0:	98 87       	std	Y+8, r25	; 0x08
			for (uint8_t i=0; i<4; i++){
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	18 c0       	rjmp	.+48     	; 0x1526 <screenUpdater+0x96>
				if(show.lastValues[i] != values[i]){
    14f6:	82 2f       	mov	r24, r18
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	fc 01       	movw	r30, r24
    14fc:	31 96       	adiw	r30, 0x01	; 1
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	e2 53       	subi	r30, 0x32	; 50
    1504:	fa 49       	sbci	r31, 0x9A	; 154
    1506:	40 81       	ld	r20, Z
    1508:	51 81       	ldd	r21, Z+1	; 0x01
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	e1 e0       	ldi	r30, 0x01	; 1
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	ec 0f       	add	r30, r28
    1514:	fd 1f       	adc	r31, r29
    1516:	e8 0f       	add	r30, r24
    1518:	f9 1f       	adc	r31, r25
    151a:	80 81       	ld	r24, Z
    151c:	91 81       	ldd	r25, Z+1	; 0x01
    151e:	48 17       	cp	r20, r24
    1520:	59 07       	cpc	r21, r25
    1522:	29 f4       	brne	.+10     	; 0x152e <screenUpdater+0x9e>
		case 0:
			values[0] = WSData.elevation;
			values[1] = SensorData.Elevation;
			values[2] = WSData.azimuth;
			values[3] = SensorData.Azimuth;
			for (uint8_t i=0; i<4; i++){
    1524:	2f 5f       	subi	r18, 0xFF	; 255
    1526:	24 30       	cpi	r18, 0x04	; 4
    1528:	30 f3       	brcs	.-52     	; 0x14f6 <screenUpdater+0x66>
#include "Settings.h"
#include "windowsVar.h"

bool screenUpdater(uint8_t window){
	uint16_t values[MAX_VARS]={0};
	bool update = false;
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	01 c0       	rjmp	.+2      	; 0x1530 <screenUpdater+0xa0>
				if(show.lastValues[i] != values[i]){
/*
				screen_write_formatted_text("Update", 0, ALIGN_CENTER); //for screen updating debug
				_delay_ms(100);
				screen_write_formatted_text("      ", 0, ALIGN_CENTER);*/
				update = true;
    152e:	81 e0       	ldi	r24, 0x01	; 1
				break;
				}
			}
			for (uint8_t i=0; i<4; i++){
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	16 c0       	rjmp	.+44     	; 0x1560 <screenUpdater+0xd0>
				show.lastValues[i] = values[i];
    1534:	29 2f       	mov	r18, r25
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	f9 01       	movw	r30, r18
    153a:	ee 0f       	add	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	41 e0       	ldi	r20, 0x01	; 1
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	4c 0f       	add	r20, r28
    1544:	5d 1f       	adc	r21, r29
    1546:	e4 0f       	add	r30, r20
    1548:	f5 1f       	adc	r31, r21
    154a:	40 81       	ld	r20, Z
    154c:	51 81       	ldd	r21, Z+1	; 0x01
    154e:	f9 01       	movw	r30, r18
    1550:	31 96       	adiw	r30, 0x01	; 1
    1552:	ee 0f       	add	r30, r30
    1554:	ff 1f       	adc	r31, r31
    1556:	e2 53       	subi	r30, 0x32	; 50
    1558:	fa 49       	sbci	r31, 0x9A	; 154
    155a:	40 83       	st	Z, r20
    155c:	51 83       	std	Z+1, r21	; 0x01
				screen_write_formatted_text("      ", 0, ALIGN_CENTER);*/
				update = true;
				break;
				}
			}
			for (uint8_t i=0; i<4; i++){
    155e:	9f 5f       	subi	r25, 0xFF	; 255
    1560:	94 30       	cpi	r25, 0x04	; 4
    1562:	40 f3       	brcs	.-48     	; 0x1534 <screenUpdater+0xa4>
    1564:	59 c0       	rjmp	.+178    	; 0x1618 <screenUpdater+0x188>
				show.lastValues[i] = values[i];
			}
		break;
		case 1:
			values[0] = SensorData.PVU;
    1566:	e8 e6       	ldi	r30, 0x68	; 104
    1568:	f5 e6       	ldi	r31, 0x65	; 101
    156a:	80 85       	ldd	r24, Z+8	; 0x08
    156c:	91 85       	ldd	r25, Z+9	; 0x09
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	9a 83       	std	Y+2, r25	; 0x02
			values[1] = SensorData.PVI;
    1572:	82 85       	ldd	r24, Z+10	; 0x0a
    1574:	93 85       	ldd	r25, Z+11	; 0x0b
    1576:	8b 83       	std	Y+3, r24	; 0x03
    1578:	9c 83       	std	Y+4, r25	; 0x04
			values[2] = StepperMotor.measuredVoltage;
    157a:	e3 ec       	ldi	r30, 0xC3	; 195
    157c:	f5 e6       	ldi	r31, 0x65	; 101
    157e:	85 81       	ldd	r24, Z+5	; 0x05
    1580:	96 81       	ldd	r25, Z+6	; 0x06
    1582:	8d 83       	std	Y+5, r24	; 0x05
    1584:	9e 83       	std	Y+6, r25	; 0x06
			values[3] = StepperMotor.measuredCurrent;
    1586:	87 81       	ldd	r24, Z+7	; 0x07
    1588:	90 85       	ldd	r25, Z+8	; 0x08
    158a:	8f 83       	std	Y+7, r24	; 0x07
    158c:	98 87       	std	Y+8, r25	; 0x08
			values[4] = LinearMotor.measuredVoltage;
    158e:	ee ea       	ldi	r30, 0xAE	; 174
    1590:	f5 e6       	ldi	r31, 0x65	; 101
    1592:	85 81       	ldd	r24, Z+5	; 0x05
    1594:	96 81       	ldd	r25, Z+6	; 0x06
    1596:	89 87       	std	Y+9, r24	; 0x09
    1598:	9a 87       	std	Y+10, r25	; 0x0a
			values[5] = LinearMotor.measuredCurrent;
    159a:	87 81       	ldd	r24, Z+7	; 0x07
    159c:	90 85       	ldd	r25, Z+8	; 0x08
    159e:	8b 87       	std	Y+11, r24	; 0x0b
    15a0:	9c 87       	std	Y+12, r25	; 0x0c
			for (uint8_t i=0; i<6; i++){
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	18 c0       	rjmp	.+48     	; 0x15d6 <screenUpdater+0x146>
				if(show.lastValues[i] != values[i]){
    15a6:	82 2f       	mov	r24, r18
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	fc 01       	movw	r30, r24
    15ac:	31 96       	adiw	r30, 0x01	; 1
    15ae:	ee 0f       	add	r30, r30
    15b0:	ff 1f       	adc	r31, r31
    15b2:	e2 53       	subi	r30, 0x32	; 50
    15b4:	fa 49       	sbci	r31, 0x9A	; 154
    15b6:	40 81       	ld	r20, Z
    15b8:	51 81       	ldd	r21, Z+1	; 0x01
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	e1 e0       	ldi	r30, 0x01	; 1
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	ec 0f       	add	r30, r28
    15c4:	fd 1f       	adc	r31, r29
    15c6:	e8 0f       	add	r30, r24
    15c8:	f9 1f       	adc	r31, r25
    15ca:	80 81       	ld	r24, Z
    15cc:	91 81       	ldd	r25, Z+1	; 0x01
    15ce:	48 17       	cp	r20, r24
    15d0:	59 07       	cpc	r21, r25
    15d2:	29 f4       	brne	.+10     	; 0x15de <screenUpdater+0x14e>
			values[1] = SensorData.PVI;
			values[2] = StepperMotor.measuredVoltage;
			values[3] = StepperMotor.measuredCurrent;
			values[4] = LinearMotor.measuredVoltage;
			values[5] = LinearMotor.measuredCurrent;
			for (uint8_t i=0; i<6; i++){
    15d4:	2f 5f       	subi	r18, 0xFF	; 255
    15d6:	26 30       	cpi	r18, 0x06	; 6
    15d8:	30 f3       	brcs	.-52     	; 0x15a6 <screenUpdater+0x116>
#include "Settings.h"
#include "windowsVar.h"

bool screenUpdater(uint8_t window){
	uint16_t values[MAX_VARS]={0};
	bool update = false;
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	01 c0       	rjmp	.+2      	; 0x15e0 <screenUpdater+0x150>
			values[3] = StepperMotor.measuredCurrent;
			values[4] = LinearMotor.measuredVoltage;
			values[5] = LinearMotor.measuredCurrent;
			for (uint8_t i=0; i<6; i++){
				if(show.lastValues[i] != values[i]){
				update = true;
    15de:	81 e0       	ldi	r24, 0x01	; 1
				break;
				}
			}
			for (uint8_t i=0; i<6; i++){
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	16 c0       	rjmp	.+44     	; 0x1610 <screenUpdater+0x180>
				show.lastValues[i] = values[i];
    15e4:	29 2f       	mov	r18, r25
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	f9 01       	movw	r30, r18
    15ea:	ee 0f       	add	r30, r30
    15ec:	ff 1f       	adc	r31, r31
    15ee:	a1 e0       	ldi	r26, 0x01	; 1
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ac 0f       	add	r26, r28
    15f4:	bd 1f       	adc	r27, r29
    15f6:	ea 0f       	add	r30, r26
    15f8:	fb 1f       	adc	r31, r27
    15fa:	40 81       	ld	r20, Z
    15fc:	51 81       	ldd	r21, Z+1	; 0x01
    15fe:	f9 01       	movw	r30, r18
    1600:	31 96       	adiw	r30, 0x01	; 1
    1602:	ee 0f       	add	r30, r30
    1604:	ff 1f       	adc	r31, r31
    1606:	e2 53       	subi	r30, 0x32	; 50
    1608:	fa 49       	sbci	r31, 0x9A	; 154
    160a:	40 83       	st	Z, r20
    160c:	51 83       	std	Z+1, r21	; 0x01
				if(show.lastValues[i] != values[i]){
				update = true;
				break;
				}
			}
			for (uint8_t i=0; i<6; i++){
    160e:	9f 5f       	subi	r25, 0xFF	; 255
    1610:	96 30       	cpi	r25, 0x06	; 6
    1612:	40 f3       	brcs	.-48     	; 0x15e4 <screenUpdater+0x154>
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <screenUpdater+0x188>
#include "Settings.h"
#include "windowsVar.h"

bool screenUpdater(uint8_t window){
	uint16_t values[MAX_VARS]={0};
	bool update = false;
    1616:	80 e0       	ldi	r24, 0x00	; 0
			for (uint8_t i=0; i<6; i++){
				show.lastValues[i] = values[i];
			}
		break;
	}
	show.lastWindow = window;
    1618:	10 93 cf 65 	sts	0x65CF, r17	; 0x8065cf <show+0x1>
	return update;
}
    161c:	60 96       	adiw	r28, 0x10	; 16
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	08 95       	ret

0000162a <windows>:


void windows() {
    162a:	cf 92       	push	r12
    162c:	df 92       	push	r13
    162e:	ef 92       	push	r14
    1630:	ff 92       	push	r15
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
	switch (show.window){
    163a:	80 91 ce 65 	lds	r24, 0x65CE	; 0x8065ce <show>
    163e:	88 23       	and	r24, r24
    1640:	21 f0       	breq	.+8      	; 0x164a <windows+0x20>
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	09 f4       	brne	.+2      	; 0x1648 <windows+0x1e>
    1646:	52 c0       	rjmp	.+164    	; 0x16ec <windows+0xc2>
    1648:	cf c1       	rjmp	.+926    	; 0x19e8 <windows+0x3be>
		case 0:
			if(screenUpdater(0)){
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	0e 94 48 0a 	call	0x1490	; 0x1490 <screenUpdater>
    1650:	88 23       	and	r24, r24
    1652:	09 f4       	brne	.+2      	; 0x1656 <windows+0x2c>
    1654:	c9 c1       	rjmp	.+914    	; 0x19e8 <windows+0x3be>
				screen_write_formatted_text("Elevation:", 2, ALIGN_LEFT);
    1656:	1f 92       	push	r1
    1658:	12 e0       	ldi	r17, 0x02	; 2
    165a:	1f 93       	push	r17
    165c:	8e ec       	ldi	r24, 0xCE	; 206
    165e:	94 e6       	ldi	r25, 0x64	; 100
    1660:	9f 93       	push	r25
    1662:	8f 93       	push	r24
    1664:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
				screen_write_formatted_text("%3d/ %3d", 2, ALIGN_RIGHT, WSData.elevation, SensorData.Elevation);
    1668:	0f 2e       	mov	r0, r31
    166a:	f8 e6       	ldi	r31, 0x68	; 104
    166c:	cf 2e       	mov	r12, r31
    166e:	f5 e6       	ldi	r31, 0x65	; 101
    1670:	df 2e       	mov	r13, r31
    1672:	f0 2d       	mov	r31, r0
    1674:	d6 01       	movw	r26, r12
    1676:	11 96       	adiw	r26, 0x01	; 1
    1678:	8c 91       	ld	r24, X
    167a:	11 97       	sbiw	r26, 0x01	; 1
    167c:	8f 93       	push	r24
    167e:	8c 91       	ld	r24, X
    1680:	8f 93       	push	r24
    1682:	0f 2e       	mov	r0, r31
    1684:	f9 eb       	ldi	r31, 0xB9	; 185
    1686:	ef 2e       	mov	r14, r31
    1688:	f5 e6       	ldi	r31, 0x65	; 101
    168a:	ff 2e       	mov	r15, r31
    168c:	f0 2d       	mov	r31, r0
    168e:	f7 01       	movw	r30, r14
    1690:	83 81       	ldd	r24, Z+3	; 0x03
    1692:	8f 93       	push	r24
    1694:	82 81       	ldd	r24, Z+2	; 0x02
    1696:	8f 93       	push	r24
    1698:	1f 93       	push	r17
    169a:	1f 93       	push	r17
    169c:	c9 ed       	ldi	r28, 0xD9	; 217
    169e:	d4 e6       	ldi	r29, 0x64	; 100
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
				screen_write_formatted_text("Azimuth:", 3, ALIGN_LEFT);
    16a8:	1f 92       	push	r1
    16aa:	03 e0       	ldi	r16, 0x03	; 3
    16ac:	0f 93       	push	r16
    16ae:	82 ee       	ldi	r24, 0xE2	; 226
    16b0:	94 e6       	ldi	r25, 0x64	; 100
    16b2:	9f 93       	push	r25
    16b4:	8f 93       	push	r24
    16b6:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
				screen_write_formatted_text("%3d/ %3d", 3, ALIGN_RIGHT, WSData.azimuth, SensorData.Azimuth);
    16ba:	d6 01       	movw	r26, r12
    16bc:	15 96       	adiw	r26, 0x05	; 5
    16be:	8c 91       	ld	r24, X
    16c0:	15 97       	sbiw	r26, 0x05	; 5
    16c2:	8f 93       	push	r24
    16c4:	14 96       	adiw	r26, 0x04	; 4
    16c6:	8c 91       	ld	r24, X
    16c8:	8f 93       	push	r24
    16ca:	f7 01       	movw	r30, r14
    16cc:	81 81       	ldd	r24, Z+1	; 0x01
    16ce:	8f 93       	push	r24
    16d0:	80 81       	ld	r24, Z
    16d2:	8f 93       	push	r24
    16d4:	1f 93       	push	r17
    16d6:	0f 93       	push	r16
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
    16e0:	8d b7       	in	r24, 0x3d	; 61
    16e2:	9e b7       	in	r25, 0x3e	; 62
    16e4:	48 96       	adiw	r24, 0x18	; 24
    16e6:	8d bf       	out	0x3d, r24	; 61
    16e8:	9e bf       	out	0x3e, r25	; 62
    16ea:	7e c1       	rjmp	.+764    	; 0x19e8 <windows+0x3be>
			}
		break;
		case 1:
			if(screenUpdater(1)){
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	0e 94 48 0a 	call	0x1490	; 0x1490 <screenUpdater>
    16f2:	88 23       	and	r24, r24
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <windows+0xce>
    16f6:	78 c1       	rjmp	.+752    	; 0x19e8 <windows+0x3be>
				//Solar panels electrical information
				screen_write_formatted_text("S.P. Voltage", 0, ALIGN_LEFT);
    16f8:	1f 92       	push	r1
    16fa:	1f 92       	push	r1
    16fc:	8b ee       	ldi	r24, 0xEB	; 235
    16fe:	94 e6       	ldi	r25, 0x64	; 100
    1700:	9f 93       	push	r25
    1702:	8f 93       	push	r24
    1704:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%01d", 0, ALIGN_RIGHT, SensorData.PVU/10, SensorData.PVU%10);
    1708:	c8 e6       	ldi	r28, 0x68	; 104
    170a:	d5 e6       	ldi	r29, 0x65	; 101
    170c:	48 85       	ldd	r20, Y+8	; 0x08
    170e:	59 85       	ldd	r21, Y+9	; 0x09
    1710:	9a 01       	movw	r18, r20
    1712:	ad ec       	ldi	r26, 0xCD	; 205
    1714:	bc ec       	ldi	r27, 0xCC	; 204
    1716:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__umulhisi3>
    171a:	96 95       	lsr	r25
    171c:	87 95       	ror	r24
    171e:	96 95       	lsr	r25
    1720:	87 95       	ror	r24
    1722:	96 95       	lsr	r25
    1724:	87 95       	ror	r24
    1726:	9c 01       	movw	r18, r24
    1728:	22 0f       	add	r18, r18
    172a:	33 1f       	adc	r19, r19
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	82 0f       	add	r24, r18
    173a:	93 1f       	adc	r25, r19
    173c:	da 01       	movw	r26, r20
    173e:	a8 1b       	sub	r26, r24
    1740:	b9 0b       	sbc	r27, r25
    1742:	cd 01       	movw	r24, r26
    1744:	9f 93       	push	r25
    1746:	af 93       	push	r26
    1748:	9a 01       	movw	r18, r20
    174a:	ad ec       	ldi	r26, 0xCD	; 205
    174c:	bc ec       	ldi	r27, 0xCC	; 204
    174e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__umulhisi3>
    1752:	96 95       	lsr	r25
    1754:	87 95       	ror	r24
    1756:	96 95       	lsr	r25
    1758:	87 95       	ror	r24
    175a:	96 95       	lsr	r25
    175c:	87 95       	ror	r24
    175e:	9f 93       	push	r25
    1760:	8f 93       	push	r24
    1762:	82 e0       	ldi	r24, 0x02	; 2
    1764:	8f 93       	push	r24
    1766:	1f 92       	push	r1
    1768:	88 ef       	ldi	r24, 0xF8	; 248
    176a:	94 e6       	ldi	r25, 0x64	; 100
    176c:	9f 93       	push	r25
    176e:	8f 93       	push	r24
    1770:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
				screen_write_formatted_text("S.P Current:", 1, ALIGN_LEFT);
    1774:	1f 92       	push	r1
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	8f 93       	push	r24
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	95 e6       	ldi	r25, 0x65	; 101
    177e:	9f 93       	push	r25
    1780:	8f 93       	push	r24
    1782:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%02d", 1, ALIGN_RIGHT, SensorData.PVI/100, abs(SensorData.PVI%100));
    1786:	4a 85       	ldd	r20, Y+10	; 0x0a
    1788:	5b 85       	ldd	r21, Y+11	; 0x0b
    178a:	9a 01       	movw	r18, r20
    178c:	36 95       	lsr	r19
    178e:	27 95       	ror	r18
    1790:	36 95       	lsr	r19
    1792:	27 95       	ror	r18
    1794:	ab e7       	ldi	r26, 0x7B	; 123
    1796:	b4 e1       	ldi	r27, 0x14	; 20
    1798:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__umulhisi3>
    179c:	96 95       	lsr	r25
    179e:	87 95       	ror	r24
    17a0:	64 e6       	ldi	r22, 0x64	; 100
    17a2:	68 9f       	mul	r22, r24
    17a4:	90 01       	movw	r18, r0
    17a6:	69 9f       	mul	r22, r25
    17a8:	30 0d       	add	r19, r0
    17aa:	11 24       	eor	r1, r1
    17ac:	ca 01       	movw	r24, r20
    17ae:	82 1b       	sub	r24, r18
    17b0:	93 0b       	sbc	r25, r19
    17b2:	9c 01       	movw	r18, r24
    17b4:	22 f4       	brpl	.+8      	; 0x17be <windows+0x194>
    17b6:	22 27       	eor	r18, r18
    17b8:	33 27       	eor	r19, r19
    17ba:	28 1b       	sub	r18, r24
    17bc:	39 0b       	sbc	r19, r25
    17be:	3f 93       	push	r19
    17c0:	2f 93       	push	r18
    17c2:	9a 01       	movw	r18, r20
    17c4:	36 95       	lsr	r19
    17c6:	27 95       	ror	r18
    17c8:	36 95       	lsr	r19
    17ca:	27 95       	ror	r18
    17cc:	ab e7       	ldi	r26, 0x7B	; 123
    17ce:	b4 e1       	ldi	r27, 0x14	; 20
    17d0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__umulhisi3>
    17d4:	96 95       	lsr	r25
    17d6:	87 95       	ror	r24
    17d8:	9f 93       	push	r25
    17da:	8f 93       	push	r24
    17dc:	c2 e0       	ldi	r28, 0x02	; 2
    17de:	cf 93       	push	r28
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	8f 93       	push	r24
    17e4:	8e e0       	ldi	r24, 0x0E	; 14
    17e6:	95 e6       	ldi	r25, 0x65	; 101
    17e8:	9f 93       	push	r25
    17ea:	8f 93       	push	r24
    17ec:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
				screen_write_formatted_text("---------------------", 2, ALIGN_LEFT);
    17f0:	1f 92       	push	r1
    17f2:	cf 93       	push	r28
    17f4:	87 e1       	ldi	r24, 0x17	; 23
    17f6:	95 e6       	ldi	r25, 0x65	; 101
    17f8:	9f 93       	push	r25
    17fa:	8f 93       	push	r24
    17fc:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
				//Azimuth (Stepper) motor electrical information
				screen_write_formatted_text("St.M. Voltage", 3, ALIGN_LEFT);
    1800:	1f 92       	push	r1
    1802:	d3 e0       	ldi	r29, 0x03	; 3
    1804:	df 93       	push	r29
    1806:	8d e2       	ldi	r24, 0x2D	; 45
    1808:	95 e6       	ldi	r25, 0x65	; 101
    180a:	9f 93       	push	r25
    180c:	8f 93       	push	r24
    180e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%01d", 3, ALIGN_RIGHT, StepperMotor.measuredVoltage/10, StepperMotor.measuredVoltage%10);
    1812:	03 ec       	ldi	r16, 0xC3	; 195
    1814:	15 e6       	ldi	r17, 0x65	; 101
    1816:	f8 01       	movw	r30, r16
    1818:	45 81       	ldd	r20, Z+5	; 0x05
    181a:	56 81       	ldd	r21, Z+6	; 0x06
    181c:	2d b7       	in	r18, 0x3d	; 61
    181e:	3e b7       	in	r19, 0x3e	; 62
    1820:	20 5e       	subi	r18, 0xE0	; 224
    1822:	3f 4f       	sbci	r19, 0xFF	; 255
    1824:	2d bf       	out	0x3d, r18	; 61
    1826:	3e bf       	out	0x3e, r19	; 62
    1828:	9a 01       	movw	r18, r20
    182a:	ad ec       	ldi	r26, 0xCD	; 205
    182c:	bc ec       	ldi	r27, 0xCC	; 204
    182e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__umulhisi3>
    1832:	96 95       	lsr	r25
    1834:	87 95       	ror	r24
    1836:	96 95       	lsr	r25
    1838:	87 95       	ror	r24
    183a:	96 95       	lsr	r25
    183c:	87 95       	ror	r24
    183e:	9c 01       	movw	r18, r24
    1840:	22 0f       	add	r18, r18
    1842:	33 1f       	adc	r19, r19
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	82 0f       	add	r24, r18
    1852:	93 1f       	adc	r25, r19
    1854:	da 01       	movw	r26, r20
    1856:	a8 1b       	sub	r26, r24
    1858:	b9 0b       	sbc	r27, r25
    185a:	cd 01       	movw	r24, r26
    185c:	9f 93       	push	r25
    185e:	af 93       	push	r26
    1860:	9a 01       	movw	r18, r20
    1862:	ad ec       	ldi	r26, 0xCD	; 205
    1864:	bc ec       	ldi	r27, 0xCC	; 204
    1866:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__umulhisi3>
    186a:	96 95       	lsr	r25
    186c:	87 95       	ror	r24
    186e:	96 95       	lsr	r25
    1870:	87 95       	ror	r24
    1872:	96 95       	lsr	r25
    1874:	87 95       	ror	r24
    1876:	9f 93       	push	r25
    1878:	8f 93       	push	r24
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	88 ef       	ldi	r24, 0xF8	; 248
    1880:	94 e6       	ldi	r25, 0x64	; 100
    1882:	9f 93       	push	r25
    1884:	8f 93       	push	r24
    1886:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
				screen_write_formatted_text("St.M. Current:", 4, ALIGN_LEFT);
    188a:	1f 92       	push	r1
    188c:	84 e0       	ldi	r24, 0x04	; 4
    188e:	8f 93       	push	r24
    1890:	8b e3       	ldi	r24, 0x3B	; 59
    1892:	95 e6       	ldi	r25, 0x65	; 101
    1894:	9f 93       	push	r25
    1896:	8f 93       	push	r24
    1898:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%02d", 4, ALIGN_RIGHT, StepperMotor.measuredCurrent/100, abs(StepperMotor.measuredCurrent%100));
    189c:	d8 01       	movw	r26, r16
    189e:	17 96       	adiw	r26, 0x07	; 7
    18a0:	ed 91       	ld	r30, X+
    18a2:	fc 91       	ld	r31, X
    18a4:	18 97       	sbiw	r26, 0x08	; 8
    18a6:	cf 01       	movw	r24, r30
    18a8:	64 e6       	ldi	r22, 0x64	; 100
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__divmodhi4>
    18b0:	9c 01       	movw	r18, r24
    18b2:	99 23       	and	r25, r25
    18b4:	24 f4       	brge	.+8      	; 0x18be <windows+0x294>
    18b6:	22 27       	eor	r18, r18
    18b8:	33 27       	eor	r19, r19
    18ba:	28 1b       	sub	r18, r24
    18bc:	39 0b       	sbc	r19, r25
    18be:	3f 93       	push	r19
    18c0:	2f 93       	push	r18
    18c2:	c4 e6       	ldi	r28, 0x64	; 100
    18c4:	d0 e0       	ldi	r29, 0x00	; 0
    18c6:	cf 01       	movw	r24, r30
    18c8:	be 01       	movw	r22, r28
    18ca:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__divmodhi4>
    18ce:	7f 93       	push	r23
    18d0:	6f 93       	push	r22
    18d2:	68 94       	set
    18d4:	ee 24       	eor	r14, r14
    18d6:	e1 f8       	bld	r14, 1
    18d8:	ef 92       	push	r14
    18da:	84 e0       	ldi	r24, 0x04	; 4
    18dc:	8f 93       	push	r24
    18de:	8e e0       	ldi	r24, 0x0E	; 14
    18e0:	95 e6       	ldi	r25, 0x65	; 101
    18e2:	9f 93       	push	r25
    18e4:	8f 93       	push	r24
    18e6:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
				screen_write_formatted_text("---------------------", 5, ALIGN_LEFT);
    18ea:	1f 92       	push	r1
    18ec:	85 e0       	ldi	r24, 0x05	; 5
    18ee:	8f 93       	push	r24
    18f0:	87 e1       	ldi	r24, 0x17	; 23
    18f2:	95 e6       	ldi	r25, 0x65	; 101
    18f4:	9f 93       	push	r25
    18f6:	8f 93       	push	r24
    18f8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
				//Elevation (Linear) motor electical information
				screen_write_formatted_text("L.M. Voltage", 6, ALIGN_LEFT);
    18fc:	1f 92       	push	r1
    18fe:	0f 2e       	mov	r0, r31
    1900:	f6 e0       	ldi	r31, 0x06	; 6
    1902:	ff 2e       	mov	r15, r31
    1904:	f0 2d       	mov	r31, r0
    1906:	ff 92       	push	r15
    1908:	8a e4       	ldi	r24, 0x4A	; 74
    190a:	95 e6       	ldi	r25, 0x65	; 101
    190c:	9f 93       	push	r25
    190e:	8f 93       	push	r24
    1910:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%01d", 6, ALIGN_RIGHT, LinearMotor.measuredVoltage/10, LinearMotor.measuredVoltage%10);
    1914:	0e ea       	ldi	r16, 0xAE	; 174
    1916:	15 e6       	ldi	r17, 0x65	; 101
    1918:	f8 01       	movw	r30, r16
    191a:	45 81       	ldd	r20, Z+5	; 0x05
    191c:	56 81       	ldd	r21, Z+6	; 0x06
    191e:	9a 01       	movw	r18, r20
    1920:	ad ec       	ldi	r26, 0xCD	; 205
    1922:	bc ec       	ldi	r27, 0xCC	; 204
    1924:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__umulhisi3>
    1928:	96 95       	lsr	r25
    192a:	87 95       	ror	r24
    192c:	96 95       	lsr	r25
    192e:	87 95       	ror	r24
    1930:	96 95       	lsr	r25
    1932:	87 95       	ror	r24
    1934:	9c 01       	movw	r18, r24
    1936:	22 0f       	add	r18, r18
    1938:	33 1f       	adc	r19, r19
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	82 0f       	add	r24, r18
    1948:	93 1f       	adc	r25, r19
    194a:	9a 01       	movw	r18, r20
    194c:	28 1b       	sub	r18, r24
    194e:	39 0b       	sbc	r19, r25
    1950:	c9 01       	movw	r24, r18
    1952:	9f 93       	push	r25
    1954:	2f 93       	push	r18
    1956:	9a 01       	movw	r18, r20
    1958:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__umulhisi3>
    195c:	96 95       	lsr	r25
    195e:	87 95       	ror	r24
    1960:	96 95       	lsr	r25
    1962:	87 95       	ror	r24
    1964:	96 95       	lsr	r25
    1966:	87 95       	ror	r24
    1968:	9f 93       	push	r25
    196a:	8f 93       	push	r24
    196c:	ef 92       	push	r14
    196e:	ff 92       	push	r15
    1970:	88 ef       	ldi	r24, 0xF8	; 248
    1972:	94 e6       	ldi	r25, 0x64	; 100
    1974:	9f 93       	push	r25
    1976:	8f 93       	push	r24
    1978:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
				screen_write_formatted_text("L.M. Current:", 7, ALIGN_LEFT);
    197c:	8d b7       	in	r24, 0x3d	; 61
    197e:	9e b7       	in	r25, 0x3e	; 62
    1980:	84 96       	adiw	r24, 0x24	; 36
    1982:	8d bf       	out	0x3d, r24	; 61
    1984:	9e bf       	out	0x3e, r25	; 62
    1986:	1f 92       	push	r1
    1988:	87 e0       	ldi	r24, 0x07	; 7
    198a:	8f 93       	push	r24
    198c:	87 e5       	ldi	r24, 0x57	; 87
    198e:	95 e6       	ldi	r25, 0x65	; 101
    1990:	9f 93       	push	r25
    1992:	8f 93       	push	r24
    1994:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%02d", 7, ALIGN_RIGHT, LinearMotor.measuredCurrent/100, abs(LinearMotor.measuredCurrent%100));
    1998:	d8 01       	movw	r26, r16
    199a:	17 96       	adiw	r26, 0x07	; 7
    199c:	ed 91       	ld	r30, X+
    199e:	fc 91       	ld	r31, X
    19a0:	18 97       	sbiw	r26, 0x08	; 8
    19a2:	cf 01       	movw	r24, r30
    19a4:	be 01       	movw	r22, r28
    19a6:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__divmodhi4>
    19aa:	9c 01       	movw	r18, r24
    19ac:	99 23       	and	r25, r25
    19ae:	24 f4       	brge	.+8      	; 0x19b8 <windows+0x38e>
    19b0:	22 27       	eor	r18, r18
    19b2:	33 27       	eor	r19, r19
    19b4:	28 1b       	sub	r18, r24
    19b6:	39 0b       	sbc	r19, r25
    19b8:	3f 93       	push	r19
    19ba:	2f 93       	push	r18
    19bc:	cf 01       	movw	r24, r30
    19be:	64 e6       	ldi	r22, 0x64	; 100
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__divmodhi4>
    19c6:	7f 93       	push	r23
    19c8:	6f 93       	push	r22
    19ca:	82 e0       	ldi	r24, 0x02	; 2
    19cc:	8f 93       	push	r24
    19ce:	87 e0       	ldi	r24, 0x07	; 7
    19d0:	8f 93       	push	r24
    19d2:	8e e0       	ldi	r24, 0x0E	; 14
    19d4:	95 e6       	ldi	r25, 0x65	; 101
    19d6:	9f 93       	push	r25
    19d8:	8f 93       	push	r24
    19da:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <screen_write_formatted_text>
    19de:	ed b7       	in	r30, 0x3d	; 61
    19e0:	fe b7       	in	r31, 0x3e	; 62
    19e2:	3c 96       	adiw	r30, 0x0c	; 12
    19e4:	ed bf       	out	0x3d, r30	; 61
    19e6:	fe bf       	out	0x3e, r31	; 62
			}
		break;
	}
	

    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	ff 90       	pop	r15
    19f2:	ef 90       	pop	r14
    19f4:	df 90       	pop	r13
    19f6:	cf 90       	pop	r12
    19f8:	08 95       	ret

000019fa <__divsf3>:
    19fa:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__divsf3x>
    19fe:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__fp_round>
    1a02:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__fp_pscB>
    1a06:	58 f0       	brcs	.+22     	; 0x1a1e <__divsf3+0x24>
    1a08:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__fp_pscA>
    1a0c:	40 f0       	brcs	.+16     	; 0x1a1e <__divsf3+0x24>
    1a0e:	29 f4       	brne	.+10     	; 0x1a1a <__divsf3+0x20>
    1a10:	5f 3f       	cpi	r21, 0xFF	; 255
    1a12:	29 f0       	breq	.+10     	; 0x1a1e <__divsf3+0x24>
    1a14:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__fp_inf>
    1a18:	51 11       	cpse	r21, r1
    1a1a:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_szero>
    1a1e:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__fp_nan>

00001a22 <__divsf3x>:
    1a22:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__fp_split3>
    1a26:	68 f3       	brcs	.-38     	; 0x1a02 <__divsf3+0x8>

00001a28 <__divsf3_pse>:
    1a28:	99 23       	and	r25, r25
    1a2a:	b1 f3       	breq	.-20     	; 0x1a18 <__divsf3+0x1e>
    1a2c:	55 23       	and	r21, r21
    1a2e:	91 f3       	breq	.-28     	; 0x1a14 <__divsf3+0x1a>
    1a30:	95 1b       	sub	r25, r21
    1a32:	55 0b       	sbc	r21, r21
    1a34:	bb 27       	eor	r27, r27
    1a36:	aa 27       	eor	r26, r26
    1a38:	62 17       	cp	r22, r18
    1a3a:	73 07       	cpc	r23, r19
    1a3c:	84 07       	cpc	r24, r20
    1a3e:	38 f0       	brcs	.+14     	; 0x1a4e <__divsf3_pse+0x26>
    1a40:	9f 5f       	subi	r25, 0xFF	; 255
    1a42:	5f 4f       	sbci	r21, 0xFF	; 255
    1a44:	22 0f       	add	r18, r18
    1a46:	33 1f       	adc	r19, r19
    1a48:	44 1f       	adc	r20, r20
    1a4a:	aa 1f       	adc	r26, r26
    1a4c:	a9 f3       	breq	.-22     	; 0x1a38 <__divsf3_pse+0x10>
    1a4e:	35 d0       	rcall	.+106    	; 0x1aba <__divsf3_pse+0x92>
    1a50:	0e 2e       	mov	r0, r30
    1a52:	3a f0       	brmi	.+14     	; 0x1a62 <__divsf3_pse+0x3a>
    1a54:	e0 e8       	ldi	r30, 0x80	; 128
    1a56:	32 d0       	rcall	.+100    	; 0x1abc <__divsf3_pse+0x94>
    1a58:	91 50       	subi	r25, 0x01	; 1
    1a5a:	50 40       	sbci	r21, 0x00	; 0
    1a5c:	e6 95       	lsr	r30
    1a5e:	00 1c       	adc	r0, r0
    1a60:	ca f7       	brpl	.-14     	; 0x1a54 <__divsf3_pse+0x2c>
    1a62:	2b d0       	rcall	.+86     	; 0x1aba <__divsf3_pse+0x92>
    1a64:	fe 2f       	mov	r31, r30
    1a66:	29 d0       	rcall	.+82     	; 0x1aba <__divsf3_pse+0x92>
    1a68:	66 0f       	add	r22, r22
    1a6a:	77 1f       	adc	r23, r23
    1a6c:	88 1f       	adc	r24, r24
    1a6e:	bb 1f       	adc	r27, r27
    1a70:	26 17       	cp	r18, r22
    1a72:	37 07       	cpc	r19, r23
    1a74:	48 07       	cpc	r20, r24
    1a76:	ab 07       	cpc	r26, r27
    1a78:	b0 e8       	ldi	r27, 0x80	; 128
    1a7a:	09 f0       	breq	.+2      	; 0x1a7e <__divsf3_pse+0x56>
    1a7c:	bb 0b       	sbc	r27, r27
    1a7e:	80 2d       	mov	r24, r0
    1a80:	bf 01       	movw	r22, r30
    1a82:	ff 27       	eor	r31, r31
    1a84:	93 58       	subi	r25, 0x83	; 131
    1a86:	5f 4f       	sbci	r21, 0xFF	; 255
    1a88:	3a f0       	brmi	.+14     	; 0x1a98 <__divsf3_pse+0x70>
    1a8a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a8c:	51 05       	cpc	r21, r1
    1a8e:	78 f0       	brcs	.+30     	; 0x1aae <__divsf3_pse+0x86>
    1a90:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__fp_inf>
    1a94:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_szero>
    1a98:	5f 3f       	cpi	r21, 0xFF	; 255
    1a9a:	e4 f3       	brlt	.-8      	; 0x1a94 <__divsf3_pse+0x6c>
    1a9c:	98 3e       	cpi	r25, 0xE8	; 232
    1a9e:	d4 f3       	brlt	.-12     	; 0x1a94 <__divsf3_pse+0x6c>
    1aa0:	86 95       	lsr	r24
    1aa2:	77 95       	ror	r23
    1aa4:	67 95       	ror	r22
    1aa6:	b7 95       	ror	r27
    1aa8:	f7 95       	ror	r31
    1aaa:	9f 5f       	subi	r25, 0xFF	; 255
    1aac:	c9 f7       	brne	.-14     	; 0x1aa0 <__divsf3_pse+0x78>
    1aae:	88 0f       	add	r24, r24
    1ab0:	91 1d       	adc	r25, r1
    1ab2:	96 95       	lsr	r25
    1ab4:	87 95       	ror	r24
    1ab6:	97 f9       	bld	r25, 7
    1ab8:	08 95       	ret
    1aba:	e1 e0       	ldi	r30, 0x01	; 1
    1abc:	66 0f       	add	r22, r22
    1abe:	77 1f       	adc	r23, r23
    1ac0:	88 1f       	adc	r24, r24
    1ac2:	bb 1f       	adc	r27, r27
    1ac4:	62 17       	cp	r22, r18
    1ac6:	73 07       	cpc	r23, r19
    1ac8:	84 07       	cpc	r24, r20
    1aca:	ba 07       	cpc	r27, r26
    1acc:	20 f0       	brcs	.+8      	; 0x1ad6 <__divsf3_pse+0xae>
    1ace:	62 1b       	sub	r22, r18
    1ad0:	73 0b       	sbc	r23, r19
    1ad2:	84 0b       	sbc	r24, r20
    1ad4:	ba 0b       	sbc	r27, r26
    1ad6:	ee 1f       	adc	r30, r30
    1ad8:	88 f7       	brcc	.-30     	; 0x1abc <__divsf3_pse+0x94>
    1ada:	e0 95       	com	r30
    1adc:	08 95       	ret

00001ade <__fixunssfsi>:
    1ade:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__fp_splitA>
    1ae2:	88 f0       	brcs	.+34     	; 0x1b06 <__fixunssfsi+0x28>
    1ae4:	9f 57       	subi	r25, 0x7F	; 127
    1ae6:	98 f0       	brcs	.+38     	; 0x1b0e <__fixunssfsi+0x30>
    1ae8:	b9 2f       	mov	r27, r25
    1aea:	99 27       	eor	r25, r25
    1aec:	b7 51       	subi	r27, 0x17	; 23
    1aee:	b0 f0       	brcs	.+44     	; 0x1b1c <__fixunssfsi+0x3e>
    1af0:	e1 f0       	breq	.+56     	; 0x1b2a <__fixunssfsi+0x4c>
    1af2:	66 0f       	add	r22, r22
    1af4:	77 1f       	adc	r23, r23
    1af6:	88 1f       	adc	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	1a f0       	brmi	.+6      	; 0x1b02 <__fixunssfsi+0x24>
    1afc:	ba 95       	dec	r27
    1afe:	c9 f7       	brne	.-14     	; 0x1af2 <__fixunssfsi+0x14>
    1b00:	14 c0       	rjmp	.+40     	; 0x1b2a <__fixunssfsi+0x4c>
    1b02:	b1 30       	cpi	r27, 0x01	; 1
    1b04:	91 f0       	breq	.+36     	; 0x1b2a <__fixunssfsi+0x4c>
    1b06:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <__fp_zero>
    1b0a:	b1 e0       	ldi	r27, 0x01	; 1
    1b0c:	08 95       	ret
    1b0e:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__fp_zero>
    1b12:	67 2f       	mov	r22, r23
    1b14:	78 2f       	mov	r23, r24
    1b16:	88 27       	eor	r24, r24
    1b18:	b8 5f       	subi	r27, 0xF8	; 248
    1b1a:	39 f0       	breq	.+14     	; 0x1b2a <__fixunssfsi+0x4c>
    1b1c:	b9 3f       	cpi	r27, 0xF9	; 249
    1b1e:	cc f3       	brlt	.-14     	; 0x1b12 <__fixunssfsi+0x34>
    1b20:	86 95       	lsr	r24
    1b22:	77 95       	ror	r23
    1b24:	67 95       	ror	r22
    1b26:	b3 95       	inc	r27
    1b28:	d9 f7       	brne	.-10     	; 0x1b20 <__fixunssfsi+0x42>
    1b2a:	3e f4       	brtc	.+14     	; 0x1b3a <__fixunssfsi+0x5c>
    1b2c:	90 95       	com	r25
    1b2e:	80 95       	com	r24
    1b30:	70 95       	com	r23
    1b32:	61 95       	neg	r22
    1b34:	7f 4f       	sbci	r23, 0xFF	; 255
    1b36:	8f 4f       	sbci	r24, 0xFF	; 255
    1b38:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3a:	08 95       	ret

00001b3c <__floatunsisf>:
    1b3c:	e8 94       	clt
    1b3e:	09 c0       	rjmp	.+18     	; 0x1b52 <__floatsisf+0x12>

00001b40 <__floatsisf>:
    1b40:	97 fb       	bst	r25, 7
    1b42:	3e f4       	brtc	.+14     	; 0x1b52 <__floatsisf+0x12>
    1b44:	90 95       	com	r25
    1b46:	80 95       	com	r24
    1b48:	70 95       	com	r23
    1b4a:	61 95       	neg	r22
    1b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b50:	9f 4f       	sbci	r25, 0xFF	; 255
    1b52:	99 23       	and	r25, r25
    1b54:	a9 f0       	breq	.+42     	; 0x1b80 <__floatsisf+0x40>
    1b56:	f9 2f       	mov	r31, r25
    1b58:	96 e9       	ldi	r25, 0x96	; 150
    1b5a:	bb 27       	eor	r27, r27
    1b5c:	93 95       	inc	r25
    1b5e:	f6 95       	lsr	r31
    1b60:	87 95       	ror	r24
    1b62:	77 95       	ror	r23
    1b64:	67 95       	ror	r22
    1b66:	b7 95       	ror	r27
    1b68:	f1 11       	cpse	r31, r1
    1b6a:	f8 cf       	rjmp	.-16     	; 0x1b5c <__floatsisf+0x1c>
    1b6c:	fa f4       	brpl	.+62     	; 0x1bac <__floatsisf+0x6c>
    1b6e:	bb 0f       	add	r27, r27
    1b70:	11 f4       	brne	.+4      	; 0x1b76 <__floatsisf+0x36>
    1b72:	60 ff       	sbrs	r22, 0
    1b74:	1b c0       	rjmp	.+54     	; 0x1bac <__floatsisf+0x6c>
    1b76:	6f 5f       	subi	r22, 0xFF	; 255
    1b78:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7e:	16 c0       	rjmp	.+44     	; 0x1bac <__floatsisf+0x6c>
    1b80:	88 23       	and	r24, r24
    1b82:	11 f0       	breq	.+4      	; 0x1b88 <__floatsisf+0x48>
    1b84:	96 e9       	ldi	r25, 0x96	; 150
    1b86:	11 c0       	rjmp	.+34     	; 0x1baa <__floatsisf+0x6a>
    1b88:	77 23       	and	r23, r23
    1b8a:	21 f0       	breq	.+8      	; 0x1b94 <__floatsisf+0x54>
    1b8c:	9e e8       	ldi	r25, 0x8E	; 142
    1b8e:	87 2f       	mov	r24, r23
    1b90:	76 2f       	mov	r23, r22
    1b92:	05 c0       	rjmp	.+10     	; 0x1b9e <__floatsisf+0x5e>
    1b94:	66 23       	and	r22, r22
    1b96:	71 f0       	breq	.+28     	; 0x1bb4 <__floatsisf+0x74>
    1b98:	96 e8       	ldi	r25, 0x86	; 134
    1b9a:	86 2f       	mov	r24, r22
    1b9c:	70 e0       	ldi	r23, 0x00	; 0
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	2a f0       	brmi	.+10     	; 0x1bac <__floatsisf+0x6c>
    1ba2:	9a 95       	dec	r25
    1ba4:	66 0f       	add	r22, r22
    1ba6:	77 1f       	adc	r23, r23
    1ba8:	88 1f       	adc	r24, r24
    1baa:	da f7       	brpl	.-10     	; 0x1ba2 <__floatsisf+0x62>
    1bac:	88 0f       	add	r24, r24
    1bae:	96 95       	lsr	r25
    1bb0:	87 95       	ror	r24
    1bb2:	97 f9       	bld	r25, 7
    1bb4:	08 95       	ret

00001bb6 <__fp_inf>:
    1bb6:	97 f9       	bld	r25, 7
    1bb8:	9f 67       	ori	r25, 0x7F	; 127
    1bba:	80 e8       	ldi	r24, 0x80	; 128
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	08 95       	ret

00001bc2 <__fp_nan>:
    1bc2:	9f ef       	ldi	r25, 0xFF	; 255
    1bc4:	80 ec       	ldi	r24, 0xC0	; 192
    1bc6:	08 95       	ret

00001bc8 <__fp_pscA>:
    1bc8:	00 24       	eor	r0, r0
    1bca:	0a 94       	dec	r0
    1bcc:	16 16       	cp	r1, r22
    1bce:	17 06       	cpc	r1, r23
    1bd0:	18 06       	cpc	r1, r24
    1bd2:	09 06       	cpc	r0, r25
    1bd4:	08 95       	ret

00001bd6 <__fp_pscB>:
    1bd6:	00 24       	eor	r0, r0
    1bd8:	0a 94       	dec	r0
    1bda:	12 16       	cp	r1, r18
    1bdc:	13 06       	cpc	r1, r19
    1bde:	14 06       	cpc	r1, r20
    1be0:	05 06       	cpc	r0, r21
    1be2:	08 95       	ret

00001be4 <__fp_round>:
    1be4:	09 2e       	mov	r0, r25
    1be6:	03 94       	inc	r0
    1be8:	00 0c       	add	r0, r0
    1bea:	11 f4       	brne	.+4      	; 0x1bf0 <__fp_round+0xc>
    1bec:	88 23       	and	r24, r24
    1bee:	52 f0       	brmi	.+20     	; 0x1c04 <__fp_round+0x20>
    1bf0:	bb 0f       	add	r27, r27
    1bf2:	40 f4       	brcc	.+16     	; 0x1c04 <__fp_round+0x20>
    1bf4:	bf 2b       	or	r27, r31
    1bf6:	11 f4       	brne	.+4      	; 0x1bfc <__fp_round+0x18>
    1bf8:	60 ff       	sbrs	r22, 0
    1bfa:	04 c0       	rjmp	.+8      	; 0x1c04 <__fp_round+0x20>
    1bfc:	6f 5f       	subi	r22, 0xFF	; 255
    1bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1c00:	8f 4f       	sbci	r24, 0xFF	; 255
    1c02:	9f 4f       	sbci	r25, 0xFF	; 255
    1c04:	08 95       	ret

00001c06 <__fp_split3>:
    1c06:	57 fd       	sbrc	r21, 7
    1c08:	90 58       	subi	r25, 0x80	; 128
    1c0a:	44 0f       	add	r20, r20
    1c0c:	55 1f       	adc	r21, r21
    1c0e:	59 f0       	breq	.+22     	; 0x1c26 <__fp_splitA+0x10>
    1c10:	5f 3f       	cpi	r21, 0xFF	; 255
    1c12:	71 f0       	breq	.+28     	; 0x1c30 <__fp_splitA+0x1a>
    1c14:	47 95       	ror	r20

00001c16 <__fp_splitA>:
    1c16:	88 0f       	add	r24, r24
    1c18:	97 fb       	bst	r25, 7
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	61 f0       	breq	.+24     	; 0x1c36 <__fp_splitA+0x20>
    1c1e:	9f 3f       	cpi	r25, 0xFF	; 255
    1c20:	79 f0       	breq	.+30     	; 0x1c40 <__fp_splitA+0x2a>
    1c22:	87 95       	ror	r24
    1c24:	08 95       	ret
    1c26:	12 16       	cp	r1, r18
    1c28:	13 06       	cpc	r1, r19
    1c2a:	14 06       	cpc	r1, r20
    1c2c:	55 1f       	adc	r21, r21
    1c2e:	f2 cf       	rjmp	.-28     	; 0x1c14 <__fp_split3+0xe>
    1c30:	46 95       	lsr	r20
    1c32:	f1 df       	rcall	.-30     	; 0x1c16 <__fp_splitA>
    1c34:	08 c0       	rjmp	.+16     	; 0x1c46 <__fp_splitA+0x30>
    1c36:	16 16       	cp	r1, r22
    1c38:	17 06       	cpc	r1, r23
    1c3a:	18 06       	cpc	r1, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	f1 cf       	rjmp	.-30     	; 0x1c22 <__fp_splitA+0xc>
    1c40:	86 95       	lsr	r24
    1c42:	71 05       	cpc	r23, r1
    1c44:	61 05       	cpc	r22, r1
    1c46:	08 94       	sec
    1c48:	08 95       	ret

00001c4a <__fp_zero>:
    1c4a:	e8 94       	clt

00001c4c <__fp_szero>:
    1c4c:	bb 27       	eor	r27, r27
    1c4e:	66 27       	eor	r22, r22
    1c50:	77 27       	eor	r23, r23
    1c52:	cb 01       	movw	r24, r22
    1c54:	97 f9       	bld	r25, 7
    1c56:	08 95       	ret

00001c58 <__mulsf3>:
    1c58:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__mulsf3x>
    1c5c:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__fp_round>
    1c60:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__fp_pscA>
    1c64:	38 f0       	brcs	.+14     	; 0x1c74 <__mulsf3+0x1c>
    1c66:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__fp_pscB>
    1c6a:	20 f0       	brcs	.+8      	; 0x1c74 <__mulsf3+0x1c>
    1c6c:	95 23       	and	r25, r21
    1c6e:	11 f0       	breq	.+4      	; 0x1c74 <__mulsf3+0x1c>
    1c70:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__fp_inf>
    1c74:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__fp_nan>
    1c78:	11 24       	eor	r1, r1
    1c7a:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_szero>

00001c7e <__mulsf3x>:
    1c7e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__fp_split3>
    1c82:	70 f3       	brcs	.-36     	; 0x1c60 <__mulsf3+0x8>

00001c84 <__mulsf3_pse>:
    1c84:	95 9f       	mul	r25, r21
    1c86:	c1 f3       	breq	.-16     	; 0x1c78 <__mulsf3+0x20>
    1c88:	95 0f       	add	r25, r21
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	55 1f       	adc	r21, r21
    1c8e:	62 9f       	mul	r22, r18
    1c90:	f0 01       	movw	r30, r0
    1c92:	72 9f       	mul	r23, r18
    1c94:	bb 27       	eor	r27, r27
    1c96:	f0 0d       	add	r31, r0
    1c98:	b1 1d       	adc	r27, r1
    1c9a:	63 9f       	mul	r22, r19
    1c9c:	aa 27       	eor	r26, r26
    1c9e:	f0 0d       	add	r31, r0
    1ca0:	b1 1d       	adc	r27, r1
    1ca2:	aa 1f       	adc	r26, r26
    1ca4:	64 9f       	mul	r22, r20
    1ca6:	66 27       	eor	r22, r22
    1ca8:	b0 0d       	add	r27, r0
    1caa:	a1 1d       	adc	r26, r1
    1cac:	66 1f       	adc	r22, r22
    1cae:	82 9f       	mul	r24, r18
    1cb0:	22 27       	eor	r18, r18
    1cb2:	b0 0d       	add	r27, r0
    1cb4:	a1 1d       	adc	r26, r1
    1cb6:	62 1f       	adc	r22, r18
    1cb8:	73 9f       	mul	r23, r19
    1cba:	b0 0d       	add	r27, r0
    1cbc:	a1 1d       	adc	r26, r1
    1cbe:	62 1f       	adc	r22, r18
    1cc0:	83 9f       	mul	r24, r19
    1cc2:	a0 0d       	add	r26, r0
    1cc4:	61 1d       	adc	r22, r1
    1cc6:	22 1f       	adc	r18, r18
    1cc8:	74 9f       	mul	r23, r20
    1cca:	33 27       	eor	r19, r19
    1ccc:	a0 0d       	add	r26, r0
    1cce:	61 1d       	adc	r22, r1
    1cd0:	23 1f       	adc	r18, r19
    1cd2:	84 9f       	mul	r24, r20
    1cd4:	60 0d       	add	r22, r0
    1cd6:	21 1d       	adc	r18, r1
    1cd8:	82 2f       	mov	r24, r18
    1cda:	76 2f       	mov	r23, r22
    1cdc:	6a 2f       	mov	r22, r26
    1cde:	11 24       	eor	r1, r1
    1ce0:	9f 57       	subi	r25, 0x7F	; 127
    1ce2:	50 40       	sbci	r21, 0x00	; 0
    1ce4:	9a f0       	brmi	.+38     	; 0x1d0c <__mulsf3_pse+0x88>
    1ce6:	f1 f0       	breq	.+60     	; 0x1d24 <__mulsf3_pse+0xa0>
    1ce8:	88 23       	and	r24, r24
    1cea:	4a f0       	brmi	.+18     	; 0x1cfe <__mulsf3_pse+0x7a>
    1cec:	ee 0f       	add	r30, r30
    1cee:	ff 1f       	adc	r31, r31
    1cf0:	bb 1f       	adc	r27, r27
    1cf2:	66 1f       	adc	r22, r22
    1cf4:	77 1f       	adc	r23, r23
    1cf6:	88 1f       	adc	r24, r24
    1cf8:	91 50       	subi	r25, 0x01	; 1
    1cfa:	50 40       	sbci	r21, 0x00	; 0
    1cfc:	a9 f7       	brne	.-22     	; 0x1ce8 <__mulsf3_pse+0x64>
    1cfe:	9e 3f       	cpi	r25, 0xFE	; 254
    1d00:	51 05       	cpc	r21, r1
    1d02:	80 f0       	brcs	.+32     	; 0x1d24 <__mulsf3_pse+0xa0>
    1d04:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__fp_inf>
    1d08:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__fp_szero>
    1d0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d0e:	e4 f3       	brlt	.-8      	; 0x1d08 <__mulsf3_pse+0x84>
    1d10:	98 3e       	cpi	r25, 0xE8	; 232
    1d12:	d4 f3       	brlt	.-12     	; 0x1d08 <__mulsf3_pse+0x84>
    1d14:	86 95       	lsr	r24
    1d16:	77 95       	ror	r23
    1d18:	67 95       	ror	r22
    1d1a:	b7 95       	ror	r27
    1d1c:	f7 95       	ror	r31
    1d1e:	e7 95       	ror	r30
    1d20:	9f 5f       	subi	r25, 0xFF	; 255
    1d22:	c1 f7       	brne	.-16     	; 0x1d14 <__mulsf3_pse+0x90>
    1d24:	fe 2b       	or	r31, r30
    1d26:	88 0f       	add	r24, r24
    1d28:	91 1d       	adc	r25, r1
    1d2a:	96 95       	lsr	r25
    1d2c:	87 95       	ror	r24
    1d2e:	97 f9       	bld	r25, 7
    1d30:	08 95       	ret

00001d32 <__divmodhi4>:
    1d32:	97 fb       	bst	r25, 7
    1d34:	07 2e       	mov	r0, r23
    1d36:	16 f4       	brtc	.+4      	; 0x1d3c <__divmodhi4+0xa>
    1d38:	00 94       	com	r0
    1d3a:	07 d0       	rcall	.+14     	; 0x1d4a <__divmodhi4_neg1>
    1d3c:	77 fd       	sbrc	r23, 7
    1d3e:	09 d0       	rcall	.+18     	; 0x1d52 <__divmodhi4_neg2>
    1d40:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__udivmodhi4>
    1d44:	07 fc       	sbrc	r0, 7
    1d46:	05 d0       	rcall	.+10     	; 0x1d52 <__divmodhi4_neg2>
    1d48:	3e f4       	brtc	.+14     	; 0x1d58 <__divmodhi4_exit>

00001d4a <__divmodhi4_neg1>:
    1d4a:	90 95       	com	r25
    1d4c:	81 95       	neg	r24
    1d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d50:	08 95       	ret

00001d52 <__divmodhi4_neg2>:
    1d52:	70 95       	com	r23
    1d54:	61 95       	neg	r22
    1d56:	7f 4f       	sbci	r23, 0xFF	; 255

00001d58 <__divmodhi4_exit>:
    1d58:	08 95       	ret

00001d5a <__udivmodsi4>:
    1d5a:	a1 e2       	ldi	r26, 0x21	; 33
    1d5c:	1a 2e       	mov	r1, r26
    1d5e:	aa 1b       	sub	r26, r26
    1d60:	bb 1b       	sub	r27, r27
    1d62:	fd 01       	movw	r30, r26
    1d64:	0d c0       	rjmp	.+26     	; 0x1d80 <__udivmodsi4_ep>

00001d66 <__udivmodsi4_loop>:
    1d66:	aa 1f       	adc	r26, r26
    1d68:	bb 1f       	adc	r27, r27
    1d6a:	ee 1f       	adc	r30, r30
    1d6c:	ff 1f       	adc	r31, r31
    1d6e:	a2 17       	cp	r26, r18
    1d70:	b3 07       	cpc	r27, r19
    1d72:	e4 07       	cpc	r30, r20
    1d74:	f5 07       	cpc	r31, r21
    1d76:	20 f0       	brcs	.+8      	; 0x1d80 <__udivmodsi4_ep>
    1d78:	a2 1b       	sub	r26, r18
    1d7a:	b3 0b       	sbc	r27, r19
    1d7c:	e4 0b       	sbc	r30, r20
    1d7e:	f5 0b       	sbc	r31, r21

00001d80 <__udivmodsi4_ep>:
    1d80:	66 1f       	adc	r22, r22
    1d82:	77 1f       	adc	r23, r23
    1d84:	88 1f       	adc	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	1a 94       	dec	r1
    1d8a:	69 f7       	brne	.-38     	; 0x1d66 <__udivmodsi4_loop>
    1d8c:	60 95       	com	r22
    1d8e:	70 95       	com	r23
    1d90:	80 95       	com	r24
    1d92:	90 95       	com	r25
    1d94:	9b 01       	movw	r18, r22
    1d96:	ac 01       	movw	r20, r24
    1d98:	bd 01       	movw	r22, r26
    1d9a:	cf 01       	movw	r24, r30
    1d9c:	08 95       	ret

00001d9e <__divmodsi4>:
    1d9e:	05 2e       	mov	r0, r21
    1da0:	97 fb       	bst	r25, 7
    1da2:	1e f4       	brtc	.+6      	; 0x1daa <__divmodsi4+0xc>
    1da4:	00 94       	com	r0
    1da6:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__negsi2>
    1daa:	57 fd       	sbrc	r21, 7
    1dac:	07 d0       	rcall	.+14     	; 0x1dbc <__divmodsi4_neg2>
    1dae:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__udivmodsi4>
    1db2:	07 fc       	sbrc	r0, 7
    1db4:	03 d0       	rcall	.+6      	; 0x1dbc <__divmodsi4_neg2>
    1db6:	4e f4       	brtc	.+18     	; 0x1dca <__divmodsi4_exit>
    1db8:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <__negsi2>

00001dbc <__divmodsi4_neg2>:
    1dbc:	50 95       	com	r21
    1dbe:	40 95       	com	r20
    1dc0:	30 95       	com	r19
    1dc2:	21 95       	neg	r18
    1dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc6:	4f 4f       	sbci	r20, 0xFF	; 255
    1dc8:	5f 4f       	sbci	r21, 0xFF	; 255

00001dca <__divmodsi4_exit>:
    1dca:	08 95       	ret

00001dcc <__negsi2>:
    1dcc:	90 95       	com	r25
    1dce:	80 95       	com	r24
    1dd0:	70 95       	com	r23
    1dd2:	61 95       	neg	r22
    1dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	08 95       	ret

00001ddc <__umulhisi3>:
    1ddc:	a2 9f       	mul	r26, r18
    1dde:	b0 01       	movw	r22, r0
    1de0:	b3 9f       	mul	r27, r19
    1de2:	c0 01       	movw	r24, r0
    1de4:	a3 9f       	mul	r26, r19
    1de6:	70 0d       	add	r23, r0
    1de8:	81 1d       	adc	r24, r1
    1dea:	11 24       	eor	r1, r1
    1dec:	91 1d       	adc	r25, r1
    1dee:	b2 9f       	mul	r27, r18
    1df0:	70 0d       	add	r23, r0
    1df2:	81 1d       	adc	r24, r1
    1df4:	11 24       	eor	r1, r1
    1df6:	91 1d       	adc	r25, r1
    1df8:	08 95       	ret

00001dfa <__ashldi3>:
    1dfa:	0f 93       	push	r16
    1dfc:	08 30       	cpi	r16, 0x08	; 8
    1dfe:	90 f0       	brcs	.+36     	; 0x1e24 <__ashldi3+0x2a>
    1e00:	98 2f       	mov	r25, r24
    1e02:	87 2f       	mov	r24, r23
    1e04:	76 2f       	mov	r23, r22
    1e06:	65 2f       	mov	r22, r21
    1e08:	54 2f       	mov	r21, r20
    1e0a:	43 2f       	mov	r20, r19
    1e0c:	32 2f       	mov	r19, r18
    1e0e:	22 27       	eor	r18, r18
    1e10:	08 50       	subi	r16, 0x08	; 8
    1e12:	f4 cf       	rjmp	.-24     	; 0x1dfc <__ashldi3+0x2>
    1e14:	22 0f       	add	r18, r18
    1e16:	33 1f       	adc	r19, r19
    1e18:	44 1f       	adc	r20, r20
    1e1a:	55 1f       	adc	r21, r21
    1e1c:	66 1f       	adc	r22, r22
    1e1e:	77 1f       	adc	r23, r23
    1e20:	88 1f       	adc	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	0a 95       	dec	r16
    1e26:	b2 f7       	brpl	.-20     	; 0x1e14 <__ashldi3+0x1a>
    1e28:	0f 91       	pop	r16
    1e2a:	08 95       	ret

00001e2c <__ashrdi3>:
    1e2c:	97 fb       	bst	r25, 7
    1e2e:	10 f8       	bld	r1, 0

00001e30 <__lshrdi3>:
    1e30:	16 94       	lsr	r1
    1e32:	00 08       	sbc	r0, r0
    1e34:	0f 93       	push	r16
    1e36:	08 30       	cpi	r16, 0x08	; 8
    1e38:	98 f0       	brcs	.+38     	; 0x1e60 <__lshrdi3+0x30>
    1e3a:	08 50       	subi	r16, 0x08	; 8
    1e3c:	23 2f       	mov	r18, r19
    1e3e:	34 2f       	mov	r19, r20
    1e40:	45 2f       	mov	r20, r21
    1e42:	56 2f       	mov	r21, r22
    1e44:	67 2f       	mov	r22, r23
    1e46:	78 2f       	mov	r23, r24
    1e48:	89 2f       	mov	r24, r25
    1e4a:	90 2d       	mov	r25, r0
    1e4c:	f4 cf       	rjmp	.-24     	; 0x1e36 <__lshrdi3+0x6>
    1e4e:	05 94       	asr	r0
    1e50:	97 95       	ror	r25
    1e52:	87 95       	ror	r24
    1e54:	77 95       	ror	r23
    1e56:	67 95       	ror	r22
    1e58:	57 95       	ror	r21
    1e5a:	47 95       	ror	r20
    1e5c:	37 95       	ror	r19
    1e5e:	27 95       	ror	r18
    1e60:	0a 95       	dec	r16
    1e62:	aa f7       	brpl	.-22     	; 0x1e4e <__lshrdi3+0x1e>
    1e64:	0f 91       	pop	r16
    1e66:	08 95       	ret

00001e68 <__cmpdi2_s8>:
    1e68:	00 24       	eor	r0, r0
    1e6a:	a7 fd       	sbrc	r26, 7
    1e6c:	00 94       	com	r0
    1e6e:	2a 17       	cp	r18, r26
    1e70:	30 05       	cpc	r19, r0
    1e72:	40 05       	cpc	r20, r0
    1e74:	50 05       	cpc	r21, r0
    1e76:	60 05       	cpc	r22, r0
    1e78:	70 05       	cpc	r23, r0
    1e7a:	80 05       	cpc	r24, r0
    1e7c:	90 05       	cpc	r25, r0
    1e7e:	08 95       	ret

00001e80 <__udivmodhi4>:
    1e80:	aa 1b       	sub	r26, r26
    1e82:	bb 1b       	sub	r27, r27
    1e84:	51 e1       	ldi	r21, 0x11	; 17
    1e86:	07 c0       	rjmp	.+14     	; 0x1e96 <__udivmodhi4_ep>

00001e88 <__udivmodhi4_loop>:
    1e88:	aa 1f       	adc	r26, r26
    1e8a:	bb 1f       	adc	r27, r27
    1e8c:	a6 17       	cp	r26, r22
    1e8e:	b7 07       	cpc	r27, r23
    1e90:	10 f0       	brcs	.+4      	; 0x1e96 <__udivmodhi4_ep>
    1e92:	a6 1b       	sub	r26, r22
    1e94:	b7 0b       	sbc	r27, r23

00001e96 <__udivmodhi4_ep>:
    1e96:	88 1f       	adc	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	5a 95       	dec	r21
    1e9c:	a9 f7       	brne	.-22     	; 0x1e88 <__udivmodhi4_loop>
    1e9e:	80 95       	com	r24
    1ea0:	90 95       	com	r25
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	08 95       	ret

00001ea8 <strtol>:
    1ea8:	a0 e0       	ldi	r26, 0x00	; 0
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	ea e5       	ldi	r30, 0x5A	; 90
    1eae:	ff e0       	ldi	r31, 0x0F	; 15
    1eb0:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__prologue_saves__+0x2>
    1eb4:	5c 01       	movw	r10, r24
    1eb6:	6b 01       	movw	r12, r22
    1eb8:	7a 01       	movw	r14, r20
    1eba:	61 15       	cp	r22, r1
    1ebc:	71 05       	cpc	r23, r1
    1ebe:	19 f0       	breq	.+6      	; 0x1ec6 <strtol+0x1e>
    1ec0:	fb 01       	movw	r30, r22
    1ec2:	80 83       	st	Z, r24
    1ec4:	91 83       	std	Z+1, r25	; 0x01
    1ec6:	e1 14       	cp	r14, r1
    1ec8:	f1 04       	cpc	r15, r1
    1eca:	29 f0       	breq	.+10     	; 0x1ed6 <strtol+0x2e>
    1ecc:	c7 01       	movw	r24, r14
    1ece:	02 97       	sbiw	r24, 0x02	; 2
    1ed0:	83 97       	sbiw	r24, 0x23	; 35
    1ed2:	08 f0       	brcs	.+2      	; 0x1ed6 <strtol+0x2e>
    1ed4:	e5 c0       	rjmp	.+458    	; 0x20a0 <__DATA_REGION_LENGTH__+0xa0>
    1ed6:	e5 01       	movw	r28, r10
    1ed8:	21 96       	adiw	r28, 0x01	; 1
    1eda:	f5 01       	movw	r30, r10
    1edc:	10 81       	ld	r17, Z
    1ede:	81 2f       	mov	r24, r17
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <isspace>
    1ee6:	89 2b       	or	r24, r25
    1ee8:	11 f0       	breq	.+4      	; 0x1eee <strtol+0x46>
    1eea:	5e 01       	movw	r10, r28
    1eec:	f4 cf       	rjmp	.-24     	; 0x1ed6 <strtol+0x2e>
    1eee:	1d 32       	cpi	r17, 0x2D	; 45
    1ef0:	29 f4       	brne	.+10     	; 0x1efc <strtol+0x54>
    1ef2:	21 96       	adiw	r28, 0x01	; 1
    1ef4:	f5 01       	movw	r30, r10
    1ef6:	11 81       	ldd	r17, Z+1	; 0x01
    1ef8:	01 e0       	ldi	r16, 0x01	; 1
    1efa:	07 c0       	rjmp	.+14     	; 0x1f0a <strtol+0x62>
    1efc:	1b 32       	cpi	r17, 0x2B	; 43
    1efe:	21 f4       	brne	.+8      	; 0x1f08 <strtol+0x60>
    1f00:	e5 01       	movw	r28, r10
    1f02:	22 96       	adiw	r28, 0x02	; 2
    1f04:	f5 01       	movw	r30, r10
    1f06:	11 81       	ldd	r17, Z+1	; 0x01
    1f08:	00 e0       	ldi	r16, 0x00	; 0
    1f0a:	e1 14       	cp	r14, r1
    1f0c:	f1 04       	cpc	r15, r1
    1f0e:	09 f1       	breq	.+66     	; 0x1f52 <strtol+0xaa>
    1f10:	f0 e1       	ldi	r31, 0x10	; 16
    1f12:	ef 16       	cp	r14, r31
    1f14:	f1 04       	cpc	r15, r1
    1f16:	29 f4       	brne	.+10     	; 0x1f22 <strtol+0x7a>
    1f18:	3f c0       	rjmp	.+126    	; 0x1f98 <strtol+0xf0>
    1f1a:	10 e3       	ldi	r17, 0x30	; 48
    1f1c:	e1 14       	cp	r14, r1
    1f1e:	f1 04       	cpc	r15, r1
    1f20:	21 f1       	breq	.+72     	; 0x1f6a <strtol+0xc2>
    1f22:	28 e0       	ldi	r18, 0x08	; 8
    1f24:	e2 16       	cp	r14, r18
    1f26:	f1 04       	cpc	r15, r1
    1f28:	01 f1       	breq	.+64     	; 0x1f6a <strtol+0xc2>
    1f2a:	54 f4       	brge	.+20     	; 0x1f40 <strtol+0x98>
    1f2c:	e2 e0       	ldi	r30, 0x02	; 2
    1f2e:	ee 16       	cp	r14, r30
    1f30:	f1 04       	cpc	r15, r1
    1f32:	21 f5       	brne	.+72     	; 0x1f7c <strtol+0xd4>
    1f34:	81 2c       	mov	r8, r1
    1f36:	91 2c       	mov	r9, r1
    1f38:	a1 2c       	mov	r10, r1
    1f3a:	b0 e4       	ldi	r27, 0x40	; 64
    1f3c:	bb 2e       	mov	r11, r27
    1f3e:	3e c0       	rjmp	.+124    	; 0x1fbc <strtol+0x114>
    1f40:	fa e0       	ldi	r31, 0x0A	; 10
    1f42:	ef 16       	cp	r14, r31
    1f44:	f1 04       	cpc	r15, r1
    1f46:	39 f0       	breq	.+14     	; 0x1f56 <strtol+0xae>
    1f48:	20 e1       	ldi	r18, 0x10	; 16
    1f4a:	e2 16       	cp	r14, r18
    1f4c:	f1 04       	cpc	r15, r1
    1f4e:	b1 f4       	brne	.+44     	; 0x1f7c <strtol+0xd4>
    1f50:	30 c0       	rjmp	.+96     	; 0x1fb2 <strtol+0x10a>
    1f52:	10 33       	cpi	r17, 0x30	; 48
    1f54:	19 f1       	breq	.+70     	; 0x1f9c <strtol+0xf4>
    1f56:	fa e0       	ldi	r31, 0x0A	; 10
    1f58:	ef 2e       	mov	r14, r31
    1f5a:	f1 2c       	mov	r15, r1
    1f5c:	ac ec       	ldi	r26, 0xCC	; 204
    1f5e:	8a 2e       	mov	r8, r26
    1f60:	98 2c       	mov	r9, r8
    1f62:	a8 2c       	mov	r10, r8
    1f64:	ac e0       	ldi	r26, 0x0C	; 12
    1f66:	ba 2e       	mov	r11, r26
    1f68:	29 c0       	rjmp	.+82     	; 0x1fbc <strtol+0x114>
    1f6a:	78 e0       	ldi	r23, 0x08	; 8
    1f6c:	e7 2e       	mov	r14, r23
    1f6e:	f1 2c       	mov	r15, r1
    1f70:	81 2c       	mov	r8, r1
    1f72:	91 2c       	mov	r9, r1
    1f74:	a1 2c       	mov	r10, r1
    1f76:	e0 e1       	ldi	r30, 0x10	; 16
    1f78:	be 2e       	mov	r11, r30
    1f7a:	20 c0       	rjmp	.+64     	; 0x1fbc <strtol+0x114>
    1f7c:	60 e0       	ldi	r22, 0x00	; 0
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	90 e8       	ldi	r25, 0x80	; 128
    1f84:	97 01       	movw	r18, r14
    1f86:	0f 2c       	mov	r0, r15
    1f88:	00 0c       	add	r0, r0
    1f8a:	44 0b       	sbc	r20, r20
    1f8c:	55 0b       	sbc	r21, r21
    1f8e:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__udivmodsi4>
    1f92:	49 01       	movw	r8, r18
    1f94:	5a 01       	movw	r10, r20
    1f96:	12 c0       	rjmp	.+36     	; 0x1fbc <strtol+0x114>
    1f98:	10 33       	cpi	r17, 0x30	; 48
    1f9a:	59 f4       	brne	.+22     	; 0x1fb2 <strtol+0x10a>
    1f9c:	88 81       	ld	r24, Y
    1f9e:	8f 7d       	andi	r24, 0xDF	; 223
    1fa0:	88 35       	cpi	r24, 0x58	; 88
    1fa2:	09 f0       	breq	.+2      	; 0x1fa6 <strtol+0xfe>
    1fa4:	ba cf       	rjmp	.-140    	; 0x1f1a <strtol+0x72>
    1fa6:	19 81       	ldd	r17, Y+1	; 0x01
    1fa8:	22 96       	adiw	r28, 0x02	; 2
    1faa:	02 60       	ori	r16, 0x02	; 2
    1fac:	80 e1       	ldi	r24, 0x10	; 16
    1fae:	e8 2e       	mov	r14, r24
    1fb0:	f1 2c       	mov	r15, r1
    1fb2:	81 2c       	mov	r8, r1
    1fb4:	91 2c       	mov	r9, r1
    1fb6:	a1 2c       	mov	r10, r1
    1fb8:	68 e0       	ldi	r22, 0x08	; 8
    1fba:	b6 2e       	mov	r11, r22
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	60 e0       	ldi	r22, 0x00	; 0
    1fc0:	70 e0       	ldi	r23, 0x00	; 0
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	27 01       	movw	r4, r14
    1fc6:	0f 2c       	mov	r0, r15
    1fc8:	00 0c       	add	r0, r0
    1fca:	66 08       	sbc	r6, r6
    1fcc:	77 08       	sbc	r7, r7
    1fce:	fe 01       	movw	r30, r28
    1fd0:	50 ed       	ldi	r21, 0xD0	; 208
    1fd2:	35 2e       	mov	r3, r21
    1fd4:	31 0e       	add	r3, r17
    1fd6:	29 e0       	ldi	r18, 0x09	; 9
    1fd8:	23 15       	cp	r18, r3
    1fda:	70 f4       	brcc	.+28     	; 0x1ff8 <strtol+0x150>
    1fdc:	2f eb       	ldi	r18, 0xBF	; 191
    1fde:	21 0f       	add	r18, r17
    1fe0:	2a 31       	cpi	r18, 0x1A	; 26
    1fe2:	18 f4       	brcc	.+6      	; 0x1fea <strtol+0x142>
    1fe4:	39 ec       	ldi	r19, 0xC9	; 201
    1fe6:	33 2e       	mov	r3, r19
    1fe8:	06 c0       	rjmp	.+12     	; 0x1ff6 <strtol+0x14e>
    1fea:	2f e9       	ldi	r18, 0x9F	; 159
    1fec:	21 0f       	add	r18, r17
    1fee:	2a 31       	cpi	r18, 0x1A	; 26
    1ff0:	18 f5       	brcc	.+70     	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    1ff2:	29 ea       	ldi	r18, 0xA9	; 169
    1ff4:	32 2e       	mov	r3, r18
    1ff6:	31 0e       	add	r3, r17
    1ff8:	23 2d       	mov	r18, r3
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	2e 15       	cp	r18, r14
    1ffe:	3f 05       	cpc	r19, r15
    2000:	dc f4       	brge	.+54     	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    2002:	47 fd       	sbrc	r20, 7
    2004:	16 c0       	rjmp	.+44     	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    2006:	86 16       	cp	r8, r22
    2008:	97 06       	cpc	r9, r23
    200a:	a8 06       	cpc	r10, r24
    200c:	b9 06       	cpc	r11, r25
    200e:	70 f0       	brcs	.+28     	; 0x202c <__DATA_REGION_LENGTH__+0x2c>
    2010:	a3 01       	movw	r20, r6
    2012:	92 01       	movw	r18, r4
    2014:	0e 94 9b 13 	call	0x2736	; 0x2736 <__mulsi3>
    2018:	63 0d       	add	r22, r3
    201a:	71 1d       	adc	r23, r1
    201c:	81 1d       	adc	r24, r1
    201e:	91 1d       	adc	r25, r1
    2020:	61 30       	cpi	r22, 0x01	; 1
    2022:	71 05       	cpc	r23, r1
    2024:	81 05       	cpc	r24, r1
    2026:	20 e8       	ldi	r18, 0x80	; 128
    2028:	92 07       	cpc	r25, r18
    202a:	10 f0       	brcs	.+4      	; 0x2030 <__DATA_REGION_LENGTH__+0x30>
    202c:	4f ef       	ldi	r20, 0xFF	; 255
    202e:	01 c0       	rjmp	.+2      	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    2030:	41 e0       	ldi	r20, 0x01	; 1
    2032:	21 96       	adiw	r28, 0x01	; 1
    2034:	10 81       	ld	r17, Z
    2036:	cb cf       	rjmp	.-106    	; 0x1fce <strtol+0x126>
    2038:	20 2f       	mov	r18, r16
    203a:	21 70       	andi	r18, 0x01	; 1
    203c:	c1 14       	cp	r12, r1
    203e:	d1 04       	cpc	r13, r1
    2040:	71 f0       	breq	.+28     	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    2042:	44 23       	and	r20, r20
    2044:	29 f0       	breq	.+10     	; 0x2050 <__DATA_REGION_LENGTH__+0x50>
    2046:	21 97       	sbiw	r28, 0x01	; 1
    2048:	f6 01       	movw	r30, r12
    204a:	c0 83       	st	Z, r28
    204c:	d1 83       	std	Z+1, r29	; 0x01
    204e:	07 c0       	rjmp	.+14     	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    2050:	01 ff       	sbrs	r16, 1
    2052:	19 c0       	rjmp	.+50     	; 0x2086 <__DATA_REGION_LENGTH__+0x86>
    2054:	22 97       	sbiw	r28, 0x02	; 2
    2056:	f6 01       	movw	r30, r12
    2058:	c0 83       	st	Z, r28
    205a:	d1 83       	std	Z+1, r29	; 0x01
    205c:	14 c0       	rjmp	.+40     	; 0x2086 <__DATA_REGION_LENGTH__+0x86>
    205e:	47 ff       	sbrs	r20, 7
    2060:	12 c0       	rjmp	.+36     	; 0x2086 <__DATA_REGION_LENGTH__+0x86>
    2062:	22 23       	and	r18, r18
    2064:	29 f0       	breq	.+10     	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	70 e0       	ldi	r23, 0x00	; 0
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e8       	ldi	r25, 0x80	; 128
    206e:	04 c0       	rjmp	.+8      	; 0x2078 <__DATA_REGION_LENGTH__+0x78>
    2070:	6f ef       	ldi	r22, 0xFF	; 255
    2072:	7f ef       	ldi	r23, 0xFF	; 255
    2074:	8f ef       	ldi	r24, 0xFF	; 255
    2076:	9f e7       	ldi	r25, 0x7F	; 127
    2078:	22 e2       	ldi	r18, 0x22	; 34
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	20 93 e0 65 	sts	0x65E0, r18	; 0x8065e0 <errno>
    2080:	30 93 e1 65 	sts	0x65E1, r19	; 0x8065e1 <errno+0x1>
    2084:	09 c0       	rjmp	.+18     	; 0x2098 <__DATA_REGION_LENGTH__+0x98>
    2086:	22 23       	and	r18, r18
    2088:	81 f0       	breq	.+32     	; 0x20aa <__DATA_REGION_LENGTH__+0xaa>
    208a:	90 95       	com	r25
    208c:	80 95       	com	r24
    208e:	70 95       	com	r23
    2090:	61 95       	neg	r22
    2092:	7f 4f       	sbci	r23, 0xFF	; 255
    2094:	8f 4f       	sbci	r24, 0xFF	; 255
    2096:	9f 4f       	sbci	r25, 0xFF	; 255
    2098:	46 2f       	mov	r20, r22
    209a:	37 2f       	mov	r19, r23
    209c:	28 2f       	mov	r18, r24
    209e:	12 c0       	rjmp	.+36     	; 0x20c4 <__DATA_REGION_LENGTH__+0xc4>
    20a0:	40 e0       	ldi	r20, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0d c0       	rjmp	.+26     	; 0x20c4 <__DATA_REGION_LENGTH__+0xc4>
    20aa:	97 ff       	sbrs	r25, 7
    20ac:	f5 cf       	rjmp	.-22     	; 0x2098 <__DATA_REGION_LENGTH__+0x98>
    20ae:	82 e2       	ldi	r24, 0x22	; 34
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	80 93 e0 65 	sts	0x65E0, r24	; 0x8065e0 <errno>
    20b6:	90 93 e1 65 	sts	0x65E1, r25	; 0x8065e1 <errno+0x1>
    20ba:	6f ef       	ldi	r22, 0xFF	; 255
    20bc:	7f ef       	ldi	r23, 0xFF	; 255
    20be:	8f ef       	ldi	r24, 0xFF	; 255
    20c0:	9f e7       	ldi	r25, 0x7F	; 127
    20c2:	ea cf       	rjmp	.-44     	; 0x2098 <__DATA_REGION_LENGTH__+0x98>
    20c4:	64 2f       	mov	r22, r20
    20c6:	73 2f       	mov	r23, r19
    20c8:	82 2f       	mov	r24, r18
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	e1 e1       	ldi	r30, 0x11	; 17
    20d0:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__epilogue_restores__+0x2>

000020d4 <isspace>:
    20d4:	91 11       	cpse	r25, r1
    20d6:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <__ctype_isfalse>
    20da:	80 32       	cpi	r24, 0x20	; 32
    20dc:	19 f0       	breq	.+6      	; 0x20e4 <isspace+0x10>
    20de:	89 50       	subi	r24, 0x09	; 9
    20e0:	85 50       	subi	r24, 0x05	; 5
    20e2:	c8 f7       	brcc	.-14     	; 0x20d6 <isspace+0x2>
    20e4:	08 95       	ret

000020e6 <strtok>:
    20e6:	46 e6       	ldi	r20, 0x66	; 102
    20e8:	55 e6       	ldi	r21, 0x65	; 101
    20ea:	0e 94 ae 10 	call	0x215c	; 0x215c <strtok_r>
    20ee:	08 95       	ret

000020f0 <memcpy>:
    20f0:	fb 01       	movw	r30, r22
    20f2:	dc 01       	movw	r26, r24
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <memcpy+0xa>
    20f6:	01 90       	ld	r0, Z+
    20f8:	0d 92       	st	X+, r0
    20fa:	41 50       	subi	r20, 0x01	; 1
    20fc:	50 40       	sbci	r21, 0x00	; 0
    20fe:	d8 f7       	brcc	.-10     	; 0x20f6 <memcpy+0x6>
    2100:	08 95       	ret

00002102 <strcmp>:
    2102:	fb 01       	movw	r30, r22
    2104:	dc 01       	movw	r26, r24
    2106:	8d 91       	ld	r24, X+
    2108:	01 90       	ld	r0, Z+
    210a:	80 19       	sub	r24, r0
    210c:	01 10       	cpse	r0, r1
    210e:	d9 f3       	breq	.-10     	; 0x2106 <strcmp+0x4>
    2110:	99 0b       	sbc	r25, r25
    2112:	08 95       	ret

00002114 <strcpy>:
    2114:	fb 01       	movw	r30, r22
    2116:	dc 01       	movw	r26, r24
    2118:	01 90       	ld	r0, Z+
    211a:	0d 92       	st	X+, r0
    211c:	00 20       	and	r0, r0
    211e:	e1 f7       	brne	.-8      	; 0x2118 <strcpy+0x4>
    2120:	08 95       	ret

00002122 <strncmp>:
    2122:	fb 01       	movw	r30, r22
    2124:	dc 01       	movw	r26, r24
    2126:	41 50       	subi	r20, 0x01	; 1
    2128:	50 40       	sbci	r21, 0x00	; 0
    212a:	30 f0       	brcs	.+12     	; 0x2138 <strncmp+0x16>
    212c:	8d 91       	ld	r24, X+
    212e:	01 90       	ld	r0, Z+
    2130:	80 19       	sub	r24, r0
    2132:	19 f4       	brne	.+6      	; 0x213a <strncmp+0x18>
    2134:	00 20       	and	r0, r0
    2136:	b9 f7       	brne	.-18     	; 0x2126 <strncmp+0x4>
    2138:	88 1b       	sub	r24, r24
    213a:	99 0b       	sbc	r25, r25
    213c:	08 95       	ret

0000213e <strncpy>:
    213e:	fb 01       	movw	r30, r22
    2140:	dc 01       	movw	r26, r24
    2142:	41 50       	subi	r20, 0x01	; 1
    2144:	50 40       	sbci	r21, 0x00	; 0
    2146:	48 f0       	brcs	.+18     	; 0x215a <strncpy+0x1c>
    2148:	01 90       	ld	r0, Z+
    214a:	0d 92       	st	X+, r0
    214c:	00 20       	and	r0, r0
    214e:	c9 f7       	brne	.-14     	; 0x2142 <strncpy+0x4>
    2150:	01 c0       	rjmp	.+2      	; 0x2154 <strncpy+0x16>
    2152:	1d 92       	st	X+, r1
    2154:	41 50       	subi	r20, 0x01	; 1
    2156:	50 40       	sbci	r21, 0x00	; 0
    2158:	e0 f7       	brcc	.-8      	; 0x2152 <strncpy+0x14>
    215a:	08 95       	ret

0000215c <strtok_r>:
    215c:	fa 01       	movw	r30, r20
    215e:	a1 91       	ld	r26, Z+
    2160:	b0 81       	ld	r27, Z
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	19 f4       	brne	.+6      	; 0x216c <strtok_r+0x10>
    2166:	10 97       	sbiw	r26, 0x00	; 0
    2168:	e1 f0       	breq	.+56     	; 0x21a2 <strtok_r+0x46>
    216a:	cd 01       	movw	r24, r26
    216c:	dc 01       	movw	r26, r24
    216e:	cd 01       	movw	r24, r26
    2170:	0d 90       	ld	r0, X+
    2172:	00 20       	and	r0, r0
    2174:	11 f4       	brne	.+4      	; 0x217a <strtok_r+0x1e>
    2176:	c0 01       	movw	r24, r0
    2178:	13 c0       	rjmp	.+38     	; 0x21a0 <strtok_r+0x44>
    217a:	fb 01       	movw	r30, r22
    217c:	21 91       	ld	r18, Z+
    217e:	22 23       	and	r18, r18
    2180:	19 f0       	breq	.+6      	; 0x2188 <strtok_r+0x2c>
    2182:	20 15       	cp	r18, r0
    2184:	d9 f7       	brne	.-10     	; 0x217c <strtok_r+0x20>
    2186:	f3 cf       	rjmp	.-26     	; 0x216e <strtok_r+0x12>
    2188:	fb 01       	movw	r30, r22
    218a:	21 91       	ld	r18, Z+
    218c:	20 15       	cp	r18, r0
    218e:	19 f4       	brne	.+6      	; 0x2196 <strtok_r+0x3a>
    2190:	1e 92       	st	-X, r1
    2192:	11 96       	adiw	r26, 0x01	; 1
    2194:	06 c0       	rjmp	.+12     	; 0x21a2 <strtok_r+0x46>
    2196:	22 23       	and	r18, r18
    2198:	c1 f7       	brne	.-16     	; 0x218a <strtok_r+0x2e>
    219a:	0d 90       	ld	r0, X+
    219c:	00 20       	and	r0, r0
    219e:	a1 f7       	brne	.-24     	; 0x2188 <strtok_r+0x2c>
    21a0:	d0 01       	movw	r26, r0
    21a2:	fa 01       	movw	r30, r20
    21a4:	a1 93       	st	Z+, r26
    21a6:	b0 83       	st	Z, r27
    21a8:	08 95       	ret

000021aa <vsnprintf>:
    21aa:	ae e0       	ldi	r26, 0x0E	; 14
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	eb ed       	ldi	r30, 0xDB	; 219
    21b0:	f0 e1       	ldi	r31, 0x10	; 16
    21b2:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__prologue_saves__+0x1c>
    21b6:	8c 01       	movw	r16, r24
    21b8:	fa 01       	movw	r30, r20
    21ba:	86 e0       	ldi	r24, 0x06	; 6
    21bc:	8c 83       	std	Y+4, r24	; 0x04
    21be:	09 83       	std	Y+1, r16	; 0x01
    21c0:	1a 83       	std	Y+2, r17	; 0x02
    21c2:	77 ff       	sbrs	r23, 7
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <vsnprintf+0x20>
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	70 e8       	ldi	r23, 0x80	; 128
    21ca:	cb 01       	movw	r24, r22
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	8d 83       	std	Y+5, r24	; 0x05
    21d0:	9e 83       	std	Y+6, r25	; 0x06
    21d2:	a9 01       	movw	r20, r18
    21d4:	bf 01       	movw	r22, r30
    21d6:	ce 01       	movw	r24, r28
    21d8:	01 96       	adiw	r24, 0x01	; 1
    21da:	0e 94 01 11 	call	0x2202	; 0x2202 <vfprintf>
    21de:	4d 81       	ldd	r20, Y+5	; 0x05
    21e0:	5e 81       	ldd	r21, Y+6	; 0x06
    21e2:	57 fd       	sbrc	r21, 7
    21e4:	0a c0       	rjmp	.+20     	; 0x21fa <vsnprintf+0x50>
    21e6:	2f 81       	ldd	r18, Y+7	; 0x07
    21e8:	38 85       	ldd	r19, Y+8	; 0x08
    21ea:	42 17       	cp	r20, r18
    21ec:	53 07       	cpc	r21, r19
    21ee:	0c f4       	brge	.+2      	; 0x21f2 <vsnprintf+0x48>
    21f0:	9a 01       	movw	r18, r20
    21f2:	f8 01       	movw	r30, r16
    21f4:	e2 0f       	add	r30, r18
    21f6:	f3 1f       	adc	r31, r19
    21f8:	10 82       	st	Z, r1
    21fa:	2e 96       	adiw	r28, 0x0e	; 14
    21fc:	e4 e0       	ldi	r30, 0x04	; 4
    21fe:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__epilogue_restores__+0x1c>

00002202 <vfprintf>:
    2202:	ab e0       	ldi	r26, 0x0B	; 11
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e7 e0       	ldi	r30, 0x07	; 7
    2208:	f1 e1       	ldi	r31, 0x11	; 17
    220a:	0c 94 b6 13 	jmp	0x276c	; 0x276c <__prologue_saves__>
    220e:	6c 01       	movw	r12, r24
    2210:	7b 01       	movw	r14, r22
    2212:	8a 01       	movw	r16, r20
    2214:	fc 01       	movw	r30, r24
    2216:	16 82       	std	Z+6, r1	; 0x06
    2218:	17 82       	std	Z+7, r1	; 0x07
    221a:	83 81       	ldd	r24, Z+3	; 0x03
    221c:	81 ff       	sbrs	r24, 1
    221e:	cc c1       	rjmp	.+920    	; 0x25b8 <vfprintf+0x3b6>
    2220:	ce 01       	movw	r24, r28
    2222:	01 96       	adiw	r24, 0x01	; 1
    2224:	3c 01       	movw	r6, r24
    2226:	f6 01       	movw	r30, r12
    2228:	93 81       	ldd	r25, Z+3	; 0x03
    222a:	f7 01       	movw	r30, r14
    222c:	93 fd       	sbrc	r25, 3
    222e:	85 91       	lpm	r24, Z+
    2230:	93 ff       	sbrs	r25, 3
    2232:	81 91       	ld	r24, Z+
    2234:	7f 01       	movw	r14, r30
    2236:	88 23       	and	r24, r24
    2238:	09 f4       	brne	.+2      	; 0x223c <vfprintf+0x3a>
    223a:	ba c1       	rjmp	.+884    	; 0x25b0 <vfprintf+0x3ae>
    223c:	85 32       	cpi	r24, 0x25	; 37
    223e:	39 f4       	brne	.+14     	; 0x224e <vfprintf+0x4c>
    2240:	93 fd       	sbrc	r25, 3
    2242:	85 91       	lpm	r24, Z+
    2244:	93 ff       	sbrs	r25, 3
    2246:	81 91       	ld	r24, Z+
    2248:	7f 01       	movw	r14, r30
    224a:	85 32       	cpi	r24, 0x25	; 37
    224c:	29 f4       	brne	.+10     	; 0x2258 <vfprintf+0x56>
    224e:	b6 01       	movw	r22, r12
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <fputc>
    2256:	e7 cf       	rjmp	.-50     	; 0x2226 <vfprintf+0x24>
    2258:	91 2c       	mov	r9, r1
    225a:	21 2c       	mov	r2, r1
    225c:	31 2c       	mov	r3, r1
    225e:	ff e1       	ldi	r31, 0x1F	; 31
    2260:	f3 15       	cp	r31, r3
    2262:	d8 f0       	brcs	.+54     	; 0x229a <vfprintf+0x98>
    2264:	8b 32       	cpi	r24, 0x2B	; 43
    2266:	79 f0       	breq	.+30     	; 0x2286 <vfprintf+0x84>
    2268:	38 f4       	brcc	.+14     	; 0x2278 <vfprintf+0x76>
    226a:	80 32       	cpi	r24, 0x20	; 32
    226c:	79 f0       	breq	.+30     	; 0x228c <vfprintf+0x8a>
    226e:	83 32       	cpi	r24, 0x23	; 35
    2270:	a1 f4       	brne	.+40     	; 0x229a <vfprintf+0x98>
    2272:	23 2d       	mov	r18, r3
    2274:	20 61       	ori	r18, 0x10	; 16
    2276:	1d c0       	rjmp	.+58     	; 0x22b2 <vfprintf+0xb0>
    2278:	8d 32       	cpi	r24, 0x2D	; 45
    227a:	61 f0       	breq	.+24     	; 0x2294 <vfprintf+0x92>
    227c:	80 33       	cpi	r24, 0x30	; 48
    227e:	69 f4       	brne	.+26     	; 0x229a <vfprintf+0x98>
    2280:	23 2d       	mov	r18, r3
    2282:	21 60       	ori	r18, 0x01	; 1
    2284:	16 c0       	rjmp	.+44     	; 0x22b2 <vfprintf+0xb0>
    2286:	83 2d       	mov	r24, r3
    2288:	82 60       	ori	r24, 0x02	; 2
    228a:	38 2e       	mov	r3, r24
    228c:	e3 2d       	mov	r30, r3
    228e:	e4 60       	ori	r30, 0x04	; 4
    2290:	3e 2e       	mov	r3, r30
    2292:	2a c0       	rjmp	.+84     	; 0x22e8 <vfprintf+0xe6>
    2294:	f3 2d       	mov	r31, r3
    2296:	f8 60       	ori	r31, 0x08	; 8
    2298:	1d c0       	rjmp	.+58     	; 0x22d4 <vfprintf+0xd2>
    229a:	37 fc       	sbrc	r3, 7
    229c:	2d c0       	rjmp	.+90     	; 0x22f8 <vfprintf+0xf6>
    229e:	20 ed       	ldi	r18, 0xD0	; 208
    22a0:	28 0f       	add	r18, r24
    22a2:	2a 30       	cpi	r18, 0x0A	; 10
    22a4:	40 f0       	brcs	.+16     	; 0x22b6 <vfprintf+0xb4>
    22a6:	8e 32       	cpi	r24, 0x2E	; 46
    22a8:	b9 f4       	brne	.+46     	; 0x22d8 <vfprintf+0xd6>
    22aa:	36 fc       	sbrc	r3, 6
    22ac:	81 c1       	rjmp	.+770    	; 0x25b0 <vfprintf+0x3ae>
    22ae:	23 2d       	mov	r18, r3
    22b0:	20 64       	ori	r18, 0x40	; 64
    22b2:	32 2e       	mov	r3, r18
    22b4:	19 c0       	rjmp	.+50     	; 0x22e8 <vfprintf+0xe6>
    22b6:	36 fe       	sbrs	r3, 6
    22b8:	06 c0       	rjmp	.+12     	; 0x22c6 <vfprintf+0xc4>
    22ba:	8a e0       	ldi	r24, 0x0A	; 10
    22bc:	98 9e       	mul	r9, r24
    22be:	20 0d       	add	r18, r0
    22c0:	11 24       	eor	r1, r1
    22c2:	92 2e       	mov	r9, r18
    22c4:	11 c0       	rjmp	.+34     	; 0x22e8 <vfprintf+0xe6>
    22c6:	ea e0       	ldi	r30, 0x0A	; 10
    22c8:	2e 9e       	mul	r2, r30
    22ca:	20 0d       	add	r18, r0
    22cc:	11 24       	eor	r1, r1
    22ce:	22 2e       	mov	r2, r18
    22d0:	f3 2d       	mov	r31, r3
    22d2:	f0 62       	ori	r31, 0x20	; 32
    22d4:	3f 2e       	mov	r3, r31
    22d6:	08 c0       	rjmp	.+16     	; 0x22e8 <vfprintf+0xe6>
    22d8:	8c 36       	cpi	r24, 0x6C	; 108
    22da:	21 f4       	brne	.+8      	; 0x22e4 <vfprintf+0xe2>
    22dc:	83 2d       	mov	r24, r3
    22de:	80 68       	ori	r24, 0x80	; 128
    22e0:	38 2e       	mov	r3, r24
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <vfprintf+0xe6>
    22e4:	88 36       	cpi	r24, 0x68	; 104
    22e6:	41 f4       	brne	.+16     	; 0x22f8 <vfprintf+0xf6>
    22e8:	f7 01       	movw	r30, r14
    22ea:	93 fd       	sbrc	r25, 3
    22ec:	85 91       	lpm	r24, Z+
    22ee:	93 ff       	sbrs	r25, 3
    22f0:	81 91       	ld	r24, Z+
    22f2:	7f 01       	movw	r14, r30
    22f4:	81 11       	cpse	r24, r1
    22f6:	b3 cf       	rjmp	.-154    	; 0x225e <vfprintf+0x5c>
    22f8:	98 2f       	mov	r25, r24
    22fa:	9f 7d       	andi	r25, 0xDF	; 223
    22fc:	95 54       	subi	r25, 0x45	; 69
    22fe:	93 30       	cpi	r25, 0x03	; 3
    2300:	28 f4       	brcc	.+10     	; 0x230c <vfprintf+0x10a>
    2302:	0c 5f       	subi	r16, 0xFC	; 252
    2304:	1f 4f       	sbci	r17, 0xFF	; 255
    2306:	9f e3       	ldi	r25, 0x3F	; 63
    2308:	99 83       	std	Y+1, r25	; 0x01
    230a:	0d c0       	rjmp	.+26     	; 0x2326 <vfprintf+0x124>
    230c:	83 36       	cpi	r24, 0x63	; 99
    230e:	31 f0       	breq	.+12     	; 0x231c <vfprintf+0x11a>
    2310:	83 37       	cpi	r24, 0x73	; 115
    2312:	71 f0       	breq	.+28     	; 0x2330 <vfprintf+0x12e>
    2314:	83 35       	cpi	r24, 0x53	; 83
    2316:	09 f0       	breq	.+2      	; 0x231a <vfprintf+0x118>
    2318:	59 c0       	rjmp	.+178    	; 0x23cc <vfprintf+0x1ca>
    231a:	21 c0       	rjmp	.+66     	; 0x235e <vfprintf+0x15c>
    231c:	f8 01       	movw	r30, r16
    231e:	80 81       	ld	r24, Z
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	0e 5f       	subi	r16, 0xFE	; 254
    2324:	1f 4f       	sbci	r17, 0xFF	; 255
    2326:	88 24       	eor	r8, r8
    2328:	83 94       	inc	r8
    232a:	91 2c       	mov	r9, r1
    232c:	53 01       	movw	r10, r6
    232e:	13 c0       	rjmp	.+38     	; 0x2356 <vfprintf+0x154>
    2330:	28 01       	movw	r4, r16
    2332:	f2 e0       	ldi	r31, 0x02	; 2
    2334:	4f 0e       	add	r4, r31
    2336:	51 1c       	adc	r5, r1
    2338:	f8 01       	movw	r30, r16
    233a:	a0 80       	ld	r10, Z
    233c:	b1 80       	ldd	r11, Z+1	; 0x01
    233e:	36 fe       	sbrs	r3, 6
    2340:	03 c0       	rjmp	.+6      	; 0x2348 <vfprintf+0x146>
    2342:	69 2d       	mov	r22, r9
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	02 c0       	rjmp	.+4      	; 0x234c <vfprintf+0x14a>
    2348:	6f ef       	ldi	r22, 0xFF	; 255
    234a:	7f ef       	ldi	r23, 0xFF	; 255
    234c:	c5 01       	movw	r24, r10
    234e:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <strnlen>
    2352:	4c 01       	movw	r8, r24
    2354:	82 01       	movw	r16, r4
    2356:	f3 2d       	mov	r31, r3
    2358:	ff 77       	andi	r31, 0x7F	; 127
    235a:	3f 2e       	mov	r3, r31
    235c:	16 c0       	rjmp	.+44     	; 0x238a <vfprintf+0x188>
    235e:	28 01       	movw	r4, r16
    2360:	22 e0       	ldi	r18, 0x02	; 2
    2362:	42 0e       	add	r4, r18
    2364:	51 1c       	adc	r5, r1
    2366:	f8 01       	movw	r30, r16
    2368:	a0 80       	ld	r10, Z
    236a:	b1 80       	ldd	r11, Z+1	; 0x01
    236c:	36 fe       	sbrs	r3, 6
    236e:	03 c0       	rjmp	.+6      	; 0x2376 <vfprintf+0x174>
    2370:	69 2d       	mov	r22, r9
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	02 c0       	rjmp	.+4      	; 0x237a <vfprintf+0x178>
    2376:	6f ef       	ldi	r22, 0xFF	; 255
    2378:	7f ef       	ldi	r23, 0xFF	; 255
    237a:	c5 01       	movw	r24, r10
    237c:	0e 94 e5 12 	call	0x25ca	; 0x25ca <strnlen_P>
    2380:	4c 01       	movw	r8, r24
    2382:	f3 2d       	mov	r31, r3
    2384:	f0 68       	ori	r31, 0x80	; 128
    2386:	3f 2e       	mov	r3, r31
    2388:	82 01       	movw	r16, r4
    238a:	33 fc       	sbrc	r3, 3
    238c:	1b c0       	rjmp	.+54     	; 0x23c4 <vfprintf+0x1c2>
    238e:	82 2d       	mov	r24, r2
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	88 16       	cp	r8, r24
    2394:	99 06       	cpc	r9, r25
    2396:	b0 f4       	brcc	.+44     	; 0x23c4 <vfprintf+0x1c2>
    2398:	b6 01       	movw	r22, r12
    239a:	80 e2       	ldi	r24, 0x20	; 32
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <fputc>
    23a2:	2a 94       	dec	r2
    23a4:	f4 cf       	rjmp	.-24     	; 0x238e <vfprintf+0x18c>
    23a6:	f5 01       	movw	r30, r10
    23a8:	37 fc       	sbrc	r3, 7
    23aa:	85 91       	lpm	r24, Z+
    23ac:	37 fe       	sbrs	r3, 7
    23ae:	81 91       	ld	r24, Z+
    23b0:	5f 01       	movw	r10, r30
    23b2:	b6 01       	movw	r22, r12
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <fputc>
    23ba:	21 10       	cpse	r2, r1
    23bc:	2a 94       	dec	r2
    23be:	21 e0       	ldi	r18, 0x01	; 1
    23c0:	82 1a       	sub	r8, r18
    23c2:	91 08       	sbc	r9, r1
    23c4:	81 14       	cp	r8, r1
    23c6:	91 04       	cpc	r9, r1
    23c8:	71 f7       	brne	.-36     	; 0x23a6 <vfprintf+0x1a4>
    23ca:	e8 c0       	rjmp	.+464    	; 0x259c <vfprintf+0x39a>
    23cc:	84 36       	cpi	r24, 0x64	; 100
    23ce:	11 f0       	breq	.+4      	; 0x23d4 <vfprintf+0x1d2>
    23d0:	89 36       	cpi	r24, 0x69	; 105
    23d2:	41 f5       	brne	.+80     	; 0x2424 <vfprintf+0x222>
    23d4:	f8 01       	movw	r30, r16
    23d6:	37 fe       	sbrs	r3, 7
    23d8:	07 c0       	rjmp	.+14     	; 0x23e8 <vfprintf+0x1e6>
    23da:	60 81       	ld	r22, Z
    23dc:	71 81       	ldd	r23, Z+1	; 0x01
    23de:	82 81       	ldd	r24, Z+2	; 0x02
    23e0:	93 81       	ldd	r25, Z+3	; 0x03
    23e2:	0c 5f       	subi	r16, 0xFC	; 252
    23e4:	1f 4f       	sbci	r17, 0xFF	; 255
    23e6:	08 c0       	rjmp	.+16     	; 0x23f8 <vfprintf+0x1f6>
    23e8:	60 81       	ld	r22, Z
    23ea:	71 81       	ldd	r23, Z+1	; 0x01
    23ec:	07 2e       	mov	r0, r23
    23ee:	00 0c       	add	r0, r0
    23f0:	88 0b       	sbc	r24, r24
    23f2:	99 0b       	sbc	r25, r25
    23f4:	0e 5f       	subi	r16, 0xFE	; 254
    23f6:	1f 4f       	sbci	r17, 0xFF	; 255
    23f8:	f3 2d       	mov	r31, r3
    23fa:	ff 76       	andi	r31, 0x6F	; 111
    23fc:	3f 2e       	mov	r3, r31
    23fe:	97 ff       	sbrs	r25, 7
    2400:	09 c0       	rjmp	.+18     	; 0x2414 <vfprintf+0x212>
    2402:	90 95       	com	r25
    2404:	80 95       	com	r24
    2406:	70 95       	com	r23
    2408:	61 95       	neg	r22
    240a:	7f 4f       	sbci	r23, 0xFF	; 255
    240c:	8f 4f       	sbci	r24, 0xFF	; 255
    240e:	9f 4f       	sbci	r25, 0xFF	; 255
    2410:	f0 68       	ori	r31, 0x80	; 128
    2412:	3f 2e       	mov	r3, r31
    2414:	2a e0       	ldi	r18, 0x0A	; 10
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	a3 01       	movw	r20, r6
    241a:	0e 94 37 13 	call	0x266e	; 0x266e <__ultoa_invert>
    241e:	88 2e       	mov	r8, r24
    2420:	86 18       	sub	r8, r6
    2422:	45 c0       	rjmp	.+138    	; 0x24ae <vfprintf+0x2ac>
    2424:	85 37       	cpi	r24, 0x75	; 117
    2426:	31 f4       	brne	.+12     	; 0x2434 <vfprintf+0x232>
    2428:	23 2d       	mov	r18, r3
    242a:	2f 7e       	andi	r18, 0xEF	; 239
    242c:	b2 2e       	mov	r11, r18
    242e:	2a e0       	ldi	r18, 0x0A	; 10
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	25 c0       	rjmp	.+74     	; 0x247e <vfprintf+0x27c>
    2434:	93 2d       	mov	r25, r3
    2436:	99 7f       	andi	r25, 0xF9	; 249
    2438:	b9 2e       	mov	r11, r25
    243a:	8f 36       	cpi	r24, 0x6F	; 111
    243c:	c1 f0       	breq	.+48     	; 0x246e <vfprintf+0x26c>
    243e:	18 f4       	brcc	.+6      	; 0x2446 <vfprintf+0x244>
    2440:	88 35       	cpi	r24, 0x58	; 88
    2442:	79 f0       	breq	.+30     	; 0x2462 <vfprintf+0x260>
    2444:	b5 c0       	rjmp	.+362    	; 0x25b0 <vfprintf+0x3ae>
    2446:	80 37       	cpi	r24, 0x70	; 112
    2448:	19 f0       	breq	.+6      	; 0x2450 <vfprintf+0x24e>
    244a:	88 37       	cpi	r24, 0x78	; 120
    244c:	21 f0       	breq	.+8      	; 0x2456 <vfprintf+0x254>
    244e:	b0 c0       	rjmp	.+352    	; 0x25b0 <vfprintf+0x3ae>
    2450:	e9 2f       	mov	r30, r25
    2452:	e0 61       	ori	r30, 0x10	; 16
    2454:	be 2e       	mov	r11, r30
    2456:	b4 fe       	sbrs	r11, 4
    2458:	0d c0       	rjmp	.+26     	; 0x2474 <vfprintf+0x272>
    245a:	fb 2d       	mov	r31, r11
    245c:	f4 60       	ori	r31, 0x04	; 4
    245e:	bf 2e       	mov	r11, r31
    2460:	09 c0       	rjmp	.+18     	; 0x2474 <vfprintf+0x272>
    2462:	34 fe       	sbrs	r3, 4
    2464:	0a c0       	rjmp	.+20     	; 0x247a <vfprintf+0x278>
    2466:	29 2f       	mov	r18, r25
    2468:	26 60       	ori	r18, 0x06	; 6
    246a:	b2 2e       	mov	r11, r18
    246c:	06 c0       	rjmp	.+12     	; 0x247a <vfprintf+0x278>
    246e:	28 e0       	ldi	r18, 0x08	; 8
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	05 c0       	rjmp	.+10     	; 0x247e <vfprintf+0x27c>
    2474:	20 e1       	ldi	r18, 0x10	; 16
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	02 c0       	rjmp	.+4      	; 0x247e <vfprintf+0x27c>
    247a:	20 e1       	ldi	r18, 0x10	; 16
    247c:	32 e0       	ldi	r19, 0x02	; 2
    247e:	f8 01       	movw	r30, r16
    2480:	b7 fe       	sbrs	r11, 7
    2482:	07 c0       	rjmp	.+14     	; 0x2492 <vfprintf+0x290>
    2484:	60 81       	ld	r22, Z
    2486:	71 81       	ldd	r23, Z+1	; 0x01
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	0c 5f       	subi	r16, 0xFC	; 252
    248e:	1f 4f       	sbci	r17, 0xFF	; 255
    2490:	06 c0       	rjmp	.+12     	; 0x249e <vfprintf+0x29c>
    2492:	60 81       	ld	r22, Z
    2494:	71 81       	ldd	r23, Z+1	; 0x01
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	0e 5f       	subi	r16, 0xFE	; 254
    249c:	1f 4f       	sbci	r17, 0xFF	; 255
    249e:	a3 01       	movw	r20, r6
    24a0:	0e 94 37 13 	call	0x266e	; 0x266e <__ultoa_invert>
    24a4:	88 2e       	mov	r8, r24
    24a6:	86 18       	sub	r8, r6
    24a8:	fb 2d       	mov	r31, r11
    24aa:	ff 77       	andi	r31, 0x7F	; 127
    24ac:	3f 2e       	mov	r3, r31
    24ae:	36 fe       	sbrs	r3, 6
    24b0:	0d c0       	rjmp	.+26     	; 0x24cc <vfprintf+0x2ca>
    24b2:	23 2d       	mov	r18, r3
    24b4:	2e 7f       	andi	r18, 0xFE	; 254
    24b6:	a2 2e       	mov	r10, r18
    24b8:	89 14       	cp	r8, r9
    24ba:	58 f4       	brcc	.+22     	; 0x24d2 <vfprintf+0x2d0>
    24bc:	34 fe       	sbrs	r3, 4
    24be:	0b c0       	rjmp	.+22     	; 0x24d6 <vfprintf+0x2d4>
    24c0:	32 fc       	sbrc	r3, 2
    24c2:	09 c0       	rjmp	.+18     	; 0x24d6 <vfprintf+0x2d4>
    24c4:	83 2d       	mov	r24, r3
    24c6:	8e 7e       	andi	r24, 0xEE	; 238
    24c8:	a8 2e       	mov	r10, r24
    24ca:	05 c0       	rjmp	.+10     	; 0x24d6 <vfprintf+0x2d4>
    24cc:	b8 2c       	mov	r11, r8
    24ce:	a3 2c       	mov	r10, r3
    24d0:	03 c0       	rjmp	.+6      	; 0x24d8 <vfprintf+0x2d6>
    24d2:	b8 2c       	mov	r11, r8
    24d4:	01 c0       	rjmp	.+2      	; 0x24d8 <vfprintf+0x2d6>
    24d6:	b9 2c       	mov	r11, r9
    24d8:	a4 fe       	sbrs	r10, 4
    24da:	0f c0       	rjmp	.+30     	; 0x24fa <vfprintf+0x2f8>
    24dc:	fe 01       	movw	r30, r28
    24de:	e8 0d       	add	r30, r8
    24e0:	f1 1d       	adc	r31, r1
    24e2:	80 81       	ld	r24, Z
    24e4:	80 33       	cpi	r24, 0x30	; 48
    24e6:	21 f4       	brne	.+8      	; 0x24f0 <vfprintf+0x2ee>
    24e8:	9a 2d       	mov	r25, r10
    24ea:	99 7e       	andi	r25, 0xE9	; 233
    24ec:	a9 2e       	mov	r10, r25
    24ee:	09 c0       	rjmp	.+18     	; 0x2502 <vfprintf+0x300>
    24f0:	a2 fe       	sbrs	r10, 2
    24f2:	06 c0       	rjmp	.+12     	; 0x2500 <vfprintf+0x2fe>
    24f4:	b3 94       	inc	r11
    24f6:	b3 94       	inc	r11
    24f8:	04 c0       	rjmp	.+8      	; 0x2502 <vfprintf+0x300>
    24fa:	8a 2d       	mov	r24, r10
    24fc:	86 78       	andi	r24, 0x86	; 134
    24fe:	09 f0       	breq	.+2      	; 0x2502 <vfprintf+0x300>
    2500:	b3 94       	inc	r11
    2502:	a3 fc       	sbrc	r10, 3
    2504:	11 c0       	rjmp	.+34     	; 0x2528 <vfprintf+0x326>
    2506:	a0 fe       	sbrs	r10, 0
    2508:	06 c0       	rjmp	.+12     	; 0x2516 <vfprintf+0x314>
    250a:	b2 14       	cp	r11, r2
    250c:	88 f4       	brcc	.+34     	; 0x2530 <vfprintf+0x32e>
    250e:	28 0c       	add	r2, r8
    2510:	92 2c       	mov	r9, r2
    2512:	9b 18       	sub	r9, r11
    2514:	0e c0       	rjmp	.+28     	; 0x2532 <vfprintf+0x330>
    2516:	b2 14       	cp	r11, r2
    2518:	60 f4       	brcc	.+24     	; 0x2532 <vfprintf+0x330>
    251a:	b6 01       	movw	r22, r12
    251c:	80 e2       	ldi	r24, 0x20	; 32
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <fputc>
    2524:	b3 94       	inc	r11
    2526:	f7 cf       	rjmp	.-18     	; 0x2516 <vfprintf+0x314>
    2528:	b2 14       	cp	r11, r2
    252a:	18 f4       	brcc	.+6      	; 0x2532 <vfprintf+0x330>
    252c:	2b 18       	sub	r2, r11
    252e:	02 c0       	rjmp	.+4      	; 0x2534 <vfprintf+0x332>
    2530:	98 2c       	mov	r9, r8
    2532:	21 2c       	mov	r2, r1
    2534:	a4 fe       	sbrs	r10, 4
    2536:	10 c0       	rjmp	.+32     	; 0x2558 <vfprintf+0x356>
    2538:	b6 01       	movw	r22, r12
    253a:	80 e3       	ldi	r24, 0x30	; 48
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <fputc>
    2542:	a2 fe       	sbrs	r10, 2
    2544:	17 c0       	rjmp	.+46     	; 0x2574 <vfprintf+0x372>
    2546:	a1 fc       	sbrc	r10, 1
    2548:	03 c0       	rjmp	.+6      	; 0x2550 <vfprintf+0x34e>
    254a:	88 e7       	ldi	r24, 0x78	; 120
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	02 c0       	rjmp	.+4      	; 0x2554 <vfprintf+0x352>
    2550:	88 e5       	ldi	r24, 0x58	; 88
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	b6 01       	movw	r22, r12
    2556:	0c c0       	rjmp	.+24     	; 0x2570 <vfprintf+0x36e>
    2558:	8a 2d       	mov	r24, r10
    255a:	86 78       	andi	r24, 0x86	; 134
    255c:	59 f0       	breq	.+22     	; 0x2574 <vfprintf+0x372>
    255e:	a1 fe       	sbrs	r10, 1
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <vfprintf+0x364>
    2562:	8b e2       	ldi	r24, 0x2B	; 43
    2564:	01 c0       	rjmp	.+2      	; 0x2568 <vfprintf+0x366>
    2566:	80 e2       	ldi	r24, 0x20	; 32
    2568:	a7 fc       	sbrc	r10, 7
    256a:	8d e2       	ldi	r24, 0x2D	; 45
    256c:	b6 01       	movw	r22, r12
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <fputc>
    2574:	89 14       	cp	r8, r9
    2576:	38 f4       	brcc	.+14     	; 0x2586 <vfprintf+0x384>
    2578:	b6 01       	movw	r22, r12
    257a:	80 e3       	ldi	r24, 0x30	; 48
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <fputc>
    2582:	9a 94       	dec	r9
    2584:	f7 cf       	rjmp	.-18     	; 0x2574 <vfprintf+0x372>
    2586:	8a 94       	dec	r8
    2588:	f3 01       	movw	r30, r6
    258a:	e8 0d       	add	r30, r8
    258c:	f1 1d       	adc	r31, r1
    258e:	80 81       	ld	r24, Z
    2590:	b6 01       	movw	r22, r12
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <fputc>
    2598:	81 10       	cpse	r8, r1
    259a:	f5 cf       	rjmp	.-22     	; 0x2586 <vfprintf+0x384>
    259c:	22 20       	and	r2, r2
    259e:	09 f4       	brne	.+2      	; 0x25a2 <vfprintf+0x3a0>
    25a0:	42 ce       	rjmp	.-892    	; 0x2226 <vfprintf+0x24>
    25a2:	b6 01       	movw	r22, r12
    25a4:	80 e2       	ldi	r24, 0x20	; 32
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <fputc>
    25ac:	2a 94       	dec	r2
    25ae:	f6 cf       	rjmp	.-20     	; 0x259c <vfprintf+0x39a>
    25b0:	f6 01       	movw	r30, r12
    25b2:	86 81       	ldd	r24, Z+6	; 0x06
    25b4:	97 81       	ldd	r25, Z+7	; 0x07
    25b6:	02 c0       	rjmp	.+4      	; 0x25bc <vfprintf+0x3ba>
    25b8:	8f ef       	ldi	r24, 0xFF	; 255
    25ba:	9f ef       	ldi	r25, 0xFF	; 255
    25bc:	2b 96       	adiw	r28, 0x0b	; 11
    25be:	e2 e1       	ldi	r30, 0x12	; 18
    25c0:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__epilogue_restores__>

000025c4 <__ctype_isfalse>:
    25c4:	99 27       	eor	r25, r25
    25c6:	88 27       	eor	r24, r24

000025c8 <__ctype_istrue>:
    25c8:	08 95       	ret

000025ca <strnlen_P>:
    25ca:	fc 01       	movw	r30, r24
    25cc:	05 90       	lpm	r0, Z+
    25ce:	61 50       	subi	r22, 0x01	; 1
    25d0:	70 40       	sbci	r23, 0x00	; 0
    25d2:	01 10       	cpse	r0, r1
    25d4:	d8 f7       	brcc	.-10     	; 0x25cc <strnlen_P+0x2>
    25d6:	80 95       	com	r24
    25d8:	90 95       	com	r25
    25da:	8e 0f       	add	r24, r30
    25dc:	9f 1f       	adc	r25, r31
    25de:	08 95       	ret

000025e0 <strnlen>:
    25e0:	fc 01       	movw	r30, r24
    25e2:	61 50       	subi	r22, 0x01	; 1
    25e4:	70 40       	sbci	r23, 0x00	; 0
    25e6:	01 90       	ld	r0, Z+
    25e8:	01 10       	cpse	r0, r1
    25ea:	d8 f7       	brcc	.-10     	; 0x25e2 <strnlen+0x2>
    25ec:	80 95       	com	r24
    25ee:	90 95       	com	r25
    25f0:	8e 0f       	add	r24, r30
    25f2:	9f 1f       	adc	r25, r31
    25f4:	08 95       	ret

000025f6 <fputc>:
    25f6:	0f 93       	push	r16
    25f8:	1f 93       	push	r17
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
    25fe:	fb 01       	movw	r30, r22
    2600:	23 81       	ldd	r18, Z+3	; 0x03
    2602:	21 fd       	sbrc	r18, 1
    2604:	03 c0       	rjmp	.+6      	; 0x260c <fputc+0x16>
    2606:	8f ef       	ldi	r24, 0xFF	; 255
    2608:	9f ef       	ldi	r25, 0xFF	; 255
    260a:	2c c0       	rjmp	.+88     	; 0x2664 <fputc+0x6e>
    260c:	22 ff       	sbrs	r18, 2
    260e:	16 c0       	rjmp	.+44     	; 0x263c <fputc+0x46>
    2610:	46 81       	ldd	r20, Z+6	; 0x06
    2612:	57 81       	ldd	r21, Z+7	; 0x07
    2614:	24 81       	ldd	r18, Z+4	; 0x04
    2616:	35 81       	ldd	r19, Z+5	; 0x05
    2618:	42 17       	cp	r20, r18
    261a:	53 07       	cpc	r21, r19
    261c:	44 f4       	brge	.+16     	; 0x262e <fputc+0x38>
    261e:	a0 81       	ld	r26, Z
    2620:	b1 81       	ldd	r27, Z+1	; 0x01
    2622:	9d 01       	movw	r18, r26
    2624:	2f 5f       	subi	r18, 0xFF	; 255
    2626:	3f 4f       	sbci	r19, 0xFF	; 255
    2628:	20 83       	st	Z, r18
    262a:	31 83       	std	Z+1, r19	; 0x01
    262c:	8c 93       	st	X, r24
    262e:	26 81       	ldd	r18, Z+6	; 0x06
    2630:	37 81       	ldd	r19, Z+7	; 0x07
    2632:	2f 5f       	subi	r18, 0xFF	; 255
    2634:	3f 4f       	sbci	r19, 0xFF	; 255
    2636:	26 83       	std	Z+6, r18	; 0x06
    2638:	37 83       	std	Z+7, r19	; 0x07
    263a:	14 c0       	rjmp	.+40     	; 0x2664 <fputc+0x6e>
    263c:	8b 01       	movw	r16, r22
    263e:	ec 01       	movw	r28, r24
    2640:	fb 01       	movw	r30, r22
    2642:	00 84       	ldd	r0, Z+8	; 0x08
    2644:	f1 85       	ldd	r31, Z+9	; 0x09
    2646:	e0 2d       	mov	r30, r0
    2648:	09 95       	icall
    264a:	89 2b       	or	r24, r25
    264c:	e1 f6       	brne	.-72     	; 0x2606 <fputc+0x10>
    264e:	d8 01       	movw	r26, r16
    2650:	16 96       	adiw	r26, 0x06	; 6
    2652:	8d 91       	ld	r24, X+
    2654:	9c 91       	ld	r25, X
    2656:	17 97       	sbiw	r26, 0x07	; 7
    2658:	01 96       	adiw	r24, 0x01	; 1
    265a:	16 96       	adiw	r26, 0x06	; 6
    265c:	8d 93       	st	X+, r24
    265e:	9c 93       	st	X, r25
    2660:	17 97       	sbiw	r26, 0x07	; 7
    2662:	ce 01       	movw	r24, r28
    2664:	df 91       	pop	r29
    2666:	cf 91       	pop	r28
    2668:	1f 91       	pop	r17
    266a:	0f 91       	pop	r16
    266c:	08 95       	ret

0000266e <__ultoa_invert>:
    266e:	fa 01       	movw	r30, r20
    2670:	aa 27       	eor	r26, r26
    2672:	28 30       	cpi	r18, 0x08	; 8
    2674:	51 f1       	breq	.+84     	; 0x26ca <__ultoa_invert+0x5c>
    2676:	20 31       	cpi	r18, 0x10	; 16
    2678:	81 f1       	breq	.+96     	; 0x26da <__ultoa_invert+0x6c>
    267a:	e8 94       	clt
    267c:	6f 93       	push	r22
    267e:	6e 7f       	andi	r22, 0xFE	; 254
    2680:	6e 5f       	subi	r22, 0xFE	; 254
    2682:	7f 4f       	sbci	r23, 0xFF	; 255
    2684:	8f 4f       	sbci	r24, 0xFF	; 255
    2686:	9f 4f       	sbci	r25, 0xFF	; 255
    2688:	af 4f       	sbci	r26, 0xFF	; 255
    268a:	b1 e0       	ldi	r27, 0x01	; 1
    268c:	3e d0       	rcall	.+124    	; 0x270a <__ultoa_invert+0x9c>
    268e:	b4 e0       	ldi	r27, 0x04	; 4
    2690:	3c d0       	rcall	.+120    	; 0x270a <__ultoa_invert+0x9c>
    2692:	67 0f       	add	r22, r23
    2694:	78 1f       	adc	r23, r24
    2696:	89 1f       	adc	r24, r25
    2698:	9a 1f       	adc	r25, r26
    269a:	a1 1d       	adc	r26, r1
    269c:	68 0f       	add	r22, r24
    269e:	79 1f       	adc	r23, r25
    26a0:	8a 1f       	adc	r24, r26
    26a2:	91 1d       	adc	r25, r1
    26a4:	a1 1d       	adc	r26, r1
    26a6:	6a 0f       	add	r22, r26
    26a8:	71 1d       	adc	r23, r1
    26aa:	81 1d       	adc	r24, r1
    26ac:	91 1d       	adc	r25, r1
    26ae:	a1 1d       	adc	r26, r1
    26b0:	20 d0       	rcall	.+64     	; 0x26f2 <__ultoa_invert+0x84>
    26b2:	09 f4       	brne	.+2      	; 0x26b6 <__ultoa_invert+0x48>
    26b4:	68 94       	set
    26b6:	3f 91       	pop	r19
    26b8:	2a e0       	ldi	r18, 0x0A	; 10
    26ba:	26 9f       	mul	r18, r22
    26bc:	11 24       	eor	r1, r1
    26be:	30 19       	sub	r19, r0
    26c0:	30 5d       	subi	r19, 0xD0	; 208
    26c2:	31 93       	st	Z+, r19
    26c4:	de f6       	brtc	.-74     	; 0x267c <__ultoa_invert+0xe>
    26c6:	cf 01       	movw	r24, r30
    26c8:	08 95       	ret
    26ca:	46 2f       	mov	r20, r22
    26cc:	47 70       	andi	r20, 0x07	; 7
    26ce:	40 5d       	subi	r20, 0xD0	; 208
    26d0:	41 93       	st	Z+, r20
    26d2:	b3 e0       	ldi	r27, 0x03	; 3
    26d4:	0f d0       	rcall	.+30     	; 0x26f4 <__ultoa_invert+0x86>
    26d6:	c9 f7       	brne	.-14     	; 0x26ca <__ultoa_invert+0x5c>
    26d8:	f6 cf       	rjmp	.-20     	; 0x26c6 <__ultoa_invert+0x58>
    26da:	46 2f       	mov	r20, r22
    26dc:	4f 70       	andi	r20, 0x0F	; 15
    26de:	40 5d       	subi	r20, 0xD0	; 208
    26e0:	4a 33       	cpi	r20, 0x3A	; 58
    26e2:	18 f0       	brcs	.+6      	; 0x26ea <__ultoa_invert+0x7c>
    26e4:	49 5d       	subi	r20, 0xD9	; 217
    26e6:	31 fd       	sbrc	r19, 1
    26e8:	40 52       	subi	r20, 0x20	; 32
    26ea:	41 93       	st	Z+, r20
    26ec:	02 d0       	rcall	.+4      	; 0x26f2 <__ultoa_invert+0x84>
    26ee:	a9 f7       	brne	.-22     	; 0x26da <__ultoa_invert+0x6c>
    26f0:	ea cf       	rjmp	.-44     	; 0x26c6 <__ultoa_invert+0x58>
    26f2:	b4 e0       	ldi	r27, 0x04	; 4
    26f4:	a6 95       	lsr	r26
    26f6:	97 95       	ror	r25
    26f8:	87 95       	ror	r24
    26fa:	77 95       	ror	r23
    26fc:	67 95       	ror	r22
    26fe:	ba 95       	dec	r27
    2700:	c9 f7       	brne	.-14     	; 0x26f4 <__ultoa_invert+0x86>
    2702:	00 97       	sbiw	r24, 0x00	; 0
    2704:	61 05       	cpc	r22, r1
    2706:	71 05       	cpc	r23, r1
    2708:	08 95       	ret
    270a:	9b 01       	movw	r18, r22
    270c:	ac 01       	movw	r20, r24
    270e:	0a 2e       	mov	r0, r26
    2710:	06 94       	lsr	r0
    2712:	57 95       	ror	r21
    2714:	47 95       	ror	r20
    2716:	37 95       	ror	r19
    2718:	27 95       	ror	r18
    271a:	ba 95       	dec	r27
    271c:	c9 f7       	brne	.-14     	; 0x2710 <__ultoa_invert+0xa2>
    271e:	62 0f       	add	r22, r18
    2720:	73 1f       	adc	r23, r19
    2722:	84 1f       	adc	r24, r20
    2724:	95 1f       	adc	r25, r21
    2726:	a0 1d       	adc	r26, r0
    2728:	08 95       	ret

0000272a <ccp_write_io>:
    272a:	dc 01       	movw	r26, r24
    272c:	28 ed       	ldi	r18, 0xD8	; 216
    272e:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f0034>
    2732:	6c 93       	st	X, r22
    2734:	08 95       	ret

00002736 <__mulsi3>:
    2736:	db 01       	movw	r26, r22
    2738:	8f 93       	push	r24
    273a:	9f 93       	push	r25
    273c:	0e 94 ab 13 	call	0x2756	; 0x2756 <__muluhisi3>
    2740:	bf 91       	pop	r27
    2742:	af 91       	pop	r26
    2744:	a2 9f       	mul	r26, r18
    2746:	80 0d       	add	r24, r0
    2748:	91 1d       	adc	r25, r1
    274a:	a3 9f       	mul	r26, r19
    274c:	90 0d       	add	r25, r0
    274e:	b2 9f       	mul	r27, r18
    2750:	90 0d       	add	r25, r0
    2752:	11 24       	eor	r1, r1
    2754:	08 95       	ret

00002756 <__muluhisi3>:
    2756:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__umulhisi3>
    275a:	a5 9f       	mul	r26, r21
    275c:	90 0d       	add	r25, r0
    275e:	b4 9f       	mul	r27, r20
    2760:	90 0d       	add	r25, r0
    2762:	a4 9f       	mul	r26, r20
    2764:	80 0d       	add	r24, r0
    2766:	91 1d       	adc	r25, r1
    2768:	11 24       	eor	r1, r1
    276a:	08 95       	ret

0000276c <__prologue_saves__>:
    276c:	2f 92       	push	r2
    276e:	3f 92       	push	r3
    2770:	4f 92       	push	r4
    2772:	5f 92       	push	r5
    2774:	6f 92       	push	r6
    2776:	7f 92       	push	r7
    2778:	8f 92       	push	r8
    277a:	9f 92       	push	r9
    277c:	af 92       	push	r10
    277e:	bf 92       	push	r11
    2780:	cf 92       	push	r12
    2782:	df 92       	push	r13
    2784:	ef 92       	push	r14
    2786:	ff 92       	push	r15
    2788:	0f 93       	push	r16
    278a:	1f 93       	push	r17
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
    2794:	ca 1b       	sub	r28, r26
    2796:	db 0b       	sbc	r29, r27
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	09 94       	ijmp

0000279e <__epilogue_restores__>:
    279e:	2a 88       	ldd	r2, Y+18	; 0x12
    27a0:	39 88       	ldd	r3, Y+17	; 0x11
    27a2:	48 88       	ldd	r4, Y+16	; 0x10
    27a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    27a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    27a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    27aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    27ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    27ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    27b0:	b9 84       	ldd	r11, Y+9	; 0x09
    27b2:	c8 84       	ldd	r12, Y+8	; 0x08
    27b4:	df 80       	ldd	r13, Y+7	; 0x07
    27b6:	ee 80       	ldd	r14, Y+6	; 0x06
    27b8:	fd 80       	ldd	r15, Y+5	; 0x05
    27ba:	0c 81       	ldd	r16, Y+4	; 0x04
    27bc:	1b 81       	ldd	r17, Y+3	; 0x03
    27be:	aa 81       	ldd	r26, Y+2	; 0x02
    27c0:	b9 81       	ldd	r27, Y+1	; 0x01
    27c2:	ce 0f       	add	r28, r30
    27c4:	d1 1d       	adc	r29, r1
    27c6:	cd bf       	out	0x3d, r28	; 61
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	ed 01       	movw	r28, r26
    27cc:	08 95       	ret

000027ce <_exit>:
    27ce:	f8 94       	cli

000027d0 <__stop_program>:
    27d0:	ff cf       	rjmp	.-2      	; 0x27d0 <__stop_program>
