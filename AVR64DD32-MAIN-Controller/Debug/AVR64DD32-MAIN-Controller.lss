
AVR64DD32-MAIN-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004d6  00806000  00002008  0000209c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002008  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  008064d6  008064d6  00002572  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002572  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000025d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  00002610  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008195  00000000  00000000  00002a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039b0  00000000  00000000  0000abc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028d6  00000000  00000000  0000e575  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a14  00000000  00000000  00010e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002fb4  00000000  00000000  00011860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002629  00000000  00000000  00014814  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  00016e3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e7       	ldi	r29, 0x7F	; 127
      9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
      9c:	14 e6       	ldi	r17, 0x64	; 100
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b0 e6       	ldi	r27, 0x60	; 96
      a2:	e8 e0       	ldi	r30, 0x08	; 8
      a4:	f0 e2       	ldi	r31, 0x20	; 32
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 3d       	cpi	r26, 0xD6	; 214
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	24 e6       	ldi	r18, 0x64	; 100
      b4:	a6 ed       	ldi	r26, 0xD6	; 214
      b6:	b4 e6       	ldi	r27, 0x64	; 100
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 3f       	cpi	r26, 0xF8	; 248
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 49 05 	call	0xa92	; 0xa92 <main>
      c6:	0c 94 02 10 	jmp	0x2004	; 0x2004 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <normalize>:
#include "Settings.h"
#include "ActionsVar.h"

// Pagalbinë funkcija: normalizuoja kampà á [0,360)
int16_t normalize(int16_t angle) {
	angle %= 360;
      ce:	68 e6       	ldi	r22, 0x68	; 104
      d0:	71 e0       	ldi	r23, 0x01	; 1
      d2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__divmodhi4>
	if (angle < 0) angle += 360;
      d6:	99 23       	and	r25, r25
      d8:	14 f4       	brge	.+4      	; 0xde <normalize+0x10>
      da:	88 59       	subi	r24, 0x98	; 152
      dc:	9e 4f       	sbci	r25, 0xFE	; 254
	return angle;
}
      de:	08 95       	ret

000000e0 <angle_diff>:

// Pagalbinë: apskaièiuoja maþiausià kampiná atstumà
int16_t angle_diff(int16_t a, int16_t b) {
	int16_t d = abs(a - b) % 360;
      e0:	9c 01       	movw	r18, r24
      e2:	26 1b       	sub	r18, r22
      e4:	37 0b       	sbc	r19, r23
      e6:	c9 01       	movw	r24, r18
      e8:	99 23       	and	r25, r25
      ea:	24 f4       	brge	.+8      	; 0xf4 <angle_diff+0x14>
      ec:	88 27       	eor	r24, r24
      ee:	99 27       	eor	r25, r25
      f0:	82 1b       	sub	r24, r18
      f2:	93 0b       	sbc	r25, r19
      f4:	68 e6       	ldi	r22, 0x68	; 104
      f6:	71 e0       	ldi	r23, 0x01	; 1
      f8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__divmodhi4>
	return (d > 180) ? 360 - d : d;
      fc:	85 3b       	cpi	r24, 0xB5	; 181
      fe:	91 05       	cpc	r25, r1
     100:	34 f0       	brlt	.+12     	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
     102:	28 e6       	ldi	r18, 0x68	; 104
     104:	31 e0       	ldi	r19, 0x01	; 1
     106:	a9 01       	movw	r20, r18
     108:	48 1b       	sub	r20, r24
     10a:	59 0b       	sbc	r21, r25
     10c:	ca 01       	movw	r24, r20
}
     10e:	08 95       	ret

00000110 <get_safe_azimuth>:

void get_safe_azimuth() {
     110:	cf 92       	push	r12
     112:	df 92       	push	r13
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
	// Galimos saugios kryptys
	int16_t safe1 = normalize((WSData.winddirection * 45) + 90);
     120:	c0 91 ee 64 	lds	r28, 0x64EE	; 0x8064ee <WSData+0x7>
     124:	2d e2       	ldi	r18, 0x2D	; 45
     126:	c2 9f       	mul	r28, r18
     128:	e0 01       	movw	r28, r0
     12a:	11 24       	eor	r1, r1
     12c:	ce 01       	movw	r24, r28
     12e:	86 5a       	subi	r24, 0xA6	; 166
     130:	9f 4f       	sbci	r25, 0xFF	; 255
     132:	0e 94 67 00 	call	0xce	; 0xce <normalize>
     136:	8c 01       	movw	r16, r24
	int16_t safe2 = normalize((WSData.winddirection * 45) - 90);
     138:	ce 01       	movw	r24, r28
     13a:	8a 55       	subi	r24, 0x5A	; 90
     13c:	91 09       	sbc	r25, r1
     13e:	0e 94 67 00 	call	0xce	; 0xce <normalize>
     142:	ec 01       	movw	r28, r24

	bool valid1 = (safe1 >= MIN_AZIMUTH && safe1 <= MAX_AZIMUTH);
     144:	c8 01       	movw	r24, r16
     146:	4e 97       	sbiw	r24, 0x1e	; 30
	bool valid2 = (safe2 >= MIN_AZIMUTH && safe2 <= MAX_AZIMUTH);
     148:	9e 01       	movw	r18, r28
     14a:	2e 51       	subi	r18, 0x1E	; 30
     14c:	31 09       	sbc	r19, r1

	if (valid1 && valid2) {
     14e:	8d 32       	cpi	r24, 0x2D	; 45
     150:	41 e0       	ldi	r20, 0x01	; 1
     152:	94 07       	cpc	r25, r20
     154:	e8 f4       	brcc	.+58     	; 0x190 <get_safe_azimuth+0x80>
     156:	2d 32       	cpi	r18, 0x2D	; 45
     158:	31 40       	sbci	r19, 0x01	; 1
     15a:	d0 f4       	brcc	.+52     	; 0x190 <get_safe_azimuth+0x80>
		int16_t d1 = angle_diff(SensorData.Azimuth, safe1);
     15c:	e0 90 08 60 	lds	r14, 0x6008	; 0x806008 <SensorData+0x4>
     160:	f0 90 09 60 	lds	r15, 0x6009	; 0x806009 <SensorData+0x5>
     164:	b8 01       	movw	r22, r16
     166:	c7 01       	movw	r24, r14
     168:	0e 94 70 00 	call	0xe0	; 0xe0 <angle_diff>
     16c:	6c 01       	movw	r12, r24
		int16_t d2 = angle_diff(SensorData.Azimuth, safe2);
     16e:	be 01       	movw	r22, r28
     170:	c7 01       	movw	r24, r14
     172:	0e 94 70 00 	call	0xe0	; 0xe0 <angle_diff>
		Target.azimuth = (d1 <= d2) ? safe1 : safe2;
     176:	8c 15       	cp	r24, r12
     178:	9d 05       	cpc	r25, r13
     17a:	1c f0       	brlt	.+6      	; 0x182 <get_safe_azimuth+0x72>
     17c:	90 2f       	mov	r25, r16
     17e:	81 2f       	mov	r24, r17
     180:	02 c0       	rjmp	.+4      	; 0x186 <get_safe_azimuth+0x76>
     182:	9c 2f       	mov	r25, r28
     184:	8d 2f       	mov	r24, r29
     186:	90 93 02 60 	sts	0x6002, r25	; 0x806002 <__DATA_REGION_ORIGIN__+0x2>
     18a:	80 93 03 60 	sts	0x6003, r24	; 0x806003 <__DATA_REGION_ORIGIN__+0x3>
	int16_t safe2 = normalize((WSData.winddirection * 45) - 90);

	bool valid1 = (safe1 >= MIN_AZIMUTH && safe1 <= MAX_AZIMUTH);
	bool valid2 = (safe2 >= MIN_AZIMUTH && safe2 <= MAX_AZIMUTH);

	if (valid1 && valid2) {
     18e:	0c c0       	rjmp	.+24     	; 0x1a8 <get_safe_azimuth+0x98>
		int16_t d1 = angle_diff(SensorData.Azimuth, safe1);
		int16_t d2 = angle_diff(SensorData.Azimuth, safe2);
		Target.azimuth = (d1 <= d2) ? safe1 : safe2;
		} else if (valid1) {
     190:	8d 32       	cpi	r24, 0x2D	; 45
     192:	91 40       	sbci	r25, 0x01	; 1
     194:	28 f4       	brcc	.+10     	; 0x1a0 <get_safe_azimuth+0x90>
		Target.azimuth = safe1;
     196:	00 93 02 60 	sts	0x6002, r16	; 0x806002 <__DATA_REGION_ORIGIN__+0x2>
     19a:	10 93 03 60 	sts	0x6003, r17	; 0x806003 <__DATA_REGION_ORIGIN__+0x3>
     19e:	04 c0       	rjmp	.+8      	; 0x1a8 <get_safe_azimuth+0x98>
		} else {
		Target.azimuth = safe2; // visada bus bent vienas tinkamas
     1a0:	c0 93 02 60 	sts	0x6002, r28	; 0x806002 <__DATA_REGION_ORIGIN__+0x2>
     1a4:	d0 93 03 60 	sts	0x6003, r29	; 0x806003 <__DATA_REGION_ORIGIN__+0x3>
	}
}
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	1f 91       	pop	r17
     1ae:	0f 91       	pop	r16
     1b0:	ff 90       	pop	r15
     1b2:	ef 90       	pop	r14
     1b4:	df 90       	pop	r13
     1b6:	cf 90       	pop	r12
     1b8:	08 95       	ret

000001ba <ReachTarget>:

void ReachTarget(){
	if (SensorData.Elevation == Target.elevation) {
     1ba:	20 91 04 60 	lds	r18, 0x6004	; 0x806004 <SensorData>
     1be:	30 91 05 60 	lds	r19, 0x6005	; 0x806005 <SensorData+0x1>
     1c2:	80 91 00 60 	lds	r24, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
     1c6:	90 91 01 60 	lds	r25, 0x6001	; 0x806001 <__DATA_REGION_ORIGIN__+0x1>
     1ca:	28 17       	cp	r18, r24
     1cc:	39 07       	cpc	r19, r25
     1ce:	29 f4       	brne	.+10     	; 0x1da <ReachTarget+0x20>
		LinearMotor_stop();
     1d0:	0e 94 08 05 	call	0xa10	; 0xa10 <LinearMotor_stop>
		LinearMotor_disable();
     1d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LinearMotor_disable>
     1d8:	27 c0       	rjmp	.+78     	; 0x228 <ReachTarget+0x6e>
	} 
	else if(SensorData.Elevation < (Target.elevation - ELEVATION_BACKLASH) || SensorData.Elevation > (Target.elevation + ELEVATION_BACKLASH)){
     1da:	ac 01       	movw	r20, r24
     1dc:	42 50       	subi	r20, 0x02	; 2
     1de:	51 09       	sbc	r21, r1
     1e0:	24 17       	cp	r18, r20
     1e2:	35 07       	cpc	r19, r21
     1e4:	20 f0       	brcs	.+8      	; 0x1ee <ReachTarget+0x34>
     1e6:	02 96       	adiw	r24, 0x02	; 2
     1e8:	82 17       	cp	r24, r18
     1ea:	93 07       	cpc	r25, r19
     1ec:	e8 f4       	brcc	.+58     	; 0x228 <ReachTarget+0x6e>
		LinearMotor_enable();
     1ee:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <LinearMotor_enable>
		LinearMotor_start();
     1f2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LinearMotor_start>
		if (SensorData.Elevation < (Target.elevation - ELEVATION_BACKLASH)){
     1f6:	20 91 04 60 	lds	r18, 0x6004	; 0x806004 <SensorData>
     1fa:	30 91 05 60 	lds	r19, 0x6005	; 0x806005 <SensorData+0x1>
     1fe:	80 91 00 60 	lds	r24, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
     202:	90 91 01 60 	lds	r25, 0x6001	; 0x806001 <__DATA_REGION_ORIGIN__+0x1>
     206:	ac 01       	movw	r20, r24
     208:	42 50       	subi	r20, 0x02	; 2
     20a:	51 09       	sbc	r21, r1
     20c:	24 17       	cp	r18, r20
     20e:	35 07       	cpc	r19, r21
     210:	20 f4       	brcc	.+8      	; 0x21a <ReachTarget+0x60>
			LinearMotor_set_direction(1);
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	0e 94 26 05 	call	0xa4c	; 0xa4c <LinearMotor_set_direction>
     218:	07 c0       	rjmp	.+14     	; 0x228 <ReachTarget+0x6e>
		}
		else if(SensorData.Elevation > (Target.elevation + ELEVATION_BACKLASH)){
     21a:	02 96       	adiw	r24, 0x02	; 2
     21c:	82 17       	cp	r24, r18
     21e:	93 07       	cpc	r25, r19
     220:	18 f4       	brcc	.+6      	; 0x228 <ReachTarget+0x6e>
			LinearMotor_set_direction(0);
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	0e 94 26 05 	call	0xa4c	; 0xa4c <LinearMotor_set_direction>
		}
	}
	if (SensorData.Azimuth == Target.azimuth) {
     228:	20 91 08 60 	lds	r18, 0x6008	; 0x806008 <SensorData+0x4>
     22c:	30 91 09 60 	lds	r19, 0x6009	; 0x806009 <SensorData+0x5>
     230:	80 91 02 60 	lds	r24, 0x6002	; 0x806002 <__DATA_REGION_ORIGIN__+0x2>
     234:	90 91 03 60 	lds	r25, 0x6003	; 0x806003 <__DATA_REGION_ORIGIN__+0x3>
     238:	28 17       	cp	r18, r24
     23a:	39 07       	cpc	r19, r25
     23c:	29 f4       	brne	.+10     	; 0x248 <ReachTarget+0x8e>
		Stepper_stop();
     23e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <Stepper_stop>
		Stepper_disable();
     242:	0e 94 a7 07 	call	0xf4e	; 0xf4e <Stepper_disable>
     246:	08 95       	ret
	} 
	else  if(SensorData.Azimuth < (Target.azimuth - AZIMUTH_BACKLASH) || SensorData.Azimuth > (Target.azimuth + AZIMUTH_BACKLASH)){
     248:	ac 01       	movw	r20, r24
     24a:	45 50       	subi	r20, 0x05	; 5
     24c:	51 09       	sbc	r21, r1
     24e:	24 17       	cp	r18, r20
     250:	35 07       	cpc	r19, r21
     252:	20 f0       	brcs	.+8      	; 0x25c <ReachTarget+0xa2>
     254:	05 96       	adiw	r24, 0x05	; 5
     256:	82 17       	cp	r24, r18
     258:	93 07       	cpc	r25, r19
     25a:	e8 f4       	brcc	.+58     	; 0x296 <ReachTarget+0xdc>
		Stepper_enable();
     25c:	0e 94 94 07 	call	0xf28	; 0xf28 <Stepper_enable>
		Stepper_start();
     260:	0e 94 ba 07 	call	0xf74	; 0xf74 <Stepper_start>
		if (SensorData.Azimuth < (Target.azimuth - AZIMUTH_BACKLASH)){
     264:	20 91 08 60 	lds	r18, 0x6008	; 0x806008 <SensorData+0x4>
     268:	30 91 09 60 	lds	r19, 0x6009	; 0x806009 <SensorData+0x5>
     26c:	80 91 02 60 	lds	r24, 0x6002	; 0x806002 <__DATA_REGION_ORIGIN__+0x2>
     270:	90 91 03 60 	lds	r25, 0x6003	; 0x806003 <__DATA_REGION_ORIGIN__+0x3>
     274:	ac 01       	movw	r20, r24
     276:	45 50       	subi	r20, 0x05	; 5
     278:	51 09       	sbc	r21, r1
     27a:	24 17       	cp	r18, r20
     27c:	35 07       	cpc	r19, r21
     27e:	20 f4       	brcc	.+8      	; 0x288 <ReachTarget+0xce>
			Stepper_set_direction(1);
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <Stepper_set_direction>
     286:	08 95       	ret
		}
		else if(SensorData.Azimuth > (Target.azimuth + AZIMUTH_BACKLASH)){
     288:	05 96       	adiw	r24, 0x05	; 5
     28a:	82 17       	cp	r24, r18
     28c:	93 07       	cpc	r25, r19
     28e:	18 f4       	brcc	.+6      	; 0x296 <ReachTarget+0xdc>
			Stepper_set_direction(0);
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <Stepper_set_direction>
     296:	08 95       	ret

00000298 <work>:
		}
	}
}

void work(){
	if(!SensorData.FO_no_power_fault || !SensorData.FO_bad_signal_fault){ // only if Fbber optic works good
     298:	80 91 15 60 	lds	r24, 0x6015	; 0x806015 <SensorData+0x11>
     29c:	88 23       	and	r24, r24
     29e:	21 f0       	breq	.+8      	; 0x2a8 <work+0x10>
     2a0:	80 91 14 60 	lds	r24, 0x6014	; 0x806014 <SensorData+0x10>
     2a4:	81 11       	cpse	r24, r1
     2a6:	32 c0       	rjmp	.+100    	; 0x30c <work+0x74>
		if(WSData.windspeed > MAX_WIND){
     2a8:	80 91 ed 64 	lds	r24, 0x64ED	; 0x8064ed <WSData+0x6>
     2ac:	80 31       	cpi	r24, 0x10	; 16
     2ae:	48 f0       	brcs	.+18     	; 0x2c2 <work+0x2a>
			get_safe_azimuth();
     2b0:	0e 94 88 00 	call	0x110	; 0x110 <get_safe_azimuth>
			Target.elevation = SAFE_ELEVATION;
     2b4:	84 e1       	ldi	r24, 0x14	; 20
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	80 93 00 60 	sts	0x6000, r24	; 0x806000 <__DATA_REGION_ORIGIN__>
     2bc:	90 93 01 60 	sts	0x6001, r25	; 0x806001 <__DATA_REGION_ORIGIN__+0x1>
     2c0:	08 95       	ret
		}
		else{
			if(WSData.lightlevel >= MIN_LIGHT_LEVEL){ // if minimum light level reached work as normal
     2c2:	80 91 ef 64 	lds	r24, 0x64EF	; 0x8064ef <WSData+0x8>
     2c6:	90 91 f0 64 	lds	r25, 0x64F0	; 0x8064f0 <WSData+0x9>
     2ca:	8c 32       	cpi	r24, 0x2C	; 44
     2cc:	91 40       	sbci	r25, 0x01	; 1
     2ce:	80 f0       	brcs	.+32     	; 0x2f0 <work+0x58>
				Target.azimuth = WSData.azimuth;
     2d0:	a7 ee       	ldi	r26, 0xE7	; 231
     2d2:	b4 e6       	ldi	r27, 0x64	; 100
     2d4:	8d 91       	ld	r24, X+
     2d6:	9c 91       	ld	r25, X
     2d8:	11 97       	sbiw	r26, 0x01	; 1
     2da:	e0 e0       	ldi	r30, 0x00	; 0
     2dc:	f0 e6       	ldi	r31, 0x60	; 96
     2de:	82 83       	std	Z+2, r24	; 0x02
     2e0:	93 83       	std	Z+3, r25	; 0x03
				Target.elevation = WSData.elevation;
     2e2:	12 96       	adiw	r26, 0x02	; 2
     2e4:	8d 91       	ld	r24, X+
     2e6:	9c 91       	ld	r25, X
     2e8:	13 97       	sbiw	r26, 0x03	; 3
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	0c c0       	rjmp	.+24     	; 0x308 <work+0x70>
			}
			else{ // if not go to best day position (early morning, late at evening, or just dark day)
				Target.azimuth = 180; //South
     2f0:	e0 e0       	ldi	r30, 0x00	; 0
     2f2:	f0 e6       	ldi	r31, 0x60	; 96
     2f4:	84 eb       	ldi	r24, 0xB4	; 180
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	82 83       	std	Z+2, r24	; 0x02
     2fa:	93 83       	std	Z+3, r25	; 0x03
				Target.elevation = WSData.topelevation; //day top elevation
     2fc:	80 91 eb 64 	lds	r24, 0x64EB	; 0x8064eb <WSData+0x4>
     300:	90 91 ec 64 	lds	r25, 0x64EC	; 0x8064ec <WSData+0x5>
     304:	80 83       	st	Z, r24
     306:	91 83       	std	Z+1, r25	; 0x01
			}
				ReachTarget();
     308:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ReachTarget>
     30c:	08 95       	ret

0000030e <ADC0_init>:

}

void ADC0_SetupSysVoltage(){
	VREF.ADC0REF = VREF_REFSEL_1V024_gc; // 1.024V = 4096| 1.024 = 10.24V|
	ADC0.MUXPOS = ADC_MUXPOS_VDDDIV10_gc; //5V = 0.5V
     30e:	e0 e0       	ldi	r30, 0x00	; 0
     310:	f6 e0       	ldi	r31, 0x06	; 6
     312:	87 e0       	ldi	r24, 0x07	; 7
     314:	81 83       	std	Z+1, r24	; 0x01
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	82 83       	std	Z+2, r24	; 0x02
     31a:	80 83       	st	Z, r24
     31c:	08 95       	ret

0000031e <ADC0_SetupJoystick>:
     31e:	95 e0       	ldi	r25, 0x05	; 5
     320:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
     324:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     328:	08 95       	ret

0000032a <ADC0_read>:
 * appropriately.
 *
 * @return The ADC conversion result as a 12-bit value.
 */
uint16_t ADC0_read() {
    ADC0.COMMAND = ADC_STCONV_bm; // Start conversion
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7f060a>
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)); // Wait until result is ready
     330:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7f060d>
     334:	80 ff       	sbrs	r24, 0
     336:	fc cf       	rjmp	.-8      	; 0x330 <ADC0_read+0x6>
    ADC0.INTFLAGS = ADC_RESRDY_bm; // Clear result ready flag
     338:	e0 e0       	ldi	r30, 0x00	; 0
     33a:	f6 e0       	ldi	r31, 0x06	; 6
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	85 87       	std	Z+13, r24	; 0x0d
    return ADC0.RES >> 4; // Shift result if accumulation is over 16
     340:	80 89       	ldd	r24, Z+16	; 0x10
     342:	91 89       	ldd	r25, Z+17	; 0x11
}
     344:	92 95       	swap	r25
     346:	82 95       	swap	r24
     348:	8f 70       	andi	r24, 0x0F	; 15
     34a:	89 27       	eor	r24, r25
     34c:	9f 70       	andi	r25, 0x0F	; 15
     34e:	89 27       	eor	r24, r25
     350:	08 95       	ret

00000352 <CLOCK_XOSCHF_clock_init>:
#include "Settings.h"

void CLOCK_XOSCHF_clock_init()
{
	/* Enable external (32 MHz) clock input */
	ccp_write_io((uint8_t *) &CLKCTRL.XOSCHFCTRLA, CLKCTRL_SELHF_EXTCLOCK_gc | CLKCTRL_FRQRANGE_24M_gc | CLKCTRL_ENABLE_bm);
     352:	6b e0       	ldi	r22, 0x0B	; 11
     354:	80 e8       	ldi	r24, 0x80	; 128
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <ccp_write_io>

	/* Set the main clock to use external clock as source */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc);
     35c:	63 e0       	ldi	r22, 0x03	; 3
     35e:	80 e6       	ldi	r24, 0x60	; 96
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <ccp_write_io>

	/* Wait for system oscillator change to complete */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm)
     366:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
     36a:	80 fd       	sbrc	r24, 0
     36c:	fc cf       	rjmp	.-8      	; 0x366 <CLOCK_XOSCHF_clock_init+0x14>
	{};
	/* Configuration complete;*/
}
     36e:	08 95       	ret

00000370 <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
     370:	2f 92       	push	r2
     372:	3f 92       	push	r3
     374:	4f 92       	push	r4
     376:	5f 92       	push	r5
     378:	6f 92       	push	r6
     37a:	7f 92       	push	r7
     37c:	8f 92       	push	r8
     37e:	9f 92       	push	r9
     380:	af 92       	push	r10
     382:	bf 92       	push	r11
     384:	cf 92       	push	r12
     386:	df 92       	push	r13
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	2b 97       	sbiw	r28, 0x0b	; 11
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	c2 2e       	mov	r12, r18
     3a0:	b3 2e       	mov	r11, r19
     3a2:	a4 2e       	mov	r10, r20
     3a4:	95 2e       	mov	r9, r21
     3a6:	86 2e       	mov	r8, r22
     3a8:	77 2e       	mov	r7, r23
     3aa:	68 2e       	mov	r6, r24
     3ac:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
     3ae:	f2 2e       	mov	r15, r18
     3b0:	03 2f       	mov	r16, r19
     3b2:	14 2f       	mov	r17, r20
     3b4:	5a 87       	std	Y+10, r21	; 0x0a
     3b6:	69 83       	std	Y+1, r22	; 0x01
     3b8:	b7 2f       	mov	r27, r23
     3ba:	d8 2e       	mov	r13, r24
     3bc:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
     3be:	e0 e0       	ldi	r30, 0x00	; 0
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     3c2:	14 c0       	rjmp	.+40     	; 0x3ec <crc8_cdma2000+0x7c>
        length++;
     3c4:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
     3c6:	2f 2d       	mov	r18, r15
     3c8:	30 2f       	mov	r19, r16
     3ca:	41 2f       	mov	r20, r17
     3cc:	5a 85       	ldd	r21, Y+10	; 0x0a
     3ce:	69 81       	ldd	r22, Y+1	; 0x01
     3d0:	7b 2f       	mov	r23, r27
     3d2:	8d 2d       	mov	r24, r13
     3d4:	9e 2d       	mov	r25, r14
     3d6:	08 e0       	ldi	r16, 0x08	; 8
     3d8:	0e 94 43 0b 	call	0x1686	; 0x1686 <__lshrdi3>
     3dc:	f2 2e       	mov	r15, r18
     3de:	03 2f       	mov	r16, r19
     3e0:	14 2f       	mov	r17, r20
     3e2:	5a 87       	std	Y+10, r21	; 0x0a
     3e4:	69 83       	std	Y+1, r22	; 0x01
     3e6:	b7 2f       	mov	r27, r23
     3e8:	d8 2e       	mov	r13, r24
     3ea:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     3ec:	2f 2d       	mov	r18, r15
     3ee:	30 2f       	mov	r19, r16
     3f0:	41 2f       	mov	r20, r17
     3f2:	5a 85       	ldd	r21, Y+10	; 0x0a
     3f4:	69 81       	ldd	r22, Y+1	; 0x01
     3f6:	7b 2f       	mov	r23, r27
     3f8:	8d 2d       	mov	r24, r13
     3fa:	9e 2d       	mov	r25, r14
     3fc:	a0 e0       	ldi	r26, 0x00	; 0
     3fe:	0e 94 5f 0b 	call	0x16be	; 0x16be <__cmpdi2_s8>
     402:	01 f7       	brne	.-64     	; 0x3c4 <crc8_cdma2000+0x54>
     404:	8f ef       	ldi	r24, 0xFF	; 255
     406:	8a 87       	std	Y+10, r24	; 0x0a
     408:	cb 86       	std	Y+11, r12	; 0x0b
     40a:	b9 82       	std	Y+1, r11	; 0x01
     40c:	4a 2c       	mov	r4, r10
     40e:	39 2c       	mov	r3, r9
     410:	28 2c       	mov	r2, r8
     412:	1a c0       	rjmp	.+52     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
     414:	8d 01       	movw	r16, r26
     416:	00 0f       	add	r16, r16
     418:	11 1f       	adc	r17, r17
     41a:	00 0f       	add	r16, r16
     41c:	11 1f       	adc	r17, r17
     41e:	00 0f       	add	r16, r16
     420:	11 1f       	adc	r17, r17
     422:	2b 85       	ldd	r18, Y+11	; 0x0b
     424:	39 81       	ldd	r19, Y+1	; 0x01
     426:	44 2d       	mov	r20, r4
     428:	53 2d       	mov	r21, r3
     42a:	62 2d       	mov	r22, r2
     42c:	77 2d       	mov	r23, r7
     42e:	86 2d       	mov	r24, r6
     430:	95 2d       	mov	r25, r5
     432:	0e 94 43 0b 	call	0x1686	; 0x1686 <__lshrdi3>
     436:	8a 84       	ldd	r8, Y+10	; 0x0a
     438:	82 26       	eor	r8, r18
     43a:	91 2c       	mov	r9, r1
     43c:	f4 01       	movw	r30, r8
     43e:	e0 58       	subi	r30, 0x80	; 128
     440:	fc 49       	sbci	r31, 0x9C	; 156
     442:	80 81       	ld	r24, Z
     444:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
     446:	fd 01       	movw	r30, r26
     448:	df 01       	movw	r26, r30
     44a:	11 97       	sbiw	r26, 0x01	; 1
     44c:	ef 2b       	or	r30, r31
     44e:	11 f7       	brne	.-60     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     450:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
     452:	2b 96       	adiw	r28, 0x0b	; 11
     454:	cd bf       	out	0x3d, r28	; 61
     456:	de bf       	out	0x3e, r29	; 62
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	df 90       	pop	r13
     466:	cf 90       	pop	r12
     468:	bf 90       	pop	r11
     46a:	af 90       	pop	r10
     46c:	9f 90       	pop	r9
     46e:	8f 90       	pop	r8
     470:	7f 90       	pop	r7
     472:	6f 90       	pop	r6
     474:	5f 90       	pop	r5
     476:	4f 90       	pop	r4
     478:	3f 90       	pop	r3
     47a:	2f 90       	pop	r2
     47c:	08 95       	ret

0000047e <verify_crc8_cdma2000>:
 * without the CRC byte. Otherwise, it returns 0 to indicate a mismatch.
 * 
 * @param data_with_crc The input data with the CRC byte appended.
 * @return The data without the CRC byte if the checksum is valid, or 0 if invalid.
 */
uint8_t verify_crc8_cdma2000(uint64_t data_without_crc, uint8_t crc) {
     47e:	0f 93       	push	r16
     480:	cf 93       	push	r28
     482:	c2 2f       	mov	r28, r18

	return crc8_cdma2000(data_without_crc) == crc ?  data_without_crc : 0;
     484:	0e 94 b8 01 	call	0x370	; 0x370 <crc8_cdma2000>
     488:	80 13       	cpse	r24, r16
     48a:	02 c0       	rjmp	.+4      	; 0x490 <verify_crc8_cdma2000+0x12>
     48c:	8c 2f       	mov	r24, r28
     48e:	01 c0       	rjmp	.+2      	; 0x492 <verify_crc8_cdma2000+0x14>
     490:	80 e0       	ldi	r24, 0x00	; 0

     492:	cf 91       	pop	r28
     494:	0f 91       	pop	r16
     496:	08 95       	ret

00000498 <hexToUint64>:
 *  Author: Saulius
 */ 
#include "Settings.h"
#include "FOUSARTVar.h"

uint64_t hexToUint64(const char *str) {
     498:	0f 93       	push	r16
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	fc 01       	movw	r30, r24
	uint64_t result = 0;
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	90 e0       	ldi	r25, 0x00	; 0
	char c;

	while ((c = *str++)) {
     4b0:	3a c0       	rjmp	.+116    	; 0x526 <hexToUint64+0x8e>
		result <<= 4; // kiekvienas hex simbolis = 4 bitai
     4b2:	04 e0       	ldi	r16, 0x04	; 4
     4b4:	0e 94 28 0b 	call	0x1650	; 0x1650 <__ashldi3>

		if (c >= '0' && c <= '9') {
     4b8:	e0 ed       	ldi	r30, 0xD0	; 208
     4ba:	ec 0f       	add	r30, r28
     4bc:	ea 30       	cpi	r30, 0x0A	; 10
     4be:	70 f4       	brcc	.+28     	; 0x4dc <hexToUint64+0x44>
			result |= (uint64_t)(c - '0');
     4c0:	d0 e0       	ldi	r29, 0x00	; 0
     4c2:	e0 97       	sbiw	r28, 0x30	; 48
     4c4:	ed 2f       	mov	r30, r29
     4c6:	ee 0f       	add	r30, r30
     4c8:	ee 0b       	sbc	r30, r30
     4ca:	2c 2b       	or	r18, r28
     4cc:	3d 2b       	or	r19, r29
     4ce:	4e 2b       	or	r20, r30
     4d0:	5e 2b       	or	r21, r30
     4d2:	6e 2b       	or	r22, r30
     4d4:	7e 2b       	or	r23, r30
     4d6:	8e 2b       	or	r24, r30
     4d8:	9e 2b       	or	r25, r30
     4da:	24 c0       	rjmp	.+72     	; 0x524 <hexToUint64+0x8c>
			} else if (c >= 'A' && c <= 'F') {
     4dc:	ef eb       	ldi	r30, 0xBF	; 191
     4de:	ec 0f       	add	r30, r28
     4e0:	e6 30       	cpi	r30, 0x06	; 6
     4e2:	70 f4       	brcc	.+28     	; 0x500 <hexToUint64+0x68>
			result |= (uint64_t)(c - 'A' + 10);
     4e4:	d0 e0       	ldi	r29, 0x00	; 0
     4e6:	e7 97       	sbiw	r28, 0x37	; 55
     4e8:	ed 2f       	mov	r30, r29
     4ea:	ee 0f       	add	r30, r30
     4ec:	ee 0b       	sbc	r30, r30
     4ee:	2c 2b       	or	r18, r28
     4f0:	3d 2b       	or	r19, r29
     4f2:	4e 2b       	or	r20, r30
     4f4:	5e 2b       	or	r21, r30
     4f6:	6e 2b       	or	r22, r30
     4f8:	7e 2b       	or	r23, r30
     4fa:	8e 2b       	or	r24, r30
     4fc:	9e 2b       	or	r25, r30
     4fe:	12 c0       	rjmp	.+36     	; 0x524 <hexToUint64+0x8c>
			} else if (c >= 'a' && c <= 'f') {
     500:	ef e9       	ldi	r30, 0x9F	; 159
     502:	ec 0f       	add	r30, r28
     504:	e6 30       	cpi	r30, 0x06	; 6
     506:	a8 f4       	brcc	.+42     	; 0x532 <hexToUint64+0x9a>
			result |= (uint64_t)(c - 'a' + 10);
     508:	d0 e0       	ldi	r29, 0x00	; 0
     50a:	c7 55       	subi	r28, 0x57	; 87
     50c:	d1 09       	sbc	r29, r1
     50e:	ed 2f       	mov	r30, r29
     510:	ee 0f       	add	r30, r30
     512:	ee 0b       	sbc	r30, r30
     514:	2c 2b       	or	r18, r28
     516:	3d 2b       	or	r19, r29
     518:	4e 2b       	or	r20, r30
     51a:	5e 2b       	or	r21, r30
     51c:	6e 2b       	or	r22, r30
     51e:	7e 2b       	or	r23, r30
     520:	8e 2b       	or	r24, r30
     522:	9e 2b       	or	r25, r30
     524:	fd 01       	movw	r30, r26

uint64_t hexToUint64(const char *str) {
	uint64_t result = 0;
	char c;

	while ((c = *str++)) {
     526:	df 01       	movw	r26, r30
     528:	11 96       	adiw	r26, 0x01	; 1
     52a:	c0 81       	ld	r28, Z
     52c:	c1 11       	cpse	r28, r1
     52e:	c1 cf       	rjmp	.-126    	; 0x4b2 <hexToUint64+0x1a>
     530:	08 c0       	rjmp	.+16     	; 0x542 <hexToUint64+0xaa>
			result |= (uint64_t)(c - 'A' + 10);
			} else if (c >= 'a' && c <= 'f') {
			result |= (uint64_t)(c - 'a' + 10);
			} else {
			// netinkamas simbolis
			return 0;
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return result;
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	0f 91       	pop	r16
     548:	08 95       	ret

0000054a <FODataSplitter>:

void FODataSplitter(char *command) {
     54a:	7f 92       	push	r7
     54c:	8f 92       	push	r8
     54e:	9f 92       	push	r9
     550:	af 92       	push	r10
     552:	bf 92       	push	r11
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	a0 97       	sbiw	r28, 0x20	; 32
     56a:	cd bf       	out	0x3d, r28	; 61
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	6c 01       	movw	r12, r24
	if (strncmp(command, "00000000000000", 14) == 0) { //if elevation angle, azimuth angle, solar cells voltage and current = 0 meaning it is FO optic fault: bad signal
     570:	4e e0       	ldi	r20, 0x0E	; 14
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	60 e8       	ldi	r22, 0x80	; 128
     576:	74 e6       	ldi	r23, 0x64	; 100
     578:	0e 94 ac 0c 	call	0x1958	; 0x1958 <strncmp>
     57c:	89 2b       	or	r24, r25
     57e:	21 f4       	brne	.+8      	; 0x588 <FODataSplitter+0x3e>
		SensorData.FO_bad_signal_fault = true;		
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 14 60 	sts	0x6014, r24	; 0x806014 <SensorData+0x10>
     586:	dc c0       	rjmp	.+440    	; 0x740 <FODataSplitter+0x1f6>
	}
	else{
		const uint8_t lengths[] = {4, 4, 3, 3, 1, 2};
     588:	86 e0       	ldi	r24, 0x06	; 6
     58a:	e6 e5       	ldi	r30, 0x56	; 86
     58c:	f3 e6       	ldi	r31, 0x63	; 99
     58e:	de 01       	movw	r26, r28
     590:	5b 96       	adiw	r26, 0x1b	; 27
     592:	01 90       	ld	r0, Z+
     594:	0d 92       	st	X+, r0
     596:	8a 95       	dec	r24
     598:	e1 f7       	brne	.-8      	; 0x592 <FODataSplitter+0x48>
		char temp[16];

		strncpy(temp, command, 15);
     59a:	4f e0       	ldi	r20, 0x0F	; 15
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	b6 01       	movw	r22, r12
     5a0:	ce 01       	movw	r24, r28
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	0e 94 ba 0c 	call	0x1974	; 0x1974 <strncpy>
		temp[15] = '\0';
     5a8:	18 8a       	std	Y+16, r1	; 0x10
		uint64_t datatocheck = hexToUint64(temp);
     5aa:	ce 01       	movw	r24, r28
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	0e 94 4c 02 	call	0x498	; 0x498 <hexToUint64>
     5b2:	72 2e       	mov	r7, r18
     5b4:	83 2e       	mov	r8, r19
     5b6:	94 2e       	mov	r9, r20
     5b8:	a5 2e       	mov	r10, r21
     5ba:	b6 2e       	mov	r11, r22
     5bc:	e7 2e       	mov	r14, r23
     5be:	f8 2e       	mov	r15, r24
     5c0:	19 2f       	mov	r17, r25
		strncpy(temp, command + 15, 2); 
     5c2:	42 e0       	ldi	r20, 0x02	; 2
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	b6 01       	movw	r22, r12
     5c8:	61 5f       	subi	r22, 0xF1	; 241
     5ca:	7f 4f       	sbci	r23, 0xFF	; 255
     5cc:	ce 01       	movw	r24, r28
     5ce:	01 96       	adiw	r24, 0x01	; 1
     5d0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <strncpy>
		temp[2] = '\0';
     5d4:	1b 82       	std	Y+3, r1	; 0x03
		uint8_t crctocheck = (uint8_t)strtol(temp, NULL, 16);
     5d6:	40 e1       	ldi	r20, 0x10	; 16
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	ce 01       	movw	r24, r28
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <strtol>

		if(verify_crc8_cdma2000(datatocheck, crctocheck)){ //if data valid update it
     5e6:	06 2f       	mov	r16, r22
     5e8:	27 2d       	mov	r18, r7
     5ea:	38 2d       	mov	r19, r8
     5ec:	49 2d       	mov	r20, r9
     5ee:	5a 2d       	mov	r21, r10
     5f0:	6b 2d       	mov	r22, r11
     5f2:	7e 2d       	mov	r23, r14
     5f4:	8f 2d       	mov	r24, r15
     5f6:	91 2f       	mov	r25, r17
     5f8:	0e 94 3f 02 	call	0x47e	; 0x47e <verify_crc8_cdma2000>
     5fc:	81 11       	cpse	r24, r1
     5fe:	69 c0       	rjmp	.+210    	; 0x6d2 <FODataSplitter+0x188>
     600:	9c c0       	rjmp	.+312    	; 0x73a <FODataSplitter+0x1f0>
			//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
			const char *p = command;
			uint8_t EndSwitchesValue = 0;

			for (uint8_t i = 0; i < 6; i++) {
				char token[10] = {0};
     602:	5e 01       	movw	r10, r28
     604:	81 e1       	ldi	r24, 0x11	; 17
     606:	a8 0e       	add	r10, r24
     608:	b1 1c       	adc	r11, r1
     60a:	8a e0       	ldi	r24, 0x0A	; 10
     60c:	f5 01       	movw	r30, r10
     60e:	11 92       	st	Z+, r1
     610:	8a 95       	dec	r24
     612:	e9 f7       	brne	.-6      	; 0x60e <FODataSplitter+0xc4>

				memcpy(token, p, lengths[i]);
     614:	eb e1       	ldi	r30, 0x1B	; 27
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	ec 0f       	add	r30, r28
     61a:	fd 1f       	adc	r31, r29
     61c:	e1 0f       	add	r30, r17
     61e:	f1 1d       	adc	r31, r1
     620:	e0 80       	ld	r14, Z
     622:	f1 2c       	mov	r15, r1
     624:	a7 01       	movw	r20, r14
     626:	b6 01       	movw	r22, r12
     628:	c5 01       	movw	r24, r10
     62a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <memcpy>
				token[lengths[i]] = '\0';
     62e:	f5 01       	movw	r30, r10
     630:	ee 0d       	add	r30, r14
     632:	ff 1d       	adc	r31, r15
     634:	10 82       	st	Z, r1

				switch (i) {
     636:	12 30       	cpi	r17, 0x02	; 2
     638:	29 f1       	breq	.+74     	; 0x684 <FODataSplitter+0x13a>
     63a:	28 f4       	brcc	.+10     	; 0x646 <FODataSplitter+0xfc>
     63c:	11 23       	and	r17, r17
     63e:	41 f0       	breq	.+16     	; 0x650 <FODataSplitter+0x106>
     640:	11 30       	cpi	r17, 0x01	; 1
     642:	99 f0       	breq	.+38     	; 0x66a <FODataSplitter+0x120>
     644:	42 c0       	rjmp	.+132    	; 0x6ca <FODataSplitter+0x180>
     646:	13 30       	cpi	r17, 0x03	; 3
     648:	51 f1       	breq	.+84     	; 0x69e <FODataSplitter+0x154>
     64a:	14 30       	cpi	r17, 0x04	; 4
     64c:	a9 f1       	breq	.+106    	; 0x6b8 <FODataSplitter+0x16e>
     64e:	3d c0       	rjmp	.+122    	; 0x6ca <FODataSplitter+0x180>
					case 0: SensorData.HPElevation   = (uint16_t)strtol(token, NULL, 16); break;
     650:	40 e1       	ldi	r20, 0x10	; 16
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	ce 01       	movw	r24, r28
     65a:	41 96       	adiw	r24, 0x11	; 17
     65c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <strtol>
     660:	60 93 06 60 	sts	0x6006, r22	; 0x806006 <SensorData+0x2>
     664:	70 93 07 60 	sts	0x6007, r23	; 0x806007 <SensorData+0x3>
     668:	30 c0       	rjmp	.+96     	; 0x6ca <FODataSplitter+0x180>
					case 1: SensorData.HPAzimuth     = (uint16_t)strtol(token, NULL, 16); break;
     66a:	40 e1       	ldi	r20, 0x10	; 16
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	ce 01       	movw	r24, r28
     674:	41 96       	adiw	r24, 0x11	; 17
     676:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <strtol>
     67a:	60 93 0a 60 	sts	0x600A, r22	; 0x80600a <SensorData+0x6>
     67e:	70 93 0b 60 	sts	0x600B, r23	; 0x80600b <SensorData+0x7>
     682:	23 c0       	rjmp	.+70     	; 0x6ca <FODataSplitter+0x180>
					case 2: SensorData.PVU         = (uint16_t)strtol(token, NULL, 16)/ U_I_Precizion; break;
     684:	40 e1       	ldi	r20, 0x10	; 16
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	ce 01       	movw	r24, r28
     68e:	41 96       	adiw	r24, 0x11	; 17
     690:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <strtol>
     694:	60 93 0c 60 	sts	0x600C, r22	; 0x80600c <SensorData+0x8>
     698:	70 93 0d 60 	sts	0x600D, r23	; 0x80600d <SensorData+0x9>
     69c:	16 c0       	rjmp	.+44     	; 0x6ca <FODataSplitter+0x180>
					case 3: SensorData.PVI         = (uint16_t)strtol(token, NULL, 16)/ U_I_Precizion; break;
     69e:	40 e1       	ldi	r20, 0x10	; 16
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	ce 01       	movw	r24, r28
     6a8:	41 96       	adiw	r24, 0x11	; 17
     6aa:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <strtol>
     6ae:	60 93 0e 60 	sts	0x600E, r22	; 0x80600e <SensorData+0xa>
     6b2:	70 93 0f 60 	sts	0x600F, r23	; 0x80600f <SensorData+0xb>
     6b6:	09 c0       	rjmp	.+18     	; 0x6ca <FODataSplitter+0x180>
					case 4: EndSwitchesValue       = (uint8_t)strtol(token, NULL, 16); break; //common end switches value
     6b8:	40 e1       	ldi	r20, 0x10	; 16
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	ce 01       	movw	r24, r28
     6c2:	41 96       	adiw	r24, 0x11	; 17
     6c4:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <strtol>
     6c8:	06 2f       	mov	r16, r22
				}

				p += lengths[i];
     6ca:	ce 0c       	add	r12, r14
     6cc:	df 1c       	adc	r13, r15
		if(verify_crc8_cdma2000(datatocheck, crctocheck)){ //if data valid update it
			//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
			const char *p = command;
			uint8_t EndSwitchesValue = 0;

			for (uint8_t i = 0; i < 6; i++) {
     6ce:	1f 5f       	subi	r17, 0xFF	; 255
     6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <FODataSplitter+0x18c>
     6d2:	10 e0       	ldi	r17, 0x00	; 0
     6d4:	00 e0       	ldi	r16, 0x00	; 0
     6d6:	16 30       	cpi	r17, 0x06	; 6
     6d8:	08 f4       	brcc	.+2      	; 0x6dc <FODataSplitter+0x192>
     6da:	93 cf       	rjmp	.-218    	; 0x602 <FODataSplitter+0xb8>
					case 4: EndSwitchesValue       = (uint8_t)strtol(token, NULL, 16); break; //common end switches value
				}

				p += lengths[i];
			}
			SensorData.Elevation = SensorData.HPElevation / Angle_Precizion;
     6dc:	e4 e0       	ldi	r30, 0x04	; 4
     6de:	f0 e6       	ldi	r31, 0x60	; 96
     6e0:	22 81       	ldd	r18, Z+2	; 0x02
     6e2:	33 81       	ldd	r19, Z+3	; 0x03
     6e4:	36 95       	lsr	r19
     6e6:	27 95       	ror	r18
     6e8:	36 95       	lsr	r19
     6ea:	27 95       	ror	r18
     6ec:	ab e7       	ldi	r26, 0x7B	; 123
     6ee:	b4 e1       	ldi	r27, 0x14	; 20
     6f0:	0e 94 19 0b 	call	0x1632	; 0x1632 <__umulhisi3>
     6f4:	96 95       	lsr	r25
     6f6:	87 95       	ror	r24
     6f8:	80 83       	st	Z, r24
     6fa:	91 83       	std	Z+1, r25	; 0x01
			SensorData.Azimuth = SensorData.HPAzimuth / Angle_Precizion;
     6fc:	26 81       	ldd	r18, Z+6	; 0x06
     6fe:	37 81       	ldd	r19, Z+7	; 0x07
     700:	36 95       	lsr	r19
     702:	27 95       	ror	r18
     704:	36 95       	lsr	r19
     706:	27 95       	ror	r18
     708:	0e 94 19 0b 	call	0x1632	; 0x1632 <__umulhisi3>
     70c:	96 95       	lsr	r25
     70e:	87 95       	ror	r24
     710:	84 83       	std	Z+4, r24	; 0x04
     712:	95 83       	std	Z+5, r25	; 0x05
			//spliting end switch value to separate end switch value according to axis
			SensorData.ElMin = (EndSwitchesValue & 0x01) ? 1 : 0;
     714:	80 2f       	mov	r24, r16
     716:	81 70       	andi	r24, 0x01	; 1
     718:	84 87       	std	Z+12, r24	; 0x0c
			SensorData.ElMax = (EndSwitchesValue & 0x02) ? 1 : 0;
     71a:	01 fb       	bst	r16, 1
     71c:	88 27       	eor	r24, r24
     71e:	80 f9       	bld	r24, 0
     720:	85 87       	std	Z+13, r24	; 0x0d
			SensorData.AzMin = (EndSwitchesValue & 0x04) ? 1 : 0;
     722:	02 fb       	bst	r16, 2
     724:	88 27       	eor	r24, r24
     726:	80 f9       	bld	r24, 0
     728:	86 87       	std	Z+14, r24	; 0x0e
			SensorData.AzMax = (EndSwitchesValue & 0x08) ? 1 : 0;
     72a:	03 fb       	bst	r16, 3
     72c:	00 27       	eor	r16, r16
     72e:	00 f9       	bld	r16, 0
     730:	07 87       	std	Z+15, r16	; 0x0f
			SensorData.FO_bad_signal_fault = false; //reset error
     732:	10 8a       	std	Z+16, r1	; 0x10
			SensorData.FO_data_fault = false; //reset error
     734:	12 8a       	std	Z+18, r1	; 0x12
			SensorData.FO_no_power_fault = false; //reset error
     736:	11 8a       	std	Z+17, r1	; 0x11
     738:	03 c0       	rjmp	.+6      	; 0x740 <FODataSplitter+0x1f6>

		}
		else{
			//uncomment if nedded
			//screen_write_formatted_text("data is corupted!", 1, ALIGN_CENTER); // bad crc
			SensorData.FO_data_fault = true;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	80 93 16 60 	sts	0x6016, r24	; 0x806016 <SensorData+0x12>
		}	
	}


}
     740:	a0 96       	adiw	r28, 0x20	; 32
     742:	cd bf       	out	0x3d, r28	; 61
     744:	de bf       	out	0x3e, r29	; 62
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	ef 90       	pop	r14
     752:	df 90       	pop	r13
     754:	cf 90       	pop	r12
     756:	bf 90       	pop	r11
     758:	af 90       	pop	r10
     75a:	9f 90       	pop	r9
     75c:	8f 90       	pop	r8
     75e:	7f 90       	pop	r7
     760:	08 95       	ret

00000762 <FOReceiver>:
 * This function continuously reads incoming data via USART, processes the data, 
 * and executes the appropriate command. If an error occurs or a warning is set, 
 * it handles the corresponding state. The function handles both normal command 
 * processing and error recovery.
 */
void FOReceiver() {
     762:	ef 92       	push	r14
     764:	ff 92       	push	r15
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	64 97       	sbiw	r28, 0x14	; 20
     774:	cd bf       	out	0x3d, r28	; 61
     776:	de bf       	out	0x3e, r29	; 62
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
     778:	fe 01       	movw	r30, r28
     77a:	31 96       	adiw	r30, 0x01	; 1
     77c:	84 e1       	ldi	r24, 0x14	; 20
     77e:	df 01       	movw	r26, r30
     780:	1d 92       	st	X+, r1
     782:	8a 95       	dec	r24
     784:	e9 f7       	brne	.-6      	; 0x780 <FOReceiver+0x1e>
    uint8_t start = 0;
	uint16_t timeout = FO_TIMEOUT_COUNTER;
     786:	04 ef       	ldi	r16, 0xF4	; 244
     788:	11 e0       	ldi	r17, 0x01	; 1
 * processing and error recovery.
 */
void FOReceiver() {
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
    uint8_t start = 0;
     78a:	e1 2c       	mov	r14, r1
 * and executes the appropriate command. If an error occurs or a warning is set, 
 * it handles the corresponding state. The function handles both normal command 
 * processing and error recovery.
 */
void FOReceiver() {
    uint8_t index = 0;
     78c:	f1 2c       	mov	r15, r1
     78e:	03 c0       	rjmp	.+6      	; 0x796 <FOReceiver+0x34>
            } else if (index < MESSAGE_LENGTH_FO) {
                command[index++] = c; // Store received character in command array
            }
        }
        if (c == '<') { // If received data start symbol
            start = 1;
     790:	ee 24       	eor	r14, r14
     792:	e3 94       	inc	r14
            index = 0;
     794:	f1 2c       	mov	r15, r1
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
    uint8_t start = 0;
	uint16_t timeout = FO_TIMEOUT_COUNTER;

    while (1) {
        char c = USART1_readChar(); // Reading a character from USART
     796:	0e 94 15 09 	call	0x122a	; 0x122a <USART1_readChar>

		if (--timeout == 0) { // Timeout condition
     79a:	01 50       	subi	r16, 0x01	; 1
     79c:	11 09       	sbc	r17, r1
     79e:	21 f4       	brne	.+8      	; 0x7a8 <FOReceiver+0x46>
			SensorData.FO_no_power_fault = true;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	80 93 15 60 	sts	0x6015, r24	; 0x806015 <SensorData+0x11>
			break;
     7a6:	1e c0       	rjmp	.+60     	; 0x7e4 <FOReceiver+0x82>
		}
        if (start) {
     7a8:	ee 20       	and	r14, r14
     7aa:	c9 f0       	breq	.+50     	; 0x7de <FOReceiver+0x7c>
            if (c == '>') { // If received data end symbol
     7ac:	8e 33       	cpi	r24, 0x3E	; 62
     7ae:	61 f4       	brne	.+24     	; 0x7c8 <FOReceiver+0x66>
               start = 0;
			   command[index] = '\0';
     7b0:	e1 e0       	ldi	r30, 0x01	; 1
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	ec 0f       	add	r30, r28
     7b6:	fd 1f       	adc	r31, r29
     7b8:	ef 0d       	add	r30, r15
     7ba:	f1 1d       	adc	r31, r1
     7bc:	10 82       	st	Z, r1
               index = 0;
               FODataSplitter(command); // Execute the received command //comment when testing lines below
     7be:	ce 01       	movw	r24, r28
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	0e 94 a5 02 	call	0x54a	; 0x54a <FODataSplitter>
               break;
     7c6:	0e c0       	rjmp	.+28     	; 0x7e4 <FOReceiver+0x82>
            } else if (index < MESSAGE_LENGTH_FO) {
     7c8:	b3 e1       	ldi	r27, 0x13	; 19
     7ca:	bf 15       	cp	r27, r15
     7cc:	40 f0       	brcs	.+16     	; 0x7de <FOReceiver+0x7c>
                command[index++] = c; // Store received character in command array
     7ce:	e1 e0       	ldi	r30, 0x01	; 1
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	ec 0f       	add	r30, r28
     7d4:	fd 1f       	adc	r31, r29
     7d6:	ef 0d       	add	r30, r15
     7d8:	f1 1d       	adc	r31, r1
     7da:	80 83       	st	Z, r24
     7dc:	f3 94       	inc	r15
            }
        }
        if (c == '<') { // If received data start symbol
     7de:	8c 33       	cpi	r24, 0x3C	; 60
     7e0:	d1 f6       	brne	.-76     	; 0x796 <FOReceiver+0x34>
     7e2:	d6 cf       	rjmp	.-84     	; 0x790 <FOReceiver+0x2e>
            start = 1;
            index = 0;
        }
    }
     7e4:	64 96       	adiw	r28, 0x14	; 20
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	08 95       	ret

000007f8 <GPIO_init>:

#include "Settings.h"

void GPIO_init(){
    // Configure USART0 and USART1 pin routing
    PORTMUX.USARTROUTEA = PORTMUX_USART0_ALT1_gc | PORTMUX_USART1_ALT2_gc; // Set USART0 to alternative pins set 1, USART1 to alternative pins set 2
     7f8:	e0 ee       	ldi	r30, 0xE0	; 224
     7fa:	f5 e0       	ldi	r31, 0x05	; 5
     7fc:	81 e1       	ldi	r24, 0x11	; 17
     7fe:	82 83       	std	Z+2, r24	; 0x02
    PORTMUX.TWIROUTEA = PORTMUX_TWI0_DEFAULT_gc; // Set TWI0 to default pins
     800:	16 82       	std	Z+6, r1	; 0x06
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;
     802:	83 e0       	ldi	r24, 0x03	; 3
     804:	87 83       	std	Z+7, r24	; 0x07
	PORTMUX.TCDROUTEA = PORTMUX_TCD0_ALT2_gc; ///< Select alternative WOC pin variant 2
     806:	82 e0       	ldi	r24, 0x02	; 2
     808:	81 87       	std	Z+9, r24	; 0x09


    // Configure Port A (PA) for RX LED, I2C SDA, SCL, USART0 TX, TX LED and XDIR
    PORTA.DIRSET = PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // Set PA2, PA3, PA4, PA7 as output (RX LED, I2C SDA, SCL, USART0 TX, TX LED, XDIR)
     80a:	e0 e0       	ldi	r30, 0x00	; 0
     80c:	f4 e0       	ldi	r31, 0x04	; 4
     80e:	8c ed       	ldi	r24, 0xDC	; 220
     810:	81 83       	std	Z+1, r24	; 0x01
    PORTA.DIRCLR = PIN1_bm | PIN5_bm; // Set  PA1 as Joystick button,  PA5 as input (USART0 RX)
     812:	82 e2       	ldi	r24, 0x22	; 34
     814:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA1 (Joystick button)
     816:	88 e0       	ldi	r24, 0x08	; 8
     818:	81 8b       	std	Z+17, r24	; 0x11
    PORTA.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA4 (I2C SCL)
     81a:	84 8b       	std	Z+20, r24	; 0x14
    PORTA.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA5 (USART0 RX)
     81c:	85 8b       	std	Z+21, r24	; 0x15

    // Configure ADC pins for Joystick x and y axis
    PORTC.PIN1CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC1 (X axis)
     81e:	e0 e4       	ldi	r30, 0x40	; 64
     820:	f4 e0       	ldi	r31, 0x04	; 4
     822:	91 89       	ldd	r25, Z+17	; 0x11
     824:	98 7f       	andi	r25, 0xF8	; 248
     826:	91 8b       	std	Z+17, r25	; 0x11
    PORTC.PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC1
     828:	91 89       	ldd	r25, Z+17	; 0x11
     82a:	94 60       	ori	r25, 0x04	; 4
     82c:	91 8b       	std	Z+17, r25	; 0x11
    //PORTC.PIN1CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC1

    PORTC.PIN2CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC2 (Y axis)
     82e:	92 89       	ldd	r25, Z+18	; 0x12
     830:	98 7f       	andi	r25, 0xF8	; 248
     832:	92 8b       	std	Z+18, r25	; 0x12
    PORTC.PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC2
     834:	92 89       	ldd	r25, Z+18	; 0x12
     836:	94 60       	ori	r25, 0x04	; 4
     838:	92 8b       	std	Z+18, r25	; 0x12
    //PORTC.PIN2CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC2

	PORTC.DIRSET = PIN0_bm; //Set PC0 as RX LED
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	91 83       	std	Z+1, r25	; 0x01

    // Configure Port D (PD) for USART1 TX and RX
    PORTD.DIRSET = PIN2_bm | PIN3_bm | PIN5_bm; //Set PD2 as linear motor disable pin, PD3 as PWM, PD5 as direction
     83e:	9c e2       	ldi	r25, 0x2C	; 44
     840:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f0461>
	//PORTD.DIRCLR = PIN4_bm; //Linear motor driver TLE9201SG error flag pin

	PORTF.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm; //Set PF1 as enable, PF2 as pulse, PIN3 as direction signals output for HBS86 driver
     844:	e0 ea       	ldi	r30, 0xA0	; 160
     846:	f4 e0       	ldi	r31, 0x04	; 4
     848:	9e e0       	ldi	r25, 0x0E	; 14
     84a:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRCLR = PIN4_bm | PIN5_bm; //Set PF4 as alarm and PF5 as Pend signals inputs from HBS86 driver
     84c:	90 e3       	ldi	r25, 0x30	; 48
     84e:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PF4
     850:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PF5
     852:	85 8b       	std	Z+21, r24	; 0x15
     854:	08 95       	ret

00000856 <I2C_init>:
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal to release the bus
    return data;
}
     856:	e0 e0       	ldi	r30, 0x00	; 0
     858:	f9 e0       	ldi	r31, 0x09	; 9
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	80 83       	st	Z, r24
     85e:	85 e0       	ldi	r24, 0x05	; 5
     860:	86 83       	std	Z+6, r24	; 0x06
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	83 83       	std	Z+3, r24	; 0x03
     866:	85 83       	std	Z+5, r24	; 0x05
     868:	08 95       	ret

0000086a <TransmitAdd>:
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	86 2b       	or	r24, r22
     872:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7f0907>
     876:	48 e8       	ldi	r20, 0x88	; 136
     878:	53 e1       	ldi	r21, 0x13	; 19
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	09 c0       	rjmp	.+18     	; 0x892 <TransmitAdd+0x28>
     880:	41 50       	subi	r20, 0x01	; 1
     882:	51 09       	sbc	r21, r1
     884:	61 09       	sbc	r22, r1
     886:	71 09       	sbc	r23, r1
     888:	21 f4       	brne	.+8      	; 0x892 <TransmitAdd+0x28>
     88a:	83 e0       	ldi	r24, 0x03	; 3
     88c:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     890:	05 c0       	rjmp	.+10     	; 0x89c <TransmitAdd+0x32>
     892:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     896:	80 7c       	andi	r24, 0xC0	; 192
     898:	99 f3       	breq	.-26     	; 0x880 <TransmitAdd+0x16>
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     8a0:	94 fd       	sbrc	r25, 4
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     8a8:	9c 70       	andi	r25, 0x0C	; 12
     8aa:	09 f0       	breq	.+2      	; 0x8ae <TransmitAdd+0x44>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	88 23       	and	r24, r24
     8b0:	19 f0       	breq	.+6      	; 0x8b8 <TransmitAdd+0x4e>
     8b2:	93 e0       	ldi	r25, 0x03	; 3
     8b4:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     8b8:	80 93 d8 64 	sts	0x64D8, r24	; 0x8064d8 <I2C>
     8bc:	08 95       	ret

000008be <TransmitByte>:
     8be:	28 2f       	mov	r18, r24
     8c0:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     8c4:	94 fd       	sbrc	r25, 4
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <TransmitByte+0xe>
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	01 c0       	rjmp	.+2      	; 0x8ce <TransmitByte+0x10>
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     8d2:	9c 70       	andi	r25, 0x0C	; 12
     8d4:	09 f0       	breq	.+2      	; 0x8d8 <TransmitByte+0x1a>
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	88 23       	and	r24, r24
     8da:	19 f0       	breq	.+6      	; 0x8e2 <TransmitByte+0x24>
     8dc:	93 e0       	ldi	r25, 0x03	; 3
     8de:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     8e2:	81 11       	cpse	r24, r1
     8e4:	14 c0       	rjmp	.+40     	; 0x90e <TransmitByte+0x50>
     8e6:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <__TEXT_REGION_LENGTH__+0x7f0908>
     8ea:	48 e8       	ldi	r20, 0x88	; 136
     8ec:	53 e1       	ldi	r21, 0x13	; 19
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	09 c0       	rjmp	.+18     	; 0x906 <TransmitByte+0x48>
     8f4:	41 50       	subi	r20, 0x01	; 1
     8f6:	51 09       	sbc	r21, r1
     8f8:	61 09       	sbc	r22, r1
     8fa:	71 09       	sbc	r23, r1
     8fc:	21 f4       	brne	.+8      	; 0x906 <TransmitByte+0x48>
     8fe:	83 e0       	ldi	r24, 0x03	; 3
     900:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     904:	04 c0       	rjmp	.+8      	; 0x90e <TransmitByte+0x50>
     906:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     90a:	96 ff       	sbrs	r25, 6
     90c:	f3 cf       	rjmp	.-26     	; 0x8f4 <TransmitByte+0x36>
     90e:	80 93 d8 64 	sts	0x64D8, r24	; 0x8064d8 <I2C>
     912:	08 95       	ret

00000914 <WriteToReg>:
 * @param reg Register address to write to.
 * @param data Data to write to the register.
 * 
 * This function writes the data to a specific register of an I2C device.
 */
void WriteToReg(uint8_t addr, uint8_t reg, uint8_t data) {
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	c6 2f       	mov	r28, r22
     91a:	d4 2f       	mov	r29, r20
    if (!TransmitAdd(addr, WRITE)) { // Transmit address for write
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	0e 94 35 04 	call	0x86a	; 0x86a <TransmitAdd>
     922:	81 11       	cpse	r24, r1
     924:	08 c0       	rjmp	.+16     	; 0x936 <WriteToReg+0x22>
        if (!TransmitByte(reg)) { // Write register address
     926:	8c 2f       	mov	r24, r28
     928:	0e 94 5f 04 	call	0x8be	; 0x8be <TransmitByte>
     92c:	81 11       	cpse	r24, r1
     92e:	03 c0       	rjmp	.+6      	; 0x936 <WriteToReg+0x22>
            TransmitByte(data); // Write the data with STOP
     930:	8d 2f       	mov	r24, r29
     932:	0e 94 5f 04 	call	0x8be	; 0x8be <TransmitByte>
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal
     936:	e0 e0       	ldi	r30, 0x00	; 0
     938:	f9 e0       	ldi	r31, 0x09	; 9
     93a:	84 81       	ldd	r24, Z+4	; 0x04
     93c:	83 60       	ori	r24, 0x03	; 3
     93e:	84 83       	std	Z+4, r24	; 0x04
}
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	08 95       	ret

00000946 <ReadButton>:
 */ 
#include "Settings.h"
#include "JoystickVar.h"

uint8_t ReadButton(){
	return !(PORTA.IN & PIN1_bm);
     946:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
     94a:	86 95       	lsr	r24
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	89 27       	eor	r24, r25
}
     950:	81 70       	andi	r24, 0x01	; 1
     952:	08 95       	ret

00000954 <ReadJoystickValues>:


void ReadJoystickValues(){
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
	ADC0_SetupJoystick(Joystick_X_axis_CH);
     95c:	8e e1       	ldi	r24, 0x1E	; 30
     95e:	0e 94 8f 01 	call	0x31e	; 0x31e <ADC0_SetupJoystick>
	Joystick.X_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps; // 5 steps total: -2,-1,0,1,2 (4096/1000 = 4,096)
     962:	0e 94 95 01 	call	0x32a	; 0x32a <ADC0_read>
     966:	98 50       	subi	r25, 0x08	; 8
     968:	04 ef       	ldi	r16, 0xF4	; 244
     96a:	11 e0       	ldi	r17, 0x01	; 1
     96c:	b8 01       	movw	r22, r16
     96e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__divmodhi4>
     972:	c9 ed       	ldi	r28, 0xD9	; 217
     974:	d4 e6       	ldi	r29, 0x64	; 100
     976:	68 83       	st	Y, r22
     978:	79 83       	std	Y+1, r23	; 0x01
	ADC0_SetupJoystick(Joystick_Y_axis_CH);
     97a:	8d e1       	ldi	r24, 0x1D	; 29
     97c:	0e 94 8f 01 	call	0x31e	; 0x31e <ADC0_SetupJoystick>
	Joystick.Y_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps;
     980:	0e 94 95 01 	call	0x32a	; 0x32a <ADC0_read>
     984:	98 50       	subi	r25, 0x08	; 8
     986:	b8 01       	movw	r22, r16
     988:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__divmodhi4>
     98c:	6a 83       	std	Y+2, r22	; 0x02
     98e:	7b 83       	std	Y+3, r23	; 0x03
	Joystick.Button = ReadButton();
     990:	0e 94 a3 04 	call	0x946	; 0x946 <ReadButton>
     994:	8c 83       	std	Y+4, r24	; 0x04
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	08 95       	ret

000009a0 <LinearMotor_enable>:
 */ 
#include "Settings.h"
#include "LinearMotorVar.h"

void LinearMotor_enable(){ //turn on TLE9201SG
	if(LinearMotor.alreadyEnabled == false){
     9a0:	80 91 e1 64 	lds	r24, 0x64E1	; 0x8064e1 <LinearMotor+0x3>
     9a4:	81 11       	cpse	r24, r1
     9a6:	0e c0       	rjmp	.+28     	; 0x9c4 <LinearMotor_enable+0x24>
		PORTD.OUTCLR = PIN2_bm;  // DIS=0
     9a8:	84 e0       	ldi	r24, 0x04	; 4
     9aa:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ae:	8f e5       	ldi	r24, 0x5F	; 95
     9b0:	9a ee       	ldi	r25, 0xEA	; 234
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	f1 f7       	brne	.-4      	; 0x9b2 <LinearMotor_enable+0x12>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <LinearMotor_enable+0x18>
     9b8:	00 00       	nop
		_delay_ms(10);
		LinearMotor.alreadyEnabled = true;
     9ba:	ee ed       	ldi	r30, 0xDE	; 222
     9bc:	f4 e6       	ldi	r31, 0x64	; 100
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	83 83       	std	Z+3, r24	; 0x03
		LinearMotor.alreadyDisabled = false;
     9c2:	14 82       	std	Z+4, r1	; 0x04
     9c4:	08 95       	ret

000009c6 <LinearMotor_disable>:
	}
}

void LinearMotor_disable(){ //turn off TLE9201SG
	if(LinearMotor.alreadyDisabled == false){
     9c6:	80 91 e2 64 	lds	r24, 0x64E2	; 0x8064e2 <LinearMotor+0x4>
     9ca:	81 11       	cpse	r24, r1
     9cc:	0e c0       	rjmp	.+28     	; 0x9ea <LinearMotor_disable+0x24>
		PORTD.OUTSET = PIN2_bm;  // DIS=1
     9ce:	84 e0       	ldi	r24, 0x04	; 4
     9d0:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     9d4:	8f e5       	ldi	r24, 0x5F	; 95
     9d6:	9a ee       	ldi	r25, 0xEA	; 234
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	f1 f7       	brne	.-4      	; 0x9d8 <LinearMotor_disable+0x12>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <LinearMotor_disable+0x18>
     9de:	00 00       	nop
		_delay_ms(10);
		LinearMotor.alreadyDisabled = true;
     9e0:	ee ed       	ldi	r30, 0xDE	; 222
     9e2:	f4 e6       	ldi	r31, 0x64	; 100
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	84 83       	std	Z+4, r24	; 0x04
		LinearMotor.alreadyEnabled = false;
     9e8:	13 82       	std	Z+3, r1	; 0x03
     9ea:	08 95       	ret

000009ec <LinearMotor_start>:
	}
}

void LinearMotor_start(){ //starting pwm signal generation
	if(LinearMotor.alreadyStarted == false){		
     9ec:	80 91 df 64 	lds	r24, 0x64DF	; 0x8064df <LinearMotor+0x1>
     9f0:	81 11       	cpse	r24, r1
     9f2:	0d c0       	rjmp	.+26     	; 0xa0e <LinearMotor_start+0x22>
		TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP0EN_bm; //connecting TCA to PD3
     9f4:	e0 e0       	ldi	r30, 0x00	; 0
     9f6:	fa e0       	ldi	r31, 0x0A	; 10
     9f8:	81 81       	ldd	r24, Z+1	; 0x01
     9fa:	80 61       	ori	r24, 0x10	; 16
     9fc:	81 83       	std	Z+1, r24	; 0x01
		TCA0.SPLIT.CTRLA |= TCA_SPLIT_ENABLE_bm; //turn on TCA back
     9fe:	80 81       	ld	r24, Z
     a00:	81 60       	ori	r24, 0x01	; 1
     a02:	80 83       	st	Z, r24
		LinearMotor.alreadyStarted = true;
     a04:	ee ed       	ldi	r30, 0xDE	; 222
     a06:	f4 e6       	ldi	r31, 0x64	; 100
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	81 83       	std	Z+1, r24	; 0x01
		LinearMotor.alreadyStoped = false;
     a0c:	12 82       	std	Z+2, r1	; 0x02
     a0e:	08 95       	ret

00000a10 <LinearMotor_stop>:
	}

}

void LinearMotor_stop(){
	if(LinearMotor.alreadyStoped == false){ //stoping pwm signal generation
     a10:	80 91 e0 64 	lds	r24, 0x64E0	; 0x8064e0 <LinearMotor+0x2>
     a14:	81 11       	cpse	r24, r1
     a16:	19 c0       	rjmp	.+50     	; 0xa4a <LinearMotor_stop+0x3a>
		TCA0.SPLIT.CTRLB &= ~(TCA_SPLIT_HCMP0EN_bm); //disconecting TCA from PD3
     a18:	e0 e0       	ldi	r30, 0x00	; 0
     a1a:	fa e0       	ldi	r31, 0x0A	; 10
     a1c:	81 81       	ldd	r24, Z+1	; 0x01
     a1e:	8f 7e       	andi	r24, 0xEF	; 239
     a20:	81 83       	std	Z+1, r24	; 0x01
		TCA0.SPLIT.CTRLA &= ~TCA_SPLIT_ENABLE_bm;  // turn off TCA
     a22:	80 81       	ld	r24, Z
     a24:	8e 7f       	andi	r24, 0xFE	; 254
     a26:	80 83       	st	Z, r24
		PORTD.OUTCLR = PIN3_bm; //ensure PWM low level
     a28:	88 e0       	ldi	r24, 0x08	; 8
     a2a:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	8e e9       	ldi	r24, 0x9E	; 158
     a32:	94 e2       	ldi	r25, 0x24	; 36
     a34:	21 50       	subi	r18, 0x01	; 1
     a36:	80 40       	sbci	r24, 0x00	; 0
     a38:	90 40       	sbci	r25, 0x00	; 0
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <LinearMotor_stop+0x24>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <LinearMotor_stop+0x2e>
     a3e:	00 00       	nop
		_delay_ms(500); //preventing from error flag- 500mS of free spinning
		LinearMotor.alreadyStoped = true;
     a40:	ee ed       	ldi	r30, 0xDE	; 222
     a42:	f4 e6       	ldi	r31, 0x64	; 100
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	82 83       	std	Z+2, r24	; 0x02
		LinearMotor.alreadyStarted = false;
     a48:	11 82       	std	Z+1, r1	; 0x01
     a4a:	08 95       	ret

00000a4c <LinearMotor_set_direction>:
	}

}

void LinearMotor_set_direction(bool dir)
{
     a4c:	cf 93       	push	r28
    if (dir != LinearMotor.lastDirection)  // if direction change (single time per cycle)
     a4e:	90 91 de 64 	lds	r25, 0x64DE	; 0x8064de <LinearMotor>
     a52:	98 17       	cp	r25, r24
     a54:	81 f0       	breq	.+32     	; 0xa76 <LinearMotor_set_direction+0x2a>
     a56:	c8 2f       	mov	r28, r24
    {
		LinearMotor_stop();
     a58:	0e 94 08 05 	call	0xa10	; 0xa10 <LinearMotor_stop>
		if(dir)
     a5c:	cc 23       	and	r28, r28
     a5e:	21 f0       	breq	.+8      	; 0xa68 <LinearMotor_set_direction+0x1c>
            PORTD.OUTSET = PIN5_bm;   // UP
     a60:	80 e2       	ldi	r24, 0x20	; 32
     a62:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     a66:	03 c0       	rjmp	.+6      	; 0xa6e <LinearMotor_set_direction+0x22>
		else
            PORTD.OUTCLR = PIN5_bm;   // DOWN
     a68:	80 e2       	ldi	r24, 0x20	; 32
     a6a:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
		LinearMotor_start();
     a6e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LinearMotor_start>
        LinearMotor.lastDirection = dir;
     a72:	c0 93 de 64 	sts	0x64DE, r28	; 0x8064de <LinearMotor>
    }
}
     a76:	cf 91       	pop	r28
     a78:	08 95       	ret

00000a7a <LinearMotor_init>:

void LinearMotor_init(){
	TCA0_init_linear_PWM(20000, 50);
     a7a:	62 e3       	ldi	r22, 0x32	; 50
     a7c:	80 e2       	ldi	r24, 0x20	; 32
     a7e:	9e e4       	ldi	r25, 0x4E	; 78
     a80:	0e 94 fb 07 	call	0xff6	; 0xff6 <TCA0_init_linear_PWM>

	PORTD.OUTCLR = PIN3_bm; //set PWM signal low
     a84:	e0 e6       	ldi	r30, 0x60	; 96
     a86:	f4 e0       	ldi	r31, 0x04	; 4
     a88:	88 e0       	ldi	r24, 0x08	; 8
     a8a:	86 83       	std	Z+6, r24	; 0x06
	PORTD.OUTSET = PIN2_bm; //set output disabled for TLE9201SG
     a8c:	84 e0       	ldi	r24, 0x04	; 4
     a8e:	85 83       	std	Z+5, r24	; 0x05
     a90:	08 95       	ret

00000a92 <main>:

#include "Settings.h"

int main(void)
{
    CLOCK_XOSCHF_clock_init();
     a92:	0e 94 a9 01 	call	0x352	; 0x352 <CLOCK_XOSCHF_clock_init>
    GPIO_init();
     a96:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <GPIO_init>
	LinearMotor_init();
     a9a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <LinearMotor_init>
	Stepper_init();
     a9e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <Stepper_init>
    I2C_init();
     aa2:	0e 94 2b 04 	call	0x856	; 0x856 <I2C_init>
    ADC0_init();
     aa6:	0e 94 87 01 	call	0x30e	; 0x30e <ADC0_init>
    USART0_init();
     aaa:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <USART0_init>
    USART1_init();
     aae:	0e 94 0a 09 	call	0x1214	; 0x1214 <USART1_init>
    screen_init();
     ab2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <screen_init>
    screen_clear();
     ab6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <screen_clear>

	
    while (1) 
    {
		RS485Receiver(); //RS485 communication
     aba:	0e 94 36 06 	call	0xc6c	; 0xc6c <RS485Receiver>
		FOReceiver(); // Received Fiber optic data
     abe:	0e 94 b1 03 	call	0x762	; 0x762 <FOReceiver>
		ReadJoystickValues(); //Joystick read
     ac2:	0e 94 aa 04 	call	0x954	; 0x954 <ReadJoystickValues>
		work();
     ac6:	0e 94 4c 01 	call	0x298	; 0x298 <work>
		screen_write_formatted_text("SE:%3d TE:%3d", 0, ALIGN_LEFT, SensorData.Elevation, Target.elevation);
     aca:	00 e0       	ldi	r16, 0x00	; 0
     acc:	10 e6       	ldi	r17, 0x60	; 96
     ace:	f8 01       	movw	r30, r16
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	8f 93       	push	r24
     ad4:	80 81       	ld	r24, Z
     ad6:	8f 93       	push	r24
     ad8:	c4 e0       	ldi	r28, 0x04	; 4
     ada:	d0 e6       	ldi	r29, 0x60	; 96
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	8f 93       	push	r24
     ae0:	88 81       	ld	r24, Y
     ae2:	8f 93       	push	r24
     ae4:	1f 92       	push	r1
     ae6:	1f 92       	push	r1
     ae8:	8f e8       	ldi	r24, 0x8F	; 143
     aea:	94 e6       	ldi	r25, 0x64	; 100
     aec:	9f 93       	push	r25
     aee:	8f 93       	push	r24
     af0:	0e 94 76 07 	call	0xeec	; 0xeec <screen_write_formatted_text>
		screen_write_formatted_text("SA:%3d TA:%3d", 1, ALIGN_LEFT, SensorData.Azimuth, Target.azimuth);
     af4:	f8 01       	movw	r30, r16
     af6:	83 81       	ldd	r24, Z+3	; 0x03
     af8:	8f 93       	push	r24
     afa:	82 81       	ldd	r24, Z+2	; 0x02
     afc:	8f 93       	push	r24
     afe:	8d 81       	ldd	r24, Y+5	; 0x05
     b00:	8f 93       	push	r24
     b02:	8c 81       	ldd	r24, Y+4	; 0x04
     b04:	8f 93       	push	r24
     b06:	1f 92       	push	r1
     b08:	11 e0       	ldi	r17, 0x01	; 1
     b0a:	1f 93       	push	r17
     b0c:	8d e9       	ldi	r24, 0x9D	; 157
     b0e:	94 e6       	ldi	r25, 0x64	; 100
     b10:	9f 93       	push	r25
     b12:	8f 93       	push	r24
     b14:	0e 94 76 07 	call	0xeec	; 0xeec <screen_write_formatted_text>
		screen_write_formatted_text("SCU:%4d SCI:%4d", 2, ALIGN_LEFT, SensorData.PVU, SensorData.PVI);
     b18:	8b 85       	ldd	r24, Y+11	; 0x0b
     b1a:	8f 93       	push	r24
     b1c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b1e:	8f 93       	push	r24
     b20:	89 85       	ldd	r24, Y+9	; 0x09
     b22:	8f 93       	push	r24
     b24:	88 85       	ldd	r24, Y+8	; 0x08
     b26:	8f 93       	push	r24
     b28:	1f 92       	push	r1
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	8f 93       	push	r24
     b2e:	8b ea       	ldi	r24, 0xAB	; 171
     b30:	94 e6       	ldi	r25, 0x64	; 100
     b32:	9f 93       	push	r25
     b34:	8f 93       	push	r24
     b36:	0e 94 76 07 	call	0xeec	; 0xeec <screen_write_formatted_text>
		screen_write_formatted_text("%03d|%03d", 4, ALIGN_CENTER, WSData.azimuth, WSData.elevation);
     b3a:	c7 ee       	ldi	r28, 0xE7	; 231
     b3c:	d4 e6       	ldi	r29, 0x64	; 100
     b3e:	8b 81       	ldd	r24, Y+3	; 0x03
     b40:	8f 93       	push	r24
     b42:	8a 81       	ldd	r24, Y+2	; 0x02
     b44:	8f 93       	push	r24
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	8f 93       	push	r24
     b4a:	88 81       	ld	r24, Y
     b4c:	8f 93       	push	r24
     b4e:	1f 93       	push	r17
     b50:	84 e0       	ldi	r24, 0x04	; 4
     b52:	8f 93       	push	r24
     b54:	8b eb       	ldi	r24, 0xBB	; 187
     b56:	94 e6       	ldi	r25, 0x64	; 100
     b58:	9f 93       	push	r25
     b5a:	8f 93       	push	r24
     b5c:	0e 94 76 07 	call	0xeec	; 0xeec <screen_write_formatted_text>
		screen_write_formatted_text("%03d|%d|%d|%d", 5, ALIGN_CENTER, WSData.topelevation, WSData.windspeed, WSData.winddirection, WSData.lightlevel);
     b60:	9f 81       	ldd	r25, Y+7	; 0x07
     b62:	8e 81       	ldd	r24, Y+6	; 0x06
     b64:	2d b7       	in	r18, 0x3d	; 61
     b66:	3e b7       	in	r19, 0x3e	; 62
     b68:	20 5e       	subi	r18, 0xE0	; 224
     b6a:	3f 4f       	sbci	r19, 0xFF	; 255
     b6c:	2d bf       	out	0x3d, r18	; 61
     b6e:	3e bf       	out	0x3e, r19	; 62
     b70:	29 85       	ldd	r18, Y+9	; 0x09
     b72:	2f 93       	push	r18
     b74:	28 85       	ldd	r18, Y+8	; 0x08
     b76:	2f 93       	push	r18
     b78:	1f 92       	push	r1
     b7a:	9f 93       	push	r25
     b7c:	1f 92       	push	r1
     b7e:	8f 93       	push	r24
     b80:	8d 81       	ldd	r24, Y+5	; 0x05
     b82:	8f 93       	push	r24
     b84:	8c 81       	ldd	r24, Y+4	; 0x04
     b86:	8f 93       	push	r24
     b88:	1f 93       	push	r17
     b8a:	85 e0       	ldi	r24, 0x05	; 5
     b8c:	8f 93       	push	r24
     b8e:	85 ec       	ldi	r24, 0xC5	; 197
     b90:	94 e6       	ldi	r25, 0x64	; 100
     b92:	9f 93       	push	r25
     b94:	8f 93       	push	r24
     b96:	0e 94 76 07 	call	0xeec	; 0xeec <screen_write_formatted_text>
     b9a:	3f ef       	ldi	r19, 0xFF	; 255
     b9c:	82 e5       	ldi	r24, 0x52	; 82
     b9e:	97 e0       	ldi	r25, 0x07	; 7
     ba0:	31 50       	subi	r19, 0x01	; 1
     ba2:	80 40       	sbci	r24, 0x00	; 0
     ba4:	90 40       	sbci	r25, 0x00	; 0
     ba6:	e1 f7       	brne	.-8      	; 0xba0 <main+0x10e>
     ba8:	00 c0       	rjmp	.+0      	; 0xbaa <main+0x118>
     baa:	00 00       	nop
     bac:	ed b7       	in	r30, 0x3d	; 61
     bae:	fe b7       	in	r31, 0x3e	; 62
     bb0:	3c 96       	adiw	r30, 0x0c	; 12
     bb2:	ed bf       	out	0x3d, r30	; 61
     bb4:	fe bf       	out	0x3e, r31	; 62
     bb6:	81 cf       	rjmp	.-254    	; 0xaba <main+0x28>

00000bb8 <RS485_Led>:
 */ 
#include "Settings.h"

void RS485_Led(RS485_LED_t LED){

    switch (LED) {
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	51 f0       	breq	.+20     	; 0xbd0 <RS485_Led+0x18>
     bbc:	28 f0       	brcs	.+10     	; 0xbc8 <RS485_Led+0x10>
     bbe:	82 30       	cpi	r24, 0x02	; 2
     bc0:	59 f0       	breq	.+22     	; 0xbd8 <RS485_Led+0x20>
     bc2:	83 30       	cpi	r24, 0x03	; 3
     bc4:	69 f0       	breq	.+26     	; 0xbe0 <RS485_Led+0x28>
     bc6:	08 95       	ret
	    case RX_LED_ON:
			PORTC.OUTSET = PIN0_bm;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f0445>
		break;
     bce:	08 95       	ret
	    case RX_LED_OFF:
			PORTC.OUTCLR = PIN0_bm;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f0446>
		break;
     bd6:	08 95       	ret
	    case TX_LED_ON:
			PORTA.OUTSET = PIN6_bm;
     bd8:	80 e4       	ldi	r24, 0x40	; 64
     bda:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f0405>
		break;
     bde:	08 95       	ret
	    case TX_LED_OFF:
			PORTA.OUTCLR = PIN6_bm;
     be0:	80 e4       	ldi	r24, 0x40	; 64
     be2:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f0406>
     be6:	08 95       	ret

00000be8 <RS485DataSplitter>:
 *  Author: Saulius
 */ 
#include "Settings.h"
#include "RS485USARTVar.h"

void RS485DataSplitter(char *command) {
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
     bf6:	2c 97       	sbiw	r28, 0x0c	; 12
     bf8:	cd bf       	out	0x3d, r28	; 61
     bfa:	de bf       	out	0x3e, r29	; 62
	uint16_t *fields[] = {
     bfc:	2c e0       	ldi	r18, 0x0C	; 12
     bfe:	ec e5       	ldi	r30, 0x5C	; 92
     c00:	f3 e6       	ldi	r31, 0x63	; 99
     c02:	de 01       	movw	r26, r28
     c04:	11 96       	adiw	r26, 0x01	; 1
     c06:	01 90       	ld	r0, Z+
     c08:	0d 92       	st	X+, r0
     c0a:	2a 95       	dec	r18
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <RS485DataSplitter+0x1e>
		(uint16_t*)&WSData.windspeed,
		(uint16_t*)&WSData.winddirection,
		&WSData.lightlevel
	};

	char *token = strtok(command, "|");
     c0e:	63 ed       	ldi	r22, 0xD3	; 211
     c10:	74 e6       	ldi	r23, 0x64	; 100
     c12:	0e 94 9e 0c 	call	0x193c	; 0x193c <strtok>
	for (uint8_t i = 0; token != NULL && i < 6; i++) {
     c16:	10 e0       	ldi	r17, 0x00	; 0
     c18:	1c c0       	rjmp	.+56     	; 0xc52 <RS485DataSplitter+0x6a>
		*fields[i] = (uint16_t)strtol(token, NULL, 10);
     c1a:	e1 2f       	mov	r30, r17
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	ee 0f       	add	r30, r30
     c20:	ff 1f       	adc	r31, r31
     c22:	21 e0       	ldi	r18, 0x01	; 1
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	2c 0f       	add	r18, r28
     c28:	3d 1f       	adc	r19, r29
     c2a:	e2 0f       	add	r30, r18
     c2c:	f3 1f       	adc	r31, r19
     c2e:	e0 80       	ld	r14, Z
     c30:	f1 80       	ldd	r15, Z+1	; 0x01
     c32:	4a e0       	ldi	r20, 0x0A	; 10
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <strtol>
     c3e:	f7 01       	movw	r30, r14
     c40:	60 83       	st	Z, r22
     c42:	71 83       	std	Z+1, r23	; 0x01
		token = strtok(NULL, "|");
     c44:	63 ed       	ldi	r22, 0xD3	; 211
     c46:	74 e6       	ldi	r23, 0x64	; 100
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 9e 0c 	call	0x193c	; 0x193c <strtok>
		(uint16_t*)&WSData.winddirection,
		&WSData.lightlevel
	};

	char *token = strtok(command, "|");
	for (uint8_t i = 0; token != NULL && i < 6; i++) {
     c50:	1f 5f       	subi	r17, 0xFF	; 255
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	11 f0       	breq	.+4      	; 0xc5a <RS485DataSplitter+0x72>
     c56:	16 30       	cpi	r17, 0x06	; 6
     c58:	00 f3       	brcs	.-64     	; 0xc1a <RS485DataSplitter+0x32>
		*fields[i] = (uint16_t)strtol(token, NULL, 10);
		token = strtok(NULL, "|");
	}

}
     c5a:	2c 96       	adiw	r28, 0x0c	; 12
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	08 95       	ret

00000c6c <RS485Receiver>:

void RS485Receiver() {
     c6c:	ef 92       	push	r14
     c6e:	ff 92       	push	r15
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	6b 97       	sbiw	r28, 0x1b	; 27
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	de bf       	out	0x3e, r29	; 62
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
     c82:	fe 01       	movw	r30, r28
     c84:	31 96       	adiw	r30, 0x01	; 1
     c86:	8b e1       	ldi	r24, 0x1B	; 27
     c88:	df 01       	movw	r26, r30
     c8a:	1d 92       	st	X+, r1
     c8c:	8a 95       	dec	r24
     c8e:	e9 f7       	brne	.-6      	; 0xc8a <RS485Receiver+0x1e>
	uint8_t start = 0;
	uint16_t timeout = RS485_TIMEOUT_COUNTER;
     c90:	08 ee       	ldi	r16, 0xE8	; 232
     c92:	13 e0       	ldi	r17, 0x03	; 3
}

void RS485Receiver() {
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
	uint8_t start = 0;
     c94:	e1 2c       	mov	r14, r1
	}

}

void RS485Receiver() {
	uint8_t index = 0;
     c96:	f1 2c       	mov	r15, r1
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
	uint8_t start = 0;
	uint16_t timeout = RS485_TIMEOUT_COUNTER;

	while (1) {
		char c = USART0_readChar(); // Reading a character from USART	
     c98:	0e 94 f7 08 	call	0x11ee	; 0x11ee <USART0_readChar>
		if (--timeout == 0) { // Timeout condition
     c9c:	01 50       	subi	r16, 0x01	; 1
     c9e:	11 09       	sbc	r17, r1
     ca0:	39 f1       	breq	.+78     	; 0xcf0 <RS485Receiver+0x84>
			break;
		}
		if (start) {
     ca2:	ee 20       	and	r14, r14
     ca4:	e1 f0       	breq	.+56     	; 0xcde <RS485Receiver+0x72>
			if (c == '}') { // If received data end symbol
     ca6:	8d 37       	cpi	r24, 0x7D	; 125
     ca8:	79 f4       	brne	.+30     	; 0xcc8 <RS485Receiver+0x5c>
				RS485_Led(RX_LED_OFF);
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <RS485_Led>
				start = 0;
				command[index] = '\0';
     cb0:	e1 e0       	ldi	r30, 0x01	; 1
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	ec 0f       	add	r30, r28
     cb6:	fd 1f       	adc	r31, r29
     cb8:	ef 0d       	add	r30, r15
     cba:	f1 1d       	adc	r31, r1
     cbc:	10 82       	st	Z, r1
				index = 0;
				RS485DataSplitter(command); // Execute the received command //comment when testing lines below
     cbe:	ce 01       	movw	r24, r28
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <RS485DataSplitter>
				break;
     cc6:	14 c0       	rjmp	.+40     	; 0xcf0 <RS485Receiver+0x84>
				} else if (index < MESSAGE_LENGTH_RS485) {
     cc8:	ba e1       	ldi	r27, 0x1A	; 26
     cca:	bf 15       	cp	r27, r15
     ccc:	40 f0       	brcs	.+16     	; 0xcde <RS485Receiver+0x72>
				command[index++] = c; // Store received character in command array
     cce:	e1 e0       	ldi	r30, 0x01	; 1
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	ec 0f       	add	r30, r28
     cd4:	fd 1f       	adc	r31, r29
     cd6:	ef 0d       	add	r30, r15
     cd8:	f1 1d       	adc	r31, r1
     cda:	80 83       	st	Z, r24
     cdc:	f3 94       	inc	r15
			}
		}
		if (c == '{') { // If received data start symbol
     cde:	8b 37       	cpi	r24, 0x7B	; 123
     ce0:	d9 f6       	brne	.-74     	; 0xc98 <RS485Receiver+0x2c>
			start = 1;
			index = 0;
			RS485_Led(RX_LED_ON);
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <RS485_Led>
				} else if (index < MESSAGE_LENGTH_RS485) {
				command[index++] = c; // Store received character in command array
			}
		}
		if (c == '{') { // If received data start symbol
			start = 1;
     ce8:	ee 24       	eor	r14, r14
     cea:	e3 94       	inc	r14
			index = 0;
     cec:	f1 2c       	mov	r15, r1
     cee:	d4 cf       	rjmp	.-88     	; 0xc98 <RS485Receiver+0x2c>
			RS485_Led(RX_LED_ON);
		}
	}
     cf0:	6b 96       	adiw	r28, 0x1b	; 27
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	08 95       	ret

00000d04 <screen_command>:
    if (contrast > 0x3f) {
        contrast = 0x3f;  ///< Ensure contrast does not exceed maximum
    }
    screen_command(0x81);  ///< Send command to set contrast
    screen_command(contrast);  ///< Set the contrast value
}
     d04:	48 2f       	mov	r20, r24
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	8c e3       	ldi	r24, 0x3C	; 60
     d0a:	0e 94 8a 04 	call	0x914	; 0x914 <WriteToReg>
     d0e:	08 95       	ret

00000d10 <screen_data>:
     d10:	48 2f       	mov	r20, r24
     d12:	60 e4       	ldi	r22, 0x40	; 64
     d14:	8c e3       	ldi	r24, 0x3C	; 60
     d16:	0e 94 8a 04 	call	0x914	; 0x914 <WriteToReg>
     d1a:	08 95       	ret

00000d1c <screen_init>:
     d1c:	cf 93       	push	r28
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	8c e3       	ldi	r24, 0x3C	; 60
     d22:	0e 94 35 04 	call	0x86a	; 0x86a <TransmitAdd>
     d26:	c0 e0       	ldi	r28, 0x00	; 0
     d28:	08 c0       	rjmp	.+16     	; 0xd3a <screen_init+0x1e>
     d2a:	ec 2f       	mov	r30, r28
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	e4 5c       	subi	r30, 0xC4	; 196
     d30:	fc 49       	sbci	r31, 0x9C	; 156
     d32:	80 81       	ld	r24, Z
     d34:	0e 94 5f 04 	call	0x8be	; 0x8be <TransmitByte>
     d38:	cf 5f       	subi	r28, 0xFF	; 255
     d3a:	ca 31       	cpi	r28, 0x1A	; 26
     d3c:	b0 f3       	brcs	.-20     	; 0xd2a <screen_init+0xe>
     d3e:	cf 91       	pop	r28
     d40:	08 95       	ret

00000d42 <screen_draw_char>:
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	d8 2f       	mov	r29, r24
     d4a:	80 ee       	ldi	r24, 0xE0	; 224
     d4c:	8d 0f       	add	r24, r29
     d4e:	80 36       	cpi	r24, 0x60	; 96
     d50:	28 f0       	brcs	.+10     	; 0xd5c <screen_draw_char+0x1a>
     d52:	d0 3b       	cpi	r29, 0xB0	; 176
     d54:	19 f0       	breq	.+6      	; 0xd5c <screen_draw_char+0x1a>
     d56:	d0 3c       	cpi	r29, 0xC0	; 192
     d58:	08 f4       	brcc	.+2      	; 0xd5c <screen_draw_char+0x1a>
     d5a:	d0 e2       	ldi	r29, 0x20	; 32
     d5c:	d0 3b       	cpi	r29, 0xB0	; 176
     d5e:	21 f0       	breq	.+8      	; 0xd68 <screen_draw_char+0x26>
     d60:	d0 3c       	cpi	r29, 0xC0	; 192
     d62:	20 f4       	brcc	.+8      	; 0xd6c <screen_draw_char+0x2a>
     d64:	10 e2       	ldi	r17, 0x20	; 32
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <screen_draw_char+0x2c>
     d68:	10 e5       	ldi	r17, 0x50	; 80
     d6a:	01 c0       	rjmp	.+2      	; 0xd6e <screen_draw_char+0x2c>
     d6c:	1f e5       	ldi	r17, 0x5F	; 95
     d6e:	c0 e0       	ldi	r28, 0x00	; 0
     d70:	13 c0       	rjmp	.+38     	; 0xd98 <screen_draw_char+0x56>
     d72:	8d 2f       	mov	r24, r29
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	81 1b       	sub	r24, r17
     d78:	91 09       	sbc	r25, r1
     d7a:	fc 01       	movw	r30, r24
     d7c:	ee 0f       	add	r30, r30
     d7e:	ff 1f       	adc	r31, r31
     d80:	ee 0f       	add	r30, r30
     d82:	ff 1f       	adc	r31, r31
     d84:	e8 0f       	add	r30, r24
     d86:	f9 1f       	adc	r31, r25
     d88:	e9 5e       	subi	r30, 0xE9	; 233
     d8a:	ff 49       	sbci	r31, 0x9F	; 159
     d8c:	ec 0f       	add	r30, r28
     d8e:	f1 1d       	adc	r31, r1
     d90:	80 81       	ld	r24, Z
     d92:	0e 94 88 06 	call	0xd10	; 0xd10 <screen_data>
     d96:	cf 5f       	subi	r28, 0xFF	; 255
     d98:	c5 30       	cpi	r28, 0x05	; 5
     d9a:	58 f3       	brcs	.-42     	; 0xd72 <screen_draw_char+0x30>
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	0e 94 88 06 	call	0xd10	; 0xd10 <screen_data>
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	1f 91       	pop	r17
     da8:	08 95       	ret

00000daa <screen_clear>:
 * @brief Clears the ST7567S display.
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
    for (int page = 0; page < 8; page++) {
     db2:	00 e0       	ldi	r16, 0x00	; 0
     db4:	10 e0       	ldi	r17, 0x00	; 0
     db6:	16 c0       	rjmp	.+44     	; 0xde4 <screen_clear+0x3a>
        screen_command(0xB0 + page);  ///< Select page
     db8:	80 eb       	ldi	r24, 0xB0	; 176
     dba:	80 0f       	add	r24, r16
     dbc:	0e 94 82 06 	call	0xd04	; 0xd04 <screen_command>
        screen_command(0x00);  ///< Set column address
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	0e 94 82 06 	call	0xd04	; 0xd04 <screen_command>
        screen_command(0x10);  ///< Set column address
     dc6:	80 e1       	ldi	r24, 0x10	; 16
     dc8:	0e 94 82 06 	call	0xd04	; 0xd04 <screen_command>

        for (int column = 0; column < 128; column++) {
     dcc:	c0 e0       	ldi	r28, 0x00	; 0
     dce:	d0 e0       	ldi	r29, 0x00	; 0
     dd0:	04 c0       	rjmp	.+8      	; 0xdda <screen_clear+0x30>
            screen_data(0x00);  ///< Clear each column
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	0e 94 88 06 	call	0xd10	; 0xd10 <screen_data>
    for (int page = 0; page < 8; page++) {
        screen_command(0xB0 + page);  ///< Select page
        screen_command(0x00);  ///< Set column address
        screen_command(0x10);  ///< Set column address

        for (int column = 0; column < 128; column++) {
     dd8:	21 96       	adiw	r28, 0x01	; 1
     dda:	c0 38       	cpi	r28, 0x80	; 128
     ddc:	d1 05       	cpc	r29, r1
     dde:	cc f3       	brlt	.-14     	; 0xdd2 <screen_clear+0x28>
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
    for (int page = 0; page < 8; page++) {
     de0:	0f 5f       	subi	r16, 0xFF	; 255
     de2:	1f 4f       	sbci	r17, 0xFF	; 255
     de4:	08 30       	cpi	r16, 0x08	; 8
     de6:	11 05       	cpc	r17, r1
     de8:	3c f3       	brlt	.-50     	; 0xdb8 <screen_clear+0xe>
        for (int column = 0; column < 128; column++) {
            screen_data(0x00);  ///< Clear each column
        }
    }
    //screen_contrast(SSD1306_CONTRAST);  ///< Restore contrast
}
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	08 95       	ret

00000df4 <screen_draw_text>:
 * the maximum allowed characters are displayed.
 * 
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	8c 01       	movw	r16, r24
     dfe:	d6 2f       	mov	r29, r22
    uint8_t length = 0;
     e00:	c0 e0       	ldi	r28, 0x00	; 0
    while (*text && length < max_length) {
     e02:	05 c0       	rjmp	.+10     	; 0xe0e <screen_draw_text+0x1a>
        screen_draw_char(*text);  ///< Draw each character in the string
     e04:	0e 94 a1 06 	call	0xd42	; 0xd42 <screen_draw_char>
        text++;
     e08:	0f 5f       	subi	r16, 0xFF	; 255
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
        length++;
     e0c:	cf 5f       	subi	r28, 0xFF	; 255
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
    uint8_t length = 0;
    while (*text && length < max_length) {
     e0e:	f8 01       	movw	r30, r16
     e10:	80 81       	ld	r24, Z
     e12:	88 23       	and	r24, r24
     e14:	39 f0       	breq	.+14     	; 0xe24 <screen_draw_text+0x30>
     e16:	cd 17       	cp	r28, r29
     e18:	a8 f3       	brcs	.-22     	; 0xe04 <screen_draw_text+0x10>
     e1a:	04 c0       	rjmp	.+8      	; 0xe24 <screen_draw_text+0x30>
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
        screen_draw_char(' ');  ///< Fill remaining space with spaces
     e1c:	80 e2       	ldi	r24, 0x20	; 32
     e1e:	0e 94 a1 06 	call	0xd42	; 0xd42 <screen_draw_char>
        length++;
     e22:	cf 5f       	subi	r28, 0xFF	; 255
    while (*text && length < max_length) {
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
     e24:	cd 17       	cp	r28, r29
     e26:	d0 f3       	brcs	.-12     	; 0xe1c <screen_draw_text+0x28>
        screen_draw_char(' ');  ///< Fill remaining space with spaces
        length++;
    }
}
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	08 95       	ret

00000e32 <screen_write_text>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param start_pixel The starting pixel column for the text.
 */
void screen_write_text(char *text, uint8_t line, uint8_t start_pixel) {
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	8c 01       	movw	r16, r24
     e3c:	26 2f       	mov	r18, r22
     e3e:	c4 2f       	mov	r28, r20
    uint8_t max_chars = (128 - start_pixel) / 6;  ///< Calculate max characters per line
     e40:	80 e8       	ldi	r24, 0x80	; 128
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	84 1b       	sub	r24, r20
     e46:	91 09       	sbc	r25, r1
     e48:	66 e0       	ldi	r22, 0x06	; 6
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__divmodhi4>
     e50:	d6 2f       	mov	r29, r22
    screen_command(0xB0 | line);  ///< Set the page (line)
     e52:	82 2f       	mov	r24, r18
     e54:	80 6b       	ori	r24, 0xB0	; 176
     e56:	0e 94 82 06 	call	0xd04	; 0xd04 <screen_command>
    screen_command(0x10 | (start_pixel >> 4));  ///< Set high byte of column address
     e5a:	8c 2f       	mov	r24, r28
     e5c:	82 95       	swap	r24
     e5e:	8f 70       	andi	r24, 0x0F	; 15
     e60:	80 61       	ori	r24, 0x10	; 16
     e62:	0e 94 82 06 	call	0xd04	; 0xd04 <screen_command>
    screen_command(0x00 | (start_pixel & 0x0F));  ///< Set low byte of column address
     e66:	8c 2f       	mov	r24, r28
     e68:	8f 70       	andi	r24, 0x0F	; 15
     e6a:	0e 94 82 06 	call	0xd04	; 0xd04 <screen_command>
    screen_draw_text(text, max_chars);  ///< Draw the text
     e6e:	6d 2f       	mov	r22, r29
     e70:	c8 01       	movw	r24, r16
     e72:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <screen_draw_text>
}
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	08 95       	ret

00000e80 <calculate_start_pixel>:
 * @param max_length The maximum number of characters.
 * @param alignment The desired text alignment (left, center, right).
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
     e80:	ac 01       	movw	r20, r24
    uint8_t text_length = 0;
     e82:	90 e0       	ldi	r25, 0x00	; 0
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
     e84:	01 c0       	rjmp	.+2      	; 0xe88 <calculate_start_pixel+0x8>
        text_length++;
     e86:	9f 5f       	subi	r25, 0xFF	; 255
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
    uint8_t text_length = 0;
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
     e88:	fa 01       	movw	r30, r20
     e8a:	e9 0f       	add	r30, r25
     e8c:	f1 1d       	adc	r31, r1
     e8e:	20 81       	ld	r18, Z
     e90:	21 11       	cpse	r18, r1
     e92:	f9 cf       	rjmp	.-14     	; 0xe86 <calculate_start_pixel+0x6>
        text_length++;
    }

    uint8_t text_width = text_length * 6;  ///< Calculate the width of the text in pixels
     e94:	89 2f       	mov	r24, r25
     e96:	88 0f       	add	r24, r24
     e98:	98 0f       	add	r25, r24
     e9a:	29 2f       	mov	r18, r25
     e9c:	22 0f       	add	r18, r18
    switch (alignment) {
     e9e:	61 30       	cpi	r22, 0x01	; 1
     ea0:	19 f0       	breq	.+6      	; 0xea8 <calculate_start_pixel+0x28>
     ea2:	62 30       	cpi	r22, 0x02	; 2
     ea4:	69 f0       	breq	.+26     	; 0xec0 <calculate_start_pixel+0x40>
     ea6:	0f c0       	rjmp	.+30     	; 0xec6 <calculate_start_pixel+0x46>
        case ALIGN_CENTER:
            return (128 - text_width) / 2;  ///< Center the text
     ea8:	80 e8       	ldi	r24, 0x80	; 128
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	ac 01       	movw	r20, r24
     eae:	42 1b       	sub	r20, r18
     eb0:	51 09       	sbc	r21, r1
     eb2:	ca 01       	movw	r24, r20
     eb4:	99 23       	and	r25, r25
     eb6:	0c f4       	brge	.+2      	; 0xeba <calculate_start_pixel+0x3a>
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	95 95       	asr	r25
     ebc:	87 95       	ror	r24
     ebe:	08 95       	ret
        case ALIGN_RIGHT:
            return (128 - text_width);  ///< Right-align the text
     ec0:	80 e8       	ldi	r24, 0x80	; 128
     ec2:	82 1b       	sub	r24, r18
     ec4:	08 95       	ret
        case ALIGN_LEFT:
        default:
            return 0;  ///< Left-align the text
     ec6:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     ec8:	08 95       	ret

00000eca <screen_write_text_aligned>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_text_aligned(char *text, uint8_t line, alignment_t alignment) {
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	ec 01       	movw	r28, r24
     ed2:	16 2f       	mov	r17, r22
    uint8_t start_pixel = calculate_start_pixel(text, alignment);  ///< Calculate start pixel
     ed4:	64 2f       	mov	r22, r20
     ed6:	0e 94 40 07 	call	0xe80	; 0xe80 <calculate_start_pixel>
   screen_write_text(text, line, start_pixel);
     eda:	48 2f       	mov	r20, r24
     edc:	61 2f       	mov	r22, r17
     ede:	ce 01       	movw	r24, r28
     ee0:	0e 94 19 07 	call	0xe32	; 0xe32 <screen_write_text>
}
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	08 95       	ret

00000eec <screen_write_formatted_text>:
 * 
 * @param format The format string for the text.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_formatted_text(const char *format, uint8_t line, alignment_t alignment, ...) {
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	e2 97       	sbiw	r28, 0x32	; 50
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	de bf       	out	0x3e, r29	; 62
    char textStorage[MAX_TEXT_LENGTH];  ///< Buffer for storing formatted text
    va_list args;  ///< Variable argument list

    va_start(args, alignment);  ///< Start reading variable arguments
    vsnprintf(textStorage, MAX_TEXT_LENGTH, format, args);  ///< Format the text
     efa:	9e 01       	movw	r18, r28
     efc:	25 5c       	subi	r18, 0xC5	; 197
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	4f a9       	ldd	r20, Y+55	; 0x37
     f02:	58 ad       	ldd	r21, Y+56	; 0x38
     f04:	62 e3       	ldi	r22, 0x32	; 50
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	ce 01       	movw	r24, r28
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <vsnprintf>
    va_end(args);  ///< End reading variable arguments

    screen_write_text_aligned(textStorage, line, alignment);  ///< Write formatted text to display
     f10:	4a ad       	ldd	r20, Y+58	; 0x3a
     f12:	69 ad       	ldd	r22, Y+57	; 0x39
     f14:	ce 01       	movw	r24, r28
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	0e 94 65 07 	call	0xeca	; 0xeca <screen_write_text_aligned>
}
     f1c:	e2 96       	adiw	r28, 0x32	; 50
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	08 95       	ret

00000f28 <Stepper_enable>:

// -------------------------
// Stepper Enable / Disable
// -------------------------
void Stepper_enable() {
	if(StepperMotor.alreadyEnabled == false){
     f28:	80 91 f4 64 	lds	r24, 0x64F4	; 0x8064f4 <StepperMotor+0x3>
     f2c:	81 11       	cpse	r24, r1
     f2e:	0e c0       	rjmp	.+28     	; 0xf4c <Stepper_enable+0x24>
		PORTF.OUTCLR = PIN1_bm; // aktyvus LOW
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
     f36:	8f e5       	ldi	r24, 0x5F	; 95
     f38:	9a ee       	ldi	r25, 0xEA	; 234
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <Stepper_enable+0x12>
     f3e:	00 c0       	rjmp	.+0      	; 0xf40 <Stepper_enable+0x18>
     f40:	00 00       	nop
		_delay_ms(10);
		StepperMotor.alreadyEnabled = true;
     f42:	e1 ef       	ldi	r30, 0xF1	; 241
     f44:	f4 e6       	ldi	r31, 0x64	; 100
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	83 83       	std	Z+3, r24	; 0x03
		StepperMotor.alreadyDisabled = false;
     f4a:	14 82       	std	Z+4, r1	; 0x04
     f4c:	08 95       	ret

00000f4e <Stepper_disable>:
	}
}

void Stepper_disable() {
	if(StepperMotor.alreadyDisabled == false){
     f4e:	80 91 f5 64 	lds	r24, 0x64F5	; 0x8064f5 <StepperMotor+0x4>
     f52:	81 11       	cpse	r24, r1
     f54:	0e c0       	rjmp	.+28     	; 0xf72 <Stepper_disable+0x24>
		PORTF.OUTSET = PIN1_bm; // HIGH = inactive
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f04a5>
     f5c:	8f e5       	ldi	r24, 0x5F	; 95
     f5e:	9a ee       	ldi	r25, 0xEA	; 234
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <Stepper_disable+0x12>
     f64:	00 c0       	rjmp	.+0      	; 0xf66 <Stepper_disable+0x18>
     f66:	00 00       	nop
		_delay_ms(10);
		StepperMotor.alreadyDisabled = true;
     f68:	e1 ef       	ldi	r30, 0xF1	; 241
     f6a:	f4 e6       	ldi	r31, 0x64	; 100
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	84 83       	std	Z+4, r24	; 0x04
		StepperMotor.alreadyEnabled = false;
     f70:	13 82       	std	Z+3, r1	; 0x03
     f72:	08 95       	ret

00000f74 <Stepper_start>:

// -------------------------
// Stepper Start / Stop
// -------------------------
void Stepper_start() {
	if(StepperMotor.alreadyStarted == false){
     f74:	80 91 f2 64 	lds	r24, 0x64F2	; 0x8064f2 <StepperMotor+0x1>
     f78:	81 11       	cpse	r24, r1
     f7a:	0e c0       	rjmp	.+28     	; 0xf98 <Stepper_start+0x24>
		while (!(TCD0.STATUS & TCD_ENRDY_bm));
     f7c:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
     f80:	80 ff       	sbrs	r24, 0
     f82:	fc cf       	rjmp	.-8      	; 0xf7c <Stepper_start+0x8>
		TCD0.CTRLA |= TCD_ENABLE_bm;
     f84:	e0 e8       	ldi	r30, 0x80	; 128
     f86:	fb e0       	ldi	r31, 0x0B	; 11
     f88:	80 81       	ld	r24, Z
     f8a:	81 60       	ori	r24, 0x01	; 1
     f8c:	80 83       	st	Z, r24
		StepperMotor.alreadyStarted = true;
     f8e:	e1 ef       	ldi	r30, 0xF1	; 241
     f90:	f4 e6       	ldi	r31, 0x64	; 100
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	81 83       	std	Z+1, r24	; 0x01
		StepperMotor.alreadyStoped = false;
     f96:	12 82       	std	Z+2, r1	; 0x02
     f98:	08 95       	ret

00000f9a <Stepper_stop>:
	}
}


void Stepper_stop() {
	if(StepperMotor.alreadyStoped == false){
     f9a:	80 91 f3 64 	lds	r24, 0x64F3	; 0x8064f3 <StepperMotor+0x2>
     f9e:	81 11       	cpse	r24, r1
     fa0:	11 c0       	rjmp	.+34     	; 0xfc4 <Stepper_stop+0x2a>
		TCD0.CTRLA &= ~TCD_ENABLE_bm;//disable counter
     fa2:	e0 e8       	ldi	r30, 0x80	; 128
     fa4:	fb e0       	ldi	r31, 0x0B	; 11
     fa6:	80 81       	ld	r24, Z
     fa8:	8e 7f       	andi	r24, 0xFE	; 254
     faa:	80 83       	st	Z, r24
		while (!(TCD0.STATUS & TCD_ENRDY_bm));//
     fac:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
     fb0:	80 ff       	sbrs	r24, 0
     fb2:	fc cf       	rjmp	.-8      	; 0xfac <Stepper_stop+0x12>
		PORTF.OUTCLR = PIN2_bm;//set pulse low
     fb4:	84 e0       	ldi	r24, 0x04	; 4
     fb6:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
		StepperMotor.alreadyStoped = true;
     fba:	e1 ef       	ldi	r30, 0xF1	; 241
     fbc:	f4 e6       	ldi	r31, 0x64	; 100
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	82 83       	std	Z+2, r24	; 0x02
		StepperMotor.alreadyStarted = false;
     fc2:	11 82       	std	Z+1, r1	; 0x01
     fc4:	08 95       	ret

00000fc6 <Stepper_set_direction>:

// -------------------------
// Stepper Direction
// -------------------------
void Stepper_set_direction(bool dir) {
	if (dir != StepperMotor.lastDirection)  // if direction change (single time per cycle)
     fc6:	90 91 f1 64 	lds	r25, 0x64F1	; 0x8064f1 <StepperMotor>
     fca:	98 17       	cp	r25, r24
     fcc:	59 f0       	breq	.+22     	; 0xfe4 <Stepper_set_direction+0x1e>
	{
		if (dir)
     fce:	88 23       	and	r24, r24
     fd0:	21 f0       	breq	.+8      	; 0xfda <Stepper_set_direction+0x14>
			PORTF.OUTSET = PIN3_bm;
     fd2:	98 e0       	ldi	r25, 0x08	; 8
     fd4:	90 93 a5 04 	sts	0x04A5, r25	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f04a5>
     fd8:	03 c0       	rjmp	.+6      	; 0xfe0 <Stepper_set_direction+0x1a>
		else
			PORTF.OUTCLR = PIN3_bm;
     fda:	98 e0       	ldi	r25, 0x08	; 8
     fdc:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
		StepperMotor.lastDirection = dir;
     fe0:	80 93 f1 64 	sts	0x64F1, r24	; 0x8064f1 <StepperMotor>
     fe4:	08 95       	ret

00000fe6 <Stepper_init>:
// Init function
// -------------------------
void Stepper_init() {

	// Default PWM
	TCD0_init_stepper_PWM(51200, 50); // 51.2kHz, 50% duty
     fe6:	42 e3       	ldi	r20, 0x32	; 50
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	78 ec       	ldi	r23, 0xC8	; 200
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 8b 08 	call	0x1116	; 0x1116 <TCD0_init_stepper_PWM>
     ff4:	08 95       	ret

00000ff6 <TCA0_init_linear_PWM>:
 *  Author: Saulius
 */ 
#include "Settings.h"

void TCA0_init_linear_PWM(uint16_t freq_hz, uint8_t duty_percent) //Auto TCA prescaler selection, that give us Frequency range: ~366Hz - ~93kHz. TLE9201SG max 20kHz
{
     ff6:	8f 92       	push	r8
     ff8:	9f 92       	push	r9
     ffa:	af 92       	push	r10
     ffc:	bf 92       	push	r11
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	68 97       	sbiw	r28, 0x18	; 24
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	7c 01       	movw	r14, r24
    101a:	c6 2e       	mov	r12, r22
	const uint16_t prescalers[] = {1, 2, 4, 8, 16, 64, 256, 1024};
    101c:	80 e1       	ldi	r24, 0x10	; 16
    101e:	e8 e6       	ldi	r30, 0x68	; 104
    1020:	f3 e6       	ldi	r31, 0x63	; 99
    1022:	de 01       	movw	r26, r28
    1024:	11 96       	adiw	r26, 0x01	; 1
    1026:	01 90       	ld	r0, Z+
    1028:	0d 92       	st	X+, r0
    102a:	8a 95       	dec	r24
    102c:	e1 f7       	brne	.-8      	; 0x1026 <TCA0_init_linear_PWM+0x30>
	const uint8_t clk_select[] = {
    102e:	88 e0       	ldi	r24, 0x08	; 8
    1030:	e8 e7       	ldi	r30, 0x78	; 120
    1032:	f3 e6       	ldi	r31, 0x63	; 99
    1034:	de 01       	movw	r26, r28
    1036:	51 96       	adiw	r26, 0x11	; 17
    1038:	01 90       	ld	r0, Z+
    103a:	0d 92       	st	X+, r0
    103c:	8a 95       	dec	r24
    103e:	e1 f7       	brne	.-8      	; 0x1038 <TCA0_init_linear_PWM+0x42>

	uint8_t chosen_clk = 0;
	uint8_t period = 0;

	// surandam tinkamà prescaler
	for (uint8_t i = 0; i < 8; i++) {
    1040:	d1 2c       	mov	r13, r1
    1042:	38 c0       	rjmp	.+112    	; 0x10b4 <TCA0_init_linear_PWM+0xbe>
		uint32_t f_timer = F_CPU / prescalers[i];
    1044:	0d 2d       	mov	r16, r13
    1046:	10 e0       	ldi	r17, 0x00	; 0
    1048:	f8 01       	movw	r30, r16
    104a:	ee 0f       	add	r30, r30
    104c:	ff 1f       	adc	r31, r31
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	8c 0f       	add	r24, r28
    1054:	9d 1f       	adc	r25, r29
    1056:	e8 0f       	add	r30, r24
    1058:	f9 1f       	adc	r31, r25
    105a:	20 81       	ld	r18, Z
    105c:	31 81       	ldd	r19, Z+1	; 0x01
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	76 e3       	ldi	r23, 0x36	; 54
    1066:	8e e6       	ldi	r24, 0x6E	; 110
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__divmodsi4>
		uint32_t tmp_period = (f_timer / freq_hz) - 1;
    106e:	47 01       	movw	r8, r14
    1070:	a1 2c       	mov	r10, r1
    1072:	b1 2c       	mov	r11, r1
    1074:	ca 01       	movw	r24, r20
    1076:	b9 01       	movw	r22, r18
    1078:	a5 01       	movw	r20, r10
    107a:	94 01       	movw	r18, r8
    107c:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__udivmodsi4>
    1080:	da 01       	movw	r26, r20
    1082:	c9 01       	movw	r24, r18
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	a1 09       	sbc	r26, r1
    1088:	b1 09       	sbc	r27, r1

		if (tmp_period <= 255 && tmp_period >= 1) {
    108a:	ba 01       	movw	r22, r20
    108c:	a9 01       	movw	r20, r18
    108e:	42 50       	subi	r20, 0x02	; 2
    1090:	51 09       	sbc	r21, r1
    1092:	61 09       	sbc	r22, r1
    1094:	71 09       	sbc	r23, r1
    1096:	4f 3f       	cpi	r20, 0xFF	; 255
    1098:	51 05       	cpc	r21, r1
    109a:	61 05       	cpc	r22, r1
    109c:	71 05       	cpc	r23, r1
    109e:	48 f4       	brcc	.+18     	; 0x10b2 <TCA0_init_linear_PWM+0xbc>
			period = (uint8_t)tmp_period;
    10a0:	f8 2e       	mov	r15, r24
			chosen_clk = clk_select[i];
    10a2:	e1 e1       	ldi	r30, 0x11	; 17
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	ec 0f       	add	r30, r28
    10a8:	fd 1f       	adc	r31, r29
    10aa:	e0 0f       	add	r30, r16
    10ac:	f1 1f       	adc	r31, r17
    10ae:	10 81       	ld	r17, Z
			break; // radom maþiausià tinkamà prescaler
    10b0:	06 c0       	rjmp	.+12     	; 0x10be <TCA0_init_linear_PWM+0xc8>

	uint8_t chosen_clk = 0;
	uint8_t period = 0;

	// surandam tinkamà prescaler
	for (uint8_t i = 0; i < 8; i++) {
    10b2:	d3 94       	inc	r13
    10b4:	97 e0       	ldi	r25, 0x07	; 7
    10b6:	9d 15       	cp	r25, r13
    10b8:	28 f6       	brcc	.-118    	; 0x1044 <TCA0_init_linear_PWM+0x4e>
		TCA_SINGLE_CLKSEL_DIV256_gc,
		TCA_SINGLE_CLKSEL_DIV1024_gc
	};

	uint8_t chosen_clk = 0;
	uint8_t period = 0;
    10ba:	f1 2c       	mov	r15, r1
		TCA_SINGLE_CLKSEL_DIV64_gc,
		TCA_SINGLE_CLKSEL_DIV256_gc,
		TCA_SINGLE_CLKSEL_DIV1024_gc
	};

	uint8_t chosen_clk = 0;
    10bc:	10 e0       	ldi	r17, 0x00	; 0
			break; // radom maþiausià tinkamà prescaler
		}
	}

	// duty skaièiavimas
	uint8_t duty = (uint32_t)period * duty_percent / 100;
    10be:	2f 2d       	mov	r18, r15
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	ac 2d       	mov	r26, r12
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	0e 94 19 0b 	call	0x1632	; 0x1632 <__umulhisi3>
    10ca:	24 e6       	ldi	r18, 0x64	; 100
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__udivmodsi4>
	if (duty > period) duty = period;
    10d6:	f2 16       	cp	r15, r18
    10d8:	08 f4       	brcc	.+2      	; 0x10dc <TCA0_init_linear_PWM+0xe6>
    10da:	2f 2d       	mov	r18, r15

	// konfigûracija
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;  // WOx ant PORTD
    10dc:	83 e0       	ldi	r24, 0x03	; 3
    10de:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <__TEXT_REGION_LENGTH__+0x7f05e7>

	TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;   // Split mode
    10e2:	e0 e0       	ldi	r30, 0x00	; 0
    10e4:	fa e0       	ldi	r31, 0x0A	; 10
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	83 83       	std	Z+3, r24	; 0x03
	TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm;    // enable WO3 (HCMP0 ? PD3)
    10ea:	80 e1       	ldi	r24, 0x10	; 16
    10ec:	81 83       	std	Z+1, r24	; 0x01

	TCA0.SPLIT.HPER  = period;
    10ee:	f7 a2       	std	Z+39, r15	; 0x27
	TCA0.SPLIT.HCMP0 = duty;
    10f0:	21 a7       	std	Z+41, r18	; 0x29

	TCA0.SPLIT.CTRLA = chosen_clk | TCA_SPLIT_ENABLE_bm; // paleidþiam su pasirinktu prescaler
    10f2:	11 60       	ori	r17, 0x01	; 1
    10f4:	10 83       	st	Z, r17
}
    10f6:	68 96       	adiw	r28, 0x18	; 24
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	ff 90       	pop	r15
    1106:	ef 90       	pop	r14
    1108:	df 90       	pop	r13
    110a:	cf 90       	pop	r12
    110c:	bf 90       	pop	r11
    110e:	af 90       	pop	r10
    1110:	9f 90       	pop	r9
    1112:	8f 90       	pop	r8
    1114:	08 95       	ret

00001116 <TCD0_init_stepper_PWM>:
 * @date 2025-01-09
 */

#include "Settings.h"

void TCD0_init_stepper_PWM(uint32_t freq_hz, uint8_t duty_percent) {
    1116:	cf 92       	push	r12
    1118:	df 92       	push	r13
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	14 2f       	mov	r17, r20

	// Calculate compare registers
	uint16_t cmpbclr = (F_CPU / (4 * freq_hz * 2)) - 1;
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	aa 1f       	adc	r26, r26
    1132:	bb 1f       	adc	r27, r27
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	aa 1f       	adc	r26, r26
    113a:	bb 1f       	adc	r27, r27
    113c:	9c 01       	movw	r18, r24
    113e:	ad 01       	movw	r20, r26
    1140:	22 0f       	add	r18, r18
    1142:	33 1f       	adc	r19, r19
    1144:	44 1f       	adc	r20, r20
    1146:	55 1f       	adc	r21, r21
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	76 e3       	ldi	r23, 0x36	; 54
    114c:	8e e6       	ldi	r24, 0x6E	; 110
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__udivmodsi4>
    1154:	e9 01       	movw	r28, r18
    1156:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t cmpaset = (uint16_t)(cmpbclr * (duty_percent / 100.0)) + 1;
    1158:	61 2f       	mov	r22, r17
    115a:	70 e0       	ldi	r23, 0x00	; 0
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	0e 94 cb 09 	call	0x1396	; 0x1396 <__floatsisf>
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	48 ec       	ldi	r20, 0xC8	; 200
    116a:	52 e4       	ldi	r21, 0x42	; 66
    116c:	0e 94 28 09 	call	0x1250	; 0x1250 <__divsf3>
    1170:	6b 01       	movw	r12, r22
    1172:	7c 01       	movw	r14, r24
    1174:	be 01       	movw	r22, r28
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 c9 09 	call	0x1392	; 0x1392 <__floatunsisf>
    117e:	a7 01       	movw	r20, r14
    1180:	96 01       	movw	r18, r12
    1182:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
    1186:	0e 94 9a 09 	call	0x1334	; 0x1334 <__fixunssfsi>
    118a:	6f 5f       	subi	r22, 0xFF	; 255
    118c:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t cmpbset = cmpbclr - cmpaset - 1;
    118e:	ce 01       	movw	r24, r28
    1190:	86 1b       	sub	r24, r22
    1192:	97 0b       	sbc	r25, r23
    1194:	01 97       	sbiw	r24, 0x01	; 1

	// Set TCD compare registers
	TCD0.CMPBCLR = cmpbclr;
    1196:	00 e8       	ldi	r16, 0x80	; 128
    1198:	1b e0       	ldi	r17, 0x0B	; 11
    119a:	f8 01       	movw	r30, r16
    119c:	c6 a7       	std	Z+46, r28	; 0x2e
    119e:	d7 a7       	std	Z+47, r29	; 0x2f
	TCD0.CMPBSET = cmpbset;
    11a0:	84 a7       	std	Z+44, r24	; 0x2c
    11a2:	95 a7       	std	Z+45, r25	; 0x2d
	TCD0.CMPASET = cmpaset;
    11a4:	60 a7       	std	Z+40, r22	; 0x28
    11a6:	71 a7       	std	Z+41, r23	; 0x29

	ccp_write_io((uint8_t *) &TCD0.FAULTCTRL, TCD_CMPCEN_bm); ///< Enable WOC on PF2
    11a8:	60 e4       	ldi	r22, 0x40	; 64
    11aa:	82 e9       	ldi	r24, 0x92	; 146
    11ac:	9b e0       	ldi	r25, 0x0B	; 11
    11ae:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <ccp_write_io>
	TCD0.CTRLB = TCD_WGMODE_DS_gc; ///< Set waveform mode to double slope
    11b2:	83 e0       	ldi	r24, 0x03	; 3
    11b4:	f8 01       	movw	r30, r16
    11b6:	81 83       	std	Z+1, r24	; 0x01
	// Ájungiam WOC iðëjimà
	//TCD0.FAULTCTRL = TCD_CMPAEN_bm | TCD_CMPBEN_bm | TCD_CMPCEN_bm;

	// Paleidþiam su prescaler = 4
	//TCD0.CTRLA = TCD_CLKSEL_CLKPER_gc | TCD_CNTPRES_DIV4_gc;
	ccp_write_io((uint8_t *) &TCD0.CTRLA, TCD_CLKSEL_CLKPER_gc | TCD_CNTPRES_DIV4_gc);
    11b8:	68 e6       	ldi	r22, 0x68	; 104
    11ba:	80 e8       	ldi	r24, 0x80	; 128
    11bc:	9b e0       	ldi	r25, 0x0B	; 11
    11be:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <ccp_write_io>
	// Palaukti, kol sinchronizuosis
	//while (!(TCD0.STATUS & TCD_ENRDY_bm));
/*
			while (!(TCD0.STATUS & TCD_ENRDY_bm));
			TCD0.CTRLA |= TCD_ENABLE_bm;*/
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	ff 90       	pop	r15
    11cc:	ef 90       	pop	r14
    11ce:	df 90       	pop	r13
    11d0:	cf 90       	pop	r12
    11d2:	08 95       	ret

000011d4 <USART0_init>:
 * @return 0 on success.
 */
int USART1_printChar(char c, FILE *stream) {
	USART1_sendChar(c); // Send character
	return 0;
}
    11d4:	e0 e0       	ldi	r30, 0x00	; 0
    11d6:	f8 e0       	ldi	r31, 0x08	; 8
    11d8:	83 e8       	ldi	r24, 0x83	; 131
    11da:	96 e0       	ldi	r25, 0x06	; 6
    11dc:	80 87       	std	Z+8, r24	; 0x08
    11de:	91 87       	std	Z+9, r25	; 0x09
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	85 83       	std	Z+5, r24	; 0x05
    11e4:	82 ec       	ldi	r24, 0xC2	; 194
    11e6:	86 83       	std	Z+6, r24	; 0x06
    11e8:	83 e0       	ldi	r24, 0x03	; 3
    11ea:	87 83       	std	Z+7, r24	; 0x07
    11ec:	08 95       	ret

000011ee <USART0_readChar>:
    11ee:	80 e8       	ldi	r24, 0x80	; 128
    11f0:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    11f4:	88 ee       	ldi	r24, 0xE8	; 232
    11f6:	93 e0       	ldi	r25, 0x03	; 3
    11f8:	a0 e0       	ldi	r26, 0x00	; 0
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	04 c0       	rjmp	.+8      	; 0x1206 <USART0_readChar+0x18>
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	a1 09       	sbc	r26, r1
    1202:	b1 09       	sbc	r27, r1
    1204:	21 f0       	breq	.+8      	; 0x120e <USART0_readChar+0x20>
    1206:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    120a:	22 23       	and	r18, r18
    120c:	c4 f7       	brge	.-16     	; 0x11fe <USART0_readChar+0x10>
    120e:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
    1212:	08 95       	ret

00001214 <USART1_init>:
    1214:	e0 e2       	ldi	r30, 0x20	; 32
    1216:	f8 e0       	ldi	r31, 0x08	; 8
    1218:	81 ea       	ldi	r24, 0xA1	; 161
    121a:	91 e0       	ldi	r25, 0x01	; 1
    121c:	80 87       	std	Z+8, r24	; 0x08
    121e:	91 87       	std	Z+9, r25	; 0x09
    1220:	82 e8       	ldi	r24, 0x82	; 130
    1222:	86 83       	std	Z+6, r24	; 0x06
    1224:	83 e0       	ldi	r24, 0x03	; 3
    1226:	87 83       	std	Z+7, r24	; 0x07
    1228:	08 95       	ret

0000122a <USART1_readChar>:
 * If a timeout occurs, it returns a predefined warning.
 * 
 * @return The received character.
 */
char USART1_readChar() {
	USART1.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    122a:	80 e8       	ldi	r24, 0x80	; 128
    122c:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f0824>
	uint32_t timeout_counter = FO_TIMEOUT_COUNTER; // Set a timeout counter
    1230:	84 ef       	ldi	r24, 0xF4	; 244
    1232:	91 e0       	ldi	r25, 0x01	; 1
    1234:	a0 e0       	ldi	r26, 0x00	; 0
    1236:	b0 e0       	ldi	r27, 0x00	; 0
	while (!(USART1.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <USART1_readChar+0x18>
		if (--timeout_counter == 0) { // Timeout condition
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	a1 09       	sbc	r26, r1
    123e:	b1 09       	sbc	r27, r1
    1240:	21 f0       	breq	.+8      	; 0x124a <USART1_readChar+0x20>
 * @return The received character.
 */
char USART1_readChar() {
	USART1.STATUS = USART_RXCIF_bm; // Clear buffer before reading
	uint32_t timeout_counter = FO_TIMEOUT_COUNTER; // Set a timeout counter
	while (!(USART1.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
    1242:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f0824>
    1246:	22 23       	and	r18, r18
    1248:	c4 f7       	brge	.-16     	; 0x123a <USART1_readChar+0x10>
		if (--timeout_counter == 0) { // Timeout condition
			break;
		}
	}
	return USART1.RXDATAL; // Return received character
    124a:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f0820>
}
    124e:	08 95       	ret

00001250 <__divsf3>:
    1250:	0e 94 3c 09 	call	0x1278	; 0x1278 <__divsf3x>
    1254:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_round>
    1258:	0e 94 16 0a 	call	0x142c	; 0x142c <__fp_pscB>
    125c:	58 f0       	brcs	.+22     	; 0x1274 <__divsf3+0x24>
    125e:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fp_pscA>
    1262:	40 f0       	brcs	.+16     	; 0x1274 <__divsf3+0x24>
    1264:	29 f4       	brne	.+10     	; 0x1270 <__divsf3+0x20>
    1266:	5f 3f       	cpi	r21, 0xFF	; 255
    1268:	29 f0       	breq	.+10     	; 0x1274 <__divsf3+0x24>
    126a:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_inf>
    126e:	51 11       	cpse	r21, r1
    1270:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_szero>
    1274:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_nan>

00001278 <__divsf3x>:
    1278:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fp_split3>
    127c:	68 f3       	brcs	.-38     	; 0x1258 <__divsf3+0x8>

0000127e <__divsf3_pse>:
    127e:	99 23       	and	r25, r25
    1280:	b1 f3       	breq	.-20     	; 0x126e <__divsf3+0x1e>
    1282:	55 23       	and	r21, r21
    1284:	91 f3       	breq	.-28     	; 0x126a <__divsf3+0x1a>
    1286:	95 1b       	sub	r25, r21
    1288:	55 0b       	sbc	r21, r21
    128a:	bb 27       	eor	r27, r27
    128c:	aa 27       	eor	r26, r26
    128e:	62 17       	cp	r22, r18
    1290:	73 07       	cpc	r23, r19
    1292:	84 07       	cpc	r24, r20
    1294:	38 f0       	brcs	.+14     	; 0x12a4 <__divsf3_pse+0x26>
    1296:	9f 5f       	subi	r25, 0xFF	; 255
    1298:	5f 4f       	sbci	r21, 0xFF	; 255
    129a:	22 0f       	add	r18, r18
    129c:	33 1f       	adc	r19, r19
    129e:	44 1f       	adc	r20, r20
    12a0:	aa 1f       	adc	r26, r26
    12a2:	a9 f3       	breq	.-22     	; 0x128e <__divsf3_pse+0x10>
    12a4:	35 d0       	rcall	.+106    	; 0x1310 <__divsf3_pse+0x92>
    12a6:	0e 2e       	mov	r0, r30
    12a8:	3a f0       	brmi	.+14     	; 0x12b8 <__divsf3_pse+0x3a>
    12aa:	e0 e8       	ldi	r30, 0x80	; 128
    12ac:	32 d0       	rcall	.+100    	; 0x1312 <__divsf3_pse+0x94>
    12ae:	91 50       	subi	r25, 0x01	; 1
    12b0:	50 40       	sbci	r21, 0x00	; 0
    12b2:	e6 95       	lsr	r30
    12b4:	00 1c       	adc	r0, r0
    12b6:	ca f7       	brpl	.-14     	; 0x12aa <__divsf3_pse+0x2c>
    12b8:	2b d0       	rcall	.+86     	; 0x1310 <__divsf3_pse+0x92>
    12ba:	fe 2f       	mov	r31, r30
    12bc:	29 d0       	rcall	.+82     	; 0x1310 <__divsf3_pse+0x92>
    12be:	66 0f       	add	r22, r22
    12c0:	77 1f       	adc	r23, r23
    12c2:	88 1f       	adc	r24, r24
    12c4:	bb 1f       	adc	r27, r27
    12c6:	26 17       	cp	r18, r22
    12c8:	37 07       	cpc	r19, r23
    12ca:	48 07       	cpc	r20, r24
    12cc:	ab 07       	cpc	r26, r27
    12ce:	b0 e8       	ldi	r27, 0x80	; 128
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <__divsf3_pse+0x56>
    12d2:	bb 0b       	sbc	r27, r27
    12d4:	80 2d       	mov	r24, r0
    12d6:	bf 01       	movw	r22, r30
    12d8:	ff 27       	eor	r31, r31
    12da:	93 58       	subi	r25, 0x83	; 131
    12dc:	5f 4f       	sbci	r21, 0xFF	; 255
    12de:	3a f0       	brmi	.+14     	; 0x12ee <__divsf3_pse+0x70>
    12e0:	9e 3f       	cpi	r25, 0xFE	; 254
    12e2:	51 05       	cpc	r21, r1
    12e4:	78 f0       	brcs	.+30     	; 0x1304 <__divsf3_pse+0x86>
    12e6:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_inf>
    12ea:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_szero>
    12ee:	5f 3f       	cpi	r21, 0xFF	; 255
    12f0:	e4 f3       	brlt	.-8      	; 0x12ea <__divsf3_pse+0x6c>
    12f2:	98 3e       	cpi	r25, 0xE8	; 232
    12f4:	d4 f3       	brlt	.-12     	; 0x12ea <__divsf3_pse+0x6c>
    12f6:	86 95       	lsr	r24
    12f8:	77 95       	ror	r23
    12fa:	67 95       	ror	r22
    12fc:	b7 95       	ror	r27
    12fe:	f7 95       	ror	r31
    1300:	9f 5f       	subi	r25, 0xFF	; 255
    1302:	c9 f7       	brne	.-14     	; 0x12f6 <__divsf3_pse+0x78>
    1304:	88 0f       	add	r24, r24
    1306:	91 1d       	adc	r25, r1
    1308:	96 95       	lsr	r25
    130a:	87 95       	ror	r24
    130c:	97 f9       	bld	r25, 7
    130e:	08 95       	ret
    1310:	e1 e0       	ldi	r30, 0x01	; 1
    1312:	66 0f       	add	r22, r22
    1314:	77 1f       	adc	r23, r23
    1316:	88 1f       	adc	r24, r24
    1318:	bb 1f       	adc	r27, r27
    131a:	62 17       	cp	r22, r18
    131c:	73 07       	cpc	r23, r19
    131e:	84 07       	cpc	r24, r20
    1320:	ba 07       	cpc	r27, r26
    1322:	20 f0       	brcs	.+8      	; 0x132c <__divsf3_pse+0xae>
    1324:	62 1b       	sub	r22, r18
    1326:	73 0b       	sbc	r23, r19
    1328:	84 0b       	sbc	r24, r20
    132a:	ba 0b       	sbc	r27, r26
    132c:	ee 1f       	adc	r30, r30
    132e:	88 f7       	brcc	.-30     	; 0x1312 <__divsf3_pse+0x94>
    1330:	e0 95       	com	r30
    1332:	08 95       	ret

00001334 <__fixunssfsi>:
    1334:	0e 94 36 0a 	call	0x146c	; 0x146c <__fp_splitA>
    1338:	88 f0       	brcs	.+34     	; 0x135c <__fixunssfsi+0x28>
    133a:	9f 57       	subi	r25, 0x7F	; 127
    133c:	98 f0       	brcs	.+38     	; 0x1364 <__fixunssfsi+0x30>
    133e:	b9 2f       	mov	r27, r25
    1340:	99 27       	eor	r25, r25
    1342:	b7 51       	subi	r27, 0x17	; 23
    1344:	b0 f0       	brcs	.+44     	; 0x1372 <__fixunssfsi+0x3e>
    1346:	e1 f0       	breq	.+56     	; 0x1380 <__fixunssfsi+0x4c>
    1348:	66 0f       	add	r22, r22
    134a:	77 1f       	adc	r23, r23
    134c:	88 1f       	adc	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	1a f0       	brmi	.+6      	; 0x1358 <__fixunssfsi+0x24>
    1352:	ba 95       	dec	r27
    1354:	c9 f7       	brne	.-14     	; 0x1348 <__fixunssfsi+0x14>
    1356:	14 c0       	rjmp	.+40     	; 0x1380 <__fixunssfsi+0x4c>
    1358:	b1 30       	cpi	r27, 0x01	; 1
    135a:	91 f0       	breq	.+36     	; 0x1380 <__fixunssfsi+0x4c>
    135c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fp_zero>
    1360:	b1 e0       	ldi	r27, 0x01	; 1
    1362:	08 95       	ret
    1364:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_zero>
    1368:	67 2f       	mov	r22, r23
    136a:	78 2f       	mov	r23, r24
    136c:	88 27       	eor	r24, r24
    136e:	b8 5f       	subi	r27, 0xF8	; 248
    1370:	39 f0       	breq	.+14     	; 0x1380 <__fixunssfsi+0x4c>
    1372:	b9 3f       	cpi	r27, 0xF9	; 249
    1374:	cc f3       	brlt	.-14     	; 0x1368 <__fixunssfsi+0x34>
    1376:	86 95       	lsr	r24
    1378:	77 95       	ror	r23
    137a:	67 95       	ror	r22
    137c:	b3 95       	inc	r27
    137e:	d9 f7       	brne	.-10     	; 0x1376 <__fixunssfsi+0x42>
    1380:	3e f4       	brtc	.+14     	; 0x1390 <__fixunssfsi+0x5c>
    1382:	90 95       	com	r25
    1384:	80 95       	com	r24
    1386:	70 95       	com	r23
    1388:	61 95       	neg	r22
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	8f 4f       	sbci	r24, 0xFF	; 255
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	08 95       	ret

00001392 <__floatunsisf>:
    1392:	e8 94       	clt
    1394:	09 c0       	rjmp	.+18     	; 0x13a8 <__floatsisf+0x12>

00001396 <__floatsisf>:
    1396:	97 fb       	bst	r25, 7
    1398:	3e f4       	brtc	.+14     	; 0x13a8 <__floatsisf+0x12>
    139a:	90 95       	com	r25
    139c:	80 95       	com	r24
    139e:	70 95       	com	r23
    13a0:	61 95       	neg	r22
    13a2:	7f 4f       	sbci	r23, 0xFF	; 255
    13a4:	8f 4f       	sbci	r24, 0xFF	; 255
    13a6:	9f 4f       	sbci	r25, 0xFF	; 255
    13a8:	99 23       	and	r25, r25
    13aa:	a9 f0       	breq	.+42     	; 0x13d6 <__floatsisf+0x40>
    13ac:	f9 2f       	mov	r31, r25
    13ae:	96 e9       	ldi	r25, 0x96	; 150
    13b0:	bb 27       	eor	r27, r27
    13b2:	93 95       	inc	r25
    13b4:	f6 95       	lsr	r31
    13b6:	87 95       	ror	r24
    13b8:	77 95       	ror	r23
    13ba:	67 95       	ror	r22
    13bc:	b7 95       	ror	r27
    13be:	f1 11       	cpse	r31, r1
    13c0:	f8 cf       	rjmp	.-16     	; 0x13b2 <__floatsisf+0x1c>
    13c2:	fa f4       	brpl	.+62     	; 0x1402 <__floatsisf+0x6c>
    13c4:	bb 0f       	add	r27, r27
    13c6:	11 f4       	brne	.+4      	; 0x13cc <__floatsisf+0x36>
    13c8:	60 ff       	sbrs	r22, 0
    13ca:	1b c0       	rjmp	.+54     	; 0x1402 <__floatsisf+0x6c>
    13cc:	6f 5f       	subi	r22, 0xFF	; 255
    13ce:	7f 4f       	sbci	r23, 0xFF	; 255
    13d0:	8f 4f       	sbci	r24, 0xFF	; 255
    13d2:	9f 4f       	sbci	r25, 0xFF	; 255
    13d4:	16 c0       	rjmp	.+44     	; 0x1402 <__floatsisf+0x6c>
    13d6:	88 23       	and	r24, r24
    13d8:	11 f0       	breq	.+4      	; 0x13de <__floatsisf+0x48>
    13da:	96 e9       	ldi	r25, 0x96	; 150
    13dc:	11 c0       	rjmp	.+34     	; 0x1400 <__floatsisf+0x6a>
    13de:	77 23       	and	r23, r23
    13e0:	21 f0       	breq	.+8      	; 0x13ea <__floatsisf+0x54>
    13e2:	9e e8       	ldi	r25, 0x8E	; 142
    13e4:	87 2f       	mov	r24, r23
    13e6:	76 2f       	mov	r23, r22
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <__floatsisf+0x5e>
    13ea:	66 23       	and	r22, r22
    13ec:	71 f0       	breq	.+28     	; 0x140a <__floatsisf+0x74>
    13ee:	96 e8       	ldi	r25, 0x86	; 134
    13f0:	86 2f       	mov	r24, r22
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	2a f0       	brmi	.+10     	; 0x1402 <__floatsisf+0x6c>
    13f8:	9a 95       	dec	r25
    13fa:	66 0f       	add	r22, r22
    13fc:	77 1f       	adc	r23, r23
    13fe:	88 1f       	adc	r24, r24
    1400:	da f7       	brpl	.-10     	; 0x13f8 <__floatsisf+0x62>
    1402:	88 0f       	add	r24, r24
    1404:	96 95       	lsr	r25
    1406:	87 95       	ror	r24
    1408:	97 f9       	bld	r25, 7
    140a:	08 95       	ret

0000140c <__fp_inf>:
    140c:	97 f9       	bld	r25, 7
    140e:	9f 67       	ori	r25, 0x7F	; 127
    1410:	80 e8       	ldi	r24, 0x80	; 128
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	08 95       	ret

00001418 <__fp_nan>:
    1418:	9f ef       	ldi	r25, 0xFF	; 255
    141a:	80 ec       	ldi	r24, 0xC0	; 192
    141c:	08 95       	ret

0000141e <__fp_pscA>:
    141e:	00 24       	eor	r0, r0
    1420:	0a 94       	dec	r0
    1422:	16 16       	cp	r1, r22
    1424:	17 06       	cpc	r1, r23
    1426:	18 06       	cpc	r1, r24
    1428:	09 06       	cpc	r0, r25
    142a:	08 95       	ret

0000142c <__fp_pscB>:
    142c:	00 24       	eor	r0, r0
    142e:	0a 94       	dec	r0
    1430:	12 16       	cp	r1, r18
    1432:	13 06       	cpc	r1, r19
    1434:	14 06       	cpc	r1, r20
    1436:	05 06       	cpc	r0, r21
    1438:	08 95       	ret

0000143a <__fp_round>:
    143a:	09 2e       	mov	r0, r25
    143c:	03 94       	inc	r0
    143e:	00 0c       	add	r0, r0
    1440:	11 f4       	brne	.+4      	; 0x1446 <__fp_round+0xc>
    1442:	88 23       	and	r24, r24
    1444:	52 f0       	brmi	.+20     	; 0x145a <__fp_round+0x20>
    1446:	bb 0f       	add	r27, r27
    1448:	40 f4       	brcc	.+16     	; 0x145a <__fp_round+0x20>
    144a:	bf 2b       	or	r27, r31
    144c:	11 f4       	brne	.+4      	; 0x1452 <__fp_round+0x18>
    144e:	60 ff       	sbrs	r22, 0
    1450:	04 c0       	rjmp	.+8      	; 0x145a <__fp_round+0x20>
    1452:	6f 5f       	subi	r22, 0xFF	; 255
    1454:	7f 4f       	sbci	r23, 0xFF	; 255
    1456:	8f 4f       	sbci	r24, 0xFF	; 255
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	08 95       	ret

0000145c <__fp_split3>:
    145c:	57 fd       	sbrc	r21, 7
    145e:	90 58       	subi	r25, 0x80	; 128
    1460:	44 0f       	add	r20, r20
    1462:	55 1f       	adc	r21, r21
    1464:	59 f0       	breq	.+22     	; 0x147c <__fp_splitA+0x10>
    1466:	5f 3f       	cpi	r21, 0xFF	; 255
    1468:	71 f0       	breq	.+28     	; 0x1486 <__fp_splitA+0x1a>
    146a:	47 95       	ror	r20

0000146c <__fp_splitA>:
    146c:	88 0f       	add	r24, r24
    146e:	97 fb       	bst	r25, 7
    1470:	99 1f       	adc	r25, r25
    1472:	61 f0       	breq	.+24     	; 0x148c <__fp_splitA+0x20>
    1474:	9f 3f       	cpi	r25, 0xFF	; 255
    1476:	79 f0       	breq	.+30     	; 0x1496 <__fp_splitA+0x2a>
    1478:	87 95       	ror	r24
    147a:	08 95       	ret
    147c:	12 16       	cp	r1, r18
    147e:	13 06       	cpc	r1, r19
    1480:	14 06       	cpc	r1, r20
    1482:	55 1f       	adc	r21, r21
    1484:	f2 cf       	rjmp	.-28     	; 0x146a <__fp_split3+0xe>
    1486:	46 95       	lsr	r20
    1488:	f1 df       	rcall	.-30     	; 0x146c <__fp_splitA>
    148a:	08 c0       	rjmp	.+16     	; 0x149c <__fp_splitA+0x30>
    148c:	16 16       	cp	r1, r22
    148e:	17 06       	cpc	r1, r23
    1490:	18 06       	cpc	r1, r24
    1492:	99 1f       	adc	r25, r25
    1494:	f1 cf       	rjmp	.-30     	; 0x1478 <__fp_splitA+0xc>
    1496:	86 95       	lsr	r24
    1498:	71 05       	cpc	r23, r1
    149a:	61 05       	cpc	r22, r1
    149c:	08 94       	sec
    149e:	08 95       	ret

000014a0 <__fp_zero>:
    14a0:	e8 94       	clt

000014a2 <__fp_szero>:
    14a2:	bb 27       	eor	r27, r27
    14a4:	66 27       	eor	r22, r22
    14a6:	77 27       	eor	r23, r23
    14a8:	cb 01       	movw	r24, r22
    14aa:	97 f9       	bld	r25, 7
    14ac:	08 95       	ret

000014ae <__mulsf3>:
    14ae:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__mulsf3x>
    14b2:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__fp_round>
    14b6:	0e 94 0f 0a 	call	0x141e	; 0x141e <__fp_pscA>
    14ba:	38 f0       	brcs	.+14     	; 0x14ca <__mulsf3+0x1c>
    14bc:	0e 94 16 0a 	call	0x142c	; 0x142c <__fp_pscB>
    14c0:	20 f0       	brcs	.+8      	; 0x14ca <__mulsf3+0x1c>
    14c2:	95 23       	and	r25, r21
    14c4:	11 f0       	breq	.+4      	; 0x14ca <__mulsf3+0x1c>
    14c6:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_inf>
    14ca:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_nan>
    14ce:	11 24       	eor	r1, r1
    14d0:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_szero>

000014d4 <__mulsf3x>:
    14d4:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fp_split3>
    14d8:	70 f3       	brcs	.-36     	; 0x14b6 <__mulsf3+0x8>

000014da <__mulsf3_pse>:
    14da:	95 9f       	mul	r25, r21
    14dc:	c1 f3       	breq	.-16     	; 0x14ce <__mulsf3+0x20>
    14de:	95 0f       	add	r25, r21
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	55 1f       	adc	r21, r21
    14e4:	62 9f       	mul	r22, r18
    14e6:	f0 01       	movw	r30, r0
    14e8:	72 9f       	mul	r23, r18
    14ea:	bb 27       	eor	r27, r27
    14ec:	f0 0d       	add	r31, r0
    14ee:	b1 1d       	adc	r27, r1
    14f0:	63 9f       	mul	r22, r19
    14f2:	aa 27       	eor	r26, r26
    14f4:	f0 0d       	add	r31, r0
    14f6:	b1 1d       	adc	r27, r1
    14f8:	aa 1f       	adc	r26, r26
    14fa:	64 9f       	mul	r22, r20
    14fc:	66 27       	eor	r22, r22
    14fe:	b0 0d       	add	r27, r0
    1500:	a1 1d       	adc	r26, r1
    1502:	66 1f       	adc	r22, r22
    1504:	82 9f       	mul	r24, r18
    1506:	22 27       	eor	r18, r18
    1508:	b0 0d       	add	r27, r0
    150a:	a1 1d       	adc	r26, r1
    150c:	62 1f       	adc	r22, r18
    150e:	73 9f       	mul	r23, r19
    1510:	b0 0d       	add	r27, r0
    1512:	a1 1d       	adc	r26, r1
    1514:	62 1f       	adc	r22, r18
    1516:	83 9f       	mul	r24, r19
    1518:	a0 0d       	add	r26, r0
    151a:	61 1d       	adc	r22, r1
    151c:	22 1f       	adc	r18, r18
    151e:	74 9f       	mul	r23, r20
    1520:	33 27       	eor	r19, r19
    1522:	a0 0d       	add	r26, r0
    1524:	61 1d       	adc	r22, r1
    1526:	23 1f       	adc	r18, r19
    1528:	84 9f       	mul	r24, r20
    152a:	60 0d       	add	r22, r0
    152c:	21 1d       	adc	r18, r1
    152e:	82 2f       	mov	r24, r18
    1530:	76 2f       	mov	r23, r22
    1532:	6a 2f       	mov	r22, r26
    1534:	11 24       	eor	r1, r1
    1536:	9f 57       	subi	r25, 0x7F	; 127
    1538:	50 40       	sbci	r21, 0x00	; 0
    153a:	9a f0       	brmi	.+38     	; 0x1562 <__mulsf3_pse+0x88>
    153c:	f1 f0       	breq	.+60     	; 0x157a <__mulsf3_pse+0xa0>
    153e:	88 23       	and	r24, r24
    1540:	4a f0       	brmi	.+18     	; 0x1554 <__mulsf3_pse+0x7a>
    1542:	ee 0f       	add	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	bb 1f       	adc	r27, r27
    1548:	66 1f       	adc	r22, r22
    154a:	77 1f       	adc	r23, r23
    154c:	88 1f       	adc	r24, r24
    154e:	91 50       	subi	r25, 0x01	; 1
    1550:	50 40       	sbci	r21, 0x00	; 0
    1552:	a9 f7       	brne	.-22     	; 0x153e <__mulsf3_pse+0x64>
    1554:	9e 3f       	cpi	r25, 0xFE	; 254
    1556:	51 05       	cpc	r21, r1
    1558:	80 f0       	brcs	.+32     	; 0x157a <__mulsf3_pse+0xa0>
    155a:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_inf>
    155e:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__fp_szero>
    1562:	5f 3f       	cpi	r21, 0xFF	; 255
    1564:	e4 f3       	brlt	.-8      	; 0x155e <__mulsf3_pse+0x84>
    1566:	98 3e       	cpi	r25, 0xE8	; 232
    1568:	d4 f3       	brlt	.-12     	; 0x155e <__mulsf3_pse+0x84>
    156a:	86 95       	lsr	r24
    156c:	77 95       	ror	r23
    156e:	67 95       	ror	r22
    1570:	b7 95       	ror	r27
    1572:	f7 95       	ror	r31
    1574:	e7 95       	ror	r30
    1576:	9f 5f       	subi	r25, 0xFF	; 255
    1578:	c1 f7       	brne	.-16     	; 0x156a <__mulsf3_pse+0x90>
    157a:	fe 2b       	or	r31, r30
    157c:	88 0f       	add	r24, r24
    157e:	91 1d       	adc	r25, r1
    1580:	96 95       	lsr	r25
    1582:	87 95       	ror	r24
    1584:	97 f9       	bld	r25, 7
    1586:	08 95       	ret

00001588 <__divmodhi4>:
    1588:	97 fb       	bst	r25, 7
    158a:	07 2e       	mov	r0, r23
    158c:	16 f4       	brtc	.+4      	; 0x1592 <__divmodhi4+0xa>
    158e:	00 94       	com	r0
    1590:	07 d0       	rcall	.+14     	; 0x15a0 <__divmodhi4_neg1>
    1592:	77 fd       	sbrc	r23, 7
    1594:	09 d0       	rcall	.+18     	; 0x15a8 <__divmodhi4_neg2>
    1596:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__udivmodhi4>
    159a:	07 fc       	sbrc	r0, 7
    159c:	05 d0       	rcall	.+10     	; 0x15a8 <__divmodhi4_neg2>
    159e:	3e f4       	brtc	.+14     	; 0x15ae <__divmodhi4_exit>

000015a0 <__divmodhi4_neg1>:
    15a0:	90 95       	com	r25
    15a2:	81 95       	neg	r24
    15a4:	9f 4f       	sbci	r25, 0xFF	; 255
    15a6:	08 95       	ret

000015a8 <__divmodhi4_neg2>:
    15a8:	70 95       	com	r23
    15aa:	61 95       	neg	r22
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255

000015ae <__divmodhi4_exit>:
    15ae:	08 95       	ret

000015b0 <__udivmodsi4>:
    15b0:	a1 e2       	ldi	r26, 0x21	; 33
    15b2:	1a 2e       	mov	r1, r26
    15b4:	aa 1b       	sub	r26, r26
    15b6:	bb 1b       	sub	r27, r27
    15b8:	fd 01       	movw	r30, r26
    15ba:	0d c0       	rjmp	.+26     	; 0x15d6 <__udivmodsi4_ep>

000015bc <__udivmodsi4_loop>:
    15bc:	aa 1f       	adc	r26, r26
    15be:	bb 1f       	adc	r27, r27
    15c0:	ee 1f       	adc	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	a2 17       	cp	r26, r18
    15c6:	b3 07       	cpc	r27, r19
    15c8:	e4 07       	cpc	r30, r20
    15ca:	f5 07       	cpc	r31, r21
    15cc:	20 f0       	brcs	.+8      	; 0x15d6 <__udivmodsi4_ep>
    15ce:	a2 1b       	sub	r26, r18
    15d0:	b3 0b       	sbc	r27, r19
    15d2:	e4 0b       	sbc	r30, r20
    15d4:	f5 0b       	sbc	r31, r21

000015d6 <__udivmodsi4_ep>:
    15d6:	66 1f       	adc	r22, r22
    15d8:	77 1f       	adc	r23, r23
    15da:	88 1f       	adc	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	1a 94       	dec	r1
    15e0:	69 f7       	brne	.-38     	; 0x15bc <__udivmodsi4_loop>
    15e2:	60 95       	com	r22
    15e4:	70 95       	com	r23
    15e6:	80 95       	com	r24
    15e8:	90 95       	com	r25
    15ea:	9b 01       	movw	r18, r22
    15ec:	ac 01       	movw	r20, r24
    15ee:	bd 01       	movw	r22, r26
    15f0:	cf 01       	movw	r24, r30
    15f2:	08 95       	ret

000015f4 <__divmodsi4>:
    15f4:	05 2e       	mov	r0, r21
    15f6:	97 fb       	bst	r25, 7
    15f8:	1e f4       	brtc	.+6      	; 0x1600 <__divmodsi4+0xc>
    15fa:	00 94       	com	r0
    15fc:	0e 94 11 0b 	call	0x1622	; 0x1622 <__negsi2>
    1600:	57 fd       	sbrc	r21, 7
    1602:	07 d0       	rcall	.+14     	; 0x1612 <__divmodsi4_neg2>
    1604:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__udivmodsi4>
    1608:	07 fc       	sbrc	r0, 7
    160a:	03 d0       	rcall	.+6      	; 0x1612 <__divmodsi4_neg2>
    160c:	4e f4       	brtc	.+18     	; 0x1620 <__divmodsi4_exit>
    160e:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__negsi2>

00001612 <__divmodsi4_neg2>:
    1612:	50 95       	com	r21
    1614:	40 95       	com	r20
    1616:	30 95       	com	r19
    1618:	21 95       	neg	r18
    161a:	3f 4f       	sbci	r19, 0xFF	; 255
    161c:	4f 4f       	sbci	r20, 0xFF	; 255
    161e:	5f 4f       	sbci	r21, 0xFF	; 255

00001620 <__divmodsi4_exit>:
    1620:	08 95       	ret

00001622 <__negsi2>:
    1622:	90 95       	com	r25
    1624:	80 95       	com	r24
    1626:	70 95       	com	r23
    1628:	61 95       	neg	r22
    162a:	7f 4f       	sbci	r23, 0xFF	; 255
    162c:	8f 4f       	sbci	r24, 0xFF	; 255
    162e:	9f 4f       	sbci	r25, 0xFF	; 255
    1630:	08 95       	ret

00001632 <__umulhisi3>:
    1632:	a2 9f       	mul	r26, r18
    1634:	b0 01       	movw	r22, r0
    1636:	b3 9f       	mul	r27, r19
    1638:	c0 01       	movw	r24, r0
    163a:	a3 9f       	mul	r26, r19
    163c:	70 0d       	add	r23, r0
    163e:	81 1d       	adc	r24, r1
    1640:	11 24       	eor	r1, r1
    1642:	91 1d       	adc	r25, r1
    1644:	b2 9f       	mul	r27, r18
    1646:	70 0d       	add	r23, r0
    1648:	81 1d       	adc	r24, r1
    164a:	11 24       	eor	r1, r1
    164c:	91 1d       	adc	r25, r1
    164e:	08 95       	ret

00001650 <__ashldi3>:
    1650:	0f 93       	push	r16
    1652:	08 30       	cpi	r16, 0x08	; 8
    1654:	90 f0       	brcs	.+36     	; 0x167a <__ashldi3+0x2a>
    1656:	98 2f       	mov	r25, r24
    1658:	87 2f       	mov	r24, r23
    165a:	76 2f       	mov	r23, r22
    165c:	65 2f       	mov	r22, r21
    165e:	54 2f       	mov	r21, r20
    1660:	43 2f       	mov	r20, r19
    1662:	32 2f       	mov	r19, r18
    1664:	22 27       	eor	r18, r18
    1666:	08 50       	subi	r16, 0x08	; 8
    1668:	f4 cf       	rjmp	.-24     	; 0x1652 <__ashldi3+0x2>
    166a:	22 0f       	add	r18, r18
    166c:	33 1f       	adc	r19, r19
    166e:	44 1f       	adc	r20, r20
    1670:	55 1f       	adc	r21, r21
    1672:	66 1f       	adc	r22, r22
    1674:	77 1f       	adc	r23, r23
    1676:	88 1f       	adc	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 95       	dec	r16
    167c:	b2 f7       	brpl	.-20     	; 0x166a <__ashldi3+0x1a>
    167e:	0f 91       	pop	r16
    1680:	08 95       	ret

00001682 <__ashrdi3>:
    1682:	97 fb       	bst	r25, 7
    1684:	10 f8       	bld	r1, 0

00001686 <__lshrdi3>:
    1686:	16 94       	lsr	r1
    1688:	00 08       	sbc	r0, r0
    168a:	0f 93       	push	r16
    168c:	08 30       	cpi	r16, 0x08	; 8
    168e:	98 f0       	brcs	.+38     	; 0x16b6 <__lshrdi3+0x30>
    1690:	08 50       	subi	r16, 0x08	; 8
    1692:	23 2f       	mov	r18, r19
    1694:	34 2f       	mov	r19, r20
    1696:	45 2f       	mov	r20, r21
    1698:	56 2f       	mov	r21, r22
    169a:	67 2f       	mov	r22, r23
    169c:	78 2f       	mov	r23, r24
    169e:	89 2f       	mov	r24, r25
    16a0:	90 2d       	mov	r25, r0
    16a2:	f4 cf       	rjmp	.-24     	; 0x168c <__lshrdi3+0x6>
    16a4:	05 94       	asr	r0
    16a6:	97 95       	ror	r25
    16a8:	87 95       	ror	r24
    16aa:	77 95       	ror	r23
    16ac:	67 95       	ror	r22
    16ae:	57 95       	ror	r21
    16b0:	47 95       	ror	r20
    16b2:	37 95       	ror	r19
    16b4:	27 95       	ror	r18
    16b6:	0a 95       	dec	r16
    16b8:	aa f7       	brpl	.-22     	; 0x16a4 <__lshrdi3+0x1e>
    16ba:	0f 91       	pop	r16
    16bc:	08 95       	ret

000016be <__cmpdi2_s8>:
    16be:	00 24       	eor	r0, r0
    16c0:	a7 fd       	sbrc	r26, 7
    16c2:	00 94       	com	r0
    16c4:	2a 17       	cp	r18, r26
    16c6:	30 05       	cpc	r19, r0
    16c8:	40 05       	cpc	r20, r0
    16ca:	50 05       	cpc	r21, r0
    16cc:	60 05       	cpc	r22, r0
    16ce:	70 05       	cpc	r23, r0
    16d0:	80 05       	cpc	r24, r0
    16d2:	90 05       	cpc	r25, r0
    16d4:	08 95       	ret

000016d6 <__udivmodhi4>:
    16d6:	aa 1b       	sub	r26, r26
    16d8:	bb 1b       	sub	r27, r27
    16da:	51 e1       	ldi	r21, 0x11	; 17
    16dc:	07 c0       	rjmp	.+14     	; 0x16ec <__udivmodhi4_ep>

000016de <__udivmodhi4_loop>:
    16de:	aa 1f       	adc	r26, r26
    16e0:	bb 1f       	adc	r27, r27
    16e2:	a6 17       	cp	r26, r22
    16e4:	b7 07       	cpc	r27, r23
    16e6:	10 f0       	brcs	.+4      	; 0x16ec <__udivmodhi4_ep>
    16e8:	a6 1b       	sub	r26, r22
    16ea:	b7 0b       	sbc	r27, r23

000016ec <__udivmodhi4_ep>:
    16ec:	88 1f       	adc	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	5a 95       	dec	r21
    16f2:	a9 f7       	brne	.-22     	; 0x16de <__udivmodhi4_loop>
    16f4:	80 95       	com	r24
    16f6:	90 95       	com	r25
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	08 95       	ret

000016fe <strtol>:
    16fe:	a0 e0       	ldi	r26, 0x00	; 0
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e5 e8       	ldi	r30, 0x85	; 133
    1704:	fb e0       	ldi	r31, 0x0B	; 11
    1706:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__prologue_saves__+0x2>
    170a:	5c 01       	movw	r10, r24
    170c:	6b 01       	movw	r12, r22
    170e:	7a 01       	movw	r14, r20
    1710:	61 15       	cp	r22, r1
    1712:	71 05       	cpc	r23, r1
    1714:	19 f0       	breq	.+6      	; 0x171c <strtol+0x1e>
    1716:	fb 01       	movw	r30, r22
    1718:	80 83       	st	Z, r24
    171a:	91 83       	std	Z+1, r25	; 0x01
    171c:	e1 14       	cp	r14, r1
    171e:	f1 04       	cpc	r15, r1
    1720:	29 f0       	breq	.+10     	; 0x172c <strtol+0x2e>
    1722:	c7 01       	movw	r24, r14
    1724:	02 97       	sbiw	r24, 0x02	; 2
    1726:	83 97       	sbiw	r24, 0x23	; 35
    1728:	08 f0       	brcs	.+2      	; 0x172c <strtol+0x2e>
    172a:	e5 c0       	rjmp	.+458    	; 0x18f6 <strtol+0x1f8>
    172c:	e5 01       	movw	r28, r10
    172e:	21 96       	adiw	r28, 0x01	; 1
    1730:	f5 01       	movw	r30, r10
    1732:	10 81       	ld	r17, Z
    1734:	81 2f       	mov	r24, r17
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 95 0c 	call	0x192a	; 0x192a <isspace>
    173c:	89 2b       	or	r24, r25
    173e:	11 f0       	breq	.+4      	; 0x1744 <strtol+0x46>
    1740:	5e 01       	movw	r10, r28
    1742:	f4 cf       	rjmp	.-24     	; 0x172c <strtol+0x2e>
    1744:	1d 32       	cpi	r17, 0x2D	; 45
    1746:	29 f4       	brne	.+10     	; 0x1752 <strtol+0x54>
    1748:	21 96       	adiw	r28, 0x01	; 1
    174a:	f5 01       	movw	r30, r10
    174c:	11 81       	ldd	r17, Z+1	; 0x01
    174e:	01 e0       	ldi	r16, 0x01	; 1
    1750:	07 c0       	rjmp	.+14     	; 0x1760 <strtol+0x62>
    1752:	1b 32       	cpi	r17, 0x2B	; 43
    1754:	21 f4       	brne	.+8      	; 0x175e <strtol+0x60>
    1756:	e5 01       	movw	r28, r10
    1758:	22 96       	adiw	r28, 0x02	; 2
    175a:	f5 01       	movw	r30, r10
    175c:	11 81       	ldd	r17, Z+1	; 0x01
    175e:	00 e0       	ldi	r16, 0x00	; 0
    1760:	e1 14       	cp	r14, r1
    1762:	f1 04       	cpc	r15, r1
    1764:	09 f1       	breq	.+66     	; 0x17a8 <strtol+0xaa>
    1766:	f0 e1       	ldi	r31, 0x10	; 16
    1768:	ef 16       	cp	r14, r31
    176a:	f1 04       	cpc	r15, r1
    176c:	29 f4       	brne	.+10     	; 0x1778 <strtol+0x7a>
    176e:	3f c0       	rjmp	.+126    	; 0x17ee <strtol+0xf0>
    1770:	10 e3       	ldi	r17, 0x30	; 48
    1772:	e1 14       	cp	r14, r1
    1774:	f1 04       	cpc	r15, r1
    1776:	21 f1       	breq	.+72     	; 0x17c0 <strtol+0xc2>
    1778:	28 e0       	ldi	r18, 0x08	; 8
    177a:	e2 16       	cp	r14, r18
    177c:	f1 04       	cpc	r15, r1
    177e:	01 f1       	breq	.+64     	; 0x17c0 <strtol+0xc2>
    1780:	54 f4       	brge	.+20     	; 0x1796 <strtol+0x98>
    1782:	e2 e0       	ldi	r30, 0x02	; 2
    1784:	ee 16       	cp	r14, r30
    1786:	f1 04       	cpc	r15, r1
    1788:	21 f5       	brne	.+72     	; 0x17d2 <strtol+0xd4>
    178a:	81 2c       	mov	r8, r1
    178c:	91 2c       	mov	r9, r1
    178e:	a1 2c       	mov	r10, r1
    1790:	b0 e4       	ldi	r27, 0x40	; 64
    1792:	bb 2e       	mov	r11, r27
    1794:	3e c0       	rjmp	.+124    	; 0x1812 <strtol+0x114>
    1796:	fa e0       	ldi	r31, 0x0A	; 10
    1798:	ef 16       	cp	r14, r31
    179a:	f1 04       	cpc	r15, r1
    179c:	39 f0       	breq	.+14     	; 0x17ac <strtol+0xae>
    179e:	20 e1       	ldi	r18, 0x10	; 16
    17a0:	e2 16       	cp	r14, r18
    17a2:	f1 04       	cpc	r15, r1
    17a4:	b1 f4       	brne	.+44     	; 0x17d2 <strtol+0xd4>
    17a6:	30 c0       	rjmp	.+96     	; 0x1808 <strtol+0x10a>
    17a8:	10 33       	cpi	r17, 0x30	; 48
    17aa:	19 f1       	breq	.+70     	; 0x17f2 <strtol+0xf4>
    17ac:	fa e0       	ldi	r31, 0x0A	; 10
    17ae:	ef 2e       	mov	r14, r31
    17b0:	f1 2c       	mov	r15, r1
    17b2:	ac ec       	ldi	r26, 0xCC	; 204
    17b4:	8a 2e       	mov	r8, r26
    17b6:	98 2c       	mov	r9, r8
    17b8:	a8 2c       	mov	r10, r8
    17ba:	ac e0       	ldi	r26, 0x0C	; 12
    17bc:	ba 2e       	mov	r11, r26
    17be:	29 c0       	rjmp	.+82     	; 0x1812 <strtol+0x114>
    17c0:	78 e0       	ldi	r23, 0x08	; 8
    17c2:	e7 2e       	mov	r14, r23
    17c4:	f1 2c       	mov	r15, r1
    17c6:	81 2c       	mov	r8, r1
    17c8:	91 2c       	mov	r9, r1
    17ca:	a1 2c       	mov	r10, r1
    17cc:	e0 e1       	ldi	r30, 0x10	; 16
    17ce:	be 2e       	mov	r11, r30
    17d0:	20 c0       	rjmp	.+64     	; 0x1812 <strtol+0x114>
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e8       	ldi	r25, 0x80	; 128
    17da:	97 01       	movw	r18, r14
    17dc:	0f 2c       	mov	r0, r15
    17de:	00 0c       	add	r0, r0
    17e0:	44 0b       	sbc	r20, r20
    17e2:	55 0b       	sbc	r21, r21
    17e4:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__udivmodsi4>
    17e8:	49 01       	movw	r8, r18
    17ea:	5a 01       	movw	r10, r20
    17ec:	12 c0       	rjmp	.+36     	; 0x1812 <strtol+0x114>
    17ee:	10 33       	cpi	r17, 0x30	; 48
    17f0:	59 f4       	brne	.+22     	; 0x1808 <strtol+0x10a>
    17f2:	88 81       	ld	r24, Y
    17f4:	8f 7d       	andi	r24, 0xDF	; 223
    17f6:	88 35       	cpi	r24, 0x58	; 88
    17f8:	09 f0       	breq	.+2      	; 0x17fc <strtol+0xfe>
    17fa:	ba cf       	rjmp	.-140    	; 0x1770 <strtol+0x72>
    17fc:	19 81       	ldd	r17, Y+1	; 0x01
    17fe:	22 96       	adiw	r28, 0x02	; 2
    1800:	02 60       	ori	r16, 0x02	; 2
    1802:	80 e1       	ldi	r24, 0x10	; 16
    1804:	e8 2e       	mov	r14, r24
    1806:	f1 2c       	mov	r15, r1
    1808:	81 2c       	mov	r8, r1
    180a:	91 2c       	mov	r9, r1
    180c:	a1 2c       	mov	r10, r1
    180e:	68 e0       	ldi	r22, 0x08	; 8
    1810:	b6 2e       	mov	r11, r22
    1812:	40 e0       	ldi	r20, 0x00	; 0
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	cb 01       	movw	r24, r22
    181a:	27 01       	movw	r4, r14
    181c:	0f 2c       	mov	r0, r15
    181e:	00 0c       	add	r0, r0
    1820:	66 08       	sbc	r6, r6
    1822:	77 08       	sbc	r7, r7
    1824:	fe 01       	movw	r30, r28
    1826:	50 ed       	ldi	r21, 0xD0	; 208
    1828:	35 2e       	mov	r3, r21
    182a:	31 0e       	add	r3, r17
    182c:	29 e0       	ldi	r18, 0x09	; 9
    182e:	23 15       	cp	r18, r3
    1830:	70 f4       	brcc	.+28     	; 0x184e <strtol+0x150>
    1832:	2f eb       	ldi	r18, 0xBF	; 191
    1834:	21 0f       	add	r18, r17
    1836:	2a 31       	cpi	r18, 0x1A	; 26
    1838:	18 f4       	brcc	.+6      	; 0x1840 <strtol+0x142>
    183a:	39 ec       	ldi	r19, 0xC9	; 201
    183c:	33 2e       	mov	r3, r19
    183e:	06 c0       	rjmp	.+12     	; 0x184c <strtol+0x14e>
    1840:	2f e9       	ldi	r18, 0x9F	; 159
    1842:	21 0f       	add	r18, r17
    1844:	2a 31       	cpi	r18, 0x1A	; 26
    1846:	18 f5       	brcc	.+70     	; 0x188e <strtol+0x190>
    1848:	29 ea       	ldi	r18, 0xA9	; 169
    184a:	32 2e       	mov	r3, r18
    184c:	31 0e       	add	r3, r17
    184e:	23 2d       	mov	r18, r3
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	2e 15       	cp	r18, r14
    1854:	3f 05       	cpc	r19, r15
    1856:	dc f4       	brge	.+54     	; 0x188e <strtol+0x190>
    1858:	47 fd       	sbrc	r20, 7
    185a:	16 c0       	rjmp	.+44     	; 0x1888 <strtol+0x18a>
    185c:	86 16       	cp	r8, r22
    185e:	97 06       	cpc	r9, r23
    1860:	a8 06       	cpc	r10, r24
    1862:	b9 06       	cpc	r11, r25
    1864:	70 f0       	brcs	.+28     	; 0x1882 <strtol+0x184>
    1866:	a3 01       	movw	r20, r6
    1868:	92 01       	movw	r18, r4
    186a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__mulsi3>
    186e:	63 0d       	add	r22, r3
    1870:	71 1d       	adc	r23, r1
    1872:	81 1d       	adc	r24, r1
    1874:	91 1d       	adc	r25, r1
    1876:	61 30       	cpi	r22, 0x01	; 1
    1878:	71 05       	cpc	r23, r1
    187a:	81 05       	cpc	r24, r1
    187c:	20 e8       	ldi	r18, 0x80	; 128
    187e:	92 07       	cpc	r25, r18
    1880:	10 f0       	brcs	.+4      	; 0x1886 <strtol+0x188>
    1882:	4f ef       	ldi	r20, 0xFF	; 255
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <strtol+0x18a>
    1886:	41 e0       	ldi	r20, 0x01	; 1
    1888:	21 96       	adiw	r28, 0x01	; 1
    188a:	10 81       	ld	r17, Z
    188c:	cb cf       	rjmp	.-106    	; 0x1824 <strtol+0x126>
    188e:	20 2f       	mov	r18, r16
    1890:	21 70       	andi	r18, 0x01	; 1
    1892:	c1 14       	cp	r12, r1
    1894:	d1 04       	cpc	r13, r1
    1896:	71 f0       	breq	.+28     	; 0x18b4 <strtol+0x1b6>
    1898:	44 23       	and	r20, r20
    189a:	29 f0       	breq	.+10     	; 0x18a6 <strtol+0x1a8>
    189c:	21 97       	sbiw	r28, 0x01	; 1
    189e:	f6 01       	movw	r30, r12
    18a0:	c0 83       	st	Z, r28
    18a2:	d1 83       	std	Z+1, r29	; 0x01
    18a4:	07 c0       	rjmp	.+14     	; 0x18b4 <strtol+0x1b6>
    18a6:	01 ff       	sbrs	r16, 1
    18a8:	19 c0       	rjmp	.+50     	; 0x18dc <strtol+0x1de>
    18aa:	22 97       	sbiw	r28, 0x02	; 2
    18ac:	f6 01       	movw	r30, r12
    18ae:	c0 83       	st	Z, r28
    18b0:	d1 83       	std	Z+1, r29	; 0x01
    18b2:	14 c0       	rjmp	.+40     	; 0x18dc <strtol+0x1de>
    18b4:	47 ff       	sbrs	r20, 7
    18b6:	12 c0       	rjmp	.+36     	; 0x18dc <strtol+0x1de>
    18b8:	22 23       	and	r18, r18
    18ba:	29 f0       	breq	.+10     	; 0x18c6 <strtol+0x1c8>
    18bc:	60 e0       	ldi	r22, 0x00	; 0
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	90 e8       	ldi	r25, 0x80	; 128
    18c4:	04 c0       	rjmp	.+8      	; 0x18ce <strtol+0x1d0>
    18c6:	6f ef       	ldi	r22, 0xFF	; 255
    18c8:	7f ef       	ldi	r23, 0xFF	; 255
    18ca:	8f ef       	ldi	r24, 0xFF	; 255
    18cc:	9f e7       	ldi	r25, 0x7F	; 127
    18ce:	22 e2       	ldi	r18, 0x22	; 34
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	20 93 f6 64 	sts	0x64F6, r18	; 0x8064f6 <errno>
    18d6:	30 93 f7 64 	sts	0x64F7, r19	; 0x8064f7 <errno+0x1>
    18da:	09 c0       	rjmp	.+18     	; 0x18ee <strtol+0x1f0>
    18dc:	22 23       	and	r18, r18
    18de:	81 f0       	breq	.+32     	; 0x1900 <strtol+0x202>
    18e0:	90 95       	com	r25
    18e2:	80 95       	com	r24
    18e4:	70 95       	com	r23
    18e6:	61 95       	neg	r22
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	8f 4f       	sbci	r24, 0xFF	; 255
    18ec:	9f 4f       	sbci	r25, 0xFF	; 255
    18ee:	46 2f       	mov	r20, r22
    18f0:	37 2f       	mov	r19, r23
    18f2:	28 2f       	mov	r18, r24
    18f4:	12 c0       	rjmp	.+36     	; 0x191a <strtol+0x21c>
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	0d c0       	rjmp	.+26     	; 0x191a <strtol+0x21c>
    1900:	97 ff       	sbrs	r25, 7
    1902:	f5 cf       	rjmp	.-22     	; 0x18ee <strtol+0x1f0>
    1904:	82 e2       	ldi	r24, 0x22	; 34
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	80 93 f6 64 	sts	0x64F6, r24	; 0x8064f6 <errno>
    190c:	90 93 f7 64 	sts	0x64F7, r25	; 0x8064f7 <errno+0x1>
    1910:	6f ef       	ldi	r22, 0xFF	; 255
    1912:	7f ef       	ldi	r23, 0xFF	; 255
    1914:	8f ef       	ldi	r24, 0xFF	; 255
    1916:	9f e7       	ldi	r25, 0x7F	; 127
    1918:	ea cf       	rjmp	.-44     	; 0x18ee <strtol+0x1f0>
    191a:	64 2f       	mov	r22, r20
    191c:	73 2f       	mov	r23, r19
    191e:	82 2f       	mov	r24, r18
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	e1 e1       	ldi	r30, 0x11	; 17
    1926:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__epilogue_restores__+0x2>

0000192a <isspace>:
    192a:	91 11       	cpse	r25, r1
    192c:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <__ctype_isfalse>
    1930:	80 32       	cpi	r24, 0x20	; 32
    1932:	19 f0       	breq	.+6      	; 0x193a <isspace+0x10>
    1934:	89 50       	subi	r24, 0x09	; 9
    1936:	85 50       	subi	r24, 0x05	; 5
    1938:	c8 f7       	brcc	.-14     	; 0x192c <isspace+0x2>
    193a:	08 95       	ret

0000193c <strtok>:
    193c:	46 ed       	ldi	r20, 0xD6	; 214
    193e:	54 e6       	ldi	r21, 0x64	; 100
    1940:	0e 94 c9 0c 	call	0x1992	; 0x1992 <strtok_r>
    1944:	08 95       	ret

00001946 <memcpy>:
    1946:	fb 01       	movw	r30, r22
    1948:	dc 01       	movw	r26, r24
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <memcpy+0xa>
    194c:	01 90       	ld	r0, Z+
    194e:	0d 92       	st	X+, r0
    1950:	41 50       	subi	r20, 0x01	; 1
    1952:	50 40       	sbci	r21, 0x00	; 0
    1954:	d8 f7       	brcc	.-10     	; 0x194c <memcpy+0x6>
    1956:	08 95       	ret

00001958 <strncmp>:
    1958:	fb 01       	movw	r30, r22
    195a:	dc 01       	movw	r26, r24
    195c:	41 50       	subi	r20, 0x01	; 1
    195e:	50 40       	sbci	r21, 0x00	; 0
    1960:	30 f0       	brcs	.+12     	; 0x196e <strncmp+0x16>
    1962:	8d 91       	ld	r24, X+
    1964:	01 90       	ld	r0, Z+
    1966:	80 19       	sub	r24, r0
    1968:	19 f4       	brne	.+6      	; 0x1970 <strncmp+0x18>
    196a:	00 20       	and	r0, r0
    196c:	b9 f7       	brne	.-18     	; 0x195c <strncmp+0x4>
    196e:	88 1b       	sub	r24, r24
    1970:	99 0b       	sbc	r25, r25
    1972:	08 95       	ret

00001974 <strncpy>:
    1974:	fb 01       	movw	r30, r22
    1976:	dc 01       	movw	r26, r24
    1978:	41 50       	subi	r20, 0x01	; 1
    197a:	50 40       	sbci	r21, 0x00	; 0
    197c:	48 f0       	brcs	.+18     	; 0x1990 <strncpy+0x1c>
    197e:	01 90       	ld	r0, Z+
    1980:	0d 92       	st	X+, r0
    1982:	00 20       	and	r0, r0
    1984:	c9 f7       	brne	.-14     	; 0x1978 <strncpy+0x4>
    1986:	01 c0       	rjmp	.+2      	; 0x198a <strncpy+0x16>
    1988:	1d 92       	st	X+, r1
    198a:	41 50       	subi	r20, 0x01	; 1
    198c:	50 40       	sbci	r21, 0x00	; 0
    198e:	e0 f7       	brcc	.-8      	; 0x1988 <strncpy+0x14>
    1990:	08 95       	ret

00001992 <strtok_r>:
    1992:	fa 01       	movw	r30, r20
    1994:	a1 91       	ld	r26, Z+
    1996:	b0 81       	ld	r27, Z
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	19 f4       	brne	.+6      	; 0x19a2 <strtok_r+0x10>
    199c:	10 97       	sbiw	r26, 0x00	; 0
    199e:	e1 f0       	breq	.+56     	; 0x19d8 <strtok_r+0x46>
    19a0:	cd 01       	movw	r24, r26
    19a2:	dc 01       	movw	r26, r24
    19a4:	cd 01       	movw	r24, r26
    19a6:	0d 90       	ld	r0, X+
    19a8:	00 20       	and	r0, r0
    19aa:	11 f4       	brne	.+4      	; 0x19b0 <strtok_r+0x1e>
    19ac:	c0 01       	movw	r24, r0
    19ae:	13 c0       	rjmp	.+38     	; 0x19d6 <strtok_r+0x44>
    19b0:	fb 01       	movw	r30, r22
    19b2:	21 91       	ld	r18, Z+
    19b4:	22 23       	and	r18, r18
    19b6:	19 f0       	breq	.+6      	; 0x19be <strtok_r+0x2c>
    19b8:	20 15       	cp	r18, r0
    19ba:	d9 f7       	brne	.-10     	; 0x19b2 <strtok_r+0x20>
    19bc:	f3 cf       	rjmp	.-26     	; 0x19a4 <strtok_r+0x12>
    19be:	fb 01       	movw	r30, r22
    19c0:	21 91       	ld	r18, Z+
    19c2:	20 15       	cp	r18, r0
    19c4:	19 f4       	brne	.+6      	; 0x19cc <strtok_r+0x3a>
    19c6:	1e 92       	st	-X, r1
    19c8:	11 96       	adiw	r26, 0x01	; 1
    19ca:	06 c0       	rjmp	.+12     	; 0x19d8 <strtok_r+0x46>
    19cc:	22 23       	and	r18, r18
    19ce:	c1 f7       	brne	.-16     	; 0x19c0 <strtok_r+0x2e>
    19d0:	0d 90       	ld	r0, X+
    19d2:	00 20       	and	r0, r0
    19d4:	a1 f7       	brne	.-24     	; 0x19be <strtok_r+0x2c>
    19d6:	d0 01       	movw	r26, r0
    19d8:	fa 01       	movw	r30, r20
    19da:	a1 93       	st	Z+, r26
    19dc:	b0 83       	st	Z, r27
    19de:	08 95       	ret

000019e0 <vsnprintf>:
    19e0:	ae e0       	ldi	r26, 0x0E	; 14
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e6 ef       	ldi	r30, 0xF6	; 246
    19e6:	fc e0       	ldi	r31, 0x0C	; 12
    19e8:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__prologue_saves__+0x1c>
    19ec:	8c 01       	movw	r16, r24
    19ee:	fa 01       	movw	r30, r20
    19f0:	86 e0       	ldi	r24, 0x06	; 6
    19f2:	8c 83       	std	Y+4, r24	; 0x04
    19f4:	09 83       	std	Y+1, r16	; 0x01
    19f6:	1a 83       	std	Y+2, r17	; 0x02
    19f8:	77 ff       	sbrs	r23, 7
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <vsnprintf+0x20>
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	70 e8       	ldi	r23, 0x80	; 128
    1a00:	cb 01       	movw	r24, r22
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	8d 83       	std	Y+5, r24	; 0x05
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	a9 01       	movw	r20, r18
    1a0a:	bf 01       	movw	r22, r30
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <vfprintf>
    1a14:	4d 81       	ldd	r20, Y+5	; 0x05
    1a16:	5e 81       	ldd	r21, Y+6	; 0x06
    1a18:	57 fd       	sbrc	r21, 7
    1a1a:	0a c0       	rjmp	.+20     	; 0x1a30 <vsnprintf+0x50>
    1a1c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a1e:	38 85       	ldd	r19, Y+8	; 0x08
    1a20:	42 17       	cp	r20, r18
    1a22:	53 07       	cpc	r21, r19
    1a24:	0c f4       	brge	.+2      	; 0x1a28 <vsnprintf+0x48>
    1a26:	9a 01       	movw	r18, r20
    1a28:	f8 01       	movw	r30, r16
    1a2a:	e2 0f       	add	r30, r18
    1a2c:	f3 1f       	adc	r31, r19
    1a2e:	10 82       	st	Z, r1
    1a30:	2e 96       	adiw	r28, 0x0e	; 14
    1a32:	e4 e0       	ldi	r30, 0x04	; 4
    1a34:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__epilogue_restores__+0x1c>

00001a38 <vfprintf>:
    1a38:	ab e0       	ldi	r26, 0x0B	; 11
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e2 e2       	ldi	r30, 0x22	; 34
    1a3e:	fd e0       	ldi	r31, 0x0D	; 13
    1a40:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__prologue_saves__>
    1a44:	6c 01       	movw	r12, r24
    1a46:	7b 01       	movw	r14, r22
    1a48:	8a 01       	movw	r16, r20
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	16 82       	std	Z+6, r1	; 0x06
    1a4e:	17 82       	std	Z+7, r1	; 0x07
    1a50:	83 81       	ldd	r24, Z+3	; 0x03
    1a52:	81 ff       	sbrs	r24, 1
    1a54:	cc c1       	rjmp	.+920    	; 0x1dee <vfprintf+0x3b6>
    1a56:	ce 01       	movw	r24, r28
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	3c 01       	movw	r6, r24
    1a5c:	f6 01       	movw	r30, r12
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	f7 01       	movw	r30, r14
    1a62:	93 fd       	sbrc	r25, 3
    1a64:	85 91       	lpm	r24, Z+
    1a66:	93 ff       	sbrs	r25, 3
    1a68:	81 91       	ld	r24, Z+
    1a6a:	7f 01       	movw	r14, r30
    1a6c:	88 23       	and	r24, r24
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <vfprintf+0x3a>
    1a70:	ba c1       	rjmp	.+884    	; 0x1de6 <vfprintf+0x3ae>
    1a72:	85 32       	cpi	r24, 0x25	; 37
    1a74:	39 f4       	brne	.+14     	; 0x1a84 <vfprintf+0x4c>
    1a76:	93 fd       	sbrc	r25, 3
    1a78:	85 91       	lpm	r24, Z+
    1a7a:	93 ff       	sbrs	r25, 3
    1a7c:	81 91       	ld	r24, Z+
    1a7e:	7f 01       	movw	r14, r30
    1a80:	85 32       	cpi	r24, 0x25	; 37
    1a82:	29 f4       	brne	.+10     	; 0x1a8e <vfprintf+0x56>
    1a84:	b6 01       	movw	r22, r12
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1a8c:	e7 cf       	rjmp	.-50     	; 0x1a5c <vfprintf+0x24>
    1a8e:	91 2c       	mov	r9, r1
    1a90:	21 2c       	mov	r2, r1
    1a92:	31 2c       	mov	r3, r1
    1a94:	ff e1       	ldi	r31, 0x1F	; 31
    1a96:	f3 15       	cp	r31, r3
    1a98:	d8 f0       	brcs	.+54     	; 0x1ad0 <vfprintf+0x98>
    1a9a:	8b 32       	cpi	r24, 0x2B	; 43
    1a9c:	79 f0       	breq	.+30     	; 0x1abc <vfprintf+0x84>
    1a9e:	38 f4       	brcc	.+14     	; 0x1aae <vfprintf+0x76>
    1aa0:	80 32       	cpi	r24, 0x20	; 32
    1aa2:	79 f0       	breq	.+30     	; 0x1ac2 <vfprintf+0x8a>
    1aa4:	83 32       	cpi	r24, 0x23	; 35
    1aa6:	a1 f4       	brne	.+40     	; 0x1ad0 <vfprintf+0x98>
    1aa8:	23 2d       	mov	r18, r3
    1aaa:	20 61       	ori	r18, 0x10	; 16
    1aac:	1d c0       	rjmp	.+58     	; 0x1ae8 <vfprintf+0xb0>
    1aae:	8d 32       	cpi	r24, 0x2D	; 45
    1ab0:	61 f0       	breq	.+24     	; 0x1aca <vfprintf+0x92>
    1ab2:	80 33       	cpi	r24, 0x30	; 48
    1ab4:	69 f4       	brne	.+26     	; 0x1ad0 <vfprintf+0x98>
    1ab6:	23 2d       	mov	r18, r3
    1ab8:	21 60       	ori	r18, 0x01	; 1
    1aba:	16 c0       	rjmp	.+44     	; 0x1ae8 <vfprintf+0xb0>
    1abc:	83 2d       	mov	r24, r3
    1abe:	82 60       	ori	r24, 0x02	; 2
    1ac0:	38 2e       	mov	r3, r24
    1ac2:	e3 2d       	mov	r30, r3
    1ac4:	e4 60       	ori	r30, 0x04	; 4
    1ac6:	3e 2e       	mov	r3, r30
    1ac8:	2a c0       	rjmp	.+84     	; 0x1b1e <vfprintf+0xe6>
    1aca:	f3 2d       	mov	r31, r3
    1acc:	f8 60       	ori	r31, 0x08	; 8
    1ace:	1d c0       	rjmp	.+58     	; 0x1b0a <vfprintf+0xd2>
    1ad0:	37 fc       	sbrc	r3, 7
    1ad2:	2d c0       	rjmp	.+90     	; 0x1b2e <vfprintf+0xf6>
    1ad4:	20 ed       	ldi	r18, 0xD0	; 208
    1ad6:	28 0f       	add	r18, r24
    1ad8:	2a 30       	cpi	r18, 0x0A	; 10
    1ada:	40 f0       	brcs	.+16     	; 0x1aec <vfprintf+0xb4>
    1adc:	8e 32       	cpi	r24, 0x2E	; 46
    1ade:	b9 f4       	brne	.+46     	; 0x1b0e <vfprintf+0xd6>
    1ae0:	36 fc       	sbrc	r3, 6
    1ae2:	81 c1       	rjmp	.+770    	; 0x1de6 <vfprintf+0x3ae>
    1ae4:	23 2d       	mov	r18, r3
    1ae6:	20 64       	ori	r18, 0x40	; 64
    1ae8:	32 2e       	mov	r3, r18
    1aea:	19 c0       	rjmp	.+50     	; 0x1b1e <vfprintf+0xe6>
    1aec:	36 fe       	sbrs	r3, 6
    1aee:	06 c0       	rjmp	.+12     	; 0x1afc <vfprintf+0xc4>
    1af0:	8a e0       	ldi	r24, 0x0A	; 10
    1af2:	98 9e       	mul	r9, r24
    1af4:	20 0d       	add	r18, r0
    1af6:	11 24       	eor	r1, r1
    1af8:	92 2e       	mov	r9, r18
    1afa:	11 c0       	rjmp	.+34     	; 0x1b1e <vfprintf+0xe6>
    1afc:	ea e0       	ldi	r30, 0x0A	; 10
    1afe:	2e 9e       	mul	r2, r30
    1b00:	20 0d       	add	r18, r0
    1b02:	11 24       	eor	r1, r1
    1b04:	22 2e       	mov	r2, r18
    1b06:	f3 2d       	mov	r31, r3
    1b08:	f0 62       	ori	r31, 0x20	; 32
    1b0a:	3f 2e       	mov	r3, r31
    1b0c:	08 c0       	rjmp	.+16     	; 0x1b1e <vfprintf+0xe6>
    1b0e:	8c 36       	cpi	r24, 0x6C	; 108
    1b10:	21 f4       	brne	.+8      	; 0x1b1a <vfprintf+0xe2>
    1b12:	83 2d       	mov	r24, r3
    1b14:	80 68       	ori	r24, 0x80	; 128
    1b16:	38 2e       	mov	r3, r24
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <vfprintf+0xe6>
    1b1a:	88 36       	cpi	r24, 0x68	; 104
    1b1c:	41 f4       	brne	.+16     	; 0x1b2e <vfprintf+0xf6>
    1b1e:	f7 01       	movw	r30, r14
    1b20:	93 fd       	sbrc	r25, 3
    1b22:	85 91       	lpm	r24, Z+
    1b24:	93 ff       	sbrs	r25, 3
    1b26:	81 91       	ld	r24, Z+
    1b28:	7f 01       	movw	r14, r30
    1b2a:	81 11       	cpse	r24, r1
    1b2c:	b3 cf       	rjmp	.-154    	; 0x1a94 <vfprintf+0x5c>
    1b2e:	98 2f       	mov	r25, r24
    1b30:	9f 7d       	andi	r25, 0xDF	; 223
    1b32:	95 54       	subi	r25, 0x45	; 69
    1b34:	93 30       	cpi	r25, 0x03	; 3
    1b36:	28 f4       	brcc	.+10     	; 0x1b42 <vfprintf+0x10a>
    1b38:	0c 5f       	subi	r16, 0xFC	; 252
    1b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3c:	9f e3       	ldi	r25, 0x3F	; 63
    1b3e:	99 83       	std	Y+1, r25	; 0x01
    1b40:	0d c0       	rjmp	.+26     	; 0x1b5c <vfprintf+0x124>
    1b42:	83 36       	cpi	r24, 0x63	; 99
    1b44:	31 f0       	breq	.+12     	; 0x1b52 <vfprintf+0x11a>
    1b46:	83 37       	cpi	r24, 0x73	; 115
    1b48:	71 f0       	breq	.+28     	; 0x1b66 <vfprintf+0x12e>
    1b4a:	83 35       	cpi	r24, 0x53	; 83
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <vfprintf+0x118>
    1b4e:	59 c0       	rjmp	.+178    	; 0x1c02 <vfprintf+0x1ca>
    1b50:	21 c0       	rjmp	.+66     	; 0x1b94 <vfprintf+0x15c>
    1b52:	f8 01       	movw	r30, r16
    1b54:	80 81       	ld	r24, Z
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	0e 5f       	subi	r16, 0xFE	; 254
    1b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5c:	88 24       	eor	r8, r8
    1b5e:	83 94       	inc	r8
    1b60:	91 2c       	mov	r9, r1
    1b62:	53 01       	movw	r10, r6
    1b64:	13 c0       	rjmp	.+38     	; 0x1b8c <vfprintf+0x154>
    1b66:	28 01       	movw	r4, r16
    1b68:	f2 e0       	ldi	r31, 0x02	; 2
    1b6a:	4f 0e       	add	r4, r31
    1b6c:	51 1c       	adc	r5, r1
    1b6e:	f8 01       	movw	r30, r16
    1b70:	a0 80       	ld	r10, Z
    1b72:	b1 80       	ldd	r11, Z+1	; 0x01
    1b74:	36 fe       	sbrs	r3, 6
    1b76:	03 c0       	rjmp	.+6      	; 0x1b7e <vfprintf+0x146>
    1b78:	69 2d       	mov	r22, r9
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <vfprintf+0x14a>
    1b7e:	6f ef       	ldi	r22, 0xFF	; 255
    1b80:	7f ef       	ldi	r23, 0xFF	; 255
    1b82:	c5 01       	movw	r24, r10
    1b84:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <strnlen>
    1b88:	4c 01       	movw	r8, r24
    1b8a:	82 01       	movw	r16, r4
    1b8c:	f3 2d       	mov	r31, r3
    1b8e:	ff 77       	andi	r31, 0x7F	; 127
    1b90:	3f 2e       	mov	r3, r31
    1b92:	16 c0       	rjmp	.+44     	; 0x1bc0 <vfprintf+0x188>
    1b94:	28 01       	movw	r4, r16
    1b96:	22 e0       	ldi	r18, 0x02	; 2
    1b98:	42 0e       	add	r4, r18
    1b9a:	51 1c       	adc	r5, r1
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	a0 80       	ld	r10, Z
    1ba0:	b1 80       	ldd	r11, Z+1	; 0x01
    1ba2:	36 fe       	sbrs	r3, 6
    1ba4:	03 c0       	rjmp	.+6      	; 0x1bac <vfprintf+0x174>
    1ba6:	69 2d       	mov	r22, r9
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <vfprintf+0x178>
    1bac:	6f ef       	ldi	r22, 0xFF	; 255
    1bae:	7f ef       	ldi	r23, 0xFF	; 255
    1bb0:	c5 01       	movw	r24, r10
    1bb2:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <strnlen_P>
    1bb6:	4c 01       	movw	r8, r24
    1bb8:	f3 2d       	mov	r31, r3
    1bba:	f0 68       	ori	r31, 0x80	; 128
    1bbc:	3f 2e       	mov	r3, r31
    1bbe:	82 01       	movw	r16, r4
    1bc0:	33 fc       	sbrc	r3, 3
    1bc2:	1b c0       	rjmp	.+54     	; 0x1bfa <vfprintf+0x1c2>
    1bc4:	82 2d       	mov	r24, r2
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	88 16       	cp	r8, r24
    1bca:	99 06       	cpc	r9, r25
    1bcc:	b0 f4       	brcc	.+44     	; 0x1bfa <vfprintf+0x1c2>
    1bce:	b6 01       	movw	r22, r12
    1bd0:	80 e2       	ldi	r24, 0x20	; 32
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1bd8:	2a 94       	dec	r2
    1bda:	f4 cf       	rjmp	.-24     	; 0x1bc4 <vfprintf+0x18c>
    1bdc:	f5 01       	movw	r30, r10
    1bde:	37 fc       	sbrc	r3, 7
    1be0:	85 91       	lpm	r24, Z+
    1be2:	37 fe       	sbrs	r3, 7
    1be4:	81 91       	ld	r24, Z+
    1be6:	5f 01       	movw	r10, r30
    1be8:	b6 01       	movw	r22, r12
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1bf0:	21 10       	cpse	r2, r1
    1bf2:	2a 94       	dec	r2
    1bf4:	21 e0       	ldi	r18, 0x01	; 1
    1bf6:	82 1a       	sub	r8, r18
    1bf8:	91 08       	sbc	r9, r1
    1bfa:	81 14       	cp	r8, r1
    1bfc:	91 04       	cpc	r9, r1
    1bfe:	71 f7       	brne	.-36     	; 0x1bdc <vfprintf+0x1a4>
    1c00:	e8 c0       	rjmp	.+464    	; 0x1dd2 <vfprintf+0x39a>
    1c02:	84 36       	cpi	r24, 0x64	; 100
    1c04:	11 f0       	breq	.+4      	; 0x1c0a <vfprintf+0x1d2>
    1c06:	89 36       	cpi	r24, 0x69	; 105
    1c08:	41 f5       	brne	.+80     	; 0x1c5a <vfprintf+0x222>
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	37 fe       	sbrs	r3, 7
    1c0e:	07 c0       	rjmp	.+14     	; 0x1c1e <vfprintf+0x1e6>
    1c10:	60 81       	ld	r22, Z
    1c12:	71 81       	ldd	r23, Z+1	; 0x01
    1c14:	82 81       	ldd	r24, Z+2	; 0x02
    1c16:	93 81       	ldd	r25, Z+3	; 0x03
    1c18:	0c 5f       	subi	r16, 0xFC	; 252
    1c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1c:	08 c0       	rjmp	.+16     	; 0x1c2e <vfprintf+0x1f6>
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	07 2e       	mov	r0, r23
    1c24:	00 0c       	add	r0, r0
    1c26:	88 0b       	sbc	r24, r24
    1c28:	99 0b       	sbc	r25, r25
    1c2a:	0e 5f       	subi	r16, 0xFE	; 254
    1c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2e:	f3 2d       	mov	r31, r3
    1c30:	ff 76       	andi	r31, 0x6F	; 111
    1c32:	3f 2e       	mov	r3, r31
    1c34:	97 ff       	sbrs	r25, 7
    1c36:	09 c0       	rjmp	.+18     	; 0x1c4a <vfprintf+0x212>
    1c38:	90 95       	com	r25
    1c3a:	80 95       	com	r24
    1c3c:	70 95       	com	r23
    1c3e:	61 95       	neg	r22
    1c40:	7f 4f       	sbci	r23, 0xFF	; 255
    1c42:	8f 4f       	sbci	r24, 0xFF	; 255
    1c44:	9f 4f       	sbci	r25, 0xFF	; 255
    1c46:	f0 68       	ori	r31, 0x80	; 128
    1c48:	3f 2e       	mov	r3, r31
    1c4a:	2a e0       	ldi	r18, 0x0A	; 10
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	a3 01       	movw	r20, r6
    1c50:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__ultoa_invert>
    1c54:	88 2e       	mov	r8, r24
    1c56:	86 18       	sub	r8, r6
    1c58:	45 c0       	rjmp	.+138    	; 0x1ce4 <vfprintf+0x2ac>
    1c5a:	85 37       	cpi	r24, 0x75	; 117
    1c5c:	31 f4       	brne	.+12     	; 0x1c6a <vfprintf+0x232>
    1c5e:	23 2d       	mov	r18, r3
    1c60:	2f 7e       	andi	r18, 0xEF	; 239
    1c62:	b2 2e       	mov	r11, r18
    1c64:	2a e0       	ldi	r18, 0x0A	; 10
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	25 c0       	rjmp	.+74     	; 0x1cb4 <vfprintf+0x27c>
    1c6a:	93 2d       	mov	r25, r3
    1c6c:	99 7f       	andi	r25, 0xF9	; 249
    1c6e:	b9 2e       	mov	r11, r25
    1c70:	8f 36       	cpi	r24, 0x6F	; 111
    1c72:	c1 f0       	breq	.+48     	; 0x1ca4 <vfprintf+0x26c>
    1c74:	18 f4       	brcc	.+6      	; 0x1c7c <vfprintf+0x244>
    1c76:	88 35       	cpi	r24, 0x58	; 88
    1c78:	79 f0       	breq	.+30     	; 0x1c98 <vfprintf+0x260>
    1c7a:	b5 c0       	rjmp	.+362    	; 0x1de6 <vfprintf+0x3ae>
    1c7c:	80 37       	cpi	r24, 0x70	; 112
    1c7e:	19 f0       	breq	.+6      	; 0x1c86 <vfprintf+0x24e>
    1c80:	88 37       	cpi	r24, 0x78	; 120
    1c82:	21 f0       	breq	.+8      	; 0x1c8c <vfprintf+0x254>
    1c84:	b0 c0       	rjmp	.+352    	; 0x1de6 <vfprintf+0x3ae>
    1c86:	e9 2f       	mov	r30, r25
    1c88:	e0 61       	ori	r30, 0x10	; 16
    1c8a:	be 2e       	mov	r11, r30
    1c8c:	b4 fe       	sbrs	r11, 4
    1c8e:	0d c0       	rjmp	.+26     	; 0x1caa <vfprintf+0x272>
    1c90:	fb 2d       	mov	r31, r11
    1c92:	f4 60       	ori	r31, 0x04	; 4
    1c94:	bf 2e       	mov	r11, r31
    1c96:	09 c0       	rjmp	.+18     	; 0x1caa <vfprintf+0x272>
    1c98:	34 fe       	sbrs	r3, 4
    1c9a:	0a c0       	rjmp	.+20     	; 0x1cb0 <vfprintf+0x278>
    1c9c:	29 2f       	mov	r18, r25
    1c9e:	26 60       	ori	r18, 0x06	; 6
    1ca0:	b2 2e       	mov	r11, r18
    1ca2:	06 c0       	rjmp	.+12     	; 0x1cb0 <vfprintf+0x278>
    1ca4:	28 e0       	ldi	r18, 0x08	; 8
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	05 c0       	rjmp	.+10     	; 0x1cb4 <vfprintf+0x27c>
    1caa:	20 e1       	ldi	r18, 0x10	; 16
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <vfprintf+0x27c>
    1cb0:	20 e1       	ldi	r18, 0x10	; 16
    1cb2:	32 e0       	ldi	r19, 0x02	; 2
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	b7 fe       	sbrs	r11, 7
    1cb8:	07 c0       	rjmp	.+14     	; 0x1cc8 <vfprintf+0x290>
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	0c 5f       	subi	r16, 0xFC	; 252
    1cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc6:	06 c0       	rjmp	.+12     	; 0x1cd4 <vfprintf+0x29c>
    1cc8:	60 81       	ld	r22, Z
    1cca:	71 81       	ldd	r23, Z+1	; 0x01
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 5f       	subi	r16, 0xFE	; 254
    1cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd4:	a3 01       	movw	r20, r6
    1cd6:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__ultoa_invert>
    1cda:	88 2e       	mov	r8, r24
    1cdc:	86 18       	sub	r8, r6
    1cde:	fb 2d       	mov	r31, r11
    1ce0:	ff 77       	andi	r31, 0x7F	; 127
    1ce2:	3f 2e       	mov	r3, r31
    1ce4:	36 fe       	sbrs	r3, 6
    1ce6:	0d c0       	rjmp	.+26     	; 0x1d02 <vfprintf+0x2ca>
    1ce8:	23 2d       	mov	r18, r3
    1cea:	2e 7f       	andi	r18, 0xFE	; 254
    1cec:	a2 2e       	mov	r10, r18
    1cee:	89 14       	cp	r8, r9
    1cf0:	58 f4       	brcc	.+22     	; 0x1d08 <vfprintf+0x2d0>
    1cf2:	34 fe       	sbrs	r3, 4
    1cf4:	0b c0       	rjmp	.+22     	; 0x1d0c <vfprintf+0x2d4>
    1cf6:	32 fc       	sbrc	r3, 2
    1cf8:	09 c0       	rjmp	.+18     	; 0x1d0c <vfprintf+0x2d4>
    1cfa:	83 2d       	mov	r24, r3
    1cfc:	8e 7e       	andi	r24, 0xEE	; 238
    1cfe:	a8 2e       	mov	r10, r24
    1d00:	05 c0       	rjmp	.+10     	; 0x1d0c <vfprintf+0x2d4>
    1d02:	b8 2c       	mov	r11, r8
    1d04:	a3 2c       	mov	r10, r3
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <vfprintf+0x2d6>
    1d08:	b8 2c       	mov	r11, r8
    1d0a:	01 c0       	rjmp	.+2      	; 0x1d0e <vfprintf+0x2d6>
    1d0c:	b9 2c       	mov	r11, r9
    1d0e:	a4 fe       	sbrs	r10, 4
    1d10:	0f c0       	rjmp	.+30     	; 0x1d30 <vfprintf+0x2f8>
    1d12:	fe 01       	movw	r30, r28
    1d14:	e8 0d       	add	r30, r8
    1d16:	f1 1d       	adc	r31, r1
    1d18:	80 81       	ld	r24, Z
    1d1a:	80 33       	cpi	r24, 0x30	; 48
    1d1c:	21 f4       	brne	.+8      	; 0x1d26 <vfprintf+0x2ee>
    1d1e:	9a 2d       	mov	r25, r10
    1d20:	99 7e       	andi	r25, 0xE9	; 233
    1d22:	a9 2e       	mov	r10, r25
    1d24:	09 c0       	rjmp	.+18     	; 0x1d38 <vfprintf+0x300>
    1d26:	a2 fe       	sbrs	r10, 2
    1d28:	06 c0       	rjmp	.+12     	; 0x1d36 <vfprintf+0x2fe>
    1d2a:	b3 94       	inc	r11
    1d2c:	b3 94       	inc	r11
    1d2e:	04 c0       	rjmp	.+8      	; 0x1d38 <vfprintf+0x300>
    1d30:	8a 2d       	mov	r24, r10
    1d32:	86 78       	andi	r24, 0x86	; 134
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <vfprintf+0x300>
    1d36:	b3 94       	inc	r11
    1d38:	a3 fc       	sbrc	r10, 3
    1d3a:	11 c0       	rjmp	.+34     	; 0x1d5e <vfprintf+0x326>
    1d3c:	a0 fe       	sbrs	r10, 0
    1d3e:	06 c0       	rjmp	.+12     	; 0x1d4c <vfprintf+0x314>
    1d40:	b2 14       	cp	r11, r2
    1d42:	88 f4       	brcc	.+34     	; 0x1d66 <vfprintf+0x32e>
    1d44:	28 0c       	add	r2, r8
    1d46:	92 2c       	mov	r9, r2
    1d48:	9b 18       	sub	r9, r11
    1d4a:	0e c0       	rjmp	.+28     	; 0x1d68 <vfprintf+0x330>
    1d4c:	b2 14       	cp	r11, r2
    1d4e:	60 f4       	brcc	.+24     	; 0x1d68 <vfprintf+0x330>
    1d50:	b6 01       	movw	r22, r12
    1d52:	80 e2       	ldi	r24, 0x20	; 32
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1d5a:	b3 94       	inc	r11
    1d5c:	f7 cf       	rjmp	.-18     	; 0x1d4c <vfprintf+0x314>
    1d5e:	b2 14       	cp	r11, r2
    1d60:	18 f4       	brcc	.+6      	; 0x1d68 <vfprintf+0x330>
    1d62:	2b 18       	sub	r2, r11
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <vfprintf+0x332>
    1d66:	98 2c       	mov	r9, r8
    1d68:	21 2c       	mov	r2, r1
    1d6a:	a4 fe       	sbrs	r10, 4
    1d6c:	10 c0       	rjmp	.+32     	; 0x1d8e <vfprintf+0x356>
    1d6e:	b6 01       	movw	r22, r12
    1d70:	80 e3       	ldi	r24, 0x30	; 48
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1d78:	a2 fe       	sbrs	r10, 2
    1d7a:	17 c0       	rjmp	.+46     	; 0x1daa <vfprintf+0x372>
    1d7c:	a1 fc       	sbrc	r10, 1
    1d7e:	03 c0       	rjmp	.+6      	; 0x1d86 <vfprintf+0x34e>
    1d80:	88 e7       	ldi	r24, 0x78	; 120
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <vfprintf+0x352>
    1d86:	88 e5       	ldi	r24, 0x58	; 88
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	b6 01       	movw	r22, r12
    1d8c:	0c c0       	rjmp	.+24     	; 0x1da6 <vfprintf+0x36e>
    1d8e:	8a 2d       	mov	r24, r10
    1d90:	86 78       	andi	r24, 0x86	; 134
    1d92:	59 f0       	breq	.+22     	; 0x1daa <vfprintf+0x372>
    1d94:	a1 fe       	sbrs	r10, 1
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <vfprintf+0x364>
    1d98:	8b e2       	ldi	r24, 0x2B	; 43
    1d9a:	01 c0       	rjmp	.+2      	; 0x1d9e <vfprintf+0x366>
    1d9c:	80 e2       	ldi	r24, 0x20	; 32
    1d9e:	a7 fc       	sbrc	r10, 7
    1da0:	8d e2       	ldi	r24, 0x2D	; 45
    1da2:	b6 01       	movw	r22, r12
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1daa:	89 14       	cp	r8, r9
    1dac:	38 f4       	brcc	.+14     	; 0x1dbc <vfprintf+0x384>
    1dae:	b6 01       	movw	r22, r12
    1db0:	80 e3       	ldi	r24, 0x30	; 48
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1db8:	9a 94       	dec	r9
    1dba:	f7 cf       	rjmp	.-18     	; 0x1daa <vfprintf+0x372>
    1dbc:	8a 94       	dec	r8
    1dbe:	f3 01       	movw	r30, r6
    1dc0:	e8 0d       	add	r30, r8
    1dc2:	f1 1d       	adc	r31, r1
    1dc4:	80 81       	ld	r24, Z
    1dc6:	b6 01       	movw	r22, r12
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1dce:	81 10       	cpse	r8, r1
    1dd0:	f5 cf       	rjmp	.-22     	; 0x1dbc <vfprintf+0x384>
    1dd2:	22 20       	and	r2, r2
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <vfprintf+0x3a0>
    1dd6:	42 ce       	rjmp	.-892    	; 0x1a5c <vfprintf+0x24>
    1dd8:	b6 01       	movw	r22, r12
    1dda:	80 e2       	ldi	r24, 0x20	; 32
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fputc>
    1de2:	2a 94       	dec	r2
    1de4:	f6 cf       	rjmp	.-20     	; 0x1dd2 <vfprintf+0x39a>
    1de6:	f6 01       	movw	r30, r12
    1de8:	86 81       	ldd	r24, Z+6	; 0x06
    1dea:	97 81       	ldd	r25, Z+7	; 0x07
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <vfprintf+0x3ba>
    1dee:	8f ef       	ldi	r24, 0xFF	; 255
    1df0:	9f ef       	ldi	r25, 0xFF	; 255
    1df2:	2b 96       	adiw	r28, 0x0b	; 11
    1df4:	e2 e1       	ldi	r30, 0x12	; 18
    1df6:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__epilogue_restores__>

00001dfa <__ctype_isfalse>:
    1dfa:	99 27       	eor	r25, r25
    1dfc:	88 27       	eor	r24, r24

00001dfe <__ctype_istrue>:
    1dfe:	08 95       	ret

00001e00 <strnlen_P>:
    1e00:	fc 01       	movw	r30, r24
    1e02:	05 90       	lpm	r0, Z+
    1e04:	61 50       	subi	r22, 0x01	; 1
    1e06:	70 40       	sbci	r23, 0x00	; 0
    1e08:	01 10       	cpse	r0, r1
    1e0a:	d8 f7       	brcc	.-10     	; 0x1e02 <strnlen_P+0x2>
    1e0c:	80 95       	com	r24
    1e0e:	90 95       	com	r25
    1e10:	8e 0f       	add	r24, r30
    1e12:	9f 1f       	adc	r25, r31
    1e14:	08 95       	ret

00001e16 <strnlen>:
    1e16:	fc 01       	movw	r30, r24
    1e18:	61 50       	subi	r22, 0x01	; 1
    1e1a:	70 40       	sbci	r23, 0x00	; 0
    1e1c:	01 90       	ld	r0, Z+
    1e1e:	01 10       	cpse	r0, r1
    1e20:	d8 f7       	brcc	.-10     	; 0x1e18 <strnlen+0x2>
    1e22:	80 95       	com	r24
    1e24:	90 95       	com	r25
    1e26:	8e 0f       	add	r24, r30
    1e28:	9f 1f       	adc	r25, r31
    1e2a:	08 95       	ret

00001e2c <fputc>:
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	fb 01       	movw	r30, r22
    1e36:	23 81       	ldd	r18, Z+3	; 0x03
    1e38:	21 fd       	sbrc	r18, 1
    1e3a:	03 c0       	rjmp	.+6      	; 0x1e42 <fputc+0x16>
    1e3c:	8f ef       	ldi	r24, 0xFF	; 255
    1e3e:	9f ef       	ldi	r25, 0xFF	; 255
    1e40:	2c c0       	rjmp	.+88     	; 0x1e9a <fputc+0x6e>
    1e42:	22 ff       	sbrs	r18, 2
    1e44:	16 c0       	rjmp	.+44     	; 0x1e72 <fputc+0x46>
    1e46:	46 81       	ldd	r20, Z+6	; 0x06
    1e48:	57 81       	ldd	r21, Z+7	; 0x07
    1e4a:	24 81       	ldd	r18, Z+4	; 0x04
    1e4c:	35 81       	ldd	r19, Z+5	; 0x05
    1e4e:	42 17       	cp	r20, r18
    1e50:	53 07       	cpc	r21, r19
    1e52:	44 f4       	brge	.+16     	; 0x1e64 <fputc+0x38>
    1e54:	a0 81       	ld	r26, Z
    1e56:	b1 81       	ldd	r27, Z+1	; 0x01
    1e58:	9d 01       	movw	r18, r26
    1e5a:	2f 5f       	subi	r18, 0xFF	; 255
    1e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5e:	20 83       	st	Z, r18
    1e60:	31 83       	std	Z+1, r19	; 0x01
    1e62:	8c 93       	st	X, r24
    1e64:	26 81       	ldd	r18, Z+6	; 0x06
    1e66:	37 81       	ldd	r19, Z+7	; 0x07
    1e68:	2f 5f       	subi	r18, 0xFF	; 255
    1e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6c:	26 83       	std	Z+6, r18	; 0x06
    1e6e:	37 83       	std	Z+7, r19	; 0x07
    1e70:	14 c0       	rjmp	.+40     	; 0x1e9a <fputc+0x6e>
    1e72:	8b 01       	movw	r16, r22
    1e74:	ec 01       	movw	r28, r24
    1e76:	fb 01       	movw	r30, r22
    1e78:	00 84       	ldd	r0, Z+8	; 0x08
    1e7a:	f1 85       	ldd	r31, Z+9	; 0x09
    1e7c:	e0 2d       	mov	r30, r0
    1e7e:	09 95       	icall
    1e80:	89 2b       	or	r24, r25
    1e82:	e1 f6       	brne	.-72     	; 0x1e3c <fputc+0x10>
    1e84:	d8 01       	movw	r26, r16
    1e86:	16 96       	adiw	r26, 0x06	; 6
    1e88:	8d 91       	ld	r24, X+
    1e8a:	9c 91       	ld	r25, X
    1e8c:	17 97       	sbiw	r26, 0x07	; 7
    1e8e:	01 96       	adiw	r24, 0x01	; 1
    1e90:	16 96       	adiw	r26, 0x06	; 6
    1e92:	8d 93       	st	X+, r24
    1e94:	9c 93       	st	X, r25
    1e96:	17 97       	sbiw	r26, 0x07	; 7
    1e98:	ce 01       	movw	r24, r28
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	1f 91       	pop	r17
    1ea0:	0f 91       	pop	r16
    1ea2:	08 95       	ret

00001ea4 <__ultoa_invert>:
    1ea4:	fa 01       	movw	r30, r20
    1ea6:	aa 27       	eor	r26, r26
    1ea8:	28 30       	cpi	r18, 0x08	; 8
    1eaa:	51 f1       	breq	.+84     	; 0x1f00 <__ultoa_invert+0x5c>
    1eac:	20 31       	cpi	r18, 0x10	; 16
    1eae:	81 f1       	breq	.+96     	; 0x1f10 <__ultoa_invert+0x6c>
    1eb0:	e8 94       	clt
    1eb2:	6f 93       	push	r22
    1eb4:	6e 7f       	andi	r22, 0xFE	; 254
    1eb6:	6e 5f       	subi	r22, 0xFE	; 254
    1eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eba:	8f 4f       	sbci	r24, 0xFF	; 255
    1ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebe:	af 4f       	sbci	r26, 0xFF	; 255
    1ec0:	b1 e0       	ldi	r27, 0x01	; 1
    1ec2:	3e d0       	rcall	.+124    	; 0x1f40 <__ultoa_invert+0x9c>
    1ec4:	b4 e0       	ldi	r27, 0x04	; 4
    1ec6:	3c d0       	rcall	.+120    	; 0x1f40 <__ultoa_invert+0x9c>
    1ec8:	67 0f       	add	r22, r23
    1eca:	78 1f       	adc	r23, r24
    1ecc:	89 1f       	adc	r24, r25
    1ece:	9a 1f       	adc	r25, r26
    1ed0:	a1 1d       	adc	r26, r1
    1ed2:	68 0f       	add	r22, r24
    1ed4:	79 1f       	adc	r23, r25
    1ed6:	8a 1f       	adc	r24, r26
    1ed8:	91 1d       	adc	r25, r1
    1eda:	a1 1d       	adc	r26, r1
    1edc:	6a 0f       	add	r22, r26
    1ede:	71 1d       	adc	r23, r1
    1ee0:	81 1d       	adc	r24, r1
    1ee2:	91 1d       	adc	r25, r1
    1ee4:	a1 1d       	adc	r26, r1
    1ee6:	20 d0       	rcall	.+64     	; 0x1f28 <__ultoa_invert+0x84>
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <__ultoa_invert+0x48>
    1eea:	68 94       	set
    1eec:	3f 91       	pop	r19
    1eee:	2a e0       	ldi	r18, 0x0A	; 10
    1ef0:	26 9f       	mul	r18, r22
    1ef2:	11 24       	eor	r1, r1
    1ef4:	30 19       	sub	r19, r0
    1ef6:	30 5d       	subi	r19, 0xD0	; 208
    1ef8:	31 93       	st	Z+, r19
    1efa:	de f6       	brtc	.-74     	; 0x1eb2 <__ultoa_invert+0xe>
    1efc:	cf 01       	movw	r24, r30
    1efe:	08 95       	ret
    1f00:	46 2f       	mov	r20, r22
    1f02:	47 70       	andi	r20, 0x07	; 7
    1f04:	40 5d       	subi	r20, 0xD0	; 208
    1f06:	41 93       	st	Z+, r20
    1f08:	b3 e0       	ldi	r27, 0x03	; 3
    1f0a:	0f d0       	rcall	.+30     	; 0x1f2a <__ultoa_invert+0x86>
    1f0c:	c9 f7       	brne	.-14     	; 0x1f00 <__ultoa_invert+0x5c>
    1f0e:	f6 cf       	rjmp	.-20     	; 0x1efc <__ultoa_invert+0x58>
    1f10:	46 2f       	mov	r20, r22
    1f12:	4f 70       	andi	r20, 0x0F	; 15
    1f14:	40 5d       	subi	r20, 0xD0	; 208
    1f16:	4a 33       	cpi	r20, 0x3A	; 58
    1f18:	18 f0       	brcs	.+6      	; 0x1f20 <__ultoa_invert+0x7c>
    1f1a:	49 5d       	subi	r20, 0xD9	; 217
    1f1c:	31 fd       	sbrc	r19, 1
    1f1e:	40 52       	subi	r20, 0x20	; 32
    1f20:	41 93       	st	Z+, r20
    1f22:	02 d0       	rcall	.+4      	; 0x1f28 <__ultoa_invert+0x84>
    1f24:	a9 f7       	brne	.-22     	; 0x1f10 <__ultoa_invert+0x6c>
    1f26:	ea cf       	rjmp	.-44     	; 0x1efc <__ultoa_invert+0x58>
    1f28:	b4 e0       	ldi	r27, 0x04	; 4
    1f2a:	a6 95       	lsr	r26
    1f2c:	97 95       	ror	r25
    1f2e:	87 95       	ror	r24
    1f30:	77 95       	ror	r23
    1f32:	67 95       	ror	r22
    1f34:	ba 95       	dec	r27
    1f36:	c9 f7       	brne	.-14     	; 0x1f2a <__ultoa_invert+0x86>
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	61 05       	cpc	r22, r1
    1f3c:	71 05       	cpc	r23, r1
    1f3e:	08 95       	ret
    1f40:	9b 01       	movw	r18, r22
    1f42:	ac 01       	movw	r20, r24
    1f44:	0a 2e       	mov	r0, r26
    1f46:	06 94       	lsr	r0
    1f48:	57 95       	ror	r21
    1f4a:	47 95       	ror	r20
    1f4c:	37 95       	ror	r19
    1f4e:	27 95       	ror	r18
    1f50:	ba 95       	dec	r27
    1f52:	c9 f7       	brne	.-14     	; 0x1f46 <__ultoa_invert+0xa2>
    1f54:	62 0f       	add	r22, r18
    1f56:	73 1f       	adc	r23, r19
    1f58:	84 1f       	adc	r24, r20
    1f5a:	95 1f       	adc	r25, r21
    1f5c:	a0 1d       	adc	r26, r0
    1f5e:	08 95       	ret

00001f60 <ccp_write_io>:
    1f60:	dc 01       	movw	r26, r24
    1f62:	28 ed       	ldi	r18, 0xD8	; 216
    1f64:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f0034>
    1f68:	6c 93       	st	X, r22
    1f6a:	08 95       	ret

00001f6c <__mulsi3>:
    1f6c:	db 01       	movw	r26, r22
    1f6e:	8f 93       	push	r24
    1f70:	9f 93       	push	r25
    1f72:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__muluhisi3>
    1f76:	bf 91       	pop	r27
    1f78:	af 91       	pop	r26
    1f7a:	a2 9f       	mul	r26, r18
    1f7c:	80 0d       	add	r24, r0
    1f7e:	91 1d       	adc	r25, r1
    1f80:	a3 9f       	mul	r26, r19
    1f82:	90 0d       	add	r25, r0
    1f84:	b2 9f       	mul	r27, r18
    1f86:	90 0d       	add	r25, r0
    1f88:	11 24       	eor	r1, r1
    1f8a:	08 95       	ret

00001f8c <__muluhisi3>:
    1f8c:	0e 94 19 0b 	call	0x1632	; 0x1632 <__umulhisi3>
    1f90:	a5 9f       	mul	r26, r21
    1f92:	90 0d       	add	r25, r0
    1f94:	b4 9f       	mul	r27, r20
    1f96:	90 0d       	add	r25, r0
    1f98:	a4 9f       	mul	r26, r20
    1f9a:	80 0d       	add	r24, r0
    1f9c:	91 1d       	adc	r25, r1
    1f9e:	11 24       	eor	r1, r1
    1fa0:	08 95       	ret

00001fa2 <__prologue_saves__>:
    1fa2:	2f 92       	push	r2
    1fa4:	3f 92       	push	r3
    1fa6:	4f 92       	push	r4
    1fa8:	5f 92       	push	r5
    1faa:	6f 92       	push	r6
    1fac:	7f 92       	push	r7
    1fae:	8f 92       	push	r8
    1fb0:	9f 92       	push	r9
    1fb2:	af 92       	push	r10
    1fb4:	bf 92       	push	r11
    1fb6:	cf 92       	push	r12
    1fb8:	df 92       	push	r13
    1fba:	ef 92       	push	r14
    1fbc:	ff 92       	push	r15
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	ca 1b       	sub	r28, r26
    1fcc:	db 0b       	sbc	r29, r27
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	09 94       	ijmp

00001fd4 <__epilogue_restores__>:
    1fd4:	2a 88       	ldd	r2, Y+18	; 0x12
    1fd6:	39 88       	ldd	r3, Y+17	; 0x11
    1fd8:	48 88       	ldd	r4, Y+16	; 0x10
    1fda:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fdc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fde:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fe0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fe2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fe4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fe6:	b9 84       	ldd	r11, Y+9	; 0x09
    1fe8:	c8 84       	ldd	r12, Y+8	; 0x08
    1fea:	df 80       	ldd	r13, Y+7	; 0x07
    1fec:	ee 80       	ldd	r14, Y+6	; 0x06
    1fee:	fd 80       	ldd	r15, Y+5	; 0x05
    1ff0:	0c 81       	ldd	r16, Y+4	; 0x04
    1ff2:	1b 81       	ldd	r17, Y+3	; 0x03
    1ff4:	aa 81       	ldd	r26, Y+2	; 0x02
    1ff6:	b9 81       	ldd	r27, Y+1	; 0x01
    1ff8:	ce 0f       	add	r28, r30
    1ffa:	d1 1d       	adc	r29, r1
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	ed 01       	movw	r28, r26
    2002:	08 95       	ret

00002004 <_exit>:
    2004:	f8 94       	cli

00002006 <__stop_program>:
    2006:	ff cf       	rjmp	.-2      	; 0x2006 <__stop_program>
