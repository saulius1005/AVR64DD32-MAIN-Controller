
AVR64DD32-MAIN-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000050c  00806000  000020f6  0000218a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005e  0080650c  0080650c  00002696  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002696  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000026f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  00002730  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000087fc  00000000  00000000  00002b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ad0  00000000  00000000  0000b354  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b7b  00000000  00000000  0000ee24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a84  00000000  00000000  000119a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000318b  00000000  00000000  00012424  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000289b  00000000  00000000  000155af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  00017e4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e7       	ldi	r29, 0x7F	; 127
      9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
      9c:	15 e6       	ldi	r17, 0x65	; 101
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b0 e6       	ldi	r27, 0x60	; 96
      a2:	e6 ef       	ldi	r30, 0xF6	; 246
      a4:	f0 e2       	ldi	r31, 0x20	; 32
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 30       	cpi	r26, 0x0C	; 12
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	25 e6       	ldi	r18, 0x65	; 101
      b4:	ac e0       	ldi	r26, 0x0C	; 12
      b6:	b5 e6       	ldi	r27, 0x65	; 101
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 36       	cpi	r26, 0x6A	; 106
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 05 06 	call	0xc0a	; 0xc0a <main>
      c6:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <normalize>:
		LinearMotor.noChangeCount = 0;
	}

	// 8. Iðsaugom paskutinæ reikðmæ
	Target.lastElevation = SensorData.HPElevation;
}
      ce:	68 e6       	ldi	r22, 0x68	; 104
      d0:	71 e0       	ldi	r23, 0x01	; 1
      d2:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__divmodhi4>
      d6:	99 23       	and	r25, r25
      d8:	14 f4       	brge	.+4      	; 0xde <normalize+0x10>
      da:	88 59       	subi	r24, 0x98	; 152
      dc:	9e 4f       	sbci	r25, 0xFE	; 254
      de:	08 95       	ret

000000e0 <angle_diff>:
      e0:	9c 01       	movw	r18, r24
      e2:	26 1b       	sub	r18, r22
      e4:	37 0b       	sbc	r19, r23
      e6:	c9 01       	movw	r24, r18
      e8:	99 23       	and	r25, r25
      ea:	24 f4       	brge	.+8      	; 0xf4 <angle_diff+0x14>
      ec:	88 27       	eor	r24, r24
      ee:	99 27       	eor	r25, r25
      f0:	82 1b       	sub	r24, r18
      f2:	93 0b       	sbc	r25, r19
      f4:	68 e6       	ldi	r22, 0x68	; 104
      f6:	71 e0       	ldi	r23, 0x01	; 1
      f8:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__divmodhi4>
      fc:	85 3b       	cpi	r24, 0xB5	; 181
      fe:	91 05       	cpc	r25, r1
     100:	34 f0       	brlt	.+12     	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
     102:	28 e6       	ldi	r18, 0x68	; 104
     104:	31 e0       	ldi	r19, 0x01	; 1
     106:	a9 01       	movw	r20, r18
     108:	48 1b       	sub	r20, r24
     10a:	59 0b       	sbc	r21, r25
     10c:	ca 01       	movw	r24, r20
     10e:	08 95       	ret

00000110 <get_safe_azimuth>:
     110:	cf 92       	push	r12
     112:	df 92       	push	r13
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	c0 91 65 65 	lds	r28, 0x6565	; 0x806565 <WSData+0x7>
     124:	2d e2       	ldi	r18, 0x2D	; 45
     126:	c2 9f       	mul	r28, r18
     128:	e0 01       	movw	r28, r0
     12a:	11 24       	eor	r1, r1
     12c:	ce 01       	movw	r24, r28
     12e:	86 5a       	subi	r24, 0xA6	; 166
     130:	9f 4f       	sbci	r25, 0xFF	; 255
     132:	0e 94 67 00 	call	0xce	; 0xce <normalize>
     136:	8c 01       	movw	r16, r24
     138:	ce 01       	movw	r24, r28
     13a:	8a 55       	subi	r24, 0x5A	; 90
     13c:	91 09       	sbc	r25, r1
     13e:	0e 94 67 00 	call	0xce	; 0xce <normalize>
     142:	ec 01       	movw	r28, r24
     144:	c8 01       	movw	r24, r16
     146:	4e 97       	sbiw	r24, 0x1e	; 30
     148:	9e 01       	movw	r18, r28
     14a:	2e 51       	subi	r18, 0x1E	; 30
     14c:	31 09       	sbc	r19, r1
     14e:	8d 32       	cpi	r24, 0x2D	; 45
     150:	41 e0       	ldi	r20, 0x01	; 1
     152:	94 07       	cpc	r25, r20
     154:	e8 f4       	brcc	.+58     	; 0x190 <get_safe_azimuth+0x80>
     156:	2d 32       	cpi	r18, 0x2D	; 45
     158:	31 40       	sbci	r19, 0x01	; 1
     15a:	d0 f4       	brcc	.+52     	; 0x190 <get_safe_azimuth+0x80>
     15c:	e0 90 12 65 	lds	r14, 0x6512	; 0x806512 <SensorData+0x4>
     160:	f0 90 13 65 	lds	r15, 0x6513	; 0x806513 <SensorData+0x5>
     164:	b8 01       	movw	r22, r16
     166:	c7 01       	movw	r24, r14
     168:	0e 94 70 00 	call	0xe0	; 0xe0 <angle_diff>
     16c:	6c 01       	movw	r12, r24
     16e:	be 01       	movw	r22, r28
     170:	c7 01       	movw	r24, r14
     172:	0e 94 70 00 	call	0xe0	; 0xe0 <angle_diff>
     176:	8c 15       	cp	r24, r12
     178:	9d 05       	cpc	r25, r13
     17a:	1c f0       	brlt	.+6      	; 0x182 <get_safe_azimuth+0x72>
     17c:	90 2f       	mov	r25, r16
     17e:	81 2f       	mov	r24, r17
     180:	02 c0       	rjmp	.+4      	; 0x186 <get_safe_azimuth+0x76>
     182:	9c 2f       	mov	r25, r28
     184:	8d 2f       	mov	r24, r29
     186:	90 93 22 60 	sts	0x6022, r25	; 0x806022 <Target+0x5>
     18a:	80 93 23 60 	sts	0x6023, r24	; 0x806023 <Target+0x6>
     18e:	0c c0       	rjmp	.+24     	; 0x1a8 <get_safe_azimuth+0x98>
     190:	8d 32       	cpi	r24, 0x2D	; 45
     192:	91 40       	sbci	r25, 0x01	; 1
     194:	28 f4       	brcc	.+10     	; 0x1a0 <get_safe_azimuth+0x90>
     196:	00 93 22 60 	sts	0x6022, r16	; 0x806022 <Target+0x5>
     19a:	10 93 23 60 	sts	0x6023, r17	; 0x806023 <Target+0x6>
     19e:	04 c0       	rjmp	.+8      	; 0x1a8 <get_safe_azimuth+0x98>
     1a0:	c0 93 22 60 	sts	0x6022, r28	; 0x806022 <Target+0x5>
     1a4:	d0 93 23 60 	sts	0x6023, r29	; 0x806023 <Target+0x6>
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	1f 91       	pop	r17
     1ae:	0f 91       	pop	r16
     1b0:	ff 90       	pop	r15
     1b2:	ef 90       	pop	r14
     1b4:	df 90       	pop	r13
     1b6:	cf 90       	pop	r12
     1b8:	08 95       	ret

000001ba <MotorControl>:

void MotorControl(MotorControlObj* m)
{
     1ba:	8f 92       	push	r8
     1bc:	9f 92       	push	r9
     1be:	af 92       	push	r10
     1c0:	bf 92       	push	r11
     1c2:	cf 92       	push	r12
     1c4:	df 92       	push	r13
     1c6:	ef 92       	push	r14
     1c8:	ff 92       	push	r15
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	ec 01       	movw	r28, r24
	// 1. FO jungtis
	if (SensorData.FO_lost_connecton_fault) {
     1d4:	80 91 21 65 	lds	r24, 0x6521	; 0x806521 <SensorData+0x13>
     1d8:	88 23       	and	r24, r24
     1da:	39 f0       	breq	.+14     	; 0x1ea <MotorControl+0x30>
		m->iface.stop();
     1dc:	ef 81       	ldd	r30, Y+7	; 0x07
     1de:	f8 85       	ldd	r31, Y+8	; 0x08
     1e0:	09 95       	icall
		m->iface.disable();
     1e2:	eb 81       	ldd	r30, Y+3	; 0x03
     1e4:	fc 81       	ldd	r31, Y+4	; 0x04
     1e6:	09 95       	icall
		return;
     1e8:	01 c1       	rjmp	.+514    	; 0x3ec <MotorControl+0x232>
	}

	// 2. Tikslas pasiektas
	if (*m->sensor.position == *m->sensor.target) {
     1ea:	eb 85       	ldd	r30, Y+11	; 0x0b
     1ec:	fc 85       	ldd	r31, Y+12	; 0x0c
     1ee:	80 81       	ld	r24, Z
     1f0:	91 81       	ldd	r25, Z+1	; 0x01
     1f2:	eb 89       	ldd	r30, Y+19	; 0x13
     1f4:	fc 89       	ldd	r31, Y+20	; 0x14
     1f6:	40 81       	ld	r20, Z
     1f8:	51 81       	ldd	r21, Z+1	; 0x01
     1fa:	84 17       	cp	r24, r20
     1fc:	95 07       	cpc	r25, r21
     1fe:	81 f4       	brne	.+32     	; 0x220 <MotorControl+0x66>
		m->iface.stop();
     200:	ef 81       	ldd	r30, Y+7	; 0x07
     202:	f8 85       	ldd	r31, Y+8	; 0x08
     204:	09 95       	icall
		m->iface.disable();
     206:	eb 81       	ldd	r30, Y+3	; 0x03
     208:	fc 81       	ldd	r31, Y+4	; 0x04
     20a:	09 95       	icall
		*m->sensor.faultFlag = false;
     20c:	ef 85       	ldd	r30, Y+15	; 0x0f
     20e:	f8 89       	ldd	r31, Y+16	; 0x10
     210:	10 82       	st	Z, r1
		*m->sensor.targetReached = true;
     212:	ed 89       	ldd	r30, Y+21	; 0x15
     214:	fe 89       	ldd	r31, Y+22	; 0x16
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	80 83       	st	Z, r24
		m->stuckCount = 0;
     21a:	1f 8a       	std	Y+23, r1	; 0x17
		m->noChangeCount = 0;
     21c:	18 8e       	std	Y+24, r1	; 0x18
		return;
     21e:	e6 c0       	rjmp	.+460    	; 0x3ec <MotorControl+0x232>
	}

	// 3. Backlash logika
	bool inBacklash = (*m->sensor.position >= (*m->sensor.target - m->backlash)) &&
     220:	a0 e0       	ldi	r26, 0x00	; 0
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	70 e0       	ldi	r23, 0x00	; 0
     228:	09 8d       	ldd	r16, Y+25	; 0x19
     22a:	1a 8d       	ldd	r17, Y+26	; 0x1a
     22c:	2b 8d       	ldd	r18, Y+27	; 0x1b
     22e:	3c 8d       	ldd	r19, Y+28	; 0x1c
     230:	6a 01       	movw	r12, r20
     232:	7b 01       	movw	r14, r22
     234:	c0 1a       	sub	r12, r16
     236:	d1 0a       	sbc	r13, r17
     238:	e2 0a       	sbc	r14, r18
     23a:	f3 0a       	sbc	r15, r19
     23c:	8c 15       	cp	r24, r12
     23e:	9d 05       	cpc	r25, r13
     240:	ae 05       	cpc	r26, r14
     242:	bf 05       	cpc	r27, r15
     244:	5c f0       	brlt	.+22     	; 0x25c <MotorControl+0xa2>
	(*m->sensor.position <= (*m->sensor.target + m->backlash));
     246:	40 0f       	add	r20, r16
     248:	51 1f       	adc	r21, r17
     24a:	62 1f       	adc	r22, r18
     24c:	73 1f       	adc	r23, r19
		m->noChangeCount = 0;
		return;
	}

	// 3. Backlash logika
	bool inBacklash = (*m->sensor.position >= (*m->sensor.target - m->backlash)) &&
     24e:	48 17       	cp	r20, r24
     250:	59 07       	cpc	r21, r25
     252:	6a 07       	cpc	r22, r26
     254:	7b 07       	cpc	r23, r27
     256:	24 f4       	brge	.+8      	; 0x260 <MotorControl+0xa6>
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	03 c0       	rjmp	.+6      	; 0x262 <MotorControl+0xa8>
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	01 c0       	rjmp	.+2      	; 0x262 <MotorControl+0xa8>
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	89 2f       	mov	r24, r25
     264:	81 70       	andi	r24, 0x01	; 1
	(*m->sensor.position <= (*m->sensor.target + m->backlash));

	if (!inBacklash || !*m->sensor.targetReached) {
     266:	29 f0       	breq	.+10     	; 0x272 <MotorControl+0xb8>
     268:	ed 89       	ldd	r30, Y+21	; 0x15
     26a:	fe 89       	ldd	r31, Y+22	; 0x16
     26c:	80 81       	ld	r24, Z
     26e:	81 11       	cpse	r24, r1
     270:	09 c0       	rjmp	.+18     	; 0x284 <MotorControl+0xca>
		m->iface.start();
     272:	ed 81       	ldd	r30, Y+5	; 0x05
     274:	fe 81       	ldd	r31, Y+6	; 0x06
     276:	09 95       	icall
		m->iface.enable();
     278:	e9 81       	ldd	r30, Y+1	; 0x01
     27a:	fa 81       	ldd	r31, Y+2	; 0x02
     27c:	09 95       	icall
		*m->sensor.targetReached = false;
     27e:	ed 89       	ldd	r30, Y+21	; 0x15
     280:	fe 89       	ldd	r31, Y+22	; 0x16
     282:	10 82       	st	Z, r1
	}

	// 4. Pokytis
	int32_t delta = (int32_t)(*m->sensor.positionFiltered) - (int32_t)(*m->sensor.lastPosition);
     284:	ed 85       	ldd	r30, Y+13	; 0x0d
     286:	fe 85       	ldd	r31, Y+14	; 0x0e
     288:	c0 80       	ld	r12, Z
     28a:	d1 80       	ldd	r13, Z+1	; 0x01
     28c:	e1 2c       	mov	r14, r1
     28e:	f1 2c       	mov	r15, r1
     290:	e9 89       	ldd	r30, Y+17	; 0x11
     292:	fa 89       	ldd	r31, Y+18	; 0x12
     294:	80 81       	ld	r24, Z
     296:	91 81       	ldd	r25, Z+1	; 0x01
     298:	c8 1a       	sub	r12, r24
     29a:	d9 0a       	sbc	r13, r25
     29c:	e1 08       	sbc	r14, r1
     29e:	f1 08       	sbc	r15, r1
	if (delta > -SENSOR_DEADBAND && delta < SENSOR_DEADBAND) {
     2a0:	d7 01       	movw	r26, r14
     2a2:	c6 01       	movw	r24, r12
     2a4:	43 96       	adiw	r24, 0x13	; 19
     2a6:	a1 1d       	adc	r26, r1
     2a8:	b1 1d       	adc	r27, r1
     2aa:	87 97       	sbiw	r24, 0x27	; 39
     2ac:	a1 05       	cpc	r26, r1
     2ae:	b1 05       	cpc	r27, r1
     2b0:	18 f4       	brcc	.+6      	; 0x2b8 <MotorControl+0xfe>
		delta = 0;
     2b2:	c1 2c       	mov	r12, r1
     2b4:	d1 2c       	mov	r13, r1
     2b6:	76 01       	movw	r14, r12
	}

	// 5. Kryptis
	if (*m->sensor.position < *m->sensor.target) {
     2b8:	eb 85       	ldd	r30, Y+11	; 0x0b
     2ba:	fc 85       	ldd	r31, Y+12	; 0x0c
     2bc:	20 81       	ld	r18, Z
     2be:	31 81       	ldd	r19, Z+1	; 0x01
     2c0:	eb 89       	ldd	r30, Y+19	; 0x13
     2c2:	fc 89       	ldd	r31, Y+20	; 0x14
     2c4:	80 81       	ld	r24, Z
     2c6:	91 81       	ldd	r25, Z+1	; 0x01
     2c8:	28 17       	cp	r18, r24
     2ca:	39 07       	cpc	r19, r25
     2cc:	28 f4       	brcc	.+10     	; 0x2d8 <MotorControl+0x11e>
		m->iface.set_direction(1);
     2ce:	e9 85       	ldd	r30, Y+9	; 0x09
     2d0:	fa 85       	ldd	r31, Y+10	; 0x0a
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	09 95       	icall
     2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <MotorControl+0x12c>
		} else if (*m->sensor.position > *m->sensor.target) {
     2d8:	82 17       	cp	r24, r18
     2da:	93 07       	cpc	r25, r19
     2dc:	20 f4       	brcc	.+8      	; 0x2e6 <MotorControl+0x12c>
		m->iface.set_direction(0);
     2de:	e9 85       	ldd	r30, Y+9	; 0x09
     2e0:	fa 85       	ldd	r31, Y+10	; 0x0a
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	09 95       	icall
	}

	// 6. Uþstrigimo tikrinimas (neteisinga kryptis)
	if (*m->sensor.position < (*m->sensor.target - m->backlash)) {
     2e6:	eb 85       	ldd	r30, Y+11	; 0x0b
     2e8:	fc 85       	ldd	r31, Y+12	; 0x0c
     2ea:	80 81       	ld	r24, Z
     2ec:	91 81       	ldd	r25, Z+1	; 0x01
     2ee:	a0 e0       	ldi	r26, 0x00	; 0
     2f0:	b0 e0       	ldi	r27, 0x00	; 0
     2f2:	eb 89       	ldd	r30, Y+19	; 0x13
     2f4:	fc 89       	ldd	r31, Y+20	; 0x14
     2f6:	40 81       	ld	r20, Z
     2f8:	51 81       	ldd	r21, Z+1	; 0x01
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	09 8d       	ldd	r16, Y+25	; 0x19
     300:	1a 8d       	ldd	r17, Y+26	; 0x1a
     302:	2b 8d       	ldd	r18, Y+27	; 0x1b
     304:	3c 8d       	ldd	r19, Y+28	; 0x1c
     306:	4a 01       	movw	r8, r20
     308:	5b 01       	movw	r10, r22
     30a:	80 1a       	sub	r8, r16
     30c:	91 0a       	sbc	r9, r17
     30e:	a2 0a       	sbc	r10, r18
     310:	b3 0a       	sbc	r11, r19
     312:	88 15       	cp	r24, r8
     314:	99 05       	cpc	r25, r9
     316:	aa 05       	cpc	r26, r10
     318:	bb 05       	cpc	r27, r11
     31a:	fc f4       	brge	.+62     	; 0x35a <MotorControl+0x1a0>
		if (delta < -SENSOR_DEADBAND && ++m->stuckCount >= STUCK_LIMIT) {
     31c:	8c ee       	ldi	r24, 0xEC	; 236
     31e:	c8 16       	cp	r12, r24
     320:	8f ef       	ldi	r24, 0xFF	; 255
     322:	d8 06       	cpc	r13, r24
     324:	e8 06       	cpc	r14, r24
     326:	f8 06       	cpc	r15, r24
     328:	84 f4       	brge	.+32     	; 0x34a <MotorControl+0x190>
     32a:	8f 89       	ldd	r24, Y+23	; 0x17
     32c:	8f 5f       	subi	r24, 0xFF	; 255
     32e:	8f 8b       	std	Y+23, r24	; 0x17
     330:	82 30       	cpi	r24, 0x02	; 2
     332:	58 f0       	brcs	.+22     	; 0x34a <MotorControl+0x190>
			*m->sensor.faultFlag = true;
     334:	ef 85       	ldd	r30, Y+15	; 0x0f
     336:	f8 89       	ldd	r31, Y+16	; 0x10
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	80 83       	st	Z, r24
			m->iface.stop();
     33c:	ef 81       	ldd	r30, Y+7	; 0x07
     33e:	f8 85       	ldd	r31, Y+8	; 0x08
     340:	09 95       	icall
			m->iface.disable();
     342:	eb 81       	ldd	r30, Y+3	; 0x03
     344:	fc 81       	ldd	r31, Y+4	; 0x04
     346:	09 95       	icall
     348:	2f c0       	rjmp	.+94     	; 0x3a8 <MotorControl+0x1ee>
			} else if (delta > SENSOR_DEADBAND) {
     34a:	85 e1       	ldi	r24, 0x15	; 21
     34c:	c8 16       	cp	r12, r24
     34e:	d1 04       	cpc	r13, r1
     350:	e1 04       	cpc	r14, r1
     352:	f1 04       	cpc	r15, r1
     354:	4c f1       	brlt	.+82     	; 0x3a8 <MotorControl+0x1ee>
			m->stuckCount = 0;
     356:	1f 8a       	std	Y+23, r1	; 0x17
     358:	27 c0       	rjmp	.+78     	; 0x3a8 <MotorControl+0x1ee>
		}
		} else if (*m->sensor.position > (*m->sensor.target + m->backlash)) {
     35a:	40 0f       	add	r20, r16
     35c:	51 1f       	adc	r21, r17
     35e:	62 1f       	adc	r22, r18
     360:	73 1f       	adc	r23, r19
     362:	48 17       	cp	r20, r24
     364:	59 07       	cpc	r21, r25
     366:	6a 07       	cpc	r22, r26
     368:	7b 07       	cpc	r23, r27
     36a:	f4 f4       	brge	.+60     	; 0x3a8 <MotorControl+0x1ee>
		if (delta > SENSOR_DEADBAND && ++m->stuckCount >= STUCK_LIMIT) {
     36c:	85 e1       	ldi	r24, 0x15	; 21
     36e:	c8 16       	cp	r12, r24
     370:	d1 04       	cpc	r13, r1
     372:	e1 04       	cpc	r14, r1
     374:	f1 04       	cpc	r15, r1
     376:	84 f0       	brlt	.+32     	; 0x398 <MotorControl+0x1de>
     378:	8f 89       	ldd	r24, Y+23	; 0x17
     37a:	8f 5f       	subi	r24, 0xFF	; 255
     37c:	8f 8b       	std	Y+23, r24	; 0x17
     37e:	82 30       	cpi	r24, 0x02	; 2
     380:	58 f0       	brcs	.+22     	; 0x398 <MotorControl+0x1de>
			*m->sensor.faultFlag = true;
     382:	ef 85       	ldd	r30, Y+15	; 0x0f
     384:	f8 89       	ldd	r31, Y+16	; 0x10
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	80 83       	st	Z, r24
			m->iface.stop();
     38a:	ef 81       	ldd	r30, Y+7	; 0x07
     38c:	f8 85       	ldd	r31, Y+8	; 0x08
     38e:	09 95       	icall
			m->iface.disable();
     390:	eb 81       	ldd	r30, Y+3	; 0x03
     392:	fc 81       	ldd	r31, Y+4	; 0x04
     394:	09 95       	icall
     396:	08 c0       	rjmp	.+16     	; 0x3a8 <MotorControl+0x1ee>
			} else if (delta < -SENSOR_DEADBAND) {
     398:	8c ee       	ldi	r24, 0xEC	; 236
     39a:	c8 16       	cp	r12, r24
     39c:	8f ef       	ldi	r24, 0xFF	; 255
     39e:	d8 06       	cpc	r13, r24
     3a0:	e8 06       	cpc	r14, r24
     3a2:	f8 06       	cpc	r15, r24
     3a4:	0c f4       	brge	.+2      	; 0x3a8 <MotorControl+0x1ee>
			m->stuckCount = 0;
     3a6:	1f 8a       	std	Y+23, r1	; 0x17
		}
	}

	// 7. Uþstrigimas vietoje
	if (delta == 0 && !*m->sensor.targetReached) {
     3a8:	cd 28       	or	r12, r13
     3aa:	ce 28       	or	r12, r14
     3ac:	cf 28       	or	r12, r15
     3ae:	a9 f4       	brne	.+42     	; 0x3da <MotorControl+0x220>
     3b0:	ed 89       	ldd	r30, Y+21	; 0x15
     3b2:	fe 89       	ldd	r31, Y+22	; 0x16
     3b4:	80 81       	ld	r24, Z
     3b6:	81 11       	cpse	r24, r1
     3b8:	10 c0       	rjmp	.+32     	; 0x3da <MotorControl+0x220>
		if (++m->noChangeCount >= STUCK_LIMIT) {
     3ba:	88 8d       	ldd	r24, Y+24	; 0x18
     3bc:	8f 5f       	subi	r24, 0xFF	; 255
     3be:	88 8f       	std	Y+24, r24	; 0x18
     3c0:	82 30       	cpi	r24, 0x02	; 2
     3c2:	60 f0       	brcs	.+24     	; 0x3dc <MotorControl+0x222>
			*m->sensor.faultFlag = true;
     3c4:	ef 85       	ldd	r30, Y+15	; 0x0f
     3c6:	f8 89       	ldd	r31, Y+16	; 0x10
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	80 83       	st	Z, r24
			m->iface.stop();
     3cc:	ef 81       	ldd	r30, Y+7	; 0x07
     3ce:	f8 85       	ldd	r31, Y+8	; 0x08
     3d0:	09 95       	icall
			m->iface.disable();
     3d2:	eb 81       	ldd	r30, Y+3	; 0x03
     3d4:	fc 81       	ldd	r31, Y+4	; 0x04
     3d6:	09 95       	icall
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <MotorControl+0x222>
		}
		} else {
		m->noChangeCount = 0;
     3da:	18 8e       	std	Y+24, r1	; 0x18
	}

	// 8. Atnaujinam paskutinæ reikðmæ
	*m->sensor.lastPosition = *m->sensor.positionFiltered;
     3dc:	e9 89       	ldd	r30, Y+17	; 0x11
     3de:	fa 89       	ldd	r31, Y+18	; 0x12
     3e0:	ad 85       	ldd	r26, Y+13	; 0x0d
     3e2:	be 85       	ldd	r27, Y+14	; 0x0e
     3e4:	8d 91       	ld	r24, X+
     3e6:	9c 91       	ld	r25, X
     3e8:	80 83       	st	Z, r24
     3ea:	91 83       	std	Z+1, r25	; 0x01
}
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	df 90       	pop	r13
     3fa:	cf 90       	pop	r12
     3fc:	bf 90       	pop	r11
     3fe:	af 90       	pop	r10
     400:	9f 90       	pop	r9
     402:	8f 90       	pop	r8
     404:	08 95       	ret

00000406 <work>:


void work(){
	if(WSData.windspeed > MAX_WIND){
     406:	80 91 64 65 	lds	r24, 0x6564	; 0x806564 <WSData+0x6>
     40a:	80 31       	cpi	r24, 0x10	; 16
     40c:	48 f0       	brcs	.+18     	; 0x420 <work+0x1a>
		get_safe_azimuth();
     40e:	0e 94 88 00 	call	0x110	; 0x110 <get_safe_azimuth>
		Target.elevation = SAFE_ELEVATION;
     412:	84 e1       	ldi	r24, 0x14	; 20
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	80 93 1d 60 	sts	0x601D, r24	; 0x80601d <Target>
     41a:	90 93 1e 60 	sts	0x601E, r25	; 0x80601e <Target+0x1>
     41e:	08 95       	ret
	}
	else{
		if(WSData.lightlevel >= MIN_LIGHT_LEVEL){ // if minimum light level reached work as normal
     420:	80 91 66 65 	lds	r24, 0x6566	; 0x806566 <WSData+0x8>
     424:	90 91 67 65 	lds	r25, 0x6567	; 0x806567 <WSData+0x9>
     428:	8c 32       	cpi	r24, 0x2C	; 44
     42a:	91 40       	sbci	r25, 0x01	; 1
     42c:	80 f0       	brcs	.+32     	; 0x44e <work+0x48>
			Target.azimuth = WSData.azimuth;
     42e:	ae e5       	ldi	r26, 0x5E	; 94
     430:	b5 e6       	ldi	r27, 0x65	; 101
     432:	8d 91       	ld	r24, X+
     434:	9c 91       	ld	r25, X
     436:	11 97       	sbiw	r26, 0x01	; 1
     438:	ed e1       	ldi	r30, 0x1D	; 29
     43a:	f0 e6       	ldi	r31, 0x60	; 96
     43c:	85 83       	std	Z+5, r24	; 0x05
     43e:	96 83       	std	Z+6, r25	; 0x06
			Target.elevation = WSData.elevation;
     440:	12 96       	adiw	r26, 0x02	; 2
     442:	8d 91       	ld	r24, X+
     444:	9c 91       	ld	r25, X
     446:	13 97       	sbiw	r26, 0x03	; 3
     448:	80 83       	st	Z, r24
     44a:	91 83       	std	Z+1, r25	; 0x01
     44c:	0c c0       	rjmp	.+24     	; 0x466 <work+0x60>
		}
		else{ // if not go to best day position (early morning, late at evening, or just dark day)
			Target.azimuth = 180; //South
     44e:	ed e1       	ldi	r30, 0x1D	; 29
     450:	f0 e6       	ldi	r31, 0x60	; 96
     452:	84 eb       	ldi	r24, 0xB4	; 180
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	85 83       	std	Z+5, r24	; 0x05
     458:	96 83       	std	Z+6, r25	; 0x06
			Target.elevation = WSData.topelevation; //day top elevation
     45a:	80 91 62 65 	lds	r24, 0x6562	; 0x806562 <WSData+0x4>
     45e:	90 91 63 65 	lds	r25, 0x6563	; 0x806563 <WSData+0x5>
     462:	80 83       	st	Z, r24
     464:	91 83       	std	Z+1, r25	; 0x01
		}
				//ReachTarget();
				//StepperControl();
				//LinearMotorControl();
				MotorControl(&LinearMotorCtrl);
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e6       	ldi	r25, 0x60	; 96
     46a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MotorControl>
     46e:	08 95       	ret

00000470 <ADC0_init>:

}

void ADC0_SetupSysVoltage(){
	VREF.ADC0REF = VREF_REFSEL_1V024_gc; // 1.024V = 4096| 1.024 = 10.24V|
	ADC0.MUXPOS = ADC_MUXPOS_VDDDIV10_gc; //5V = 0.5V
     470:	e0 e0       	ldi	r30, 0x00	; 0
     472:	f6 e0       	ldi	r31, 0x06	; 6
     474:	87 e0       	ldi	r24, 0x07	; 7
     476:	81 83       	std	Z+1, r24	; 0x01
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	82 83       	std	Z+2, r24	; 0x02
     47c:	80 83       	st	Z, r24
     47e:	08 95       	ret

00000480 <ADC0_SetupJoystick>:
     480:	95 e0       	ldi	r25, 0x05	; 5
     482:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
     486:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     48a:	08 95       	ret

0000048c <ADC0_read>:
 * appropriately.
 *
 * @return The ADC conversion result as a 12-bit value.
 */
uint16_t ADC0_read() {
    ADC0.COMMAND = ADC_STCONV_bm; // Start conversion
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7f060a>
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)); // Wait until result is ready
     492:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7f060d>
     496:	80 ff       	sbrs	r24, 0
     498:	fc cf       	rjmp	.-8      	; 0x492 <ADC0_read+0x6>
    ADC0.INTFLAGS = ADC_RESRDY_bm; // Clear result ready flag
     49a:	e0 e0       	ldi	r30, 0x00	; 0
     49c:	f6 e0       	ldi	r31, 0x06	; 6
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	85 87       	std	Z+13, r24	; 0x0d
    return ADC0.RES >> 4; // Shift result if accumulation is over 16
     4a2:	80 89       	ldd	r24, Z+16	; 0x10
     4a4:	91 89       	ldd	r25, Z+17	; 0x11
}
     4a6:	92 95       	swap	r25
     4a8:	82 95       	swap	r24
     4aa:	8f 70       	andi	r24, 0x0F	; 15
     4ac:	89 27       	eor	r24, r25
     4ae:	9f 70       	andi	r25, 0x0F	; 15
     4b0:	89 27       	eor	r24, r25
     4b2:	08 95       	ret

000004b4 <CLOCK_XOSCHF_clock_init>:
#include "Settings.h"

void CLOCK_XOSCHF_clock_init()
{
	/* Enable external (32 MHz) clock input */
	ccp_write_io((uint8_t *) &CLKCTRL.XOSCHFCTRLA, CLKCTRL_SELHF_EXTCLOCK_gc | CLKCTRL_FRQRANGE_24M_gc | CLKCTRL_ENABLE_bm);
     4b4:	6b e0       	ldi	r22, 0x0B	; 11
     4b6:	80 e8       	ldi	r24, 0x80	; 128
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 27 10 	call	0x204e	; 0x204e <ccp_write_io>

	/* Set the main clock to use external clock as source */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc);
     4be:	63 e0       	ldi	r22, 0x03	; 3
     4c0:	80 e6       	ldi	r24, 0x60	; 96
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 27 10 	call	0x204e	; 0x204e <ccp_write_io>

	/* Wait for system oscillator change to complete */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm)
     4c8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
     4cc:	80 fd       	sbrc	r24, 0
     4ce:	fc cf       	rjmp	.-8      	; 0x4c8 <CLOCK_XOSCHF_clock_init+0x14>
	{};
	/* Configuration complete;*/
}
     4d0:	08 95       	ret

000004d2 <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
     4d2:	2f 92       	push	r2
     4d4:	3f 92       	push	r3
     4d6:	4f 92       	push	r4
     4d8:	5f 92       	push	r5
     4da:	6f 92       	push	r6
     4dc:	7f 92       	push	r7
     4de:	8f 92       	push	r8
     4e0:	9f 92       	push	r9
     4e2:	af 92       	push	r10
     4e4:	bf 92       	push	r11
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	2b 97       	sbiw	r28, 0x0b	; 11
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	c2 2e       	mov	r12, r18
     502:	b3 2e       	mov	r11, r19
     504:	a4 2e       	mov	r10, r20
     506:	95 2e       	mov	r9, r21
     508:	86 2e       	mov	r8, r22
     50a:	77 2e       	mov	r7, r23
     50c:	68 2e       	mov	r6, r24
     50e:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
     510:	f2 2e       	mov	r15, r18
     512:	03 2f       	mov	r16, r19
     514:	14 2f       	mov	r17, r20
     516:	5a 87       	std	Y+10, r21	; 0x0a
     518:	69 83       	std	Y+1, r22	; 0x01
     51a:	b7 2f       	mov	r27, r23
     51c:	d8 2e       	mov	r13, r24
     51e:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
     520:	e0 e0       	ldi	r30, 0x00	; 0
     522:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     524:	14 c0       	rjmp	.+40     	; 0x54e <crc8_cdma2000+0x7c>
        length++;
     526:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
     528:	2f 2d       	mov	r18, r15
     52a:	30 2f       	mov	r19, r16
     52c:	41 2f       	mov	r20, r17
     52e:	5a 85       	ldd	r21, Y+10	; 0x0a
     530:	69 81       	ldd	r22, Y+1	; 0x01
     532:	7b 2f       	mov	r23, r27
     534:	8d 2d       	mov	r24, r13
     536:	9e 2d       	mov	r25, r14
     538:	08 e0       	ldi	r16, 0x08	; 8
     53a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__lshrdi3>
     53e:	f2 2e       	mov	r15, r18
     540:	03 2f       	mov	r16, r19
     542:	14 2f       	mov	r17, r20
     544:	5a 87       	std	Y+10, r21	; 0x0a
     546:	69 83       	std	Y+1, r22	; 0x01
     548:	b7 2f       	mov	r27, r23
     54a:	d8 2e       	mov	r13, r24
     54c:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     54e:	2f 2d       	mov	r18, r15
     550:	30 2f       	mov	r19, r16
     552:	41 2f       	mov	r20, r17
     554:	5a 85       	ldd	r21, Y+10	; 0x0a
     556:	69 81       	ldd	r22, Y+1	; 0x01
     558:	7b 2f       	mov	r23, r27
     55a:	8d 2d       	mov	r24, r13
     55c:	9e 2d       	mov	r25, r14
     55e:	a0 e0       	ldi	r26, 0x00	; 0
     560:	0e 94 c6 0b 	call	0x178c	; 0x178c <__cmpdi2_s8>
     564:	01 f7       	brne	.-64     	; 0x526 <crc8_cdma2000+0x54>
     566:	8f ef       	ldi	r24, 0xFF	; 255
     568:	8a 87       	std	Y+10, r24	; 0x0a
     56a:	cb 86       	std	Y+11, r12	; 0x0b
     56c:	b9 82       	std	Y+1, r11	; 0x01
     56e:	4a 2c       	mov	r4, r10
     570:	39 2c       	mov	r3, r9
     572:	28 2c       	mov	r2, r8
     574:	1a c0       	rjmp	.+52     	; 0x5aa <crc8_cdma2000+0xd8>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
     576:	8d 01       	movw	r16, r26
     578:	00 0f       	add	r16, r16
     57a:	11 1f       	adc	r17, r17
     57c:	00 0f       	add	r16, r16
     57e:	11 1f       	adc	r17, r17
     580:	00 0f       	add	r16, r16
     582:	11 1f       	adc	r17, r17
     584:	2b 85       	ldd	r18, Y+11	; 0x0b
     586:	39 81       	ldd	r19, Y+1	; 0x01
     588:	44 2d       	mov	r20, r4
     58a:	53 2d       	mov	r21, r3
     58c:	62 2d       	mov	r22, r2
     58e:	77 2d       	mov	r23, r7
     590:	86 2d       	mov	r24, r6
     592:	95 2d       	mov	r25, r5
     594:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__lshrdi3>
     598:	8a 84       	ldd	r8, Y+10	; 0x0a
     59a:	82 26       	eor	r8, r18
     59c:	91 2c       	mov	r9, r1
     59e:	f4 01       	movw	r30, r8
     5a0:	e0 57       	subi	r30, 0x70	; 112
     5a2:	fc 49       	sbci	r31, 0x9C	; 156
     5a4:	80 81       	ld	r24, Z
     5a6:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
     5a8:	fd 01       	movw	r30, r26
     5aa:	df 01       	movw	r26, r30
     5ac:	11 97       	sbiw	r26, 0x01	; 1
     5ae:	ef 2b       	or	r30, r31
     5b0:	11 f7       	brne	.-60     	; 0x576 <crc8_cdma2000+0xa4>
     5b2:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
     5b4:	2b 96       	adiw	r28, 0x0b	; 11
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	df 90       	pop	r13
     5c8:	cf 90       	pop	r12
     5ca:	bf 90       	pop	r11
     5cc:	af 90       	pop	r10
     5ce:	9f 90       	pop	r9
     5d0:	8f 90       	pop	r8
     5d2:	7f 90       	pop	r7
     5d4:	6f 90       	pop	r6
     5d6:	5f 90       	pop	r5
     5d8:	4f 90       	pop	r4
     5da:	3f 90       	pop	r3
     5dc:	2f 90       	pop	r2
     5de:	08 95       	ret

000005e0 <verify_crc8_cdma2000>:
 * without the CRC byte. Otherwise, it returns 0 to indicate a mismatch.
 * 
 * @param data_with_crc The input data with the CRC byte appended.
 * @return The data without the CRC byte if the checksum is valid, or 0 if invalid.
 */
uint8_t verify_crc8_cdma2000(uint64_t data_without_crc, uint8_t crc) {
     5e0:	0f 93       	push	r16
     5e2:	cf 93       	push	r28
     5e4:	c2 2f       	mov	r28, r18

	return crc8_cdma2000(data_without_crc) == crc ?  data_without_crc : 0;
     5e6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <crc8_cdma2000>
     5ea:	80 13       	cpse	r24, r16
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <verify_crc8_cdma2000+0x12>
     5ee:	8c 2f       	mov	r24, r28
     5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <verify_crc8_cdma2000+0x14>
     5f2:	80 e0       	ldi	r24, 0x00	; 0

     5f4:	cf 91       	pop	r28
     5f6:	0f 91       	pop	r16
     5f8:	08 95       	ret

000005fa <hexToUint64>:
 *  Author: Saulius
 */ 
#include "Settings.h"
#include "FOUSARTVar.h"

uint64_t hexToUint64(const char *str) {
     5fa:	0f 93       	push	r16
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	fc 01       	movw	r30, r24
	uint64_t result = 0;
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
	char c;

	while ((c = *str++)) {
     612:	3a c0       	rjmp	.+116    	; 0x688 <hexToUint64+0x8e>
		result <<= 4; // kiekvienas hex simbolis = 4 bitai
     614:	04 e0       	ldi	r16, 0x04	; 4
     616:	0e 94 8f 0b 	call	0x171e	; 0x171e <__ashldi3>

		if (c >= '0' && c <= '9') {
     61a:	e0 ed       	ldi	r30, 0xD0	; 208
     61c:	ec 0f       	add	r30, r28
     61e:	ea 30       	cpi	r30, 0x0A	; 10
     620:	70 f4       	brcc	.+28     	; 0x63e <hexToUint64+0x44>
			result |= (uint64_t)(c - '0');
     622:	d0 e0       	ldi	r29, 0x00	; 0
     624:	e0 97       	sbiw	r28, 0x30	; 48
     626:	ed 2f       	mov	r30, r29
     628:	ee 0f       	add	r30, r30
     62a:	ee 0b       	sbc	r30, r30
     62c:	2c 2b       	or	r18, r28
     62e:	3d 2b       	or	r19, r29
     630:	4e 2b       	or	r20, r30
     632:	5e 2b       	or	r21, r30
     634:	6e 2b       	or	r22, r30
     636:	7e 2b       	or	r23, r30
     638:	8e 2b       	or	r24, r30
     63a:	9e 2b       	or	r25, r30
     63c:	24 c0       	rjmp	.+72     	; 0x686 <hexToUint64+0x8c>
			} else if (c >= 'A' && c <= 'F') {
     63e:	ef eb       	ldi	r30, 0xBF	; 191
     640:	ec 0f       	add	r30, r28
     642:	e6 30       	cpi	r30, 0x06	; 6
     644:	70 f4       	brcc	.+28     	; 0x662 <hexToUint64+0x68>
			result |= (uint64_t)(c - 'A' + 10);
     646:	d0 e0       	ldi	r29, 0x00	; 0
     648:	e7 97       	sbiw	r28, 0x37	; 55
     64a:	ed 2f       	mov	r30, r29
     64c:	ee 0f       	add	r30, r30
     64e:	ee 0b       	sbc	r30, r30
     650:	2c 2b       	or	r18, r28
     652:	3d 2b       	or	r19, r29
     654:	4e 2b       	or	r20, r30
     656:	5e 2b       	or	r21, r30
     658:	6e 2b       	or	r22, r30
     65a:	7e 2b       	or	r23, r30
     65c:	8e 2b       	or	r24, r30
     65e:	9e 2b       	or	r25, r30
     660:	12 c0       	rjmp	.+36     	; 0x686 <hexToUint64+0x8c>
			} else if (c >= 'a' && c <= 'f') {
     662:	ef e9       	ldi	r30, 0x9F	; 159
     664:	ec 0f       	add	r30, r28
     666:	e6 30       	cpi	r30, 0x06	; 6
     668:	a8 f4       	brcc	.+42     	; 0x694 <hexToUint64+0x9a>
			result |= (uint64_t)(c - 'a' + 10);
     66a:	d0 e0       	ldi	r29, 0x00	; 0
     66c:	c7 55       	subi	r28, 0x57	; 87
     66e:	d1 09       	sbc	r29, r1
     670:	ed 2f       	mov	r30, r29
     672:	ee 0f       	add	r30, r30
     674:	ee 0b       	sbc	r30, r30
     676:	2c 2b       	or	r18, r28
     678:	3d 2b       	or	r19, r29
     67a:	4e 2b       	or	r20, r30
     67c:	5e 2b       	or	r21, r30
     67e:	6e 2b       	or	r22, r30
     680:	7e 2b       	or	r23, r30
     682:	8e 2b       	or	r24, r30
     684:	9e 2b       	or	r25, r30
     686:	fd 01       	movw	r30, r26

uint64_t hexToUint64(const char *str) {
	uint64_t result = 0;
	char c;

	while ((c = *str++)) {
     688:	df 01       	movw	r26, r30
     68a:	11 96       	adiw	r26, 0x01	; 1
     68c:	c0 81       	ld	r28, Z
     68e:	c1 11       	cpse	r28, r1
     690:	c1 cf       	rjmp	.-126    	; 0x614 <hexToUint64+0x1a>
     692:	08 c0       	rjmp	.+16     	; 0x6a4 <hexToUint64+0xaa>
			result |= (uint64_t)(c - 'A' + 10);
			} else if (c >= 'a' && c <= 'f') {
			result |= (uint64_t)(c - 'a' + 10);
			} else {
			// netinkamas simbolis
			return 0;
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return result;
}
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	0f 91       	pop	r16
     6aa:	08 95       	ret

000006ac <FODataSplitter>:

void FODataSplitter(char *command) {
     6ac:	7f 92       	push	r7
     6ae:	8f 92       	push	r8
     6b0:	9f 92       	push	r9
     6b2:	af 92       	push	r10
     6b4:	bf 92       	push	r11
     6b6:	cf 92       	push	r12
     6b8:	df 92       	push	r13
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
     6ca:	a0 97       	sbiw	r28, 0x20	; 32
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	de bf       	out	0x3e, r29	; 62
     6d0:	6c 01       	movw	r12, r24
	if (strncmp(command, "00000000000000", 14) == 0) { //if elevation angle, azimuth angle, solar cells voltage and current = 0 meaning it is FO optic fault: bad signal
     6d2:	4e e0       	ldi	r20, 0x0E	; 14
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	60 e9       	ldi	r22, 0x90	; 144
     6d8:	74 e6       	ldi	r23, 0x64	; 100
     6da:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <strncmp>
     6de:	89 2b       	or	r24, r25
     6e0:	21 f4       	brne	.+8      	; 0x6ea <FODataSplitter+0x3e>
		SensorData.FO_bad_signal_fault = true; //exp. hard bended fo
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	80 93 1e 65 	sts	0x651E, r24	; 0x80651e <SensorData+0x10>
     6e8:	dc c0       	rjmp	.+440    	; 0x8a2 <FODataSplitter+0x1f6>
	}
	else{
		const uint8_t lengths[] = {4, 4, 3, 3, 1, 2};
     6ea:	86 e0       	ldi	r24, 0x06	; 6
     6ec:	e6 e6       	ldi	r30, 0x66	; 102
     6ee:	f3 e6       	ldi	r31, 0x63	; 99
     6f0:	de 01       	movw	r26, r28
     6f2:	5b 96       	adiw	r26, 0x1b	; 27
     6f4:	01 90       	ld	r0, Z+
     6f6:	0d 92       	st	X+, r0
     6f8:	8a 95       	dec	r24
     6fa:	e1 f7       	brne	.-8      	; 0x6f4 <FODataSplitter+0x48>
		char temp[16];

		strncpy(temp, command, 15);
     6fc:	4f e0       	ldi	r20, 0x0F	; 15
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	b6 01       	movw	r22, r12
     702:	ce 01       	movw	r24, r28
     704:	01 96       	adiw	r24, 0x01	; 1
     706:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <strncpy>
		temp[15] = '\0';
     70a:	18 8a       	std	Y+16, r1	; 0x10
		uint64_t datatocheck = hexToUint64(temp);
     70c:	ce 01       	movw	r24, r28
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	0e 94 fd 02 	call	0x5fa	; 0x5fa <hexToUint64>
     714:	72 2e       	mov	r7, r18
     716:	83 2e       	mov	r8, r19
     718:	94 2e       	mov	r9, r20
     71a:	a5 2e       	mov	r10, r21
     71c:	b6 2e       	mov	r11, r22
     71e:	e7 2e       	mov	r14, r23
     720:	f8 2e       	mov	r15, r24
     722:	19 2f       	mov	r17, r25
		strncpy(temp, command + 15, 2); 
     724:	42 e0       	ldi	r20, 0x02	; 2
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	b6 01       	movw	r22, r12
     72a:	61 5f       	subi	r22, 0xF1	; 241
     72c:	7f 4f       	sbci	r23, 0xFF	; 255
     72e:	ce 01       	movw	r24, r28
     730:	01 96       	adiw	r24, 0x01	; 1
     732:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <strncpy>
		temp[2] = '\0';
     736:	1b 82       	std	Y+3, r1	; 0x03
		uint8_t crctocheck = (uint8_t)strtol(temp, NULL, 16);
     738:	40 e1       	ldi	r20, 0x10	; 16
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	ce 01       	movw	r24, r28
     742:	01 96       	adiw	r24, 0x01	; 1
     744:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <strtol>

		if(verify_crc8_cdma2000(datatocheck, crctocheck)){ //if data valid update it
     748:	06 2f       	mov	r16, r22
     74a:	27 2d       	mov	r18, r7
     74c:	38 2d       	mov	r19, r8
     74e:	49 2d       	mov	r20, r9
     750:	5a 2d       	mov	r21, r10
     752:	6b 2d       	mov	r22, r11
     754:	7e 2d       	mov	r23, r14
     756:	8f 2d       	mov	r24, r15
     758:	91 2f       	mov	r25, r17
     75a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <verify_crc8_cdma2000>
     75e:	81 11       	cpse	r24, r1
     760:	69 c0       	rjmp	.+210    	; 0x834 <FODataSplitter+0x188>
     762:	9c c0       	rjmp	.+312    	; 0x89c <FODataSplitter+0x1f0>
			//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
			const char *p = command;
			uint8_t EndSwitchesValue = 0;

			for (uint8_t i = 0; i < 6; i++) {
				char token[10] = {0};
     764:	5e 01       	movw	r10, r28
     766:	81 e1       	ldi	r24, 0x11	; 17
     768:	a8 0e       	add	r10, r24
     76a:	b1 1c       	adc	r11, r1
     76c:	8a e0       	ldi	r24, 0x0A	; 10
     76e:	f5 01       	movw	r30, r10
     770:	11 92       	st	Z+, r1
     772:	8a 95       	dec	r24
     774:	e9 f7       	brne	.-6      	; 0x770 <FODataSplitter+0xc4>

				memcpy(token, p, lengths[i]);
     776:	eb e1       	ldi	r30, 0x1B	; 27
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	ec 0f       	add	r30, r28
     77c:	fd 1f       	adc	r31, r29
     77e:	e1 0f       	add	r30, r17
     780:	f1 1d       	adc	r31, r1
     782:	e0 80       	ld	r14, Z
     784:	f1 2c       	mov	r15, r1
     786:	a7 01       	movw	r20, r14
     788:	b6 01       	movw	r22, r12
     78a:	c5 01       	movw	r24, r10
     78c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <memcpy>
				token[lengths[i]] = '\0';
     790:	f5 01       	movw	r30, r10
     792:	ee 0d       	add	r30, r14
     794:	ff 1d       	adc	r31, r15
     796:	10 82       	st	Z, r1

				switch (i) {
     798:	12 30       	cpi	r17, 0x02	; 2
     79a:	29 f1       	breq	.+74     	; 0x7e6 <FODataSplitter+0x13a>
     79c:	28 f4       	brcc	.+10     	; 0x7a8 <FODataSplitter+0xfc>
     79e:	11 23       	and	r17, r17
     7a0:	41 f0       	breq	.+16     	; 0x7b2 <FODataSplitter+0x106>
     7a2:	11 30       	cpi	r17, 0x01	; 1
     7a4:	99 f0       	breq	.+38     	; 0x7cc <FODataSplitter+0x120>
     7a6:	42 c0       	rjmp	.+132    	; 0x82c <FODataSplitter+0x180>
     7a8:	13 30       	cpi	r17, 0x03	; 3
     7aa:	51 f1       	breq	.+84     	; 0x800 <FODataSplitter+0x154>
     7ac:	14 30       	cpi	r17, 0x04	; 4
     7ae:	a9 f1       	breq	.+106    	; 0x81a <FODataSplitter+0x16e>
     7b0:	3d c0       	rjmp	.+122    	; 0x82c <FODataSplitter+0x180>
					case 0: SensorData.HPElevation   = (uint16_t)strtol(token, NULL, 16); break;
     7b2:	40 e1       	ldi	r20, 0x10	; 16
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	ce 01       	movw	r24, r28
     7bc:	41 96       	adiw	r24, 0x11	; 17
     7be:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <strtol>
     7c2:	60 93 10 65 	sts	0x6510, r22	; 0x806510 <SensorData+0x2>
     7c6:	70 93 11 65 	sts	0x6511, r23	; 0x806511 <SensorData+0x3>
     7ca:	30 c0       	rjmp	.+96     	; 0x82c <FODataSplitter+0x180>
					case 1: SensorData.HPAzimuth     = (uint16_t)strtol(token, NULL, 16); break;
     7cc:	40 e1       	ldi	r20, 0x10	; 16
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	ce 01       	movw	r24, r28
     7d6:	41 96       	adiw	r24, 0x11	; 17
     7d8:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <strtol>
     7dc:	60 93 14 65 	sts	0x6514, r22	; 0x806514 <SensorData+0x6>
     7e0:	70 93 15 65 	sts	0x6515, r23	; 0x806515 <SensorData+0x7>
     7e4:	23 c0       	rjmp	.+70     	; 0x82c <FODataSplitter+0x180>
					case 2: SensorData.PVU         = (uint16_t)strtol(token, NULL, 16)/ U_I_Precizion; break;
     7e6:	40 e1       	ldi	r20, 0x10	; 16
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	ce 01       	movw	r24, r28
     7f0:	41 96       	adiw	r24, 0x11	; 17
     7f2:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <strtol>
     7f6:	60 93 16 65 	sts	0x6516, r22	; 0x806516 <SensorData+0x8>
     7fa:	70 93 17 65 	sts	0x6517, r23	; 0x806517 <SensorData+0x9>
     7fe:	16 c0       	rjmp	.+44     	; 0x82c <FODataSplitter+0x180>
					case 3: SensorData.PVI         = (uint16_t)strtol(token, NULL, 16)/ U_I_Precizion; break;
     800:	40 e1       	ldi	r20, 0x10	; 16
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	ce 01       	movw	r24, r28
     80a:	41 96       	adiw	r24, 0x11	; 17
     80c:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <strtol>
     810:	60 93 18 65 	sts	0x6518, r22	; 0x806518 <SensorData+0xa>
     814:	70 93 19 65 	sts	0x6519, r23	; 0x806519 <SensorData+0xb>
     818:	09 c0       	rjmp	.+18     	; 0x82c <FODataSplitter+0x180>
					case 4: EndSwitchesValue       = (uint8_t)strtol(token, NULL, 16); break; //common end switches value
     81a:	40 e1       	ldi	r20, 0x10	; 16
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	ce 01       	movw	r24, r28
     824:	41 96       	adiw	r24, 0x11	; 17
     826:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <strtol>
     82a:	06 2f       	mov	r16, r22
				}

				p += lengths[i];
     82c:	ce 0c       	add	r12, r14
     82e:	df 1c       	adc	r13, r15
		if(verify_crc8_cdma2000(datatocheck, crctocheck)){ //if data valid update it
			//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
			const char *p = command;
			uint8_t EndSwitchesValue = 0;

			for (uint8_t i = 0; i < 6; i++) {
     830:	1f 5f       	subi	r17, 0xFF	; 255
     832:	02 c0       	rjmp	.+4      	; 0x838 <FODataSplitter+0x18c>
     834:	10 e0       	ldi	r17, 0x00	; 0
     836:	00 e0       	ldi	r16, 0x00	; 0
     838:	16 30       	cpi	r17, 0x06	; 6
     83a:	08 f4       	brcc	.+2      	; 0x83e <FODataSplitter+0x192>
     83c:	93 cf       	rjmp	.-218    	; 0x764 <FODataSplitter+0xb8>
					case 4: EndSwitchesValue       = (uint8_t)strtol(token, NULL, 16); break; //common end switches value
				}

				p += lengths[i];
			}
			SensorData.Elevation = SensorData.HPElevation / Angle_Precizion;
     83e:	ee e0       	ldi	r30, 0x0E	; 14
     840:	f5 e6       	ldi	r31, 0x65	; 101
     842:	22 81       	ldd	r18, Z+2	; 0x02
     844:	33 81       	ldd	r19, Z+3	; 0x03
     846:	36 95       	lsr	r19
     848:	27 95       	ror	r18
     84a:	36 95       	lsr	r19
     84c:	27 95       	ror	r18
     84e:	ab e7       	ldi	r26, 0x7B	; 123
     850:	b4 e1       	ldi	r27, 0x14	; 20
     852:	0e 94 80 0b 	call	0x1700	; 0x1700 <__umulhisi3>
     856:	96 95       	lsr	r25
     858:	87 95       	ror	r24
     85a:	80 83       	st	Z, r24
     85c:	91 83       	std	Z+1, r25	; 0x01
			SensorData.Azimuth = SensorData.HPAzimuth / Angle_Precizion;
     85e:	26 81       	ldd	r18, Z+6	; 0x06
     860:	37 81       	ldd	r19, Z+7	; 0x07
     862:	36 95       	lsr	r19
     864:	27 95       	ror	r18
     866:	36 95       	lsr	r19
     868:	27 95       	ror	r18
     86a:	0e 94 80 0b 	call	0x1700	; 0x1700 <__umulhisi3>
     86e:	96 95       	lsr	r25
     870:	87 95       	ror	r24
     872:	84 83       	std	Z+4, r24	; 0x04
     874:	95 83       	std	Z+5, r25	; 0x05
			//spliting end switch value to separate end switch value according to axis
			SensorData.ElMin = (EndSwitchesValue & 0x01) ? 1 : 0;
     876:	80 2f       	mov	r24, r16
     878:	81 70       	andi	r24, 0x01	; 1
     87a:	84 87       	std	Z+12, r24	; 0x0c
			SensorData.ElMax = (EndSwitchesValue & 0x02) ? 1 : 0;
     87c:	01 fb       	bst	r16, 1
     87e:	88 27       	eor	r24, r24
     880:	80 f9       	bld	r24, 0
     882:	85 87       	std	Z+13, r24	; 0x0d
			SensorData.AzMin = (EndSwitchesValue & 0x04) ? 1 : 0;
     884:	02 fb       	bst	r16, 2
     886:	88 27       	eor	r24, r24
     888:	80 f9       	bld	r24, 0
     88a:	86 87       	std	Z+14, r24	; 0x0e
			SensorData.AzMax = (EndSwitchesValue & 0x08) ? 1 : 0;
     88c:	03 fb       	bst	r16, 3
     88e:	00 27       	eor	r16, r16
     890:	00 f9       	bld	r16, 0
     892:	07 87       	std	Z+15, r16	; 0x0f
			SensorData.FO_bad_signal_fault = false; //reset error
     894:	10 8a       	std	Z+16, r1	; 0x10
			SensorData.FO_data_fault = false; //reset error
     896:	12 8a       	std	Z+18, r1	; 0x12
			SensorData.FO_lost_signal_fault = false; //reset error
     898:	11 8a       	std	Z+17, r1	; 0x11
     89a:	03 c0       	rjmp	.+6      	; 0x8a2 <FODataSplitter+0x1f6>

		}
		else{
			//uncomment if nedded
			//screen_write_formatted_text("data is corupted!", 1, ALIGN_CENTER); // bad crc
			SensorData.FO_data_fault = true;
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	80 93 20 65 	sts	0x6520, r24	; 0x806520 <SensorData+0x12>
		}	
	}
}
     8a2:	a0 96       	adiw	r28, 0x20	; 32
     8a4:	cd bf       	out	0x3d, r28	; 61
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	df 90       	pop	r13
     8b6:	cf 90       	pop	r12
     8b8:	bf 90       	pop	r11
     8ba:	af 90       	pop	r10
     8bc:	9f 90       	pop	r9
     8be:	8f 90       	pop	r8
     8c0:	7f 90       	pop	r7
     8c2:	08 95       	ret

000008c4 <FOReceiver>:
 * This function continuously reads incoming data via USART, processes the data, 
 * and executes the appropriate command. If an error occurs or a warning is set, 
 * it handles the corresponding state. The function handles both normal command 
 * processing and error recovery.
 */
void FOReceiver() {
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	64 97       	sbiw	r28, 0x14	; 20
     8d4:	cd bf       	out	0x3d, r28	; 61
     8d6:	de bf       	out	0x3e, r29	; 62
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
     8d8:	fe 01       	movw	r30, r28
     8da:	31 96       	adiw	r30, 0x01	; 1
     8dc:	84 e1       	ldi	r24, 0x14	; 20
     8de:	df 01       	movw	r26, r30
     8e0:	1d 92       	st	X+, r1
     8e2:	8a 95       	dec	r24
     8e4:	e9 f7       	brne	.-6      	; 0x8e0 <FOReceiver+0x1c>
    uint8_t start = 0;
	uint8_t timeout = 0;
	SensorData.FO_lost_signal_fault = false;
     8e6:	10 92 1f 65 	sts	0x651F, r1	; 0x80651f <SensorData+0x11>
 */
void FOReceiver() {
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
    uint8_t start = 0;
	uint8_t timeout = 0;
     8ea:	10 e0       	ldi	r17, 0x00	; 0
 * processing and error recovery.
 */
void FOReceiver() {
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
    uint8_t start = 0;
     8ec:	f1 2c       	mov	r15, r1
 * and executes the appropriate command. If an error occurs or a warning is set, 
 * it handles the corresponding state. The function handles both normal command 
 * processing and error recovery.
 */
void FOReceiver() {
    uint8_t index = 0;
     8ee:	00 e0       	ldi	r16, 0x00	; 0
     8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <FOReceiver+0x34>
            } else if (index < MESSAGE_LENGTH_FO) {
                command[index++] = c; // Store received character in command array
            }
        }
        if (c == '<') { // If received data start symbol
            start = 1;
     8f2:	ff 24       	eor	r15, r15
     8f4:	f3 94       	inc	r15
            index = 0;
     8f6:	00 e0       	ldi	r16, 0x00	; 0
    uint8_t start = 0;
	uint8_t timeout = 0;
	SensorData.FO_lost_signal_fault = false;

    while (1) {
        char c = USART1_readChar(); // Reading a character from USART
     8f8:	0e 94 78 09 	call	0x12f0	; 0x12f0 <USART1_readChar>

		if(SensorData.FO_lost_signal_fault){
     8fc:	90 91 1f 65 	lds	r25, 0x651F	; 0x80651f <SensorData+0x11>
     900:	99 23       	and	r25, r25
     902:	39 f0       	breq	.+14     	; 0x912 <FOReceiver+0x4e>
			if (++timeout == CountForError_FO) { // Timeout condition if usart1 reading is halted
     904:	1f 5f       	subi	r17, 0xFF	; 255
     906:	13 30       	cpi	r17, 0x03	; 3
     908:	21 f4       	brne	.+8      	; 0x912 <FOReceiver+0x4e>
				SensorData.FO_lost_connecton_fault = true;
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	80 93 21 65 	sts	0x6521, r24	; 0x806521 <SensorData+0x13>
				break;
     910:	2c c0       	rjmp	.+88     	; 0x96a <FOReceiver+0xa6>
			}
		}
        if (start) {
     912:	ff 20       	and	r15, r15
     914:	39 f1       	breq	.+78     	; 0x964 <FOReceiver+0xa0>
			
            if (c == '>') { // If received data end symbol			
     916:	8e 33       	cpi	r24, 0x3E	; 62
     918:	d9 f4       	brne	.+54     	; 0x950 <FOReceiver+0x8c>
				start = 0;
				command[index] = '\0';
     91a:	e1 e0       	ldi	r30, 0x01	; 1
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	ec 0f       	add	r30, r28
     920:	fd 1f       	adc	r31, r29
     922:	e0 0f       	add	r30, r16
     924:	f1 1d       	adc	r31, r1
     926:	10 82       	st	Z, r1
				index = 0;
				if (strcmp(command, SensorData.FreshDataPack) != 0){ //only if message is different
     928:	65 e2       	ldi	r22, 0x25	; 37
     92a:	75 e6       	ldi	r23, 0x65	; 101
     92c:	ce 01       	movw	r24, r28
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <strcmp>
     934:	89 2b       	or	r24, r25
     936:	21 f0       	breq	.+8      	; 0x940 <FOReceiver+0x7c>
					FODataSplitter(command); // Execute the received command //comment when testing lines below
     938:	ce 01       	movw	r24, r28
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	0e 94 56 03 	call	0x6ac	; 0x6ac <FODataSplitter>
				}
				strcpy(SensorData.FreshDataPack, command); // prevents from same message data splitting
     940:	be 01       	movw	r22, r28
     942:	6f 5f       	subi	r22, 0xFF	; 255
     944:	7f 4f       	sbci	r23, 0xFF	; 255
     946:	85 e2       	ldi	r24, 0x25	; 37
     948:	95 e6       	ldi	r25, 0x65	; 101
     94a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <strcpy>
				break;
     94e:	0d c0       	rjmp	.+26     	; 0x96a <FOReceiver+0xa6>
            } else if (index < MESSAGE_LENGTH_FO) {
     950:	04 31       	cpi	r16, 0x14	; 20
     952:	40 f4       	brcc	.+16     	; 0x964 <FOReceiver+0xa0>
                command[index++] = c; // Store received character in command array
     954:	e1 e0       	ldi	r30, 0x01	; 1
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	ec 0f       	add	r30, r28
     95a:	fd 1f       	adc	r31, r29
     95c:	e0 0f       	add	r30, r16
     95e:	f1 1d       	adc	r31, r1
     960:	80 83       	st	Z, r24
     962:	0f 5f       	subi	r16, 0xFF	; 255
            }
        }
        if (c == '<') { // If received data start symbol
     964:	8c 33       	cpi	r24, 0x3C	; 60
     966:	41 f6       	brne	.-112    	; 0x8f8 <FOReceiver+0x34>
     968:	c4 cf       	rjmp	.-120    	; 0x8f2 <FOReceiver+0x2e>
            start = 1;
            index = 0;
        }
    }
}
     96a:	64 96       	adiw	r28, 0x14	; 20
     96c:	cd bf       	out	0x3d, r28	; 61
     96e:	de bf       	out	0x3e, r29	; 62
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	08 95       	ret

0000097c <GPIO_init>:

#include "Settings.h"

void GPIO_init(){
    // Configure USART0 and USART1 pin routing
    PORTMUX.USARTROUTEA = PORTMUX_USART0_ALT1_gc | PORTMUX_USART1_ALT2_gc; // Set USART0 to alternative pins set 1, USART1 to alternative pins set 2
     97c:	e0 ee       	ldi	r30, 0xE0	; 224
     97e:	f5 e0       	ldi	r31, 0x05	; 5
     980:	81 e1       	ldi	r24, 0x11	; 17
     982:	82 83       	std	Z+2, r24	; 0x02
    PORTMUX.TWIROUTEA = PORTMUX_TWI0_DEFAULT_gc; // Set TWI0 to default pins
     984:	16 82       	std	Z+6, r1	; 0x06
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	87 83       	std	Z+7, r24	; 0x07
	PORTMUX.TCDROUTEA = PORTMUX_TCD0_ALT2_gc; ///< Select alternative WOC pin variant 2
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	81 87       	std	Z+9, r24	; 0x09


    // Configure Port A (PA) for RX LED, I2C SDA, SCL, USART0 TX, TX LED and XDIR
    PORTA.DIRSET = PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // Set PA2, PA3, PA4, PA7 as output (RX LED, I2C SDA, SCL, USART0 TX, TX LED, XDIR)
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f4 e0       	ldi	r31, 0x04	; 4
     992:	8c ed       	ldi	r24, 0xDC	; 220
     994:	81 83       	std	Z+1, r24	; 0x01
    PORTA.DIRCLR = PIN1_bm | PIN5_bm; // Set  PA1 as Joystick button,  PA5 as input (USART0 RX)
     996:	82 e2       	ldi	r24, 0x22	; 34
     998:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA1 (Joystick button)
     99a:	88 e0       	ldi	r24, 0x08	; 8
     99c:	81 8b       	std	Z+17, r24	; 0x11
    PORTA.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA4 (I2C SCL)
     99e:	84 8b       	std	Z+20, r24	; 0x14
    PORTA.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA5 (USART0 RX)
     9a0:	85 8b       	std	Z+21, r24	; 0x15

    // Configure ADC pins for Joystick x and y axis
    PORTC.PIN1CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC1 (X axis)
     9a2:	e0 e4       	ldi	r30, 0x40	; 64
     9a4:	f4 e0       	ldi	r31, 0x04	; 4
     9a6:	91 89       	ldd	r25, Z+17	; 0x11
     9a8:	98 7f       	andi	r25, 0xF8	; 248
     9aa:	91 8b       	std	Z+17, r25	; 0x11
    PORTC.PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC1
     9ac:	91 89       	ldd	r25, Z+17	; 0x11
     9ae:	94 60       	ori	r25, 0x04	; 4
     9b0:	91 8b       	std	Z+17, r25	; 0x11
    //PORTC.PIN1CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC1

    PORTC.PIN2CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC2 (Y axis)
     9b2:	92 89       	ldd	r25, Z+18	; 0x12
     9b4:	98 7f       	andi	r25, 0xF8	; 248
     9b6:	92 8b       	std	Z+18, r25	; 0x12
    PORTC.PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC2
     9b8:	92 89       	ldd	r25, Z+18	; 0x12
     9ba:	94 60       	ori	r25, 0x04	; 4
     9bc:	92 8b       	std	Z+18, r25	; 0x12
    //PORTC.PIN2CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC2

	PORTC.DIRSET = PIN0_bm; //Set PC0 as RX LED
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	91 83       	std	Z+1, r25	; 0x01

    // Configure Port D (PD) for USART1 TX and RX
    PORTD.DIRSET = PIN2_bm | PIN3_bm | PIN5_bm; //Set PD2 as linear motor disable pin, PD3 as PWM, PD5 as direction
     9c2:	9c e2       	ldi	r25, 0x2C	; 44
     9c4:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f0461>
	//PORTD.DIRCLR = PIN4_bm; //Linear motor driver TLE9201SG error flag pin

	PORTF.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm; //Set PF1 as enable, PF2 as pulse, PIN3 as direction signals output for HBS86 driver
     9c8:	e0 ea       	ldi	r30, 0xA0	; 160
     9ca:	f4 e0       	ldi	r31, 0x04	; 4
     9cc:	9e e0       	ldi	r25, 0x0E	; 14
     9ce:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRCLR = PIN4_bm | PIN5_bm; //Set PF4 as alarm and PF5 as Pend signals inputs from HBS86 driver
     9d0:	90 e3       	ldi	r25, 0x30	; 48
     9d2:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PF4
     9d4:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PF5
     9d6:	85 8b       	std	Z+21, r24	; 0x15
     9d8:	08 95       	ret

000009da <I2C_init>:
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal to release the bus
    return data;
}
     9da:	e0 e0       	ldi	r30, 0x00	; 0
     9dc:	f9 e0       	ldi	r31, 0x09	; 9
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	80 83       	st	Z, r24
     9e2:	85 e0       	ldi	r24, 0x05	; 5
     9e4:	86 83       	std	Z+6, r24	; 0x06
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	83 83       	std	Z+3, r24	; 0x03
     9ea:	85 83       	std	Z+5, r24	; 0x05
     9ec:	08 95       	ret

000009ee <TransmitAdd>:
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	88 0f       	add	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	86 2b       	or	r24, r22
     9f6:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7f0907>
     9fa:	48 e8       	ldi	r20, 0x88	; 136
     9fc:	53 e1       	ldi	r21, 0x13	; 19
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	09 c0       	rjmp	.+18     	; 0xa16 <TransmitAdd+0x28>
     a04:	41 50       	subi	r20, 0x01	; 1
     a06:	51 09       	sbc	r21, r1
     a08:	61 09       	sbc	r22, r1
     a0a:	71 09       	sbc	r23, r1
     a0c:	21 f4       	brne	.+8      	; 0xa16 <TransmitAdd+0x28>
     a0e:	83 e0       	ldi	r24, 0x03	; 3
     a10:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     a14:	05 c0       	rjmp	.+10     	; 0xa20 <TransmitAdd+0x32>
     a16:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     a1a:	80 7c       	andi	r24, 0xC0	; 192
     a1c:	99 f3       	breq	.-26     	; 0xa04 <TransmitAdd+0x16>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     a24:	94 fd       	sbrc	r25, 4
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     a2c:	9c 70       	andi	r25, 0x0C	; 12
     a2e:	09 f0       	breq	.+2      	; 0xa32 <TransmitAdd+0x44>
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	88 23       	and	r24, r24
     a34:	19 f0       	breq	.+6      	; 0xa3c <TransmitAdd+0x4e>
     a36:	93 e0       	ldi	r25, 0x03	; 3
     a38:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     a3c:	80 93 4d 65 	sts	0x654D, r24	; 0x80654d <I2C>
     a40:	08 95       	ret

00000a42 <TransmitByte>:
     a42:	28 2f       	mov	r18, r24
     a44:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     a48:	94 fd       	sbrc	r25, 4
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <TransmitByte+0xe>
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	01 c0       	rjmp	.+2      	; 0xa52 <TransmitByte+0x10>
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     a56:	9c 70       	andi	r25, 0x0C	; 12
     a58:	09 f0       	breq	.+2      	; 0xa5c <TransmitByte+0x1a>
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	88 23       	and	r24, r24
     a5e:	19 f0       	breq	.+6      	; 0xa66 <TransmitByte+0x24>
     a60:	93 e0       	ldi	r25, 0x03	; 3
     a62:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     a66:	81 11       	cpse	r24, r1
     a68:	14 c0       	rjmp	.+40     	; 0xa92 <TransmitByte+0x50>
     a6a:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <__TEXT_REGION_LENGTH__+0x7f0908>
     a6e:	48 e8       	ldi	r20, 0x88	; 136
     a70:	53 e1       	ldi	r21, 0x13	; 19
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	09 c0       	rjmp	.+18     	; 0xa8a <TransmitByte+0x48>
     a78:	41 50       	subi	r20, 0x01	; 1
     a7a:	51 09       	sbc	r21, r1
     a7c:	61 09       	sbc	r22, r1
     a7e:	71 09       	sbc	r23, r1
     a80:	21 f4       	brne	.+8      	; 0xa8a <TransmitByte+0x48>
     a82:	83 e0       	ldi	r24, 0x03	; 3
     a84:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     a88:	04 c0       	rjmp	.+8      	; 0xa92 <TransmitByte+0x50>
     a8a:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     a8e:	96 ff       	sbrs	r25, 6
     a90:	f3 cf       	rjmp	.-26     	; 0xa78 <TransmitByte+0x36>
     a92:	80 93 4d 65 	sts	0x654D, r24	; 0x80654d <I2C>
     a96:	08 95       	ret

00000a98 <WriteToReg>:
 * @param reg Register address to write to.
 * @param data Data to write to the register.
 * 
 * This function writes the data to a specific register of an I2C device.
 */
void WriteToReg(uint8_t addr, uint8_t reg, uint8_t data) {
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	c6 2f       	mov	r28, r22
     a9e:	d4 2f       	mov	r29, r20
    if (!TransmitAdd(addr, WRITE)) { // Transmit address for write
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	0e 94 f7 04 	call	0x9ee	; 0x9ee <TransmitAdd>
     aa6:	81 11       	cpse	r24, r1
     aa8:	08 c0       	rjmp	.+16     	; 0xaba <WriteToReg+0x22>
        if (!TransmitByte(reg)) { // Write register address
     aaa:	8c 2f       	mov	r24, r28
     aac:	0e 94 21 05 	call	0xa42	; 0xa42 <TransmitByte>
     ab0:	81 11       	cpse	r24, r1
     ab2:	03 c0       	rjmp	.+6      	; 0xaba <WriteToReg+0x22>
            TransmitByte(data); // Write the data with STOP
     ab4:	8d 2f       	mov	r24, r29
     ab6:	0e 94 21 05 	call	0xa42	; 0xa42 <TransmitByte>
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal
     aba:	e0 e0       	ldi	r30, 0x00	; 0
     abc:	f9 e0       	ldi	r31, 0x09	; 9
     abe:	84 81       	ldd	r24, Z+4	; 0x04
     ac0:	83 60       	ori	r24, 0x03	; 3
     ac2:	84 83       	std	Z+4, r24	; 0x04
}
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <ReadButton>:
 */ 
#include "Settings.h"
#include "JoystickVar.h"

uint8_t ReadButton(){
	return !(PORTA.IN & PIN1_bm);
     aca:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
     ace:	86 95       	lsr	r24
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	89 27       	eor	r24, r25
}
     ad4:	81 70       	andi	r24, 0x01	; 1
     ad6:	08 95       	ret

00000ad8 <ReadJoystickValues>:


void ReadJoystickValues(){
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
	ADC0_SetupJoystick(Joystick_X_axis_CH);
     ae0:	8e e1       	ldi	r24, 0x1E	; 30
     ae2:	0e 94 40 02 	call	0x480	; 0x480 <ADC0_SetupJoystick>
	Joystick.X_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps; // 5 steps total: -2,-1,0,1,2 (4096/1000 = 4,096)
     ae6:	0e 94 46 02 	call	0x48c	; 0x48c <ADC0_read>
     aea:	98 50       	subi	r25, 0x08	; 8
     aec:	04 ef       	ldi	r16, 0xF4	; 244
     aee:	11 e0       	ldi	r17, 0x01	; 1
     af0:	b8 01       	movw	r22, r16
     af2:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__divmodhi4>
     af6:	ce e4       	ldi	r28, 0x4E	; 78
     af8:	d5 e6       	ldi	r29, 0x65	; 101
     afa:	68 83       	st	Y, r22
     afc:	79 83       	std	Y+1, r23	; 0x01
	ADC0_SetupJoystick(Joystick_Y_axis_CH);
     afe:	8d e1       	ldi	r24, 0x1D	; 29
     b00:	0e 94 40 02 	call	0x480	; 0x480 <ADC0_SetupJoystick>
	Joystick.Y_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps;
     b04:	0e 94 46 02 	call	0x48c	; 0x48c <ADC0_read>
     b08:	98 50       	subi	r25, 0x08	; 8
     b0a:	b8 01       	movw	r22, r16
     b0c:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__divmodhi4>
     b10:	6a 83       	std	Y+2, r22	; 0x02
     b12:	7b 83       	std	Y+3, r23	; 0x03
	Joystick.Button = ReadButton();
     b14:	0e 94 65 05 	call	0xaca	; 0xaca <ReadButton>
     b18:	8c 83       	std	Y+4, r24	; 0x04
}
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	08 95       	ret

00000b24 <LinearMotor_enable>:
 */ 
#include "Settings.h"
#include "LinearMotorVar.h"

void LinearMotor_enable(){ //turn on TLE9201SG
	if(LinearMotor.alreadyEnabled == false){
     b24:	80 91 56 65 	lds	r24, 0x6556	; 0x806556 <LinearMotor+0x3>
     b28:	81 11       	cpse	r24, r1
     b2a:	0b c0       	rjmp	.+22     	; 0xb42 <LinearMotor_enable+0x1e>
		PORTD.OUTCLR = PIN2_bm;  // DIS=0
     b2c:	84 e0       	ldi	r24, 0x04	; 4
     b2e:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b32:	88 e2       	ldi	r24, 0x28	; 40
     b34:	8a 95       	dec	r24
     b36:	f1 f7       	brne	.-4      	; 0xb34 <LinearMotor_enable+0x10>
		_delay_us(5);
		LinearMotor.alreadyEnabled = true;
     b38:	e3 e5       	ldi	r30, 0x53	; 83
     b3a:	f5 e6       	ldi	r31, 0x65	; 101
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	83 83       	std	Z+3, r24	; 0x03
		LinearMotor.alreadyDisabled = false;
     b40:	14 82       	std	Z+4, r1	; 0x04
     b42:	08 95       	ret

00000b44 <LinearMotor_disable>:
	}
}

void LinearMotor_disable(){ //turn off TLE9201SG
	if(LinearMotor.alreadyDisabled == false){
     b44:	80 91 57 65 	lds	r24, 0x6557	; 0x806557 <LinearMotor+0x4>
     b48:	81 11       	cpse	r24, r1
     b4a:	0b c0       	rjmp	.+22     	; 0xb62 <LinearMotor_disable+0x1e>
		PORTD.OUTSET = PIN2_bm;  // DIS=1
     b4c:	84 e0       	ldi	r24, 0x04	; 4
     b4e:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     b52:	88 e2       	ldi	r24, 0x28	; 40
     b54:	8a 95       	dec	r24
     b56:	f1 f7       	brne	.-4      	; 0xb54 <LinearMotor_disable+0x10>
		_delay_us(5);
		LinearMotor.alreadyDisabled = true;
     b58:	e3 e5       	ldi	r30, 0x53	; 83
     b5a:	f5 e6       	ldi	r31, 0x65	; 101
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	84 83       	std	Z+4, r24	; 0x04
		LinearMotor.alreadyEnabled = false;
     b60:	13 82       	std	Z+3, r1	; 0x03
     b62:	08 95       	ret

00000b64 <LinearMotor_start>:
	}
}

void LinearMotor_start(){ //starting pwm signal generation
	if(LinearMotor.alreadyStarted == false){		
     b64:	80 91 54 65 	lds	r24, 0x6554	; 0x806554 <LinearMotor+0x1>
     b68:	81 11       	cpse	r24, r1
     b6a:	0d c0       	rjmp	.+26     	; 0xb86 <LinearMotor_start+0x22>
		TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP0EN_bm; //connecting TCA to PD3
     b6c:	e0 e0       	ldi	r30, 0x00	; 0
     b6e:	fa e0       	ldi	r31, 0x0A	; 10
     b70:	81 81       	ldd	r24, Z+1	; 0x01
     b72:	80 61       	ori	r24, 0x10	; 16
     b74:	81 83       	std	Z+1, r24	; 0x01
		TCA0.SPLIT.CTRLA |= TCA_SPLIT_ENABLE_bm; //turn on TCA back
     b76:	80 81       	ld	r24, Z
     b78:	81 60       	ori	r24, 0x01	; 1
     b7a:	80 83       	st	Z, r24
		LinearMotor.alreadyStarted = true;
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f5 e6       	ldi	r31, 0x65	; 101
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	81 83       	std	Z+1, r24	; 0x01
		LinearMotor.alreadyStoped = false;
     b84:	12 82       	std	Z+2, r1	; 0x02
     b86:	08 95       	ret

00000b88 <LinearMotor_stop>:
	}

}

void LinearMotor_stop(){
	if(LinearMotor.alreadyStoped == false){ //stoping pwm signal generation
     b88:	80 91 55 65 	lds	r24, 0x6555	; 0x806555 <LinearMotor+0x2>
     b8c:	81 11       	cpse	r24, r1
     b8e:	19 c0       	rjmp	.+50     	; 0xbc2 <LinearMotor_stop+0x3a>
		TCA0.SPLIT.CTRLB &= ~(TCA_SPLIT_HCMP0EN_bm); //disconecting TCA from PD3
     b90:	e0 e0       	ldi	r30, 0x00	; 0
     b92:	fa e0       	ldi	r31, 0x0A	; 10
     b94:	81 81       	ldd	r24, Z+1	; 0x01
     b96:	8f 7e       	andi	r24, 0xEF	; 239
     b98:	81 83       	std	Z+1, r24	; 0x01
		TCA0.SPLIT.CTRLA &= ~TCA_SPLIT_ENABLE_bm;  // turn off TCA
     b9a:	80 81       	ld	r24, Z
     b9c:	8e 7f       	andi	r24, 0xFE	; 254
     b9e:	80 83       	st	Z, r24
		PORTD.OUTCLR = PIN3_bm; //ensure PWM low level
     ba0:	88 e0       	ldi	r24, 0x08	; 8
     ba2:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ba6:	2f ef       	ldi	r18, 0xFF	; 255
     ba8:	8e e9       	ldi	r24, 0x9E	; 158
     baa:	94 e2       	ldi	r25, 0x24	; 36
     bac:	21 50       	subi	r18, 0x01	; 1
     bae:	80 40       	sbci	r24, 0x00	; 0
     bb0:	90 40       	sbci	r25, 0x00	; 0
     bb2:	e1 f7       	brne	.-8      	; 0xbac <LinearMotor_stop+0x24>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <LinearMotor_stop+0x2e>
     bb6:	00 00       	nop
		_delay_ms(500); //preventing from error flag- 500mS of free spinning
		LinearMotor.alreadyStoped = true;
     bb8:	e3 e5       	ldi	r30, 0x53	; 83
     bba:	f5 e6       	ldi	r31, 0x65	; 101
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	82 83       	std	Z+2, r24	; 0x02
		LinearMotor.alreadyStarted = false;
     bc0:	11 82       	std	Z+1, r1	; 0x01
     bc2:	08 95       	ret

00000bc4 <LinearMotor_set_direction>:
	}

}

void LinearMotor_set_direction(bool dir)
{
     bc4:	cf 93       	push	r28
    if (dir != LinearMotor.lastDirection)  // if direction change (single time per cycle)
     bc6:	90 91 53 65 	lds	r25, 0x6553	; 0x806553 <LinearMotor>
     bca:	98 17       	cp	r25, r24
     bcc:	99 f0       	breq	.+38     	; 0xbf4 <LinearMotor_set_direction+0x30>
     bce:	c8 2f       	mov	r28, r24
    {
		LinearMotor_stop();
     bd0:	0e 94 c4 05 	call	0xb88	; 0xb88 <LinearMotor_stop>
		if(dir)
     bd4:	cc 23       	and	r28, r28
     bd6:	21 f0       	breq	.+8      	; 0xbe0 <LinearMotor_set_direction+0x1c>
            PORTD.OUTSET = PIN5_bm;   // UP
     bd8:	80 e2       	ldi	r24, 0x20	; 32
     bda:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     bde:	03 c0       	rjmp	.+6      	; 0xbe6 <LinearMotor_set_direction+0x22>
		else
            PORTD.OUTCLR = PIN5_bm;   // DOWN
     be0:	80 e2       	ldi	r24, 0x20	; 32
     be2:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     be6:	88 e2       	ldi	r24, 0x28	; 40
     be8:	8a 95       	dec	r24
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <LinearMotor_set_direction+0x24>
		_delay_us(5);
		LinearMotor_start();
     bec:	0e 94 b2 05 	call	0xb64	; 0xb64 <LinearMotor_start>
        LinearMotor.lastDirection = dir;
     bf0:	c0 93 53 65 	sts	0x6553, r28	; 0x806553 <LinearMotor>
    }
}
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <LinearMotor_init>:

void LinearMotor_init(){
	TCA0_init_linear_PWM(20000, 50);
     bf8:	62 e3       	ldi	r22, 0x32	; 50
     bfa:	80 e2       	ldi	r24, 0x20	; 32
     bfc:	9e e4       	ldi	r25, 0x4E	; 78
     bfe:	0e 94 5e 08 	call	0x10bc	; 0x10bc <TCA0_init_linear_PWM>
	PORTD.OUTSET = PIN2_bm; //set output disabled for TLE9201SG
     c02:	84 e0       	ldi	r24, 0x04	; 4
     c04:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     c08:	08 95       	ret

00000c0a <main>:

#include "Settings.h"

int main(void)
{
    CLOCK_XOSCHF_clock_init();
     c0a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <CLOCK_XOSCHF_clock_init>
    GPIO_init();
     c0e:	0e 94 be 04 	call	0x97c	; 0x97c <GPIO_init>
	LinearMotor_init();
     c12:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <LinearMotor_init>
	Stepper_init();
     c16:	0e 94 56 08 	call	0x10ac	; 0x10ac <Stepper_init>
    I2C_init();
     c1a:	0e 94 ed 04 	call	0x9da	; 0x9da <I2C_init>
    ADC0_init();
     c1e:	0e 94 38 02 	call	0x470	; 0x470 <ADC0_init>
    USART0_init();
     c22:	0e 94 4d 09 	call	0x129a	; 0x129a <USART0_init>
    USART1_init();
     c26:	0e 94 6d 09 	call	0x12da	; 0x12da <USART1_init>
    screen_init();
     c2a:	0e 94 50 07 	call	0xea0	; 0xea0 <screen_init>
    screen_clear();
     c2e:	0e 94 97 07 	call	0xf2e	; 0xf2e <screen_clear>
	//TCB_init();
    while (1) 
    {
		RS485Receiver(); //RS485 communication
     c32:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <RS485Receiver>
		FOReceiver(); // Received Fiber optic data
     c36:	0e 94 62 04 	call	0x8c4	; 0x8c4 <FOReceiver>
		ReadJoystickValues(); //Joystick read
     c3a:	0e 94 6c 05 	call	0xad8	; 0xad8 <ReadJoystickValues>
		work();
     c3e:	0e 94 03 02 	call	0x406	; 0x406 <work>
		screen_write_formatted_text("SE:%3d TE:%3d", 0, ALIGN_LEFT, SensorData.Elevation, Target.elevation);
     c42:	0d e1       	ldi	r16, 0x1D	; 29
     c44:	10 e6       	ldi	r17, 0x60	; 96
     c46:	f8 01       	movw	r30, r16
     c48:	81 81       	ldd	r24, Z+1	; 0x01
     c4a:	8f 93       	push	r24
     c4c:	80 81       	ld	r24, Z
     c4e:	8f 93       	push	r24
     c50:	ce e0       	ldi	r28, 0x0E	; 14
     c52:	d5 e6       	ldi	r29, 0x65	; 101
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	8f 93       	push	r24
     c58:	88 81       	ld	r24, Y
     c5a:	8f 93       	push	r24
     c5c:	1f 92       	push	r1
     c5e:	1f 92       	push	r1
     c60:	8f e9       	ldi	r24, 0x9F	; 159
     c62:	94 e6       	ldi	r25, 0x64	; 100
     c64:	9f 93       	push	r25
     c66:	8f 93       	push	r24
     c68:	0e 94 38 08 	call	0x1070	; 0x1070 <screen_write_formatted_text>
		screen_write_formatted_text("SA:%3d TA:%3d", 1, ALIGN_LEFT, SensorData.Azimuth, Target.azimuth);
     c6c:	f8 01       	movw	r30, r16
     c6e:	86 81       	ldd	r24, Z+6	; 0x06
     c70:	8f 93       	push	r24
     c72:	85 81       	ldd	r24, Z+5	; 0x05
     c74:	8f 93       	push	r24
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	8f 93       	push	r24
     c7a:	8c 81       	ldd	r24, Y+4	; 0x04
     c7c:	8f 93       	push	r24
     c7e:	1f 92       	push	r1
     c80:	11 e0       	ldi	r17, 0x01	; 1
     c82:	1f 93       	push	r17
     c84:	8d ea       	ldi	r24, 0xAD	; 173
     c86:	94 e6       	ldi	r25, 0x64	; 100
     c88:	9f 93       	push	r25
     c8a:	8f 93       	push	r24
     c8c:	0e 94 38 08 	call	0x1070	; 0x1070 <screen_write_formatted_text>
		screen_write_formatted_text("SCU:%4d SCI:%4d", 2, ALIGN_LEFT, SensorData.PVU, SensorData.PVI);
     c90:	8b 85       	ldd	r24, Y+11	; 0x0b
     c92:	8f 93       	push	r24
     c94:	8a 85       	ldd	r24, Y+10	; 0x0a
     c96:	8f 93       	push	r24
     c98:	89 85       	ldd	r24, Y+9	; 0x09
     c9a:	8f 93       	push	r24
     c9c:	88 85       	ldd	r24, Y+8	; 0x08
     c9e:	8f 93       	push	r24
     ca0:	1f 92       	push	r1
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	8f 93       	push	r24
     ca6:	8b eb       	ldi	r24, 0xBB	; 187
     ca8:	94 e6       	ldi	r25, 0x64	; 100
     caa:	9f 93       	push	r25
     cac:	8f 93       	push	r24
     cae:	0e 94 38 08 	call	0x1070	; 0x1070 <screen_write_formatted_text>
		screen_write_formatted_text("Error power: %d", 4, ALIGN_CENTER, SensorData.FO_lost_connecton_fault);// dead attiny212 or its halted
     cb2:	8b 89       	ldd	r24, Y+19	; 0x13
     cb4:	1f 92       	push	r1
     cb6:	8f 93       	push	r24
     cb8:	1f 93       	push	r17
     cba:	84 e0       	ldi	r24, 0x04	; 4
     cbc:	8f 93       	push	r24
     cbe:	8b ec       	ldi	r24, 0xCB	; 203
     cc0:	94 e6       	ldi	r25, 0x64	; 100
     cc2:	9f 93       	push	r25
     cc4:	8f 93       	push	r24
     cc6:	0e 94 38 08 	call	0x1070	; 0x1070 <screen_write_formatted_text>
		screen_write_formatted_text("Bad signal: %d", 5, ALIGN_CENTER, SensorData.FO_bad_signal_fault);// receiving data from attiny212 only, Top controller dead or fiber optic damage or...
     cca:	88 89       	ldd	r24, Y+16	; 0x10
     ccc:	1f 92       	push	r1
     cce:	8f 93       	push	r24
     cd0:	1f 93       	push	r17
     cd2:	85 e0       	ldi	r24, 0x05	; 5
     cd4:	8f 93       	push	r24
     cd6:	8b ed       	ldi	r24, 0xDB	; 219
     cd8:	94 e6       	ldi	r25, 0x64	; 100
     cda:	9f 93       	push	r25
     cdc:	8f 93       	push	r24
     cde:	0e 94 38 08 	call	0x1070	; 0x1070 <screen_write_formatted_text>
		screen_write_formatted_text("crc fault: %d", 6, ALIGN_CENTER, SensorData.FO_data_fault); // bad crc
     ce2:	8a 89       	ldd	r24, Y+18	; 0x12
     ce4:	2d b7       	in	r18, 0x3d	; 61
     ce6:	3e b7       	in	r19, 0x3e	; 62
     ce8:	2c 5d       	subi	r18, 0xDC	; 220
     cea:	3f 4f       	sbci	r19, 0xFF	; 255
     cec:	2d bf       	out	0x3d, r18	; 61
     cee:	3e bf       	out	0x3e, r19	; 62
     cf0:	1f 92       	push	r1
     cf2:	8f 93       	push	r24
     cf4:	1f 93       	push	r17
     cf6:	86 e0       	ldi	r24, 0x06	; 6
     cf8:	8f 93       	push	r24
     cfa:	8a ee       	ldi	r24, 0xEA	; 234
     cfc:	94 e6       	ldi	r25, 0x64	; 100
     cfe:	9f 93       	push	r25
     d00:	8f 93       	push	r24
     d02:	0e 94 38 08 	call	0x1070	; 0x1070 <screen_write_formatted_text>
		screen_write_formatted_text("el.sns. fault: %d", 7, ALIGN_CENTER, SensorData.FO_elevation_sensor_fault); // elevation senor fault
     d06:	8c 89       	ldd	r24, Y+20	; 0x14
     d08:	1f 92       	push	r1
     d0a:	8f 93       	push	r24
     d0c:	1f 93       	push	r17
     d0e:	87 e0       	ldi	r24, 0x07	; 7
     d10:	8f 93       	push	r24
     d12:	88 ef       	ldi	r24, 0xF8	; 248
     d14:	94 e6       	ldi	r25, 0x64	; 100
     d16:	9f 93       	push	r25
     d18:	8f 93       	push	r24
     d1a:	0e 94 38 08 	call	0x1070	; 0x1070 <screen_write_formatted_text>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d1e:	3f ef       	ldi	r19, 0xFF	; 255
     d20:	82 e5       	ldi	r24, 0x52	; 82
     d22:	97 e0       	ldi	r25, 0x07	; 7
     d24:	31 50       	subi	r19, 0x01	; 1
     d26:	80 40       	sbci	r24, 0x00	; 0
     d28:	90 40       	sbci	r25, 0x00	; 0
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <main+0x11a>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <main+0x124>
     d2e:	00 00       	nop
     d30:	ed b7       	in	r30, 0x3d	; 61
     d32:	fe b7       	in	r31, 0x3e	; 62
     d34:	3c 96       	adiw	r30, 0x0c	; 12
     d36:	ed bf       	out	0x3d, r30	; 61
     d38:	fe bf       	out	0x3e, r31	; 62
     d3a:	7b cf       	rjmp	.-266    	; 0xc32 <main+0x28>

00000d3c <RS485_Led>:
 */ 
#include "Settings.h"

void RS485_Led(RS485_LED_t LED){

    switch (LED) {
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	51 f0       	breq	.+20     	; 0xd54 <RS485_Led+0x18>
     d40:	28 f0       	brcs	.+10     	; 0xd4c <RS485_Led+0x10>
     d42:	82 30       	cpi	r24, 0x02	; 2
     d44:	59 f0       	breq	.+22     	; 0xd5c <RS485_Led+0x20>
     d46:	83 30       	cpi	r24, 0x03	; 3
     d48:	69 f0       	breq	.+26     	; 0xd64 <RS485_Led+0x28>
     d4a:	08 95       	ret
	    case RX_LED_ON:
			PORTC.OUTSET = PIN0_bm;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f0445>
		break;
     d52:	08 95       	ret
	    case RX_LED_OFF:
			PORTC.OUTCLR = PIN0_bm;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f0446>
		break;
     d5a:	08 95       	ret
	    case TX_LED_ON:
			PORTA.OUTSET = PIN6_bm;
     d5c:	80 e4       	ldi	r24, 0x40	; 64
     d5e:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f0405>
		break;
     d62:	08 95       	ret
	    case TX_LED_OFF:
			PORTA.OUTCLR = PIN6_bm;
     d64:	80 e4       	ldi	r24, 0x40	; 64
     d66:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f0406>
     d6a:	08 95       	ret

00000d6c <RS485DataSplitter>:
 *  Author: Saulius
 */ 
#include "Settings.h"
#include "RS485USARTVar.h"

void RS485DataSplitter(char *command) {
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	2c 97       	sbiw	r28, 0x0c	; 12
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	de bf       	out	0x3e, r29	; 62
	uint16_t *fields[] = {
     d80:	2c e0       	ldi	r18, 0x0C	; 12
     d82:	ec e6       	ldi	r30, 0x6C	; 108
     d84:	f3 e6       	ldi	r31, 0x63	; 99
     d86:	de 01       	movw	r26, r28
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	01 90       	ld	r0, Z+
     d8c:	0d 92       	st	X+, r0
     d8e:	2a 95       	dec	r18
     d90:	e1 f7       	brne	.-8      	; 0xd8a <RS485DataSplitter+0x1e>
		(uint16_t*)&WSData.windspeed,
		(uint16_t*)&WSData.winddirection,
		&WSData.lightlevel
	};

	char *token = strtok(command, "|");
     d92:	6a e0       	ldi	r22, 0x0A	; 10
     d94:	75 e6       	ldi	r23, 0x65	; 101
     d96:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <strtok>
	for (uint8_t i = 0; token != NULL && i < 6; i++) {
     d9a:	10 e0       	ldi	r17, 0x00	; 0
     d9c:	1c c0       	rjmp	.+56     	; 0xdd6 <RS485DataSplitter+0x6a>
		*fields[i] = (uint16_t)strtol(token, NULL, 10);
     d9e:	e1 2f       	mov	r30, r17
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	ee 0f       	add	r30, r30
     da4:	ff 1f       	adc	r31, r31
     da6:	21 e0       	ldi	r18, 0x01	; 1
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	2c 0f       	add	r18, r28
     dac:	3d 1f       	adc	r19, r29
     dae:	e2 0f       	add	r30, r18
     db0:	f3 1f       	adc	r31, r19
     db2:	e0 80       	ld	r14, Z
     db4:	f1 80       	ldd	r15, Z+1	; 0x01
     db6:	4a e0       	ldi	r20, 0x0A	; 10
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <strtol>
     dc2:	f7 01       	movw	r30, r14
     dc4:	60 83       	st	Z, r22
     dc6:	71 83       	std	Z+1, r23	; 0x01
		token = strtok(NULL, "|");
     dc8:	6a e0       	ldi	r22, 0x0A	; 10
     dca:	75 e6       	ldi	r23, 0x65	; 101
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <strtok>
		(uint16_t*)&WSData.winddirection,
		&WSData.lightlevel
	};

	char *token = strtok(command, "|");
	for (uint8_t i = 0; token != NULL && i < 6; i++) {
     dd4:	1f 5f       	subi	r17, 0xFF	; 255
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	11 f0       	breq	.+4      	; 0xdde <RS485DataSplitter+0x72>
     dda:	16 30       	cpi	r17, 0x06	; 6
     ddc:	00 f3       	brcs	.-64     	; 0xd9e <RS485DataSplitter+0x32>
		*fields[i] = (uint16_t)strtol(token, NULL, 10);
		token = strtok(NULL, "|");
	}

}
     dde:	2c 96       	adiw	r28, 0x0c	; 12
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	1f 91       	pop	r17
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	08 95       	ret

00000df0 <RS485Receiver>:

void RS485Receiver() {
     df0:	ef 92       	push	r14
     df2:	ff 92       	push	r15
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	6b 97       	sbiw	r28, 0x1b	; 27
     e02:	cd bf       	out	0x3d, r28	; 61
     e04:	de bf       	out	0x3e, r29	; 62
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
     e06:	fe 01       	movw	r30, r28
     e08:	31 96       	adiw	r30, 0x01	; 1
     e0a:	8b e1       	ldi	r24, 0x1B	; 27
     e0c:	df 01       	movw	r26, r30
     e0e:	1d 92       	st	X+, r1
     e10:	8a 95       	dec	r24
     e12:	e9 f7       	brne	.-6      	; 0xe0e <RS485Receiver+0x1e>
	uint8_t start = 0;
	uint16_t timeout = RS485_TIMEOUT_COUNTER;
     e14:	08 ee       	ldi	r16, 0xE8	; 232
     e16:	13 e0       	ldi	r17, 0x03	; 3
}

void RS485Receiver() {
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
	uint8_t start = 0;
     e18:	e1 2c       	mov	r14, r1
	}

}

void RS485Receiver() {
	uint8_t index = 0;
     e1a:	f1 2c       	mov	r15, r1
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
	uint8_t start = 0;
	uint16_t timeout = RS485_TIMEOUT_COUNTER;

	while (1) {
		char c = USART0_readChar(); // Reading a character from USART	
     e1c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <USART0_readChar>
		if (--timeout == 0) { // Timeout condition
     e20:	01 50       	subi	r16, 0x01	; 1
     e22:	11 09       	sbc	r17, r1
     e24:	39 f1       	breq	.+78     	; 0xe74 <RS485Receiver+0x84>
			break;
		}
		if (start) {
     e26:	ee 20       	and	r14, r14
     e28:	e1 f0       	breq	.+56     	; 0xe62 <RS485Receiver+0x72>
			if (c == '}') { // If received data end symbol
     e2a:	8d 37       	cpi	r24, 0x7D	; 125
     e2c:	79 f4       	brne	.+30     	; 0xe4c <RS485Receiver+0x5c>
				RS485_Led(RX_LED_OFF);
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	0e 94 9e 06 	call	0xd3c	; 0xd3c <RS485_Led>
				start = 0;
				command[index] = '\0';
     e34:	e1 e0       	ldi	r30, 0x01	; 1
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	ec 0f       	add	r30, r28
     e3a:	fd 1f       	adc	r31, r29
     e3c:	ef 0d       	add	r30, r15
     e3e:	f1 1d       	adc	r31, r1
     e40:	10 82       	st	Z, r1
				index = 0;
				RS485DataSplitter(command); // Execute the received command //comment when testing lines below
     e42:	ce 01       	movw	r24, r28
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	0e 94 b6 06 	call	0xd6c	; 0xd6c <RS485DataSplitter>
				break;
     e4a:	14 c0       	rjmp	.+40     	; 0xe74 <RS485Receiver+0x84>
				} else if (index < MESSAGE_LENGTH_RS485) {
     e4c:	ba e1       	ldi	r27, 0x1A	; 26
     e4e:	bf 15       	cp	r27, r15
     e50:	40 f0       	brcs	.+16     	; 0xe62 <RS485Receiver+0x72>
				command[index++] = c; // Store received character in command array
     e52:	e1 e0       	ldi	r30, 0x01	; 1
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	ec 0f       	add	r30, r28
     e58:	fd 1f       	adc	r31, r29
     e5a:	ef 0d       	add	r30, r15
     e5c:	f1 1d       	adc	r31, r1
     e5e:	80 83       	st	Z, r24
     e60:	f3 94       	inc	r15
			}
		}
		if (c == '{') { // If received data start symbol
     e62:	8b 37       	cpi	r24, 0x7B	; 123
     e64:	d9 f6       	brne	.-74     	; 0xe1c <RS485Receiver+0x2c>
			start = 1;
			index = 0;
			RS485_Led(RX_LED_ON);
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	0e 94 9e 06 	call	0xd3c	; 0xd3c <RS485_Led>
				} else if (index < MESSAGE_LENGTH_RS485) {
				command[index++] = c; // Store received character in command array
			}
		}
		if (c == '{') { // If received data start symbol
			start = 1;
     e6c:	ee 24       	eor	r14, r14
     e6e:	e3 94       	inc	r14
			index = 0;
     e70:	f1 2c       	mov	r15, r1
     e72:	d4 cf       	rjmp	.-88     	; 0xe1c <RS485Receiver+0x2c>
			RS485_Led(RX_LED_ON);
		}
	}
     e74:	6b 96       	adiw	r28, 0x1b	; 27
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	08 95       	ret

00000e88 <screen_command>:
    if (contrast > 0x3f) {
        contrast = 0x3f;  ///< Ensure contrast does not exceed maximum
    }
    screen_command(0x81);  ///< Send command to set contrast
    screen_command(contrast);  ///< Set the contrast value
}
     e88:	48 2f       	mov	r20, r24
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	8c e3       	ldi	r24, 0x3C	; 60
     e8e:	0e 94 4c 05 	call	0xa98	; 0xa98 <WriteToReg>
     e92:	08 95       	ret

00000e94 <screen_data>:
     e94:	48 2f       	mov	r20, r24
     e96:	60 e4       	ldi	r22, 0x40	; 64
     e98:	8c e3       	ldi	r24, 0x3C	; 60
     e9a:	0e 94 4c 05 	call	0xa98	; 0xa98 <WriteToReg>
     e9e:	08 95       	ret

00000ea0 <screen_init>:
     ea0:	cf 93       	push	r28
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	8c e3       	ldi	r24, 0x3C	; 60
     ea6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <TransmitAdd>
     eaa:	c0 e0       	ldi	r28, 0x00	; 0
     eac:	08 c0       	rjmp	.+16     	; 0xebe <screen_init+0x1e>
     eae:	ec 2f       	mov	r30, r28
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	e4 5b       	subi	r30, 0xB4	; 180
     eb4:	fc 49       	sbci	r31, 0x9C	; 156
     eb6:	80 81       	ld	r24, Z
     eb8:	0e 94 21 05 	call	0xa42	; 0xa42 <TransmitByte>
     ebc:	cf 5f       	subi	r28, 0xFF	; 255
     ebe:	ca 31       	cpi	r28, 0x1A	; 26
     ec0:	b0 f3       	brcs	.-20     	; 0xeae <screen_init+0xe>
     ec2:	cf 91       	pop	r28
     ec4:	08 95       	ret

00000ec6 <screen_draw_char>:
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	d8 2f       	mov	r29, r24
     ece:	80 ee       	ldi	r24, 0xE0	; 224
     ed0:	8d 0f       	add	r24, r29
     ed2:	80 36       	cpi	r24, 0x60	; 96
     ed4:	28 f0       	brcs	.+10     	; 0xee0 <screen_draw_char+0x1a>
     ed6:	d0 3b       	cpi	r29, 0xB0	; 176
     ed8:	19 f0       	breq	.+6      	; 0xee0 <screen_draw_char+0x1a>
     eda:	d0 3c       	cpi	r29, 0xC0	; 192
     edc:	08 f4       	brcc	.+2      	; 0xee0 <screen_draw_char+0x1a>
     ede:	d0 e2       	ldi	r29, 0x20	; 32
     ee0:	d0 3b       	cpi	r29, 0xB0	; 176
     ee2:	21 f0       	breq	.+8      	; 0xeec <screen_draw_char+0x26>
     ee4:	d0 3c       	cpi	r29, 0xC0	; 192
     ee6:	20 f4       	brcc	.+8      	; 0xef0 <screen_draw_char+0x2a>
     ee8:	10 e2       	ldi	r17, 0x20	; 32
     eea:	03 c0       	rjmp	.+6      	; 0xef2 <screen_draw_char+0x2c>
     eec:	10 e5       	ldi	r17, 0x50	; 80
     eee:	01 c0       	rjmp	.+2      	; 0xef2 <screen_draw_char+0x2c>
     ef0:	1f e5       	ldi	r17, 0x5F	; 95
     ef2:	c0 e0       	ldi	r28, 0x00	; 0
     ef4:	13 c0       	rjmp	.+38     	; 0xf1c <screen_draw_char+0x56>
     ef6:	8d 2f       	mov	r24, r29
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	81 1b       	sub	r24, r17
     efc:	91 09       	sbc	r25, r1
     efe:	fc 01       	movw	r30, r24
     f00:	ee 0f       	add	r30, r30
     f02:	ff 1f       	adc	r31, r31
     f04:	ee 0f       	add	r30, r30
     f06:	ff 1f       	adc	r31, r31
     f08:	e8 0f       	add	r30, r24
     f0a:	f9 1f       	adc	r31, r25
     f0c:	e9 5d       	subi	r30, 0xD9	; 217
     f0e:	ff 49       	sbci	r31, 0x9F	; 159
     f10:	ec 0f       	add	r30, r28
     f12:	f1 1d       	adc	r31, r1
     f14:	80 81       	ld	r24, Z
     f16:	0e 94 4a 07 	call	0xe94	; 0xe94 <screen_data>
     f1a:	cf 5f       	subi	r28, 0xFF	; 255
     f1c:	c5 30       	cpi	r28, 0x05	; 5
     f1e:	58 f3       	brcs	.-42     	; 0xef6 <screen_draw_char+0x30>
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	0e 94 4a 07 	call	0xe94	; 0xe94 <screen_data>
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	08 95       	ret

00000f2e <screen_clear>:
 * @brief Clears the ST7567S display.
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
    for (int page = 0; page < 8; page++) {
     f36:	00 e0       	ldi	r16, 0x00	; 0
     f38:	10 e0       	ldi	r17, 0x00	; 0
     f3a:	16 c0       	rjmp	.+44     	; 0xf68 <screen_clear+0x3a>
        screen_command(0xB0 + page);  ///< Select page
     f3c:	80 eb       	ldi	r24, 0xB0	; 176
     f3e:	80 0f       	add	r24, r16
     f40:	0e 94 44 07 	call	0xe88	; 0xe88 <screen_command>
        screen_command(0x00);  ///< Set column address
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	0e 94 44 07 	call	0xe88	; 0xe88 <screen_command>
        screen_command(0x10);  ///< Set column address
     f4a:	80 e1       	ldi	r24, 0x10	; 16
     f4c:	0e 94 44 07 	call	0xe88	; 0xe88 <screen_command>

        for (int column = 0; column < 128; column++) {
     f50:	c0 e0       	ldi	r28, 0x00	; 0
     f52:	d0 e0       	ldi	r29, 0x00	; 0
     f54:	04 c0       	rjmp	.+8      	; 0xf5e <screen_clear+0x30>
            screen_data(0x00);  ///< Clear each column
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	0e 94 4a 07 	call	0xe94	; 0xe94 <screen_data>
    for (int page = 0; page < 8; page++) {
        screen_command(0xB0 + page);  ///< Select page
        screen_command(0x00);  ///< Set column address
        screen_command(0x10);  ///< Set column address

        for (int column = 0; column < 128; column++) {
     f5c:	21 96       	adiw	r28, 0x01	; 1
     f5e:	c0 38       	cpi	r28, 0x80	; 128
     f60:	d1 05       	cpc	r29, r1
     f62:	cc f3       	brlt	.-14     	; 0xf56 <screen_clear+0x28>
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
    for (int page = 0; page < 8; page++) {
     f64:	0f 5f       	subi	r16, 0xFF	; 255
     f66:	1f 4f       	sbci	r17, 0xFF	; 255
     f68:	08 30       	cpi	r16, 0x08	; 8
     f6a:	11 05       	cpc	r17, r1
     f6c:	3c f3       	brlt	.-50     	; 0xf3c <screen_clear+0xe>
        for (int column = 0; column < 128; column++) {
            screen_data(0x00);  ///< Clear each column
        }
    }
    //screen_contrast(SSD1306_CONTRAST);  ///< Restore contrast
}
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	08 95       	ret

00000f78 <screen_draw_text>:
 * the maximum allowed characters are displayed.
 * 
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	8c 01       	movw	r16, r24
     f82:	d6 2f       	mov	r29, r22
    uint8_t length = 0;
     f84:	c0 e0       	ldi	r28, 0x00	; 0
    while (*text && length < max_length) {
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <screen_draw_text+0x1a>
        screen_draw_char(*text);  ///< Draw each character in the string
     f88:	0e 94 63 07 	call	0xec6	; 0xec6 <screen_draw_char>
        text++;
     f8c:	0f 5f       	subi	r16, 0xFF	; 255
     f8e:	1f 4f       	sbci	r17, 0xFF	; 255
        length++;
     f90:	cf 5f       	subi	r28, 0xFF	; 255
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
    uint8_t length = 0;
    while (*text && length < max_length) {
     f92:	f8 01       	movw	r30, r16
     f94:	80 81       	ld	r24, Z
     f96:	88 23       	and	r24, r24
     f98:	39 f0       	breq	.+14     	; 0xfa8 <screen_draw_text+0x30>
     f9a:	cd 17       	cp	r28, r29
     f9c:	a8 f3       	brcs	.-22     	; 0xf88 <screen_draw_text+0x10>
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <screen_draw_text+0x30>
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
        screen_draw_char(' ');  ///< Fill remaining space with spaces
     fa0:	80 e2       	ldi	r24, 0x20	; 32
     fa2:	0e 94 63 07 	call	0xec6	; 0xec6 <screen_draw_char>
        length++;
     fa6:	cf 5f       	subi	r28, 0xFF	; 255
    while (*text && length < max_length) {
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
     fa8:	cd 17       	cp	r28, r29
     faa:	d0 f3       	brcs	.-12     	; 0xfa0 <screen_draw_text+0x28>
        screen_draw_char(' ');  ///< Fill remaining space with spaces
        length++;
    }
}
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	08 95       	ret

00000fb6 <screen_write_text>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param start_pixel The starting pixel column for the text.
 */
void screen_write_text(char *text, uint8_t line, uint8_t start_pixel) {
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	8c 01       	movw	r16, r24
     fc0:	26 2f       	mov	r18, r22
     fc2:	c4 2f       	mov	r28, r20
    uint8_t max_chars = (128 - start_pixel) / 6;  ///< Calculate max characters per line
     fc4:	80 e8       	ldi	r24, 0x80	; 128
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	84 1b       	sub	r24, r20
     fca:	91 09       	sbc	r25, r1
     fcc:	66 e0       	ldi	r22, 0x06	; 6
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__divmodhi4>
     fd4:	d6 2f       	mov	r29, r22
    screen_command(0xB0 | line);  ///< Set the page (line)
     fd6:	82 2f       	mov	r24, r18
     fd8:	80 6b       	ori	r24, 0xB0	; 176
     fda:	0e 94 44 07 	call	0xe88	; 0xe88 <screen_command>
    screen_command(0x10 | (start_pixel >> 4));  ///< Set high byte of column address
     fde:	8c 2f       	mov	r24, r28
     fe0:	82 95       	swap	r24
     fe2:	8f 70       	andi	r24, 0x0F	; 15
     fe4:	80 61       	ori	r24, 0x10	; 16
     fe6:	0e 94 44 07 	call	0xe88	; 0xe88 <screen_command>
    screen_command(0x00 | (start_pixel & 0x0F));  ///< Set low byte of column address
     fea:	8c 2f       	mov	r24, r28
     fec:	8f 70       	andi	r24, 0x0F	; 15
     fee:	0e 94 44 07 	call	0xe88	; 0xe88 <screen_command>
    screen_draw_text(text, max_chars);  ///< Draw the text
     ff2:	6d 2f       	mov	r22, r29
     ff4:	c8 01       	movw	r24, r16
     ff6:	0e 94 bc 07 	call	0xf78	; 0xf78 <screen_draw_text>
}
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	08 95       	ret

00001004 <calculate_start_pixel>:
 * @param max_length The maximum number of characters.
 * @param alignment The desired text alignment (left, center, right).
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
    1004:	ac 01       	movw	r20, r24
    uint8_t text_length = 0;
    1006:	90 e0       	ldi	r25, 0x00	; 0
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
    1008:	01 c0       	rjmp	.+2      	; 0x100c <calculate_start_pixel+0x8>
        text_length++;
    100a:	9f 5f       	subi	r25, 0xFF	; 255
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
    uint8_t text_length = 0;
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
    100c:	fa 01       	movw	r30, r20
    100e:	e9 0f       	add	r30, r25
    1010:	f1 1d       	adc	r31, r1
    1012:	20 81       	ld	r18, Z
    1014:	21 11       	cpse	r18, r1
    1016:	f9 cf       	rjmp	.-14     	; 0x100a <calculate_start_pixel+0x6>
        text_length++;
    }

    uint8_t text_width = text_length * 6;  ///< Calculate the width of the text in pixels
    1018:	89 2f       	mov	r24, r25
    101a:	88 0f       	add	r24, r24
    101c:	98 0f       	add	r25, r24
    101e:	29 2f       	mov	r18, r25
    1020:	22 0f       	add	r18, r18
    switch (alignment) {
    1022:	61 30       	cpi	r22, 0x01	; 1
    1024:	19 f0       	breq	.+6      	; 0x102c <calculate_start_pixel+0x28>
    1026:	62 30       	cpi	r22, 0x02	; 2
    1028:	69 f0       	breq	.+26     	; 0x1044 <calculate_start_pixel+0x40>
    102a:	0f c0       	rjmp	.+30     	; 0x104a <calculate_start_pixel+0x46>
        case ALIGN_CENTER:
            return (128 - text_width) / 2;  ///< Center the text
    102c:	80 e8       	ldi	r24, 0x80	; 128
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	ac 01       	movw	r20, r24
    1032:	42 1b       	sub	r20, r18
    1034:	51 09       	sbc	r21, r1
    1036:	ca 01       	movw	r24, r20
    1038:	99 23       	and	r25, r25
    103a:	0c f4       	brge	.+2      	; 0x103e <calculate_start_pixel+0x3a>
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	95 95       	asr	r25
    1040:	87 95       	ror	r24
    1042:	08 95       	ret
        case ALIGN_RIGHT:
            return (128 - text_width);  ///< Right-align the text
    1044:	80 e8       	ldi	r24, 0x80	; 128
    1046:	82 1b       	sub	r24, r18
    1048:	08 95       	ret
        case ALIGN_LEFT:
        default:
            return 0;  ///< Left-align the text
    104a:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    104c:	08 95       	ret

0000104e <screen_write_text_aligned>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_text_aligned(char *text, uint8_t line, alignment_t alignment) {
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	ec 01       	movw	r28, r24
    1056:	16 2f       	mov	r17, r22
    uint8_t start_pixel = calculate_start_pixel(text, alignment);  ///< Calculate start pixel
    1058:	64 2f       	mov	r22, r20
    105a:	0e 94 02 08 	call	0x1004	; 0x1004 <calculate_start_pixel>
   screen_write_text(text, line, start_pixel);
    105e:	48 2f       	mov	r20, r24
    1060:	61 2f       	mov	r22, r17
    1062:	ce 01       	movw	r24, r28
    1064:	0e 94 db 07 	call	0xfb6	; 0xfb6 <screen_write_text>
}
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	08 95       	ret

00001070 <screen_write_formatted_text>:
 * 
 * @param format The format string for the text.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_formatted_text(const char *format, uint8_t line, alignment_t alignment, ...) {
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	e2 97       	sbiw	r28, 0x32	; 50
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	de bf       	out	0x3e, r29	; 62
    char textStorage[MAX_TEXT_LENGTH];  ///< Buffer for storing formatted text
    va_list args;  ///< Variable argument list

    va_start(args, alignment);  ///< Start reading variable arguments
    vsnprintf(textStorage, MAX_TEXT_LENGTH, format, args);  ///< Format the text
    107e:	9e 01       	movw	r18, r28
    1080:	25 5c       	subi	r18, 0xC5	; 197
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
    1084:	4f a9       	ldd	r20, Y+55	; 0x37
    1086:	58 ad       	ldd	r21, Y+56	; 0x38
    1088:	62 e3       	ldi	r22, 0x32	; 50
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	ce 01       	movw	r24, r28
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	0e 94 67 0d 	call	0x1ace	; 0x1ace <vsnprintf>
    va_end(args);  ///< End reading variable arguments

    screen_write_text_aligned(textStorage, line, alignment);  ///< Write formatted text to display
    1094:	4a ad       	ldd	r20, Y+58	; 0x3a
    1096:	69 ad       	ldd	r22, Y+57	; 0x39
    1098:	ce 01       	movw	r24, r28
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	0e 94 27 08 	call	0x104e	; 0x104e <screen_write_text_aligned>
}
    10a0:	e2 96       	adiw	r28, 0x32	; 50
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <Stepper_init>:
// Init function
// -------------------------
void Stepper_init() {

	// Default PWM
	TCD0_init_stepper_PWM(6400, 50); // 51.2kHz, 50% duty
    10ac:	42 e3       	ldi	r20, 0x32	; 50
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	79 e1       	ldi	r23, 0x19	; 25
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TCD0_init_stepper_PWM>
    10ba:	08 95       	ret

000010bc <TCA0_init_linear_PWM>:
 *  Author: Saulius
 */ 
#include "Settings.h"

void TCA0_init_linear_PWM(uint16_t freq_hz, uint8_t duty_percent) //Auto TCA prescaler selection, that give us Frequency range: ~366Hz - ~93kHz. TLE9201SG max 20kHz
{
    10bc:	8f 92       	push	r8
    10be:	9f 92       	push	r9
    10c0:	af 92       	push	r10
    10c2:	bf 92       	push	r11
    10c4:	cf 92       	push	r12
    10c6:	df 92       	push	r13
    10c8:	ef 92       	push	r14
    10ca:	ff 92       	push	r15
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	68 97       	sbiw	r28, 0x18	; 24
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	7c 01       	movw	r14, r24
    10e0:	c6 2e       	mov	r12, r22
	const uint16_t prescalers[] = {1, 2, 4, 8, 16, 64, 256, 1024};
    10e2:	80 e1       	ldi	r24, 0x10	; 16
    10e4:	e8 e7       	ldi	r30, 0x78	; 120
    10e6:	f3 e6       	ldi	r31, 0x63	; 99
    10e8:	de 01       	movw	r26, r28
    10ea:	11 96       	adiw	r26, 0x01	; 1
    10ec:	01 90       	ld	r0, Z+
    10ee:	0d 92       	st	X+, r0
    10f0:	8a 95       	dec	r24
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <TCA0_init_linear_PWM+0x30>
	const uint8_t clk_select[] = {
    10f4:	88 e0       	ldi	r24, 0x08	; 8
    10f6:	e8 e8       	ldi	r30, 0x88	; 136
    10f8:	f3 e6       	ldi	r31, 0x63	; 99
    10fa:	de 01       	movw	r26, r28
    10fc:	51 96       	adiw	r26, 0x11	; 17
    10fe:	01 90       	ld	r0, Z+
    1100:	0d 92       	st	X+, r0
    1102:	8a 95       	dec	r24
    1104:	e1 f7       	brne	.-8      	; 0x10fe <TCA0_init_linear_PWM+0x42>

	uint8_t chosen_clk = 0;
	uint8_t period = 0;

	// surandam tinkamà prescaler
	for (uint8_t i = 0; i < 8; i++) {
    1106:	d1 2c       	mov	r13, r1
    1108:	38 c0       	rjmp	.+112    	; 0x117a <TCA0_init_linear_PWM+0xbe>
		uint32_t f_timer = F_CPU / prescalers[i];
    110a:	0d 2d       	mov	r16, r13
    110c:	10 e0       	ldi	r17, 0x00	; 0
    110e:	f8 01       	movw	r30, r16
    1110:	ee 0f       	add	r30, r30
    1112:	ff 1f       	adc	r31, r31
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	8c 0f       	add	r24, r28
    111a:	9d 1f       	adc	r25, r29
    111c:	e8 0f       	add	r30, r24
    111e:	f9 1f       	adc	r31, r25
    1120:	20 81       	ld	r18, Z
    1122:	31 81       	ldd	r19, Z+1	; 0x01
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	76 e3       	ldi	r23, 0x36	; 54
    112c:	8e e6       	ldi	r24, 0x6E	; 110
    112e:	91 e0       	ldi	r25, 0x01	; 1
    1130:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__divmodsi4>
		uint32_t tmp_period = (f_timer / freq_hz) - 1;
    1134:	47 01       	movw	r8, r14
    1136:	a1 2c       	mov	r10, r1
    1138:	b1 2c       	mov	r11, r1
    113a:	ca 01       	movw	r24, r20
    113c:	b9 01       	movw	r22, r18
    113e:	a5 01       	movw	r20, r10
    1140:	94 01       	movw	r18, r8
    1142:	0e 94 3f 0b 	call	0x167e	; 0x167e <__udivmodsi4>
    1146:	da 01       	movw	r26, r20
    1148:	c9 01       	movw	r24, r18
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	a1 09       	sbc	r26, r1
    114e:	b1 09       	sbc	r27, r1

		if (tmp_period <= 255 && tmp_period >= 1) {
    1150:	ba 01       	movw	r22, r20
    1152:	a9 01       	movw	r20, r18
    1154:	42 50       	subi	r20, 0x02	; 2
    1156:	51 09       	sbc	r21, r1
    1158:	61 09       	sbc	r22, r1
    115a:	71 09       	sbc	r23, r1
    115c:	4f 3f       	cpi	r20, 0xFF	; 255
    115e:	51 05       	cpc	r21, r1
    1160:	61 05       	cpc	r22, r1
    1162:	71 05       	cpc	r23, r1
    1164:	48 f4       	brcc	.+18     	; 0x1178 <TCA0_init_linear_PWM+0xbc>
			period = (uint8_t)tmp_period;
    1166:	f8 2e       	mov	r15, r24
			chosen_clk = clk_select[i];
    1168:	e1 e1       	ldi	r30, 0x11	; 17
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	ec 0f       	add	r30, r28
    116e:	fd 1f       	adc	r31, r29
    1170:	e0 0f       	add	r30, r16
    1172:	f1 1f       	adc	r31, r17
    1174:	10 81       	ld	r17, Z
			break; // radom maþiausià tinkamà prescaler
    1176:	06 c0       	rjmp	.+12     	; 0x1184 <TCA0_init_linear_PWM+0xc8>

	uint8_t chosen_clk = 0;
	uint8_t period = 0;

	// surandam tinkamà prescaler
	for (uint8_t i = 0; i < 8; i++) {
    1178:	d3 94       	inc	r13
    117a:	97 e0       	ldi	r25, 0x07	; 7
    117c:	9d 15       	cp	r25, r13
    117e:	28 f6       	brcc	.-118    	; 0x110a <TCA0_init_linear_PWM+0x4e>
		TCA_SINGLE_CLKSEL_DIV256_gc,
		TCA_SINGLE_CLKSEL_DIV1024_gc
	};

	uint8_t chosen_clk = 0;
	uint8_t period = 0;
    1180:	f1 2c       	mov	r15, r1
		TCA_SINGLE_CLKSEL_DIV64_gc,
		TCA_SINGLE_CLKSEL_DIV256_gc,
		TCA_SINGLE_CLKSEL_DIV1024_gc
	};

	uint8_t chosen_clk = 0;
    1182:	10 e0       	ldi	r17, 0x00	; 0
			break; // radom maþiausià tinkamà prescaler
		}
	}

	// duty skaièiavimas
	uint8_t duty = (uint32_t)period * duty_percent / 100;
    1184:	2f 2d       	mov	r18, r15
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	ac 2d       	mov	r26, r12
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	0e 94 80 0b 	call	0x1700	; 0x1700 <__umulhisi3>
    1190:	24 e6       	ldi	r18, 0x64	; 100
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	0e 94 3f 0b 	call	0x167e	; 0x167e <__udivmodsi4>
	if (duty > period) duty = period;
    119c:	f2 16       	cp	r15, r18
    119e:	08 f4       	brcc	.+2      	; 0x11a2 <TCA0_init_linear_PWM+0xe6>
    11a0:	2f 2d       	mov	r18, r15

	// konfigûracija
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;  // WOx ant PORTD
    11a2:	83 e0       	ldi	r24, 0x03	; 3
    11a4:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <__TEXT_REGION_LENGTH__+0x7f05e7>

	TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;   // Split mode
    11a8:	e0 e0       	ldi	r30, 0x00	; 0
    11aa:	fa e0       	ldi	r31, 0x0A	; 10
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	83 83       	std	Z+3, r24	; 0x03
	TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm;    // enable WO3 (HCMP0 ? PD3)
    11b0:	80 e1       	ldi	r24, 0x10	; 16
    11b2:	81 83       	std	Z+1, r24	; 0x01

	TCA0.SPLIT.HPER  = period;
    11b4:	f7 a2       	std	Z+39, r15	; 0x27
	TCA0.SPLIT.HCMP0 = duty;
    11b6:	21 a7       	std	Z+41, r18	; 0x29

	TCA0.SPLIT.CTRLA = chosen_clk | TCA_SPLIT_ENABLE_bm; // paleidþiam su pasirinktu prescaler
    11b8:	11 60       	ori	r17, 0x01	; 1
    11ba:	10 83       	st	Z, r17
}
    11bc:	68 96       	adiw	r28, 0x18	; 24
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	ff 90       	pop	r15
    11cc:	ef 90       	pop	r14
    11ce:	df 90       	pop	r13
    11d0:	cf 90       	pop	r12
    11d2:	bf 90       	pop	r11
    11d4:	af 90       	pop	r10
    11d6:	9f 90       	pop	r9
    11d8:	8f 90       	pop	r8
    11da:	08 95       	ret

000011dc <TCD0_init_stepper_PWM>:
 * @date 2025-01-09
 */

#include "Settings.h"

void TCD0_init_stepper_PWM(uint32_t freq_hz, uint8_t duty_percent) {
    11dc:	cf 92       	push	r12
    11de:	df 92       	push	r13
    11e0:	ef 92       	push	r14
    11e2:	ff 92       	push	r15
    11e4:	0f 93       	push	r16
    11e6:	1f 93       	push	r17
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	14 2f       	mov	r17, r20

	// Calculate compare registers
	uint16_t cmpbclr = (F_CPU / (4 * freq_hz * 2)) - 1;
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	aa 1f       	adc	r26, r26
    11f8:	bb 1f       	adc	r27, r27
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	aa 1f       	adc	r26, r26
    1200:	bb 1f       	adc	r27, r27
    1202:	9c 01       	movw	r18, r24
    1204:	ad 01       	movw	r20, r26
    1206:	22 0f       	add	r18, r18
    1208:	33 1f       	adc	r19, r19
    120a:	44 1f       	adc	r20, r20
    120c:	55 1f       	adc	r21, r21
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	76 e3       	ldi	r23, 0x36	; 54
    1212:	8e e6       	ldi	r24, 0x6E	; 110
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	0e 94 3f 0b 	call	0x167e	; 0x167e <__udivmodsi4>
    121a:	e9 01       	movw	r28, r18
    121c:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t cmpaset = (uint16_t)(cmpbclr * (duty_percent / 100.0)) + 1;
    121e:	61 2f       	mov	r22, r17
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 32 0a 	call	0x1464	; 0x1464 <__floatsisf>
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	48 ec       	ldi	r20, 0xC8	; 200
    1230:	52 e4       	ldi	r21, 0x42	; 66
    1232:	0e 94 8f 09 	call	0x131e	; 0x131e <__divsf3>
    1236:	6b 01       	movw	r12, r22
    1238:	7c 01       	movw	r14, r24
    123a:	be 01       	movw	r22, r28
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 30 0a 	call	0x1460	; 0x1460 <__floatunsisf>
    1244:	a7 01       	movw	r20, r14
    1246:	96 01       	movw	r18, r12
    1248:	0e 94 be 0a 	call	0x157c	; 0x157c <__mulsf3>
    124c:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fixunssfsi>
    1250:	6f 5f       	subi	r22, 0xFF	; 255
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t cmpbset = cmpbclr - cmpaset - 1;
    1254:	ce 01       	movw	r24, r28
    1256:	86 1b       	sub	r24, r22
    1258:	97 0b       	sbc	r25, r23
    125a:	01 97       	sbiw	r24, 0x01	; 1

	// Set TCD compare registers
	TCD0.CMPBCLR = cmpbclr;
    125c:	00 e8       	ldi	r16, 0x80	; 128
    125e:	1b e0       	ldi	r17, 0x0B	; 11
    1260:	f8 01       	movw	r30, r16
    1262:	c6 a7       	std	Z+46, r28	; 0x2e
    1264:	d7 a7       	std	Z+47, r29	; 0x2f
	TCD0.CMPBSET = cmpbset;
    1266:	84 a7       	std	Z+44, r24	; 0x2c
    1268:	95 a7       	std	Z+45, r25	; 0x2d
	TCD0.CMPASET = cmpaset;
    126a:	60 a7       	std	Z+40, r22	; 0x28
    126c:	71 a7       	std	Z+41, r23	; 0x29

	ccp_write_io((uint8_t *) &TCD0.FAULTCTRL, TCD_CMPCEN_bm); ///< Enable WOC on PF2
    126e:	60 e4       	ldi	r22, 0x40	; 64
    1270:	82 e9       	ldi	r24, 0x92	; 146
    1272:	9b e0       	ldi	r25, 0x0B	; 11
    1274:	0e 94 27 10 	call	0x204e	; 0x204e <ccp_write_io>
	TCD0.CTRLB = TCD_WGMODE_DS_gc; ///< Set waveform mode to double slope
    1278:	83 e0       	ldi	r24, 0x03	; 3
    127a:	f8 01       	movw	r30, r16
    127c:	81 83       	std	Z+1, r24	; 0x01
	// Ájungiam WOC iðëjimà
	//TCD0.FAULTCTRL = TCD_CMPAEN_bm | TCD_CMPBEN_bm | TCD_CMPCEN_bm;

	// Paleidþiam su prescaler = 4
	//TCD0.CTRLA = TCD_CLKSEL_CLKPER_gc | TCD_CNTPRES_DIV4_gc;
	ccp_write_io((uint8_t *) &TCD0.CTRLA, TCD_CLKSEL_CLKPER_gc | TCD_CNTPRES_DIV4_gc);
    127e:	68 e6       	ldi	r22, 0x68	; 104
    1280:	80 e8       	ldi	r24, 0x80	; 128
    1282:	9b e0       	ldi	r25, 0x0B	; 11
    1284:	0e 94 27 10 	call	0x204e	; 0x204e <ccp_write_io>
	// Palaukti, kol sinchronizuosis
	//while (!(TCD0.STATUS & TCD_ENRDY_bm));
/*
			while (!(TCD0.STATUS & TCD_ENRDY_bm));
			TCD0.CTRLA |= TCD_ENABLE_bm;*/
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	cf 90       	pop	r12
    1298:	08 95       	ret

0000129a <USART0_init>:
 * @return 0 on success.
 */
int USART1_printChar(char c, FILE *stream) {
	USART1_sendChar(c); // Send character
	return 0;
}
    129a:	e0 e0       	ldi	r30, 0x00	; 0
    129c:	f8 e0       	ldi	r31, 0x08	; 8
    129e:	83 e8       	ldi	r24, 0x83	; 131
    12a0:	96 e0       	ldi	r25, 0x06	; 6
    12a2:	80 87       	std	Z+8, r24	; 0x08
    12a4:	91 87       	std	Z+9, r25	; 0x09
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	85 83       	std	Z+5, r24	; 0x05
    12aa:	82 ec       	ldi	r24, 0xC2	; 194
    12ac:	86 83       	std	Z+6, r24	; 0x06
    12ae:	83 e0       	ldi	r24, 0x03	; 3
    12b0:	87 83       	std	Z+7, r24	; 0x07
    12b2:	08 95       	ret

000012b4 <USART0_readChar>:
    12b4:	80 e8       	ldi	r24, 0x80	; 128
    12b6:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    12ba:	88 ee       	ldi	r24, 0xE8	; 232
    12bc:	93 e0       	ldi	r25, 0x03	; 3
    12be:	a0 e0       	ldi	r26, 0x00	; 0
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	04 c0       	rjmp	.+8      	; 0x12cc <USART0_readChar+0x18>
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	a1 09       	sbc	r26, r1
    12c8:	b1 09       	sbc	r27, r1
    12ca:	21 f0       	breq	.+8      	; 0x12d4 <USART0_readChar+0x20>
    12cc:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    12d0:	22 23       	and	r18, r18
    12d2:	c4 f7       	brge	.-16     	; 0x12c4 <USART0_readChar+0x10>
    12d4:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
    12d8:	08 95       	ret

000012da <USART1_init>:
    12da:	e0 e2       	ldi	r30, 0x20	; 32
    12dc:	f8 e0       	ldi	r31, 0x08	; 8
    12de:	81 ea       	ldi	r24, 0xA1	; 161
    12e0:	91 e0       	ldi	r25, 0x01	; 1
    12e2:	80 87       	std	Z+8, r24	; 0x08
    12e4:	91 87       	std	Z+9, r25	; 0x09
    12e6:	82 e8       	ldi	r24, 0x82	; 130
    12e8:	86 83       	std	Z+6, r24	; 0x06
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	87 83       	std	Z+7, r24	; 0x07
    12ee:	08 95       	ret

000012f0 <USART1_readChar>:
 * If a timeout occurs, it returns a predefined warning.
 * 
 * @return The received character.
 */
char USART1_readChar() {
	USART1.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    12f0:	80 e8       	ldi	r24, 0x80	; 128
    12f2:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f0824>
	uint32_t timeout_counter = FO_TIMEOUT_COUNTER; // Set a timeout counter
    12f6:	80 e9       	ldi	r24, 0x90	; 144
    12f8:	90 ed       	ldi	r25, 0xD0	; 208
    12fa:	a3 e0       	ldi	r26, 0x03	; 3
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
	while (!(USART1.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
    12fe:	08 c0       	rjmp	.+16     	; 0x1310 <USART1_readChar+0x20>
		if (--timeout_counter == 0) { // Timeout condition
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	a1 09       	sbc	r26, r1
    1304:	b1 09       	sbc	r27, r1
    1306:	21 f4       	brne	.+8      	; 0x1310 <USART1_readChar+0x20>
			//screen_write_formatted_text("USART1 timeout", 0, ALIGN_LEFT);// uncomment for timeout number finding, when timeout number is set corectly this line should not to be visible at all. if timeout is to small you will see this line 
			//_delay_ms(100);
			//screen_write_formatted_text("              ", 0, ALIGN_LEFT);
			SensorData.FO_lost_signal_fault = true;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	80 93 1f 65 	sts	0x651F, r24	; 0x80651f <SensorData+0x11>
			break; //just exit from this while cycle
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <USART1_readChar+0x28>
 * @return The received character.
 */
char USART1_readChar() {
	USART1.STATUS = USART_RXCIF_bm; // Clear buffer before reading
	uint32_t timeout_counter = FO_TIMEOUT_COUNTER; // Set a timeout counter
	while (!(USART1.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
    1310:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f0824>
    1314:	22 23       	and	r18, r18
    1316:	a4 f7       	brge	.-24     	; 0x1300 <USART1_readChar+0x10>
			SensorData.FO_lost_signal_fault = true;
			break; //just exit from this while cycle

		}
	}
	return USART1.RXDATAL; // Return received character
    1318:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f0820>
}
    131c:	08 95       	ret

0000131e <__divsf3>:
    131e:	0e 94 a3 09 	call	0x1346	; 0x1346 <__divsf3x>
    1322:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_round>
    1326:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_pscB>
    132a:	58 f0       	brcs	.+22     	; 0x1342 <__divsf3+0x24>
    132c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__fp_pscA>
    1330:	40 f0       	brcs	.+16     	; 0x1342 <__divsf3+0x24>
    1332:	29 f4       	brne	.+10     	; 0x133e <__divsf3+0x20>
    1334:	5f 3f       	cpi	r21, 0xFF	; 255
    1336:	29 f0       	breq	.+10     	; 0x1342 <__divsf3+0x24>
    1338:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_inf>
    133c:	51 11       	cpse	r21, r1
    133e:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__fp_szero>
    1342:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__fp_nan>

00001346 <__divsf3x>:
    1346:	0e 94 95 0a 	call	0x152a	; 0x152a <__fp_split3>
    134a:	68 f3       	brcs	.-38     	; 0x1326 <__divsf3+0x8>

0000134c <__divsf3_pse>:
    134c:	99 23       	and	r25, r25
    134e:	b1 f3       	breq	.-20     	; 0x133c <__divsf3+0x1e>
    1350:	55 23       	and	r21, r21
    1352:	91 f3       	breq	.-28     	; 0x1338 <__divsf3+0x1a>
    1354:	95 1b       	sub	r25, r21
    1356:	55 0b       	sbc	r21, r21
    1358:	bb 27       	eor	r27, r27
    135a:	aa 27       	eor	r26, r26
    135c:	62 17       	cp	r22, r18
    135e:	73 07       	cpc	r23, r19
    1360:	84 07       	cpc	r24, r20
    1362:	38 f0       	brcs	.+14     	; 0x1372 <__divsf3_pse+0x26>
    1364:	9f 5f       	subi	r25, 0xFF	; 255
    1366:	5f 4f       	sbci	r21, 0xFF	; 255
    1368:	22 0f       	add	r18, r18
    136a:	33 1f       	adc	r19, r19
    136c:	44 1f       	adc	r20, r20
    136e:	aa 1f       	adc	r26, r26
    1370:	a9 f3       	breq	.-22     	; 0x135c <__divsf3_pse+0x10>
    1372:	35 d0       	rcall	.+106    	; 0x13de <__divsf3_pse+0x92>
    1374:	0e 2e       	mov	r0, r30
    1376:	3a f0       	brmi	.+14     	; 0x1386 <__divsf3_pse+0x3a>
    1378:	e0 e8       	ldi	r30, 0x80	; 128
    137a:	32 d0       	rcall	.+100    	; 0x13e0 <__divsf3_pse+0x94>
    137c:	91 50       	subi	r25, 0x01	; 1
    137e:	50 40       	sbci	r21, 0x00	; 0
    1380:	e6 95       	lsr	r30
    1382:	00 1c       	adc	r0, r0
    1384:	ca f7       	brpl	.-14     	; 0x1378 <__divsf3_pse+0x2c>
    1386:	2b d0       	rcall	.+86     	; 0x13de <__divsf3_pse+0x92>
    1388:	fe 2f       	mov	r31, r30
    138a:	29 d0       	rcall	.+82     	; 0x13de <__divsf3_pse+0x92>
    138c:	66 0f       	add	r22, r22
    138e:	77 1f       	adc	r23, r23
    1390:	88 1f       	adc	r24, r24
    1392:	bb 1f       	adc	r27, r27
    1394:	26 17       	cp	r18, r22
    1396:	37 07       	cpc	r19, r23
    1398:	48 07       	cpc	r20, r24
    139a:	ab 07       	cpc	r26, r27
    139c:	b0 e8       	ldi	r27, 0x80	; 128
    139e:	09 f0       	breq	.+2      	; 0x13a2 <__divsf3_pse+0x56>
    13a0:	bb 0b       	sbc	r27, r27
    13a2:	80 2d       	mov	r24, r0
    13a4:	bf 01       	movw	r22, r30
    13a6:	ff 27       	eor	r31, r31
    13a8:	93 58       	subi	r25, 0x83	; 131
    13aa:	5f 4f       	sbci	r21, 0xFF	; 255
    13ac:	3a f0       	brmi	.+14     	; 0x13bc <__divsf3_pse+0x70>
    13ae:	9e 3f       	cpi	r25, 0xFE	; 254
    13b0:	51 05       	cpc	r21, r1
    13b2:	78 f0       	brcs	.+30     	; 0x13d2 <__divsf3_pse+0x86>
    13b4:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_inf>
    13b8:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__fp_szero>
    13bc:	5f 3f       	cpi	r21, 0xFF	; 255
    13be:	e4 f3       	brlt	.-8      	; 0x13b8 <__divsf3_pse+0x6c>
    13c0:	98 3e       	cpi	r25, 0xE8	; 232
    13c2:	d4 f3       	brlt	.-12     	; 0x13b8 <__divsf3_pse+0x6c>
    13c4:	86 95       	lsr	r24
    13c6:	77 95       	ror	r23
    13c8:	67 95       	ror	r22
    13ca:	b7 95       	ror	r27
    13cc:	f7 95       	ror	r31
    13ce:	9f 5f       	subi	r25, 0xFF	; 255
    13d0:	c9 f7       	brne	.-14     	; 0x13c4 <__divsf3_pse+0x78>
    13d2:	88 0f       	add	r24, r24
    13d4:	91 1d       	adc	r25, r1
    13d6:	96 95       	lsr	r25
    13d8:	87 95       	ror	r24
    13da:	97 f9       	bld	r25, 7
    13dc:	08 95       	ret
    13de:	e1 e0       	ldi	r30, 0x01	; 1
    13e0:	66 0f       	add	r22, r22
    13e2:	77 1f       	adc	r23, r23
    13e4:	88 1f       	adc	r24, r24
    13e6:	bb 1f       	adc	r27, r27
    13e8:	62 17       	cp	r22, r18
    13ea:	73 07       	cpc	r23, r19
    13ec:	84 07       	cpc	r24, r20
    13ee:	ba 07       	cpc	r27, r26
    13f0:	20 f0       	brcs	.+8      	; 0x13fa <__divsf3_pse+0xae>
    13f2:	62 1b       	sub	r22, r18
    13f4:	73 0b       	sbc	r23, r19
    13f6:	84 0b       	sbc	r24, r20
    13f8:	ba 0b       	sbc	r27, r26
    13fa:	ee 1f       	adc	r30, r30
    13fc:	88 f7       	brcc	.-30     	; 0x13e0 <__divsf3_pse+0x94>
    13fe:	e0 95       	com	r30
    1400:	08 95       	ret

00001402 <__fixunssfsi>:
    1402:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fp_splitA>
    1406:	88 f0       	brcs	.+34     	; 0x142a <__fixunssfsi+0x28>
    1408:	9f 57       	subi	r25, 0x7F	; 127
    140a:	98 f0       	brcs	.+38     	; 0x1432 <__fixunssfsi+0x30>
    140c:	b9 2f       	mov	r27, r25
    140e:	99 27       	eor	r25, r25
    1410:	b7 51       	subi	r27, 0x17	; 23
    1412:	b0 f0       	brcs	.+44     	; 0x1440 <__fixunssfsi+0x3e>
    1414:	e1 f0       	breq	.+56     	; 0x144e <__fixunssfsi+0x4c>
    1416:	66 0f       	add	r22, r22
    1418:	77 1f       	adc	r23, r23
    141a:	88 1f       	adc	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	1a f0       	brmi	.+6      	; 0x1426 <__fixunssfsi+0x24>
    1420:	ba 95       	dec	r27
    1422:	c9 f7       	brne	.-14     	; 0x1416 <__fixunssfsi+0x14>
    1424:	14 c0       	rjmp	.+40     	; 0x144e <__fixunssfsi+0x4c>
    1426:	b1 30       	cpi	r27, 0x01	; 1
    1428:	91 f0       	breq	.+36     	; 0x144e <__fixunssfsi+0x4c>
    142a:	0e 94 b7 0a 	call	0x156e	; 0x156e <__fp_zero>
    142e:	b1 e0       	ldi	r27, 0x01	; 1
    1430:	08 95       	ret
    1432:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__fp_zero>
    1436:	67 2f       	mov	r22, r23
    1438:	78 2f       	mov	r23, r24
    143a:	88 27       	eor	r24, r24
    143c:	b8 5f       	subi	r27, 0xF8	; 248
    143e:	39 f0       	breq	.+14     	; 0x144e <__fixunssfsi+0x4c>
    1440:	b9 3f       	cpi	r27, 0xF9	; 249
    1442:	cc f3       	brlt	.-14     	; 0x1436 <__fixunssfsi+0x34>
    1444:	86 95       	lsr	r24
    1446:	77 95       	ror	r23
    1448:	67 95       	ror	r22
    144a:	b3 95       	inc	r27
    144c:	d9 f7       	brne	.-10     	; 0x1444 <__fixunssfsi+0x42>
    144e:	3e f4       	brtc	.+14     	; 0x145e <__fixunssfsi+0x5c>
    1450:	90 95       	com	r25
    1452:	80 95       	com	r24
    1454:	70 95       	com	r23
    1456:	61 95       	neg	r22
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	8f 4f       	sbci	r24, 0xFF	; 255
    145c:	9f 4f       	sbci	r25, 0xFF	; 255
    145e:	08 95       	ret

00001460 <__floatunsisf>:
    1460:	e8 94       	clt
    1462:	09 c0       	rjmp	.+18     	; 0x1476 <__floatsisf+0x12>

00001464 <__floatsisf>:
    1464:	97 fb       	bst	r25, 7
    1466:	3e f4       	brtc	.+14     	; 0x1476 <__floatsisf+0x12>
    1468:	90 95       	com	r25
    146a:	80 95       	com	r24
    146c:	70 95       	com	r23
    146e:	61 95       	neg	r22
    1470:	7f 4f       	sbci	r23, 0xFF	; 255
    1472:	8f 4f       	sbci	r24, 0xFF	; 255
    1474:	9f 4f       	sbci	r25, 0xFF	; 255
    1476:	99 23       	and	r25, r25
    1478:	a9 f0       	breq	.+42     	; 0x14a4 <__floatsisf+0x40>
    147a:	f9 2f       	mov	r31, r25
    147c:	96 e9       	ldi	r25, 0x96	; 150
    147e:	bb 27       	eor	r27, r27
    1480:	93 95       	inc	r25
    1482:	f6 95       	lsr	r31
    1484:	87 95       	ror	r24
    1486:	77 95       	ror	r23
    1488:	67 95       	ror	r22
    148a:	b7 95       	ror	r27
    148c:	f1 11       	cpse	r31, r1
    148e:	f8 cf       	rjmp	.-16     	; 0x1480 <__floatsisf+0x1c>
    1490:	fa f4       	brpl	.+62     	; 0x14d0 <__floatsisf+0x6c>
    1492:	bb 0f       	add	r27, r27
    1494:	11 f4       	brne	.+4      	; 0x149a <__floatsisf+0x36>
    1496:	60 ff       	sbrs	r22, 0
    1498:	1b c0       	rjmp	.+54     	; 0x14d0 <__floatsisf+0x6c>
    149a:	6f 5f       	subi	r22, 0xFF	; 255
    149c:	7f 4f       	sbci	r23, 0xFF	; 255
    149e:	8f 4f       	sbci	r24, 0xFF	; 255
    14a0:	9f 4f       	sbci	r25, 0xFF	; 255
    14a2:	16 c0       	rjmp	.+44     	; 0x14d0 <__floatsisf+0x6c>
    14a4:	88 23       	and	r24, r24
    14a6:	11 f0       	breq	.+4      	; 0x14ac <__floatsisf+0x48>
    14a8:	96 e9       	ldi	r25, 0x96	; 150
    14aa:	11 c0       	rjmp	.+34     	; 0x14ce <__floatsisf+0x6a>
    14ac:	77 23       	and	r23, r23
    14ae:	21 f0       	breq	.+8      	; 0x14b8 <__floatsisf+0x54>
    14b0:	9e e8       	ldi	r25, 0x8E	; 142
    14b2:	87 2f       	mov	r24, r23
    14b4:	76 2f       	mov	r23, r22
    14b6:	05 c0       	rjmp	.+10     	; 0x14c2 <__floatsisf+0x5e>
    14b8:	66 23       	and	r22, r22
    14ba:	71 f0       	breq	.+28     	; 0x14d8 <__floatsisf+0x74>
    14bc:	96 e8       	ldi	r25, 0x86	; 134
    14be:	86 2f       	mov	r24, r22
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	2a f0       	brmi	.+10     	; 0x14d0 <__floatsisf+0x6c>
    14c6:	9a 95       	dec	r25
    14c8:	66 0f       	add	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	88 1f       	adc	r24, r24
    14ce:	da f7       	brpl	.-10     	; 0x14c6 <__floatsisf+0x62>
    14d0:	88 0f       	add	r24, r24
    14d2:	96 95       	lsr	r25
    14d4:	87 95       	ror	r24
    14d6:	97 f9       	bld	r25, 7
    14d8:	08 95       	ret

000014da <__fp_inf>:
    14da:	97 f9       	bld	r25, 7
    14dc:	9f 67       	ori	r25, 0x7F	; 127
    14de:	80 e8       	ldi	r24, 0x80	; 128
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	08 95       	ret

000014e6 <__fp_nan>:
    14e6:	9f ef       	ldi	r25, 0xFF	; 255
    14e8:	80 ec       	ldi	r24, 0xC0	; 192
    14ea:	08 95       	ret

000014ec <__fp_pscA>:
    14ec:	00 24       	eor	r0, r0
    14ee:	0a 94       	dec	r0
    14f0:	16 16       	cp	r1, r22
    14f2:	17 06       	cpc	r1, r23
    14f4:	18 06       	cpc	r1, r24
    14f6:	09 06       	cpc	r0, r25
    14f8:	08 95       	ret

000014fa <__fp_pscB>:
    14fa:	00 24       	eor	r0, r0
    14fc:	0a 94       	dec	r0
    14fe:	12 16       	cp	r1, r18
    1500:	13 06       	cpc	r1, r19
    1502:	14 06       	cpc	r1, r20
    1504:	05 06       	cpc	r0, r21
    1506:	08 95       	ret

00001508 <__fp_round>:
    1508:	09 2e       	mov	r0, r25
    150a:	03 94       	inc	r0
    150c:	00 0c       	add	r0, r0
    150e:	11 f4       	brne	.+4      	; 0x1514 <__fp_round+0xc>
    1510:	88 23       	and	r24, r24
    1512:	52 f0       	brmi	.+20     	; 0x1528 <__fp_round+0x20>
    1514:	bb 0f       	add	r27, r27
    1516:	40 f4       	brcc	.+16     	; 0x1528 <__fp_round+0x20>
    1518:	bf 2b       	or	r27, r31
    151a:	11 f4       	brne	.+4      	; 0x1520 <__fp_round+0x18>
    151c:	60 ff       	sbrs	r22, 0
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <__fp_round+0x20>
    1520:	6f 5f       	subi	r22, 0xFF	; 255
    1522:	7f 4f       	sbci	r23, 0xFF	; 255
    1524:	8f 4f       	sbci	r24, 0xFF	; 255
    1526:	9f 4f       	sbci	r25, 0xFF	; 255
    1528:	08 95       	ret

0000152a <__fp_split3>:
    152a:	57 fd       	sbrc	r21, 7
    152c:	90 58       	subi	r25, 0x80	; 128
    152e:	44 0f       	add	r20, r20
    1530:	55 1f       	adc	r21, r21
    1532:	59 f0       	breq	.+22     	; 0x154a <__fp_splitA+0x10>
    1534:	5f 3f       	cpi	r21, 0xFF	; 255
    1536:	71 f0       	breq	.+28     	; 0x1554 <__fp_splitA+0x1a>
    1538:	47 95       	ror	r20

0000153a <__fp_splitA>:
    153a:	88 0f       	add	r24, r24
    153c:	97 fb       	bst	r25, 7
    153e:	99 1f       	adc	r25, r25
    1540:	61 f0       	breq	.+24     	; 0x155a <__fp_splitA+0x20>
    1542:	9f 3f       	cpi	r25, 0xFF	; 255
    1544:	79 f0       	breq	.+30     	; 0x1564 <__fp_splitA+0x2a>
    1546:	87 95       	ror	r24
    1548:	08 95       	ret
    154a:	12 16       	cp	r1, r18
    154c:	13 06       	cpc	r1, r19
    154e:	14 06       	cpc	r1, r20
    1550:	55 1f       	adc	r21, r21
    1552:	f2 cf       	rjmp	.-28     	; 0x1538 <__fp_split3+0xe>
    1554:	46 95       	lsr	r20
    1556:	f1 df       	rcall	.-30     	; 0x153a <__fp_splitA>
    1558:	08 c0       	rjmp	.+16     	; 0x156a <__fp_splitA+0x30>
    155a:	16 16       	cp	r1, r22
    155c:	17 06       	cpc	r1, r23
    155e:	18 06       	cpc	r1, r24
    1560:	99 1f       	adc	r25, r25
    1562:	f1 cf       	rjmp	.-30     	; 0x1546 <__fp_splitA+0xc>
    1564:	86 95       	lsr	r24
    1566:	71 05       	cpc	r23, r1
    1568:	61 05       	cpc	r22, r1
    156a:	08 94       	sec
    156c:	08 95       	ret

0000156e <__fp_zero>:
    156e:	e8 94       	clt

00001570 <__fp_szero>:
    1570:	bb 27       	eor	r27, r27
    1572:	66 27       	eor	r22, r22
    1574:	77 27       	eor	r23, r23
    1576:	cb 01       	movw	r24, r22
    1578:	97 f9       	bld	r25, 7
    157a:	08 95       	ret

0000157c <__mulsf3>:
    157c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__mulsf3x>
    1580:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_round>
    1584:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__fp_pscA>
    1588:	38 f0       	brcs	.+14     	; 0x1598 <__mulsf3+0x1c>
    158a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_pscB>
    158e:	20 f0       	brcs	.+8      	; 0x1598 <__mulsf3+0x1c>
    1590:	95 23       	and	r25, r21
    1592:	11 f0       	breq	.+4      	; 0x1598 <__mulsf3+0x1c>
    1594:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_inf>
    1598:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__fp_nan>
    159c:	11 24       	eor	r1, r1
    159e:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__fp_szero>

000015a2 <__mulsf3x>:
    15a2:	0e 94 95 0a 	call	0x152a	; 0x152a <__fp_split3>
    15a6:	70 f3       	brcs	.-36     	; 0x1584 <__mulsf3+0x8>

000015a8 <__mulsf3_pse>:
    15a8:	95 9f       	mul	r25, r21
    15aa:	c1 f3       	breq	.-16     	; 0x159c <__mulsf3+0x20>
    15ac:	95 0f       	add	r25, r21
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	55 1f       	adc	r21, r21
    15b2:	62 9f       	mul	r22, r18
    15b4:	f0 01       	movw	r30, r0
    15b6:	72 9f       	mul	r23, r18
    15b8:	bb 27       	eor	r27, r27
    15ba:	f0 0d       	add	r31, r0
    15bc:	b1 1d       	adc	r27, r1
    15be:	63 9f       	mul	r22, r19
    15c0:	aa 27       	eor	r26, r26
    15c2:	f0 0d       	add	r31, r0
    15c4:	b1 1d       	adc	r27, r1
    15c6:	aa 1f       	adc	r26, r26
    15c8:	64 9f       	mul	r22, r20
    15ca:	66 27       	eor	r22, r22
    15cc:	b0 0d       	add	r27, r0
    15ce:	a1 1d       	adc	r26, r1
    15d0:	66 1f       	adc	r22, r22
    15d2:	82 9f       	mul	r24, r18
    15d4:	22 27       	eor	r18, r18
    15d6:	b0 0d       	add	r27, r0
    15d8:	a1 1d       	adc	r26, r1
    15da:	62 1f       	adc	r22, r18
    15dc:	73 9f       	mul	r23, r19
    15de:	b0 0d       	add	r27, r0
    15e0:	a1 1d       	adc	r26, r1
    15e2:	62 1f       	adc	r22, r18
    15e4:	83 9f       	mul	r24, r19
    15e6:	a0 0d       	add	r26, r0
    15e8:	61 1d       	adc	r22, r1
    15ea:	22 1f       	adc	r18, r18
    15ec:	74 9f       	mul	r23, r20
    15ee:	33 27       	eor	r19, r19
    15f0:	a0 0d       	add	r26, r0
    15f2:	61 1d       	adc	r22, r1
    15f4:	23 1f       	adc	r18, r19
    15f6:	84 9f       	mul	r24, r20
    15f8:	60 0d       	add	r22, r0
    15fa:	21 1d       	adc	r18, r1
    15fc:	82 2f       	mov	r24, r18
    15fe:	76 2f       	mov	r23, r22
    1600:	6a 2f       	mov	r22, r26
    1602:	11 24       	eor	r1, r1
    1604:	9f 57       	subi	r25, 0x7F	; 127
    1606:	50 40       	sbci	r21, 0x00	; 0
    1608:	9a f0       	brmi	.+38     	; 0x1630 <__mulsf3_pse+0x88>
    160a:	f1 f0       	breq	.+60     	; 0x1648 <__mulsf3_pse+0xa0>
    160c:	88 23       	and	r24, r24
    160e:	4a f0       	brmi	.+18     	; 0x1622 <__mulsf3_pse+0x7a>
    1610:	ee 0f       	add	r30, r30
    1612:	ff 1f       	adc	r31, r31
    1614:	bb 1f       	adc	r27, r27
    1616:	66 1f       	adc	r22, r22
    1618:	77 1f       	adc	r23, r23
    161a:	88 1f       	adc	r24, r24
    161c:	91 50       	subi	r25, 0x01	; 1
    161e:	50 40       	sbci	r21, 0x00	; 0
    1620:	a9 f7       	brne	.-22     	; 0x160c <__mulsf3_pse+0x64>
    1622:	9e 3f       	cpi	r25, 0xFE	; 254
    1624:	51 05       	cpc	r21, r1
    1626:	80 f0       	brcs	.+32     	; 0x1648 <__mulsf3_pse+0xa0>
    1628:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_inf>
    162c:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__fp_szero>
    1630:	5f 3f       	cpi	r21, 0xFF	; 255
    1632:	e4 f3       	brlt	.-8      	; 0x162c <__mulsf3_pse+0x84>
    1634:	98 3e       	cpi	r25, 0xE8	; 232
    1636:	d4 f3       	brlt	.-12     	; 0x162c <__mulsf3_pse+0x84>
    1638:	86 95       	lsr	r24
    163a:	77 95       	ror	r23
    163c:	67 95       	ror	r22
    163e:	b7 95       	ror	r27
    1640:	f7 95       	ror	r31
    1642:	e7 95       	ror	r30
    1644:	9f 5f       	subi	r25, 0xFF	; 255
    1646:	c1 f7       	brne	.-16     	; 0x1638 <__mulsf3_pse+0x90>
    1648:	fe 2b       	or	r31, r30
    164a:	88 0f       	add	r24, r24
    164c:	91 1d       	adc	r25, r1
    164e:	96 95       	lsr	r25
    1650:	87 95       	ror	r24
    1652:	97 f9       	bld	r25, 7
    1654:	08 95       	ret

00001656 <__divmodhi4>:
    1656:	97 fb       	bst	r25, 7
    1658:	07 2e       	mov	r0, r23
    165a:	16 f4       	brtc	.+4      	; 0x1660 <__divmodhi4+0xa>
    165c:	00 94       	com	r0
    165e:	07 d0       	rcall	.+14     	; 0x166e <__divmodhi4_neg1>
    1660:	77 fd       	sbrc	r23, 7
    1662:	09 d0       	rcall	.+18     	; 0x1676 <__divmodhi4_neg2>
    1664:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__udivmodhi4>
    1668:	07 fc       	sbrc	r0, 7
    166a:	05 d0       	rcall	.+10     	; 0x1676 <__divmodhi4_neg2>
    166c:	3e f4       	brtc	.+14     	; 0x167c <__divmodhi4_exit>

0000166e <__divmodhi4_neg1>:
    166e:	90 95       	com	r25
    1670:	81 95       	neg	r24
    1672:	9f 4f       	sbci	r25, 0xFF	; 255
    1674:	08 95       	ret

00001676 <__divmodhi4_neg2>:
    1676:	70 95       	com	r23
    1678:	61 95       	neg	r22
    167a:	7f 4f       	sbci	r23, 0xFF	; 255

0000167c <__divmodhi4_exit>:
    167c:	08 95       	ret

0000167e <__udivmodsi4>:
    167e:	a1 e2       	ldi	r26, 0x21	; 33
    1680:	1a 2e       	mov	r1, r26
    1682:	aa 1b       	sub	r26, r26
    1684:	bb 1b       	sub	r27, r27
    1686:	fd 01       	movw	r30, r26
    1688:	0d c0       	rjmp	.+26     	; 0x16a4 <__udivmodsi4_ep>

0000168a <__udivmodsi4_loop>:
    168a:	aa 1f       	adc	r26, r26
    168c:	bb 1f       	adc	r27, r27
    168e:	ee 1f       	adc	r30, r30
    1690:	ff 1f       	adc	r31, r31
    1692:	a2 17       	cp	r26, r18
    1694:	b3 07       	cpc	r27, r19
    1696:	e4 07       	cpc	r30, r20
    1698:	f5 07       	cpc	r31, r21
    169a:	20 f0       	brcs	.+8      	; 0x16a4 <__udivmodsi4_ep>
    169c:	a2 1b       	sub	r26, r18
    169e:	b3 0b       	sbc	r27, r19
    16a0:	e4 0b       	sbc	r30, r20
    16a2:	f5 0b       	sbc	r31, r21

000016a4 <__udivmodsi4_ep>:
    16a4:	66 1f       	adc	r22, r22
    16a6:	77 1f       	adc	r23, r23
    16a8:	88 1f       	adc	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	1a 94       	dec	r1
    16ae:	69 f7       	brne	.-38     	; 0x168a <__udivmodsi4_loop>
    16b0:	60 95       	com	r22
    16b2:	70 95       	com	r23
    16b4:	80 95       	com	r24
    16b6:	90 95       	com	r25
    16b8:	9b 01       	movw	r18, r22
    16ba:	ac 01       	movw	r20, r24
    16bc:	bd 01       	movw	r22, r26
    16be:	cf 01       	movw	r24, r30
    16c0:	08 95       	ret

000016c2 <__divmodsi4>:
    16c2:	05 2e       	mov	r0, r21
    16c4:	97 fb       	bst	r25, 7
    16c6:	1e f4       	brtc	.+6      	; 0x16ce <__divmodsi4+0xc>
    16c8:	00 94       	com	r0
    16ca:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__negsi2>
    16ce:	57 fd       	sbrc	r21, 7
    16d0:	07 d0       	rcall	.+14     	; 0x16e0 <__divmodsi4_neg2>
    16d2:	0e 94 3f 0b 	call	0x167e	; 0x167e <__udivmodsi4>
    16d6:	07 fc       	sbrc	r0, 7
    16d8:	03 d0       	rcall	.+6      	; 0x16e0 <__divmodsi4_neg2>
    16da:	4e f4       	brtc	.+18     	; 0x16ee <__divmodsi4_exit>
    16dc:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__negsi2>

000016e0 <__divmodsi4_neg2>:
    16e0:	50 95       	com	r21
    16e2:	40 95       	com	r20
    16e4:	30 95       	com	r19
    16e6:	21 95       	neg	r18
    16e8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ea:	4f 4f       	sbci	r20, 0xFF	; 255
    16ec:	5f 4f       	sbci	r21, 0xFF	; 255

000016ee <__divmodsi4_exit>:
    16ee:	08 95       	ret

000016f0 <__negsi2>:
    16f0:	90 95       	com	r25
    16f2:	80 95       	com	r24
    16f4:	70 95       	com	r23
    16f6:	61 95       	neg	r22
    16f8:	7f 4f       	sbci	r23, 0xFF	; 255
    16fa:	8f 4f       	sbci	r24, 0xFF	; 255
    16fc:	9f 4f       	sbci	r25, 0xFF	; 255
    16fe:	08 95       	ret

00001700 <__umulhisi3>:
    1700:	a2 9f       	mul	r26, r18
    1702:	b0 01       	movw	r22, r0
    1704:	b3 9f       	mul	r27, r19
    1706:	c0 01       	movw	r24, r0
    1708:	a3 9f       	mul	r26, r19
    170a:	70 0d       	add	r23, r0
    170c:	81 1d       	adc	r24, r1
    170e:	11 24       	eor	r1, r1
    1710:	91 1d       	adc	r25, r1
    1712:	b2 9f       	mul	r27, r18
    1714:	70 0d       	add	r23, r0
    1716:	81 1d       	adc	r24, r1
    1718:	11 24       	eor	r1, r1
    171a:	91 1d       	adc	r25, r1
    171c:	08 95       	ret

0000171e <__ashldi3>:
    171e:	0f 93       	push	r16
    1720:	08 30       	cpi	r16, 0x08	; 8
    1722:	90 f0       	brcs	.+36     	; 0x1748 <__ashldi3+0x2a>
    1724:	98 2f       	mov	r25, r24
    1726:	87 2f       	mov	r24, r23
    1728:	76 2f       	mov	r23, r22
    172a:	65 2f       	mov	r22, r21
    172c:	54 2f       	mov	r21, r20
    172e:	43 2f       	mov	r20, r19
    1730:	32 2f       	mov	r19, r18
    1732:	22 27       	eor	r18, r18
    1734:	08 50       	subi	r16, 0x08	; 8
    1736:	f4 cf       	rjmp	.-24     	; 0x1720 <__ashldi3+0x2>
    1738:	22 0f       	add	r18, r18
    173a:	33 1f       	adc	r19, r19
    173c:	44 1f       	adc	r20, r20
    173e:	55 1f       	adc	r21, r21
    1740:	66 1f       	adc	r22, r22
    1742:	77 1f       	adc	r23, r23
    1744:	88 1f       	adc	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 95       	dec	r16
    174a:	b2 f7       	brpl	.-20     	; 0x1738 <__ashldi3+0x1a>
    174c:	0f 91       	pop	r16
    174e:	08 95       	ret

00001750 <__ashrdi3>:
    1750:	97 fb       	bst	r25, 7
    1752:	10 f8       	bld	r1, 0

00001754 <__lshrdi3>:
    1754:	16 94       	lsr	r1
    1756:	00 08       	sbc	r0, r0
    1758:	0f 93       	push	r16
    175a:	08 30       	cpi	r16, 0x08	; 8
    175c:	98 f0       	brcs	.+38     	; 0x1784 <__lshrdi3+0x30>
    175e:	08 50       	subi	r16, 0x08	; 8
    1760:	23 2f       	mov	r18, r19
    1762:	34 2f       	mov	r19, r20
    1764:	45 2f       	mov	r20, r21
    1766:	56 2f       	mov	r21, r22
    1768:	67 2f       	mov	r22, r23
    176a:	78 2f       	mov	r23, r24
    176c:	89 2f       	mov	r24, r25
    176e:	90 2d       	mov	r25, r0
    1770:	f4 cf       	rjmp	.-24     	; 0x175a <__lshrdi3+0x6>
    1772:	05 94       	asr	r0
    1774:	97 95       	ror	r25
    1776:	87 95       	ror	r24
    1778:	77 95       	ror	r23
    177a:	67 95       	ror	r22
    177c:	57 95       	ror	r21
    177e:	47 95       	ror	r20
    1780:	37 95       	ror	r19
    1782:	27 95       	ror	r18
    1784:	0a 95       	dec	r16
    1786:	aa f7       	brpl	.-22     	; 0x1772 <__lshrdi3+0x1e>
    1788:	0f 91       	pop	r16
    178a:	08 95       	ret

0000178c <__cmpdi2_s8>:
    178c:	00 24       	eor	r0, r0
    178e:	a7 fd       	sbrc	r26, 7
    1790:	00 94       	com	r0
    1792:	2a 17       	cp	r18, r26
    1794:	30 05       	cpc	r19, r0
    1796:	40 05       	cpc	r20, r0
    1798:	50 05       	cpc	r21, r0
    179a:	60 05       	cpc	r22, r0
    179c:	70 05       	cpc	r23, r0
    179e:	80 05       	cpc	r24, r0
    17a0:	90 05       	cpc	r25, r0
    17a2:	08 95       	ret

000017a4 <__udivmodhi4>:
    17a4:	aa 1b       	sub	r26, r26
    17a6:	bb 1b       	sub	r27, r27
    17a8:	51 e1       	ldi	r21, 0x11	; 17
    17aa:	07 c0       	rjmp	.+14     	; 0x17ba <__udivmodhi4_ep>

000017ac <__udivmodhi4_loop>:
    17ac:	aa 1f       	adc	r26, r26
    17ae:	bb 1f       	adc	r27, r27
    17b0:	a6 17       	cp	r26, r22
    17b2:	b7 07       	cpc	r27, r23
    17b4:	10 f0       	brcs	.+4      	; 0x17ba <__udivmodhi4_ep>
    17b6:	a6 1b       	sub	r26, r22
    17b8:	b7 0b       	sbc	r27, r23

000017ba <__udivmodhi4_ep>:
    17ba:	88 1f       	adc	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	5a 95       	dec	r21
    17c0:	a9 f7       	brne	.-22     	; 0x17ac <__udivmodhi4_loop>
    17c2:	80 95       	com	r24
    17c4:	90 95       	com	r25
    17c6:	bc 01       	movw	r22, r24
    17c8:	cd 01       	movw	r24, r26
    17ca:	08 95       	ret

000017cc <strtol>:
    17cc:	a0 e0       	ldi	r26, 0x00	; 0
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	ec ee       	ldi	r30, 0xEC	; 236
    17d2:	fb e0       	ldi	r31, 0x0B	; 11
    17d4:	0c 94 49 10 	jmp	0x2092	; 0x2092 <__prologue_saves__+0x2>
    17d8:	5c 01       	movw	r10, r24
    17da:	6b 01       	movw	r12, r22
    17dc:	7a 01       	movw	r14, r20
    17de:	61 15       	cp	r22, r1
    17e0:	71 05       	cpc	r23, r1
    17e2:	19 f0       	breq	.+6      	; 0x17ea <strtol+0x1e>
    17e4:	fb 01       	movw	r30, r22
    17e6:	80 83       	st	Z, r24
    17e8:	91 83       	std	Z+1, r25	; 0x01
    17ea:	e1 14       	cp	r14, r1
    17ec:	f1 04       	cpc	r15, r1
    17ee:	29 f0       	breq	.+10     	; 0x17fa <strtol+0x2e>
    17f0:	c7 01       	movw	r24, r14
    17f2:	02 97       	sbiw	r24, 0x02	; 2
    17f4:	83 97       	sbiw	r24, 0x23	; 35
    17f6:	08 f0       	brcs	.+2      	; 0x17fa <strtol+0x2e>
    17f8:	e5 c0       	rjmp	.+458    	; 0x19c4 <strtol+0x1f8>
    17fa:	e5 01       	movw	r28, r10
    17fc:	21 96       	adiw	r28, 0x01	; 1
    17fe:	f5 01       	movw	r30, r10
    1800:	10 81       	ld	r17, Z
    1802:	81 2f       	mov	r24, r17
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <isspace>
    180a:	89 2b       	or	r24, r25
    180c:	11 f0       	breq	.+4      	; 0x1812 <strtol+0x46>
    180e:	5e 01       	movw	r10, r28
    1810:	f4 cf       	rjmp	.-24     	; 0x17fa <strtol+0x2e>
    1812:	1d 32       	cpi	r17, 0x2D	; 45
    1814:	29 f4       	brne	.+10     	; 0x1820 <strtol+0x54>
    1816:	21 96       	adiw	r28, 0x01	; 1
    1818:	f5 01       	movw	r30, r10
    181a:	11 81       	ldd	r17, Z+1	; 0x01
    181c:	01 e0       	ldi	r16, 0x01	; 1
    181e:	07 c0       	rjmp	.+14     	; 0x182e <strtol+0x62>
    1820:	1b 32       	cpi	r17, 0x2B	; 43
    1822:	21 f4       	brne	.+8      	; 0x182c <strtol+0x60>
    1824:	e5 01       	movw	r28, r10
    1826:	22 96       	adiw	r28, 0x02	; 2
    1828:	f5 01       	movw	r30, r10
    182a:	11 81       	ldd	r17, Z+1	; 0x01
    182c:	00 e0       	ldi	r16, 0x00	; 0
    182e:	e1 14       	cp	r14, r1
    1830:	f1 04       	cpc	r15, r1
    1832:	09 f1       	breq	.+66     	; 0x1876 <strtol+0xaa>
    1834:	f0 e1       	ldi	r31, 0x10	; 16
    1836:	ef 16       	cp	r14, r31
    1838:	f1 04       	cpc	r15, r1
    183a:	29 f4       	brne	.+10     	; 0x1846 <strtol+0x7a>
    183c:	3f c0       	rjmp	.+126    	; 0x18bc <strtol+0xf0>
    183e:	10 e3       	ldi	r17, 0x30	; 48
    1840:	e1 14       	cp	r14, r1
    1842:	f1 04       	cpc	r15, r1
    1844:	21 f1       	breq	.+72     	; 0x188e <strtol+0xc2>
    1846:	28 e0       	ldi	r18, 0x08	; 8
    1848:	e2 16       	cp	r14, r18
    184a:	f1 04       	cpc	r15, r1
    184c:	01 f1       	breq	.+64     	; 0x188e <strtol+0xc2>
    184e:	54 f4       	brge	.+20     	; 0x1864 <strtol+0x98>
    1850:	e2 e0       	ldi	r30, 0x02	; 2
    1852:	ee 16       	cp	r14, r30
    1854:	f1 04       	cpc	r15, r1
    1856:	21 f5       	brne	.+72     	; 0x18a0 <strtol+0xd4>
    1858:	81 2c       	mov	r8, r1
    185a:	91 2c       	mov	r9, r1
    185c:	a1 2c       	mov	r10, r1
    185e:	b0 e4       	ldi	r27, 0x40	; 64
    1860:	bb 2e       	mov	r11, r27
    1862:	3e c0       	rjmp	.+124    	; 0x18e0 <strtol+0x114>
    1864:	fa e0       	ldi	r31, 0x0A	; 10
    1866:	ef 16       	cp	r14, r31
    1868:	f1 04       	cpc	r15, r1
    186a:	39 f0       	breq	.+14     	; 0x187a <strtol+0xae>
    186c:	20 e1       	ldi	r18, 0x10	; 16
    186e:	e2 16       	cp	r14, r18
    1870:	f1 04       	cpc	r15, r1
    1872:	b1 f4       	brne	.+44     	; 0x18a0 <strtol+0xd4>
    1874:	30 c0       	rjmp	.+96     	; 0x18d6 <strtol+0x10a>
    1876:	10 33       	cpi	r17, 0x30	; 48
    1878:	19 f1       	breq	.+70     	; 0x18c0 <strtol+0xf4>
    187a:	fa e0       	ldi	r31, 0x0A	; 10
    187c:	ef 2e       	mov	r14, r31
    187e:	f1 2c       	mov	r15, r1
    1880:	ac ec       	ldi	r26, 0xCC	; 204
    1882:	8a 2e       	mov	r8, r26
    1884:	98 2c       	mov	r9, r8
    1886:	a8 2c       	mov	r10, r8
    1888:	ac e0       	ldi	r26, 0x0C	; 12
    188a:	ba 2e       	mov	r11, r26
    188c:	29 c0       	rjmp	.+82     	; 0x18e0 <strtol+0x114>
    188e:	78 e0       	ldi	r23, 0x08	; 8
    1890:	e7 2e       	mov	r14, r23
    1892:	f1 2c       	mov	r15, r1
    1894:	81 2c       	mov	r8, r1
    1896:	91 2c       	mov	r9, r1
    1898:	a1 2c       	mov	r10, r1
    189a:	e0 e1       	ldi	r30, 0x10	; 16
    189c:	be 2e       	mov	r11, r30
    189e:	20 c0       	rjmp	.+64     	; 0x18e0 <strtol+0x114>
    18a0:	60 e0       	ldi	r22, 0x00	; 0
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	90 e8       	ldi	r25, 0x80	; 128
    18a8:	97 01       	movw	r18, r14
    18aa:	0f 2c       	mov	r0, r15
    18ac:	00 0c       	add	r0, r0
    18ae:	44 0b       	sbc	r20, r20
    18b0:	55 0b       	sbc	r21, r21
    18b2:	0e 94 3f 0b 	call	0x167e	; 0x167e <__udivmodsi4>
    18b6:	49 01       	movw	r8, r18
    18b8:	5a 01       	movw	r10, r20
    18ba:	12 c0       	rjmp	.+36     	; 0x18e0 <strtol+0x114>
    18bc:	10 33       	cpi	r17, 0x30	; 48
    18be:	59 f4       	brne	.+22     	; 0x18d6 <strtol+0x10a>
    18c0:	88 81       	ld	r24, Y
    18c2:	8f 7d       	andi	r24, 0xDF	; 223
    18c4:	88 35       	cpi	r24, 0x58	; 88
    18c6:	09 f0       	breq	.+2      	; 0x18ca <strtol+0xfe>
    18c8:	ba cf       	rjmp	.-140    	; 0x183e <strtol+0x72>
    18ca:	19 81       	ldd	r17, Y+1	; 0x01
    18cc:	22 96       	adiw	r28, 0x02	; 2
    18ce:	02 60       	ori	r16, 0x02	; 2
    18d0:	80 e1       	ldi	r24, 0x10	; 16
    18d2:	e8 2e       	mov	r14, r24
    18d4:	f1 2c       	mov	r15, r1
    18d6:	81 2c       	mov	r8, r1
    18d8:	91 2c       	mov	r9, r1
    18da:	a1 2c       	mov	r10, r1
    18dc:	68 e0       	ldi	r22, 0x08	; 8
    18de:	b6 2e       	mov	r11, r22
    18e0:	40 e0       	ldi	r20, 0x00	; 0
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	70 e0       	ldi	r23, 0x00	; 0
    18e6:	cb 01       	movw	r24, r22
    18e8:	27 01       	movw	r4, r14
    18ea:	0f 2c       	mov	r0, r15
    18ec:	00 0c       	add	r0, r0
    18ee:	66 08       	sbc	r6, r6
    18f0:	77 08       	sbc	r7, r7
    18f2:	fe 01       	movw	r30, r28
    18f4:	50 ed       	ldi	r21, 0xD0	; 208
    18f6:	35 2e       	mov	r3, r21
    18f8:	31 0e       	add	r3, r17
    18fa:	29 e0       	ldi	r18, 0x09	; 9
    18fc:	23 15       	cp	r18, r3
    18fe:	70 f4       	brcc	.+28     	; 0x191c <strtol+0x150>
    1900:	2f eb       	ldi	r18, 0xBF	; 191
    1902:	21 0f       	add	r18, r17
    1904:	2a 31       	cpi	r18, 0x1A	; 26
    1906:	18 f4       	brcc	.+6      	; 0x190e <strtol+0x142>
    1908:	39 ec       	ldi	r19, 0xC9	; 201
    190a:	33 2e       	mov	r3, r19
    190c:	06 c0       	rjmp	.+12     	; 0x191a <strtol+0x14e>
    190e:	2f e9       	ldi	r18, 0x9F	; 159
    1910:	21 0f       	add	r18, r17
    1912:	2a 31       	cpi	r18, 0x1A	; 26
    1914:	18 f5       	brcc	.+70     	; 0x195c <strtol+0x190>
    1916:	29 ea       	ldi	r18, 0xA9	; 169
    1918:	32 2e       	mov	r3, r18
    191a:	31 0e       	add	r3, r17
    191c:	23 2d       	mov	r18, r3
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	2e 15       	cp	r18, r14
    1922:	3f 05       	cpc	r19, r15
    1924:	dc f4       	brge	.+54     	; 0x195c <strtol+0x190>
    1926:	47 fd       	sbrc	r20, 7
    1928:	16 c0       	rjmp	.+44     	; 0x1956 <strtol+0x18a>
    192a:	86 16       	cp	r8, r22
    192c:	97 06       	cpc	r9, r23
    192e:	a8 06       	cpc	r10, r24
    1930:	b9 06       	cpc	r11, r25
    1932:	70 f0       	brcs	.+28     	; 0x1950 <strtol+0x184>
    1934:	a3 01       	movw	r20, r6
    1936:	92 01       	movw	r18, r4
    1938:	0e 94 2d 10 	call	0x205a	; 0x205a <__mulsi3>
    193c:	63 0d       	add	r22, r3
    193e:	71 1d       	adc	r23, r1
    1940:	81 1d       	adc	r24, r1
    1942:	91 1d       	adc	r25, r1
    1944:	61 30       	cpi	r22, 0x01	; 1
    1946:	71 05       	cpc	r23, r1
    1948:	81 05       	cpc	r24, r1
    194a:	20 e8       	ldi	r18, 0x80	; 128
    194c:	92 07       	cpc	r25, r18
    194e:	10 f0       	brcs	.+4      	; 0x1954 <strtol+0x188>
    1950:	4f ef       	ldi	r20, 0xFF	; 255
    1952:	01 c0       	rjmp	.+2      	; 0x1956 <strtol+0x18a>
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	21 96       	adiw	r28, 0x01	; 1
    1958:	10 81       	ld	r17, Z
    195a:	cb cf       	rjmp	.-106    	; 0x18f2 <strtol+0x126>
    195c:	20 2f       	mov	r18, r16
    195e:	21 70       	andi	r18, 0x01	; 1
    1960:	c1 14       	cp	r12, r1
    1962:	d1 04       	cpc	r13, r1
    1964:	71 f0       	breq	.+28     	; 0x1982 <strtol+0x1b6>
    1966:	44 23       	and	r20, r20
    1968:	29 f0       	breq	.+10     	; 0x1974 <strtol+0x1a8>
    196a:	21 97       	sbiw	r28, 0x01	; 1
    196c:	f6 01       	movw	r30, r12
    196e:	c0 83       	st	Z, r28
    1970:	d1 83       	std	Z+1, r29	; 0x01
    1972:	07 c0       	rjmp	.+14     	; 0x1982 <strtol+0x1b6>
    1974:	01 ff       	sbrs	r16, 1
    1976:	19 c0       	rjmp	.+50     	; 0x19aa <strtol+0x1de>
    1978:	22 97       	sbiw	r28, 0x02	; 2
    197a:	f6 01       	movw	r30, r12
    197c:	c0 83       	st	Z, r28
    197e:	d1 83       	std	Z+1, r29	; 0x01
    1980:	14 c0       	rjmp	.+40     	; 0x19aa <strtol+0x1de>
    1982:	47 ff       	sbrs	r20, 7
    1984:	12 c0       	rjmp	.+36     	; 0x19aa <strtol+0x1de>
    1986:	22 23       	and	r18, r18
    1988:	29 f0       	breq	.+10     	; 0x1994 <strtol+0x1c8>
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e8       	ldi	r25, 0x80	; 128
    1992:	04 c0       	rjmp	.+8      	; 0x199c <strtol+0x1d0>
    1994:	6f ef       	ldi	r22, 0xFF	; 255
    1996:	7f ef       	ldi	r23, 0xFF	; 255
    1998:	8f ef       	ldi	r24, 0xFF	; 255
    199a:	9f e7       	ldi	r25, 0x7F	; 127
    199c:	22 e2       	ldi	r18, 0x22	; 34
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	20 93 68 65 	sts	0x6568, r18	; 0x806568 <errno>
    19a4:	30 93 69 65 	sts	0x6569, r19	; 0x806569 <errno+0x1>
    19a8:	09 c0       	rjmp	.+18     	; 0x19bc <strtol+0x1f0>
    19aa:	22 23       	and	r18, r18
    19ac:	81 f0       	breq	.+32     	; 0x19ce <strtol+0x202>
    19ae:	90 95       	com	r25
    19b0:	80 95       	com	r24
    19b2:	70 95       	com	r23
    19b4:	61 95       	neg	r22
    19b6:	7f 4f       	sbci	r23, 0xFF	; 255
    19b8:	8f 4f       	sbci	r24, 0xFF	; 255
    19ba:	9f 4f       	sbci	r25, 0xFF	; 255
    19bc:	46 2f       	mov	r20, r22
    19be:	37 2f       	mov	r19, r23
    19c0:	28 2f       	mov	r18, r24
    19c2:	12 c0       	rjmp	.+36     	; 0x19e8 <strtol+0x21c>
    19c4:	40 e0       	ldi	r20, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0d c0       	rjmp	.+26     	; 0x19e8 <strtol+0x21c>
    19ce:	97 ff       	sbrs	r25, 7
    19d0:	f5 cf       	rjmp	.-22     	; 0x19bc <strtol+0x1f0>
    19d2:	82 e2       	ldi	r24, 0x22	; 34
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	80 93 68 65 	sts	0x6568, r24	; 0x806568 <errno>
    19da:	90 93 69 65 	sts	0x6569, r25	; 0x806569 <errno+0x1>
    19de:	6f ef       	ldi	r22, 0xFF	; 255
    19e0:	7f ef       	ldi	r23, 0xFF	; 255
    19e2:	8f ef       	ldi	r24, 0xFF	; 255
    19e4:	9f e7       	ldi	r25, 0x7F	; 127
    19e6:	ea cf       	rjmp	.-44     	; 0x19bc <strtol+0x1f0>
    19e8:	64 2f       	mov	r22, r20
    19ea:	73 2f       	mov	r23, r19
    19ec:	82 2f       	mov	r24, r18
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	e1 e1       	ldi	r30, 0x11	; 17
    19f4:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__epilogue_restores__+0x2>

000019f8 <isspace>:
    19f8:	91 11       	cpse	r25, r1
    19fa:	0c 94 74 0f 	jmp	0x1ee8	; 0x1ee8 <__ctype_isfalse>
    19fe:	80 32       	cpi	r24, 0x20	; 32
    1a00:	19 f0       	breq	.+6      	; 0x1a08 <isspace+0x10>
    1a02:	89 50       	subi	r24, 0x09	; 9
    1a04:	85 50       	subi	r24, 0x05	; 5
    1a06:	c8 f7       	brcc	.-14     	; 0x19fa <isspace+0x2>
    1a08:	08 95       	ret

00001a0a <strtok>:
    1a0a:	4c e0       	ldi	r20, 0x0C	; 12
    1a0c:	55 e6       	ldi	r21, 0x65	; 101
    1a0e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <strtok_r>
    1a12:	08 95       	ret

00001a14 <memcpy>:
    1a14:	fb 01       	movw	r30, r22
    1a16:	dc 01       	movw	r26, r24
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <memcpy+0xa>
    1a1a:	01 90       	ld	r0, Z+
    1a1c:	0d 92       	st	X+, r0
    1a1e:	41 50       	subi	r20, 0x01	; 1
    1a20:	50 40       	sbci	r21, 0x00	; 0
    1a22:	d8 f7       	brcc	.-10     	; 0x1a1a <memcpy+0x6>
    1a24:	08 95       	ret

00001a26 <strcmp>:
    1a26:	fb 01       	movw	r30, r22
    1a28:	dc 01       	movw	r26, r24
    1a2a:	8d 91       	ld	r24, X+
    1a2c:	01 90       	ld	r0, Z+
    1a2e:	80 19       	sub	r24, r0
    1a30:	01 10       	cpse	r0, r1
    1a32:	d9 f3       	breq	.-10     	; 0x1a2a <strcmp+0x4>
    1a34:	99 0b       	sbc	r25, r25
    1a36:	08 95       	ret

00001a38 <strcpy>:
    1a38:	fb 01       	movw	r30, r22
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	01 90       	ld	r0, Z+
    1a3e:	0d 92       	st	X+, r0
    1a40:	00 20       	and	r0, r0
    1a42:	e1 f7       	brne	.-8      	; 0x1a3c <strcpy+0x4>
    1a44:	08 95       	ret

00001a46 <strncmp>:
    1a46:	fb 01       	movw	r30, r22
    1a48:	dc 01       	movw	r26, r24
    1a4a:	41 50       	subi	r20, 0x01	; 1
    1a4c:	50 40       	sbci	r21, 0x00	; 0
    1a4e:	30 f0       	brcs	.+12     	; 0x1a5c <strncmp+0x16>
    1a50:	8d 91       	ld	r24, X+
    1a52:	01 90       	ld	r0, Z+
    1a54:	80 19       	sub	r24, r0
    1a56:	19 f4       	brne	.+6      	; 0x1a5e <strncmp+0x18>
    1a58:	00 20       	and	r0, r0
    1a5a:	b9 f7       	brne	.-18     	; 0x1a4a <strncmp+0x4>
    1a5c:	88 1b       	sub	r24, r24
    1a5e:	99 0b       	sbc	r25, r25
    1a60:	08 95       	ret

00001a62 <strncpy>:
    1a62:	fb 01       	movw	r30, r22
    1a64:	dc 01       	movw	r26, r24
    1a66:	41 50       	subi	r20, 0x01	; 1
    1a68:	50 40       	sbci	r21, 0x00	; 0
    1a6a:	48 f0       	brcs	.+18     	; 0x1a7e <strncpy+0x1c>
    1a6c:	01 90       	ld	r0, Z+
    1a6e:	0d 92       	st	X+, r0
    1a70:	00 20       	and	r0, r0
    1a72:	c9 f7       	brne	.-14     	; 0x1a66 <strncpy+0x4>
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <strncpy+0x16>
    1a76:	1d 92       	st	X+, r1
    1a78:	41 50       	subi	r20, 0x01	; 1
    1a7a:	50 40       	sbci	r21, 0x00	; 0
    1a7c:	e0 f7       	brcc	.-8      	; 0x1a76 <strncpy+0x14>
    1a7e:	08 95       	ret

00001a80 <strtok_r>:
    1a80:	fa 01       	movw	r30, r20
    1a82:	a1 91       	ld	r26, Z+
    1a84:	b0 81       	ld	r27, Z
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	19 f4       	brne	.+6      	; 0x1a90 <strtok_r+0x10>
    1a8a:	10 97       	sbiw	r26, 0x00	; 0
    1a8c:	e1 f0       	breq	.+56     	; 0x1ac6 <strtok_r+0x46>
    1a8e:	cd 01       	movw	r24, r26
    1a90:	dc 01       	movw	r26, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0d 90       	ld	r0, X+
    1a96:	00 20       	and	r0, r0
    1a98:	11 f4       	brne	.+4      	; 0x1a9e <strtok_r+0x1e>
    1a9a:	c0 01       	movw	r24, r0
    1a9c:	13 c0       	rjmp	.+38     	; 0x1ac4 <strtok_r+0x44>
    1a9e:	fb 01       	movw	r30, r22
    1aa0:	21 91       	ld	r18, Z+
    1aa2:	22 23       	and	r18, r18
    1aa4:	19 f0       	breq	.+6      	; 0x1aac <strtok_r+0x2c>
    1aa6:	20 15       	cp	r18, r0
    1aa8:	d9 f7       	brne	.-10     	; 0x1aa0 <strtok_r+0x20>
    1aaa:	f3 cf       	rjmp	.-26     	; 0x1a92 <strtok_r+0x12>
    1aac:	fb 01       	movw	r30, r22
    1aae:	21 91       	ld	r18, Z+
    1ab0:	20 15       	cp	r18, r0
    1ab2:	19 f4       	brne	.+6      	; 0x1aba <strtok_r+0x3a>
    1ab4:	1e 92       	st	-X, r1
    1ab6:	11 96       	adiw	r26, 0x01	; 1
    1ab8:	06 c0       	rjmp	.+12     	; 0x1ac6 <strtok_r+0x46>
    1aba:	22 23       	and	r18, r18
    1abc:	c1 f7       	brne	.-16     	; 0x1aae <strtok_r+0x2e>
    1abe:	0d 90       	ld	r0, X+
    1ac0:	00 20       	and	r0, r0
    1ac2:	a1 f7       	brne	.-24     	; 0x1aac <strtok_r+0x2c>
    1ac4:	d0 01       	movw	r26, r0
    1ac6:	fa 01       	movw	r30, r20
    1ac8:	a1 93       	st	Z+, r26
    1aca:	b0 83       	st	Z, r27
    1acc:	08 95       	ret

00001ace <vsnprintf>:
    1ace:	ae e0       	ldi	r26, 0x0E	; 14
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	ed e6       	ldi	r30, 0x6D	; 109
    1ad4:	fd e0       	ldi	r31, 0x0D	; 13
    1ad6:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__prologue_saves__+0x1c>
    1ada:	8c 01       	movw	r16, r24
    1adc:	fa 01       	movw	r30, r20
    1ade:	86 e0       	ldi	r24, 0x06	; 6
    1ae0:	8c 83       	std	Y+4, r24	; 0x04
    1ae2:	09 83       	std	Y+1, r16	; 0x01
    1ae4:	1a 83       	std	Y+2, r17	; 0x02
    1ae6:	77 ff       	sbrs	r23, 7
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <vsnprintf+0x20>
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	70 e8       	ldi	r23, 0x80	; 128
    1aee:	cb 01       	movw	r24, r22
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	8d 83       	std	Y+5, r24	; 0x05
    1af4:	9e 83       	std	Y+6, r25	; 0x06
    1af6:	a9 01       	movw	r20, r18
    1af8:	bf 01       	movw	r22, r30
    1afa:	ce 01       	movw	r24, r28
    1afc:	01 96       	adiw	r24, 0x01	; 1
    1afe:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <vfprintf>
    1b02:	4d 81       	ldd	r20, Y+5	; 0x05
    1b04:	5e 81       	ldd	r21, Y+6	; 0x06
    1b06:	57 fd       	sbrc	r21, 7
    1b08:	0a c0       	rjmp	.+20     	; 0x1b1e <vsnprintf+0x50>
    1b0a:	2f 81       	ldd	r18, Y+7	; 0x07
    1b0c:	38 85       	ldd	r19, Y+8	; 0x08
    1b0e:	42 17       	cp	r20, r18
    1b10:	53 07       	cpc	r21, r19
    1b12:	0c f4       	brge	.+2      	; 0x1b16 <vsnprintf+0x48>
    1b14:	9a 01       	movw	r18, r20
    1b16:	f8 01       	movw	r30, r16
    1b18:	e2 0f       	add	r30, r18
    1b1a:	f3 1f       	adc	r31, r19
    1b1c:	10 82       	st	Z, r1
    1b1e:	2e 96       	adiw	r28, 0x0e	; 14
    1b20:	e4 e0       	ldi	r30, 0x04	; 4
    1b22:	0c 94 6f 10 	jmp	0x20de	; 0x20de <__epilogue_restores__+0x1c>

00001b26 <vfprintf>:
    1b26:	ab e0       	ldi	r26, 0x0B	; 11
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e9 e9       	ldi	r30, 0x99	; 153
    1b2c:	fd e0       	ldi	r31, 0x0D	; 13
    1b2e:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__prologue_saves__>
    1b32:	6c 01       	movw	r12, r24
    1b34:	7b 01       	movw	r14, r22
    1b36:	8a 01       	movw	r16, r20
    1b38:	fc 01       	movw	r30, r24
    1b3a:	16 82       	std	Z+6, r1	; 0x06
    1b3c:	17 82       	std	Z+7, r1	; 0x07
    1b3e:	83 81       	ldd	r24, Z+3	; 0x03
    1b40:	81 ff       	sbrs	r24, 1
    1b42:	cc c1       	rjmp	.+920    	; 0x1edc <vfprintf+0x3b6>
    1b44:	ce 01       	movw	r24, r28
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	3c 01       	movw	r6, r24
    1b4a:	f6 01       	movw	r30, r12
    1b4c:	93 81       	ldd	r25, Z+3	; 0x03
    1b4e:	f7 01       	movw	r30, r14
    1b50:	93 fd       	sbrc	r25, 3
    1b52:	85 91       	lpm	r24, Z+
    1b54:	93 ff       	sbrs	r25, 3
    1b56:	81 91       	ld	r24, Z+
    1b58:	7f 01       	movw	r14, r30
    1b5a:	88 23       	and	r24, r24
    1b5c:	09 f4       	brne	.+2      	; 0x1b60 <vfprintf+0x3a>
    1b5e:	ba c1       	rjmp	.+884    	; 0x1ed4 <vfprintf+0x3ae>
    1b60:	85 32       	cpi	r24, 0x25	; 37
    1b62:	39 f4       	brne	.+14     	; 0x1b72 <vfprintf+0x4c>
    1b64:	93 fd       	sbrc	r25, 3
    1b66:	85 91       	lpm	r24, Z+
    1b68:	93 ff       	sbrs	r25, 3
    1b6a:	81 91       	ld	r24, Z+
    1b6c:	7f 01       	movw	r14, r30
    1b6e:	85 32       	cpi	r24, 0x25	; 37
    1b70:	29 f4       	brne	.+10     	; 0x1b7c <vfprintf+0x56>
    1b72:	b6 01       	movw	r22, r12
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1b7a:	e7 cf       	rjmp	.-50     	; 0x1b4a <vfprintf+0x24>
    1b7c:	91 2c       	mov	r9, r1
    1b7e:	21 2c       	mov	r2, r1
    1b80:	31 2c       	mov	r3, r1
    1b82:	ff e1       	ldi	r31, 0x1F	; 31
    1b84:	f3 15       	cp	r31, r3
    1b86:	d8 f0       	brcs	.+54     	; 0x1bbe <vfprintf+0x98>
    1b88:	8b 32       	cpi	r24, 0x2B	; 43
    1b8a:	79 f0       	breq	.+30     	; 0x1baa <vfprintf+0x84>
    1b8c:	38 f4       	brcc	.+14     	; 0x1b9c <vfprintf+0x76>
    1b8e:	80 32       	cpi	r24, 0x20	; 32
    1b90:	79 f0       	breq	.+30     	; 0x1bb0 <vfprintf+0x8a>
    1b92:	83 32       	cpi	r24, 0x23	; 35
    1b94:	a1 f4       	brne	.+40     	; 0x1bbe <vfprintf+0x98>
    1b96:	23 2d       	mov	r18, r3
    1b98:	20 61       	ori	r18, 0x10	; 16
    1b9a:	1d c0       	rjmp	.+58     	; 0x1bd6 <vfprintf+0xb0>
    1b9c:	8d 32       	cpi	r24, 0x2D	; 45
    1b9e:	61 f0       	breq	.+24     	; 0x1bb8 <vfprintf+0x92>
    1ba0:	80 33       	cpi	r24, 0x30	; 48
    1ba2:	69 f4       	brne	.+26     	; 0x1bbe <vfprintf+0x98>
    1ba4:	23 2d       	mov	r18, r3
    1ba6:	21 60       	ori	r18, 0x01	; 1
    1ba8:	16 c0       	rjmp	.+44     	; 0x1bd6 <vfprintf+0xb0>
    1baa:	83 2d       	mov	r24, r3
    1bac:	82 60       	ori	r24, 0x02	; 2
    1bae:	38 2e       	mov	r3, r24
    1bb0:	e3 2d       	mov	r30, r3
    1bb2:	e4 60       	ori	r30, 0x04	; 4
    1bb4:	3e 2e       	mov	r3, r30
    1bb6:	2a c0       	rjmp	.+84     	; 0x1c0c <vfprintf+0xe6>
    1bb8:	f3 2d       	mov	r31, r3
    1bba:	f8 60       	ori	r31, 0x08	; 8
    1bbc:	1d c0       	rjmp	.+58     	; 0x1bf8 <vfprintf+0xd2>
    1bbe:	37 fc       	sbrc	r3, 7
    1bc0:	2d c0       	rjmp	.+90     	; 0x1c1c <vfprintf+0xf6>
    1bc2:	20 ed       	ldi	r18, 0xD0	; 208
    1bc4:	28 0f       	add	r18, r24
    1bc6:	2a 30       	cpi	r18, 0x0A	; 10
    1bc8:	40 f0       	brcs	.+16     	; 0x1bda <vfprintf+0xb4>
    1bca:	8e 32       	cpi	r24, 0x2E	; 46
    1bcc:	b9 f4       	brne	.+46     	; 0x1bfc <vfprintf+0xd6>
    1bce:	36 fc       	sbrc	r3, 6
    1bd0:	81 c1       	rjmp	.+770    	; 0x1ed4 <vfprintf+0x3ae>
    1bd2:	23 2d       	mov	r18, r3
    1bd4:	20 64       	ori	r18, 0x40	; 64
    1bd6:	32 2e       	mov	r3, r18
    1bd8:	19 c0       	rjmp	.+50     	; 0x1c0c <vfprintf+0xe6>
    1bda:	36 fe       	sbrs	r3, 6
    1bdc:	06 c0       	rjmp	.+12     	; 0x1bea <vfprintf+0xc4>
    1bde:	8a e0       	ldi	r24, 0x0A	; 10
    1be0:	98 9e       	mul	r9, r24
    1be2:	20 0d       	add	r18, r0
    1be4:	11 24       	eor	r1, r1
    1be6:	92 2e       	mov	r9, r18
    1be8:	11 c0       	rjmp	.+34     	; 0x1c0c <vfprintf+0xe6>
    1bea:	ea e0       	ldi	r30, 0x0A	; 10
    1bec:	2e 9e       	mul	r2, r30
    1bee:	20 0d       	add	r18, r0
    1bf0:	11 24       	eor	r1, r1
    1bf2:	22 2e       	mov	r2, r18
    1bf4:	f3 2d       	mov	r31, r3
    1bf6:	f0 62       	ori	r31, 0x20	; 32
    1bf8:	3f 2e       	mov	r3, r31
    1bfa:	08 c0       	rjmp	.+16     	; 0x1c0c <vfprintf+0xe6>
    1bfc:	8c 36       	cpi	r24, 0x6C	; 108
    1bfe:	21 f4       	brne	.+8      	; 0x1c08 <vfprintf+0xe2>
    1c00:	83 2d       	mov	r24, r3
    1c02:	80 68       	ori	r24, 0x80	; 128
    1c04:	38 2e       	mov	r3, r24
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <vfprintf+0xe6>
    1c08:	88 36       	cpi	r24, 0x68	; 104
    1c0a:	41 f4       	brne	.+16     	; 0x1c1c <vfprintf+0xf6>
    1c0c:	f7 01       	movw	r30, r14
    1c0e:	93 fd       	sbrc	r25, 3
    1c10:	85 91       	lpm	r24, Z+
    1c12:	93 ff       	sbrs	r25, 3
    1c14:	81 91       	ld	r24, Z+
    1c16:	7f 01       	movw	r14, r30
    1c18:	81 11       	cpse	r24, r1
    1c1a:	b3 cf       	rjmp	.-154    	; 0x1b82 <vfprintf+0x5c>
    1c1c:	98 2f       	mov	r25, r24
    1c1e:	9f 7d       	andi	r25, 0xDF	; 223
    1c20:	95 54       	subi	r25, 0x45	; 69
    1c22:	93 30       	cpi	r25, 0x03	; 3
    1c24:	28 f4       	brcc	.+10     	; 0x1c30 <vfprintf+0x10a>
    1c26:	0c 5f       	subi	r16, 0xFC	; 252
    1c28:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2a:	9f e3       	ldi	r25, 0x3F	; 63
    1c2c:	99 83       	std	Y+1, r25	; 0x01
    1c2e:	0d c0       	rjmp	.+26     	; 0x1c4a <vfprintf+0x124>
    1c30:	83 36       	cpi	r24, 0x63	; 99
    1c32:	31 f0       	breq	.+12     	; 0x1c40 <vfprintf+0x11a>
    1c34:	83 37       	cpi	r24, 0x73	; 115
    1c36:	71 f0       	breq	.+28     	; 0x1c54 <vfprintf+0x12e>
    1c38:	83 35       	cpi	r24, 0x53	; 83
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <vfprintf+0x118>
    1c3c:	59 c0       	rjmp	.+178    	; 0x1cf0 <vfprintf+0x1ca>
    1c3e:	21 c0       	rjmp	.+66     	; 0x1c82 <vfprintf+0x15c>
    1c40:	f8 01       	movw	r30, r16
    1c42:	80 81       	ld	r24, Z
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	0e 5f       	subi	r16, 0xFE	; 254
    1c48:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4a:	88 24       	eor	r8, r8
    1c4c:	83 94       	inc	r8
    1c4e:	91 2c       	mov	r9, r1
    1c50:	53 01       	movw	r10, r6
    1c52:	13 c0       	rjmp	.+38     	; 0x1c7a <vfprintf+0x154>
    1c54:	28 01       	movw	r4, r16
    1c56:	f2 e0       	ldi	r31, 0x02	; 2
    1c58:	4f 0e       	add	r4, r31
    1c5a:	51 1c       	adc	r5, r1
    1c5c:	f8 01       	movw	r30, r16
    1c5e:	a0 80       	ld	r10, Z
    1c60:	b1 80       	ldd	r11, Z+1	; 0x01
    1c62:	36 fe       	sbrs	r3, 6
    1c64:	03 c0       	rjmp	.+6      	; 0x1c6c <vfprintf+0x146>
    1c66:	69 2d       	mov	r22, r9
    1c68:	70 e0       	ldi	r23, 0x00	; 0
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <vfprintf+0x14a>
    1c6c:	6f ef       	ldi	r22, 0xFF	; 255
    1c6e:	7f ef       	ldi	r23, 0xFF	; 255
    1c70:	c5 01       	movw	r24, r10
    1c72:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <strnlen>
    1c76:	4c 01       	movw	r8, r24
    1c78:	82 01       	movw	r16, r4
    1c7a:	f3 2d       	mov	r31, r3
    1c7c:	ff 77       	andi	r31, 0x7F	; 127
    1c7e:	3f 2e       	mov	r3, r31
    1c80:	16 c0       	rjmp	.+44     	; 0x1cae <vfprintf+0x188>
    1c82:	28 01       	movw	r4, r16
    1c84:	22 e0       	ldi	r18, 0x02	; 2
    1c86:	42 0e       	add	r4, r18
    1c88:	51 1c       	adc	r5, r1
    1c8a:	f8 01       	movw	r30, r16
    1c8c:	a0 80       	ld	r10, Z
    1c8e:	b1 80       	ldd	r11, Z+1	; 0x01
    1c90:	36 fe       	sbrs	r3, 6
    1c92:	03 c0       	rjmp	.+6      	; 0x1c9a <vfprintf+0x174>
    1c94:	69 2d       	mov	r22, r9
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <vfprintf+0x178>
    1c9a:	6f ef       	ldi	r22, 0xFF	; 255
    1c9c:	7f ef       	ldi	r23, 0xFF	; 255
    1c9e:	c5 01       	movw	r24, r10
    1ca0:	0e 94 77 0f 	call	0x1eee	; 0x1eee <strnlen_P>
    1ca4:	4c 01       	movw	r8, r24
    1ca6:	f3 2d       	mov	r31, r3
    1ca8:	f0 68       	ori	r31, 0x80	; 128
    1caa:	3f 2e       	mov	r3, r31
    1cac:	82 01       	movw	r16, r4
    1cae:	33 fc       	sbrc	r3, 3
    1cb0:	1b c0       	rjmp	.+54     	; 0x1ce8 <vfprintf+0x1c2>
    1cb2:	82 2d       	mov	r24, r2
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	88 16       	cp	r8, r24
    1cb8:	99 06       	cpc	r9, r25
    1cba:	b0 f4       	brcc	.+44     	; 0x1ce8 <vfprintf+0x1c2>
    1cbc:	b6 01       	movw	r22, r12
    1cbe:	80 e2       	ldi	r24, 0x20	; 32
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1cc6:	2a 94       	dec	r2
    1cc8:	f4 cf       	rjmp	.-24     	; 0x1cb2 <vfprintf+0x18c>
    1cca:	f5 01       	movw	r30, r10
    1ccc:	37 fc       	sbrc	r3, 7
    1cce:	85 91       	lpm	r24, Z+
    1cd0:	37 fe       	sbrs	r3, 7
    1cd2:	81 91       	ld	r24, Z+
    1cd4:	5f 01       	movw	r10, r30
    1cd6:	b6 01       	movw	r22, r12
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1cde:	21 10       	cpse	r2, r1
    1ce0:	2a 94       	dec	r2
    1ce2:	21 e0       	ldi	r18, 0x01	; 1
    1ce4:	82 1a       	sub	r8, r18
    1ce6:	91 08       	sbc	r9, r1
    1ce8:	81 14       	cp	r8, r1
    1cea:	91 04       	cpc	r9, r1
    1cec:	71 f7       	brne	.-36     	; 0x1cca <vfprintf+0x1a4>
    1cee:	e8 c0       	rjmp	.+464    	; 0x1ec0 <vfprintf+0x39a>
    1cf0:	84 36       	cpi	r24, 0x64	; 100
    1cf2:	11 f0       	breq	.+4      	; 0x1cf8 <vfprintf+0x1d2>
    1cf4:	89 36       	cpi	r24, 0x69	; 105
    1cf6:	41 f5       	brne	.+80     	; 0x1d48 <vfprintf+0x222>
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	37 fe       	sbrs	r3, 7
    1cfc:	07 c0       	rjmp	.+14     	; 0x1d0c <vfprintf+0x1e6>
    1cfe:	60 81       	ld	r22, Z
    1d00:	71 81       	ldd	r23, Z+1	; 0x01
    1d02:	82 81       	ldd	r24, Z+2	; 0x02
    1d04:	93 81       	ldd	r25, Z+3	; 0x03
    1d06:	0c 5f       	subi	r16, 0xFC	; 252
    1d08:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0a:	08 c0       	rjmp	.+16     	; 0x1d1c <vfprintf+0x1f6>
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	07 2e       	mov	r0, r23
    1d12:	00 0c       	add	r0, r0
    1d14:	88 0b       	sbc	r24, r24
    1d16:	99 0b       	sbc	r25, r25
    1d18:	0e 5f       	subi	r16, 0xFE	; 254
    1d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1c:	f3 2d       	mov	r31, r3
    1d1e:	ff 76       	andi	r31, 0x6F	; 111
    1d20:	3f 2e       	mov	r3, r31
    1d22:	97 ff       	sbrs	r25, 7
    1d24:	09 c0       	rjmp	.+18     	; 0x1d38 <vfprintf+0x212>
    1d26:	90 95       	com	r25
    1d28:	80 95       	com	r24
    1d2a:	70 95       	com	r23
    1d2c:	61 95       	neg	r22
    1d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d30:	8f 4f       	sbci	r24, 0xFF	; 255
    1d32:	9f 4f       	sbci	r25, 0xFF	; 255
    1d34:	f0 68       	ori	r31, 0x80	; 128
    1d36:	3f 2e       	mov	r3, r31
    1d38:	2a e0       	ldi	r18, 0x0A	; 10
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	a3 01       	movw	r20, r6
    1d3e:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__ultoa_invert>
    1d42:	88 2e       	mov	r8, r24
    1d44:	86 18       	sub	r8, r6
    1d46:	45 c0       	rjmp	.+138    	; 0x1dd2 <vfprintf+0x2ac>
    1d48:	85 37       	cpi	r24, 0x75	; 117
    1d4a:	31 f4       	brne	.+12     	; 0x1d58 <vfprintf+0x232>
    1d4c:	23 2d       	mov	r18, r3
    1d4e:	2f 7e       	andi	r18, 0xEF	; 239
    1d50:	b2 2e       	mov	r11, r18
    1d52:	2a e0       	ldi	r18, 0x0A	; 10
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	25 c0       	rjmp	.+74     	; 0x1da2 <vfprintf+0x27c>
    1d58:	93 2d       	mov	r25, r3
    1d5a:	99 7f       	andi	r25, 0xF9	; 249
    1d5c:	b9 2e       	mov	r11, r25
    1d5e:	8f 36       	cpi	r24, 0x6F	; 111
    1d60:	c1 f0       	breq	.+48     	; 0x1d92 <vfprintf+0x26c>
    1d62:	18 f4       	brcc	.+6      	; 0x1d6a <vfprintf+0x244>
    1d64:	88 35       	cpi	r24, 0x58	; 88
    1d66:	79 f0       	breq	.+30     	; 0x1d86 <vfprintf+0x260>
    1d68:	b5 c0       	rjmp	.+362    	; 0x1ed4 <vfprintf+0x3ae>
    1d6a:	80 37       	cpi	r24, 0x70	; 112
    1d6c:	19 f0       	breq	.+6      	; 0x1d74 <vfprintf+0x24e>
    1d6e:	88 37       	cpi	r24, 0x78	; 120
    1d70:	21 f0       	breq	.+8      	; 0x1d7a <vfprintf+0x254>
    1d72:	b0 c0       	rjmp	.+352    	; 0x1ed4 <vfprintf+0x3ae>
    1d74:	e9 2f       	mov	r30, r25
    1d76:	e0 61       	ori	r30, 0x10	; 16
    1d78:	be 2e       	mov	r11, r30
    1d7a:	b4 fe       	sbrs	r11, 4
    1d7c:	0d c0       	rjmp	.+26     	; 0x1d98 <vfprintf+0x272>
    1d7e:	fb 2d       	mov	r31, r11
    1d80:	f4 60       	ori	r31, 0x04	; 4
    1d82:	bf 2e       	mov	r11, r31
    1d84:	09 c0       	rjmp	.+18     	; 0x1d98 <vfprintf+0x272>
    1d86:	34 fe       	sbrs	r3, 4
    1d88:	0a c0       	rjmp	.+20     	; 0x1d9e <vfprintf+0x278>
    1d8a:	29 2f       	mov	r18, r25
    1d8c:	26 60       	ori	r18, 0x06	; 6
    1d8e:	b2 2e       	mov	r11, r18
    1d90:	06 c0       	rjmp	.+12     	; 0x1d9e <vfprintf+0x278>
    1d92:	28 e0       	ldi	r18, 0x08	; 8
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <vfprintf+0x27c>
    1d98:	20 e1       	ldi	r18, 0x10	; 16
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <vfprintf+0x27c>
    1d9e:	20 e1       	ldi	r18, 0x10	; 16
    1da0:	32 e0       	ldi	r19, 0x02	; 2
    1da2:	f8 01       	movw	r30, r16
    1da4:	b7 fe       	sbrs	r11, 7
    1da6:	07 c0       	rjmp	.+14     	; 0x1db6 <vfprintf+0x290>
    1da8:	60 81       	ld	r22, Z
    1daa:	71 81       	ldd	r23, Z+1	; 0x01
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	93 81       	ldd	r25, Z+3	; 0x03
    1db0:	0c 5f       	subi	r16, 0xFC	; 252
    1db2:	1f 4f       	sbci	r17, 0xFF	; 255
    1db4:	06 c0       	rjmp	.+12     	; 0x1dc2 <vfprintf+0x29c>
    1db6:	60 81       	ld	r22, Z
    1db8:	71 81       	ldd	r23, Z+1	; 0x01
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	0e 5f       	subi	r16, 0xFE	; 254
    1dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc2:	a3 01       	movw	r20, r6
    1dc4:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__ultoa_invert>
    1dc8:	88 2e       	mov	r8, r24
    1dca:	86 18       	sub	r8, r6
    1dcc:	fb 2d       	mov	r31, r11
    1dce:	ff 77       	andi	r31, 0x7F	; 127
    1dd0:	3f 2e       	mov	r3, r31
    1dd2:	36 fe       	sbrs	r3, 6
    1dd4:	0d c0       	rjmp	.+26     	; 0x1df0 <vfprintf+0x2ca>
    1dd6:	23 2d       	mov	r18, r3
    1dd8:	2e 7f       	andi	r18, 0xFE	; 254
    1dda:	a2 2e       	mov	r10, r18
    1ddc:	89 14       	cp	r8, r9
    1dde:	58 f4       	brcc	.+22     	; 0x1df6 <vfprintf+0x2d0>
    1de0:	34 fe       	sbrs	r3, 4
    1de2:	0b c0       	rjmp	.+22     	; 0x1dfa <vfprintf+0x2d4>
    1de4:	32 fc       	sbrc	r3, 2
    1de6:	09 c0       	rjmp	.+18     	; 0x1dfa <vfprintf+0x2d4>
    1de8:	83 2d       	mov	r24, r3
    1dea:	8e 7e       	andi	r24, 0xEE	; 238
    1dec:	a8 2e       	mov	r10, r24
    1dee:	05 c0       	rjmp	.+10     	; 0x1dfa <vfprintf+0x2d4>
    1df0:	b8 2c       	mov	r11, r8
    1df2:	a3 2c       	mov	r10, r3
    1df4:	03 c0       	rjmp	.+6      	; 0x1dfc <vfprintf+0x2d6>
    1df6:	b8 2c       	mov	r11, r8
    1df8:	01 c0       	rjmp	.+2      	; 0x1dfc <vfprintf+0x2d6>
    1dfa:	b9 2c       	mov	r11, r9
    1dfc:	a4 fe       	sbrs	r10, 4
    1dfe:	0f c0       	rjmp	.+30     	; 0x1e1e <vfprintf+0x2f8>
    1e00:	fe 01       	movw	r30, r28
    1e02:	e8 0d       	add	r30, r8
    1e04:	f1 1d       	adc	r31, r1
    1e06:	80 81       	ld	r24, Z
    1e08:	80 33       	cpi	r24, 0x30	; 48
    1e0a:	21 f4       	brne	.+8      	; 0x1e14 <vfprintf+0x2ee>
    1e0c:	9a 2d       	mov	r25, r10
    1e0e:	99 7e       	andi	r25, 0xE9	; 233
    1e10:	a9 2e       	mov	r10, r25
    1e12:	09 c0       	rjmp	.+18     	; 0x1e26 <vfprintf+0x300>
    1e14:	a2 fe       	sbrs	r10, 2
    1e16:	06 c0       	rjmp	.+12     	; 0x1e24 <vfprintf+0x2fe>
    1e18:	b3 94       	inc	r11
    1e1a:	b3 94       	inc	r11
    1e1c:	04 c0       	rjmp	.+8      	; 0x1e26 <vfprintf+0x300>
    1e1e:	8a 2d       	mov	r24, r10
    1e20:	86 78       	andi	r24, 0x86	; 134
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <vfprintf+0x300>
    1e24:	b3 94       	inc	r11
    1e26:	a3 fc       	sbrc	r10, 3
    1e28:	11 c0       	rjmp	.+34     	; 0x1e4c <vfprintf+0x326>
    1e2a:	a0 fe       	sbrs	r10, 0
    1e2c:	06 c0       	rjmp	.+12     	; 0x1e3a <vfprintf+0x314>
    1e2e:	b2 14       	cp	r11, r2
    1e30:	88 f4       	brcc	.+34     	; 0x1e54 <vfprintf+0x32e>
    1e32:	28 0c       	add	r2, r8
    1e34:	92 2c       	mov	r9, r2
    1e36:	9b 18       	sub	r9, r11
    1e38:	0e c0       	rjmp	.+28     	; 0x1e56 <vfprintf+0x330>
    1e3a:	b2 14       	cp	r11, r2
    1e3c:	60 f4       	brcc	.+24     	; 0x1e56 <vfprintf+0x330>
    1e3e:	b6 01       	movw	r22, r12
    1e40:	80 e2       	ldi	r24, 0x20	; 32
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1e48:	b3 94       	inc	r11
    1e4a:	f7 cf       	rjmp	.-18     	; 0x1e3a <vfprintf+0x314>
    1e4c:	b2 14       	cp	r11, r2
    1e4e:	18 f4       	brcc	.+6      	; 0x1e56 <vfprintf+0x330>
    1e50:	2b 18       	sub	r2, r11
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <vfprintf+0x332>
    1e54:	98 2c       	mov	r9, r8
    1e56:	21 2c       	mov	r2, r1
    1e58:	a4 fe       	sbrs	r10, 4
    1e5a:	10 c0       	rjmp	.+32     	; 0x1e7c <vfprintf+0x356>
    1e5c:	b6 01       	movw	r22, r12
    1e5e:	80 e3       	ldi	r24, 0x30	; 48
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1e66:	a2 fe       	sbrs	r10, 2
    1e68:	17 c0       	rjmp	.+46     	; 0x1e98 <vfprintf+0x372>
    1e6a:	a1 fc       	sbrc	r10, 1
    1e6c:	03 c0       	rjmp	.+6      	; 0x1e74 <vfprintf+0x34e>
    1e6e:	88 e7       	ldi	r24, 0x78	; 120
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <vfprintf+0x352>
    1e74:	88 e5       	ldi	r24, 0x58	; 88
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	b6 01       	movw	r22, r12
    1e7a:	0c c0       	rjmp	.+24     	; 0x1e94 <vfprintf+0x36e>
    1e7c:	8a 2d       	mov	r24, r10
    1e7e:	86 78       	andi	r24, 0x86	; 134
    1e80:	59 f0       	breq	.+22     	; 0x1e98 <vfprintf+0x372>
    1e82:	a1 fe       	sbrs	r10, 1
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <vfprintf+0x364>
    1e86:	8b e2       	ldi	r24, 0x2B	; 43
    1e88:	01 c0       	rjmp	.+2      	; 0x1e8c <vfprintf+0x366>
    1e8a:	80 e2       	ldi	r24, 0x20	; 32
    1e8c:	a7 fc       	sbrc	r10, 7
    1e8e:	8d e2       	ldi	r24, 0x2D	; 45
    1e90:	b6 01       	movw	r22, r12
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1e98:	89 14       	cp	r8, r9
    1e9a:	38 f4       	brcc	.+14     	; 0x1eaa <vfprintf+0x384>
    1e9c:	b6 01       	movw	r22, r12
    1e9e:	80 e3       	ldi	r24, 0x30	; 48
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1ea6:	9a 94       	dec	r9
    1ea8:	f7 cf       	rjmp	.-18     	; 0x1e98 <vfprintf+0x372>
    1eaa:	8a 94       	dec	r8
    1eac:	f3 01       	movw	r30, r6
    1eae:	e8 0d       	add	r30, r8
    1eb0:	f1 1d       	adc	r31, r1
    1eb2:	80 81       	ld	r24, Z
    1eb4:	b6 01       	movw	r22, r12
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1ebc:	81 10       	cpse	r8, r1
    1ebe:	f5 cf       	rjmp	.-22     	; 0x1eaa <vfprintf+0x384>
    1ec0:	22 20       	and	r2, r2
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <vfprintf+0x3a0>
    1ec4:	42 ce       	rjmp	.-892    	; 0x1b4a <vfprintf+0x24>
    1ec6:	b6 01       	movw	r22, r12
    1ec8:	80 e2       	ldi	r24, 0x20	; 32
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1ed0:	2a 94       	dec	r2
    1ed2:	f6 cf       	rjmp	.-20     	; 0x1ec0 <vfprintf+0x39a>
    1ed4:	f6 01       	movw	r30, r12
    1ed6:	86 81       	ldd	r24, Z+6	; 0x06
    1ed8:	97 81       	ldd	r25, Z+7	; 0x07
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <vfprintf+0x3ba>
    1edc:	8f ef       	ldi	r24, 0xFF	; 255
    1ede:	9f ef       	ldi	r25, 0xFF	; 255
    1ee0:	2b 96       	adiw	r28, 0x0b	; 11
    1ee2:	e2 e1       	ldi	r30, 0x12	; 18
    1ee4:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__epilogue_restores__>

00001ee8 <__ctype_isfalse>:
    1ee8:	99 27       	eor	r25, r25
    1eea:	88 27       	eor	r24, r24

00001eec <__ctype_istrue>:
    1eec:	08 95       	ret

00001eee <strnlen_P>:
    1eee:	fc 01       	movw	r30, r24
    1ef0:	05 90       	lpm	r0, Z+
    1ef2:	61 50       	subi	r22, 0x01	; 1
    1ef4:	70 40       	sbci	r23, 0x00	; 0
    1ef6:	01 10       	cpse	r0, r1
    1ef8:	d8 f7       	brcc	.-10     	; 0x1ef0 <strnlen_P+0x2>
    1efa:	80 95       	com	r24
    1efc:	90 95       	com	r25
    1efe:	8e 0f       	add	r24, r30
    1f00:	9f 1f       	adc	r25, r31
    1f02:	08 95       	ret

00001f04 <strnlen>:
    1f04:	fc 01       	movw	r30, r24
    1f06:	61 50       	subi	r22, 0x01	; 1
    1f08:	70 40       	sbci	r23, 0x00	; 0
    1f0a:	01 90       	ld	r0, Z+
    1f0c:	01 10       	cpse	r0, r1
    1f0e:	d8 f7       	brcc	.-10     	; 0x1f06 <strnlen+0x2>
    1f10:	80 95       	com	r24
    1f12:	90 95       	com	r25
    1f14:	8e 0f       	add	r24, r30
    1f16:	9f 1f       	adc	r25, r31
    1f18:	08 95       	ret

00001f1a <fputc>:
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	fb 01       	movw	r30, r22
    1f24:	23 81       	ldd	r18, Z+3	; 0x03
    1f26:	21 fd       	sbrc	r18, 1
    1f28:	03 c0       	rjmp	.+6      	; 0x1f30 <fputc+0x16>
    1f2a:	8f ef       	ldi	r24, 0xFF	; 255
    1f2c:	9f ef       	ldi	r25, 0xFF	; 255
    1f2e:	2c c0       	rjmp	.+88     	; 0x1f88 <fputc+0x6e>
    1f30:	22 ff       	sbrs	r18, 2
    1f32:	16 c0       	rjmp	.+44     	; 0x1f60 <fputc+0x46>
    1f34:	46 81       	ldd	r20, Z+6	; 0x06
    1f36:	57 81       	ldd	r21, Z+7	; 0x07
    1f38:	24 81       	ldd	r18, Z+4	; 0x04
    1f3a:	35 81       	ldd	r19, Z+5	; 0x05
    1f3c:	42 17       	cp	r20, r18
    1f3e:	53 07       	cpc	r21, r19
    1f40:	44 f4       	brge	.+16     	; 0x1f52 <fputc+0x38>
    1f42:	a0 81       	ld	r26, Z
    1f44:	b1 81       	ldd	r27, Z+1	; 0x01
    1f46:	9d 01       	movw	r18, r26
    1f48:	2f 5f       	subi	r18, 0xFF	; 255
    1f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4c:	20 83       	st	Z, r18
    1f4e:	31 83       	std	Z+1, r19	; 0x01
    1f50:	8c 93       	st	X, r24
    1f52:	26 81       	ldd	r18, Z+6	; 0x06
    1f54:	37 81       	ldd	r19, Z+7	; 0x07
    1f56:	2f 5f       	subi	r18, 0xFF	; 255
    1f58:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5a:	26 83       	std	Z+6, r18	; 0x06
    1f5c:	37 83       	std	Z+7, r19	; 0x07
    1f5e:	14 c0       	rjmp	.+40     	; 0x1f88 <fputc+0x6e>
    1f60:	8b 01       	movw	r16, r22
    1f62:	ec 01       	movw	r28, r24
    1f64:	fb 01       	movw	r30, r22
    1f66:	00 84       	ldd	r0, Z+8	; 0x08
    1f68:	f1 85       	ldd	r31, Z+9	; 0x09
    1f6a:	e0 2d       	mov	r30, r0
    1f6c:	09 95       	icall
    1f6e:	89 2b       	or	r24, r25
    1f70:	e1 f6       	brne	.-72     	; 0x1f2a <fputc+0x10>
    1f72:	d8 01       	movw	r26, r16
    1f74:	16 96       	adiw	r26, 0x06	; 6
    1f76:	8d 91       	ld	r24, X+
    1f78:	9c 91       	ld	r25, X
    1f7a:	17 97       	sbiw	r26, 0x07	; 7
    1f7c:	01 96       	adiw	r24, 0x01	; 1
    1f7e:	16 96       	adiw	r26, 0x06	; 6
    1f80:	8d 93       	st	X+, r24
    1f82:	9c 93       	st	X, r25
    1f84:	17 97       	sbiw	r26, 0x07	; 7
    1f86:	ce 01       	movw	r24, r28
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	1f 91       	pop	r17
    1f8e:	0f 91       	pop	r16
    1f90:	08 95       	ret

00001f92 <__ultoa_invert>:
    1f92:	fa 01       	movw	r30, r20
    1f94:	aa 27       	eor	r26, r26
    1f96:	28 30       	cpi	r18, 0x08	; 8
    1f98:	51 f1       	breq	.+84     	; 0x1fee <__ultoa_invert+0x5c>
    1f9a:	20 31       	cpi	r18, 0x10	; 16
    1f9c:	81 f1       	breq	.+96     	; 0x1ffe <__ultoa_invert+0x6c>
    1f9e:	e8 94       	clt
    1fa0:	6f 93       	push	r22
    1fa2:	6e 7f       	andi	r22, 0xFE	; 254
    1fa4:	6e 5f       	subi	r22, 0xFE	; 254
    1fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa8:	8f 4f       	sbci	r24, 0xFF	; 255
    1faa:	9f 4f       	sbci	r25, 0xFF	; 255
    1fac:	af 4f       	sbci	r26, 0xFF	; 255
    1fae:	b1 e0       	ldi	r27, 0x01	; 1
    1fb0:	3e d0       	rcall	.+124    	; 0x202e <__DATA_REGION_LENGTH__+0x2e>
    1fb2:	b4 e0       	ldi	r27, 0x04	; 4
    1fb4:	3c d0       	rcall	.+120    	; 0x202e <__DATA_REGION_LENGTH__+0x2e>
    1fb6:	67 0f       	add	r22, r23
    1fb8:	78 1f       	adc	r23, r24
    1fba:	89 1f       	adc	r24, r25
    1fbc:	9a 1f       	adc	r25, r26
    1fbe:	a1 1d       	adc	r26, r1
    1fc0:	68 0f       	add	r22, r24
    1fc2:	79 1f       	adc	r23, r25
    1fc4:	8a 1f       	adc	r24, r26
    1fc6:	91 1d       	adc	r25, r1
    1fc8:	a1 1d       	adc	r26, r1
    1fca:	6a 0f       	add	r22, r26
    1fcc:	71 1d       	adc	r23, r1
    1fce:	81 1d       	adc	r24, r1
    1fd0:	91 1d       	adc	r25, r1
    1fd2:	a1 1d       	adc	r26, r1
    1fd4:	20 d0       	rcall	.+64     	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <__ultoa_invert+0x48>
    1fd8:	68 94       	set
    1fda:	3f 91       	pop	r19
    1fdc:	2a e0       	ldi	r18, 0x0A	; 10
    1fde:	26 9f       	mul	r18, r22
    1fe0:	11 24       	eor	r1, r1
    1fe2:	30 19       	sub	r19, r0
    1fe4:	30 5d       	subi	r19, 0xD0	; 208
    1fe6:	31 93       	st	Z+, r19
    1fe8:	de f6       	brtc	.-74     	; 0x1fa0 <__ultoa_invert+0xe>
    1fea:	cf 01       	movw	r24, r30
    1fec:	08 95       	ret
    1fee:	46 2f       	mov	r20, r22
    1ff0:	47 70       	andi	r20, 0x07	; 7
    1ff2:	40 5d       	subi	r20, 0xD0	; 208
    1ff4:	41 93       	st	Z+, r20
    1ff6:	b3 e0       	ldi	r27, 0x03	; 3
    1ff8:	0f d0       	rcall	.+30     	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
    1ffa:	c9 f7       	brne	.-14     	; 0x1fee <__ultoa_invert+0x5c>
    1ffc:	f6 cf       	rjmp	.-20     	; 0x1fea <__ultoa_invert+0x58>
    1ffe:	46 2f       	mov	r20, r22
    2000:	4f 70       	andi	r20, 0x0F	; 15
    2002:	40 5d       	subi	r20, 0xD0	; 208
    2004:	4a 33       	cpi	r20, 0x3A	; 58
    2006:	18 f0       	brcs	.+6      	; 0x200e <__DATA_REGION_LENGTH__+0xe>
    2008:	49 5d       	subi	r20, 0xD9	; 217
    200a:	31 fd       	sbrc	r19, 1
    200c:	40 52       	subi	r20, 0x20	; 32
    200e:	41 93       	st	Z+, r20
    2010:	02 d0       	rcall	.+4      	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
    2012:	a9 f7       	brne	.-22     	; 0x1ffe <__ultoa_invert+0x6c>
    2014:	ea cf       	rjmp	.-44     	; 0x1fea <__ultoa_invert+0x58>
    2016:	b4 e0       	ldi	r27, 0x04	; 4
    2018:	a6 95       	lsr	r26
    201a:	97 95       	ror	r25
    201c:	87 95       	ror	r24
    201e:	77 95       	ror	r23
    2020:	67 95       	ror	r22
    2022:	ba 95       	dec	r27
    2024:	c9 f7       	brne	.-14     	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	61 05       	cpc	r22, r1
    202a:	71 05       	cpc	r23, r1
    202c:	08 95       	ret
    202e:	9b 01       	movw	r18, r22
    2030:	ac 01       	movw	r20, r24
    2032:	0a 2e       	mov	r0, r26
    2034:	06 94       	lsr	r0
    2036:	57 95       	ror	r21
    2038:	47 95       	ror	r20
    203a:	37 95       	ror	r19
    203c:	27 95       	ror	r18
    203e:	ba 95       	dec	r27
    2040:	c9 f7       	brne	.-14     	; 0x2034 <__DATA_REGION_LENGTH__+0x34>
    2042:	62 0f       	add	r22, r18
    2044:	73 1f       	adc	r23, r19
    2046:	84 1f       	adc	r24, r20
    2048:	95 1f       	adc	r25, r21
    204a:	a0 1d       	adc	r26, r0
    204c:	08 95       	ret

0000204e <ccp_write_io>:
    204e:	dc 01       	movw	r26, r24
    2050:	28 ed       	ldi	r18, 0xD8	; 216
    2052:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f0034>
    2056:	6c 93       	st	X, r22
    2058:	08 95       	ret

0000205a <__mulsi3>:
    205a:	db 01       	movw	r26, r22
    205c:	8f 93       	push	r24
    205e:	9f 93       	push	r25
    2060:	0e 94 3d 10 	call	0x207a	; 0x207a <__muluhisi3>
    2064:	bf 91       	pop	r27
    2066:	af 91       	pop	r26
    2068:	a2 9f       	mul	r26, r18
    206a:	80 0d       	add	r24, r0
    206c:	91 1d       	adc	r25, r1
    206e:	a3 9f       	mul	r26, r19
    2070:	90 0d       	add	r25, r0
    2072:	b2 9f       	mul	r27, r18
    2074:	90 0d       	add	r25, r0
    2076:	11 24       	eor	r1, r1
    2078:	08 95       	ret

0000207a <__muluhisi3>:
    207a:	0e 94 80 0b 	call	0x1700	; 0x1700 <__umulhisi3>
    207e:	a5 9f       	mul	r26, r21
    2080:	90 0d       	add	r25, r0
    2082:	b4 9f       	mul	r27, r20
    2084:	90 0d       	add	r25, r0
    2086:	a4 9f       	mul	r26, r20
    2088:	80 0d       	add	r24, r0
    208a:	91 1d       	adc	r25, r1
    208c:	11 24       	eor	r1, r1
    208e:	08 95       	ret

00002090 <__prologue_saves__>:
    2090:	2f 92       	push	r2
    2092:	3f 92       	push	r3
    2094:	4f 92       	push	r4
    2096:	5f 92       	push	r5
    2098:	6f 92       	push	r6
    209a:	7f 92       	push	r7
    209c:	8f 92       	push	r8
    209e:	9f 92       	push	r9
    20a0:	af 92       	push	r10
    20a2:	bf 92       	push	r11
    20a4:	cf 92       	push	r12
    20a6:	df 92       	push	r13
    20a8:	ef 92       	push	r14
    20aa:	ff 92       	push	r15
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	ca 1b       	sub	r28, r26
    20ba:	db 0b       	sbc	r29, r27
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	09 94       	ijmp

000020c2 <__epilogue_restores__>:
    20c2:	2a 88       	ldd	r2, Y+18	; 0x12
    20c4:	39 88       	ldd	r3, Y+17	; 0x11
    20c6:	48 88       	ldd	r4, Y+16	; 0x10
    20c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    20ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    20cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    20ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    20d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    20d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    20d4:	b9 84       	ldd	r11, Y+9	; 0x09
    20d6:	c8 84       	ldd	r12, Y+8	; 0x08
    20d8:	df 80       	ldd	r13, Y+7	; 0x07
    20da:	ee 80       	ldd	r14, Y+6	; 0x06
    20dc:	fd 80       	ldd	r15, Y+5	; 0x05
    20de:	0c 81       	ldd	r16, Y+4	; 0x04
    20e0:	1b 81       	ldd	r17, Y+3	; 0x03
    20e2:	aa 81       	ldd	r26, Y+2	; 0x02
    20e4:	b9 81       	ldd	r27, Y+1	; 0x01
    20e6:	ce 0f       	add	r28, r30
    20e8:	d1 1d       	adc	r29, r1
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	ed 01       	movw	r28, r26
    20f0:	08 95       	ret

000020f2 <_exit>:
    20f2:	f8 94       	cli

000020f4 <__stop_program>:
    20f4:	ff cf       	rjmp	.-2      	; 0x20f4 <__stop_program>
