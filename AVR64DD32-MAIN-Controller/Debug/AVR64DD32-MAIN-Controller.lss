
AVR64DD32-MAIN-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000342  00806000  00000c34  00000cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00806342  00806342  0000100a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  000010a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f43  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e51  00000000  00000000  0000624b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001763  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000580  00000000  00000000  0000a800  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002334  00000000  00000000  0000ad80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001718  00000000  00000000  0000d0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000e7cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e7       	ldi	r29, 0x7F	; 127
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	13 e6       	ldi	r17, 0x63	; 99
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b0 e6       	ldi	r27, 0x60	; 96
  a2:	e4 e3       	ldi	r30, 0x34	; 52
  a4:	fc e0       	ldi	r31, 0x0C	; 12
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 34       	cpi	r26, 0x42	; 66
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	23 e6       	ldi	r18, 0x63	; 99
  b4:	a2 e4       	ldi	r26, 0x42	; 66
  b6:	b3 e6       	ldi	r27, 0x63	; 99
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 34       	cpi	r26, 0x46	; 70
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 23 01 	call	0x246	; 0x246 <main>
  c6:	0c 94 18 06 	jmp	0xc30	; 0xc30 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <ADC0_init>:
 * - Prescaler: Division by 4
 * - Resolution: 12-bit
 * - Enables the ADC.
 */
void ADC0_init() {
    ADC0.CTRLB = ADC_SAMPNUM_ACC128_gc; // 1 measurements
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f6 e0       	ldi	r31, 0x06	; 6
  d2:	87 e0       	ldi	r24, 0x07	; 7
  d4:	81 83       	std	Z+1, r24	; 0x01
    ADC0.CTRLC = ADC_PRESC_DIV4_gc; // 24Mhz / 16 ADC speed
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	82 83       	std	Z+2, r24	; 0x02
    ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_12BIT_gc; // 12-bit resolution
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <CLOCK_XOSCHF_clock_init>:
#include "Settings.h"

void CLOCK_XOSCHF_clock_init()
{
	/* Enable external (32 MHz) clock input */
	ccp_write_io((uint8_t *) &CLKCTRL.XOSCHFCTRLA, CLKCTRL_SELHF_EXTCLOCK_gc | CLKCTRL_FRQRANGE_24M_gc | CLKCTRL_ENABLE_bm);
  de:	6b e0       	ldi	r22, 0x0B	; 11
  e0:	80 e8       	ldi	r24, 0x80	; 128
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <ccp_write_io>

	/* Set the main clock to use external clock as source */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc);
  e8:	63 e0       	ldi	r22, 0x03	; 3
  ea:	80 e6       	ldi	r24, 0x60	; 96
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <ccp_write_io>

	/* Wait for system oscillator change to complete */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm)
  f2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
  f6:	80 fd       	sbrc	r24, 0
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <CLOCK_XOSCHF_clock_init+0x14>
	{};
	/* Configuration complete;*/
  fa:	08 95       	ret

000000fc <GPIO_init>:

#include "Settings.h"

void GPIO_init(){
    // Configure USART0 and USART1 pin routing
    PORTMUX.USARTROUTEA = PORTMUX_USART0_ALT1_gc | PORTMUX_USART1_ALT2_gc; // Set USART0 to alternative pins set 1, USART1 to alternative pins set 2
  fc:	e0 ee       	ldi	r30, 0xE0	; 224
  fe:	f5 e0       	ldi	r31, 0x05	; 5
 100:	81 e1       	ldi	r24, 0x11	; 17
 102:	82 83       	std	Z+2, r24	; 0x02
    PORTMUX.TWIROUTEA = PORTMUX_TWI0_DEFAULT_gc; // Set TWI0 to default pins
 104:	16 82       	std	Z+6, r1	; 0x06

    // Configure Port A (PA) for RX LED, I2C SDA, SCL, USART0 TX, TX LED and XDIR
    PORTA.DIRSET = PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // Set PA2, PA3, PA4, PA7 as output (RX LED, I2C SDA, SCL, USART0 TX, TX LED, XDIR)
 106:	e0 e0       	ldi	r30, 0x00	; 0
 108:	f4 e0       	ldi	r31, 0x04	; 4
 10a:	8c ed       	ldi	r24, 0xDC	; 220
 10c:	81 83       	std	Z+1, r24	; 0x01
    PORTA.DIRCLR = PIN1_bm | PIN5_bm; // Set  PA1 as Joystick button,  PA5 as input (USART0 RX)
 10e:	82 e2       	ldi	r24, 0x22	; 34
 110:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA1 (Joystick button)
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	81 8b       	std	Z+17, r24	; 0x11
    PORTA.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA4 (I2C SCL)
 116:	84 8b       	std	Z+20, r24	; 0x14
    PORTA.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA5 (USART0 RX)
 118:	85 8b       	std	Z+21, r24	; 0x15

    // Configure ADC pins for Joystick x and y axis
    PORTC.PIN1CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC1 (X axis)
 11a:	e0 e4       	ldi	r30, 0x40	; 64
 11c:	f4 e0       	ldi	r31, 0x04	; 4
 11e:	81 89       	ldd	r24, Z+17	; 0x11
 120:	88 7f       	andi	r24, 0xF8	; 248
 122:	81 8b       	std	Z+17, r24	; 0x11
    PORTC.PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC1
 124:	81 89       	ldd	r24, Z+17	; 0x11
 126:	84 60       	ori	r24, 0x04	; 4
 128:	81 8b       	std	Z+17, r24	; 0x11
    //PORTC.PIN1CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC1

    PORTC.PIN2CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC2 (Y axis)
 12a:	82 89       	ldd	r24, Z+18	; 0x12
 12c:	88 7f       	andi	r24, 0xF8	; 248
 12e:	82 8b       	std	Z+18, r24	; 0x12
    PORTC.PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC2
 130:	82 89       	ldd	r24, Z+18	; 0x12
 132:	84 60       	ori	r24, 0x04	; 4
 134:	82 8b       	std	Z+18, r24	; 0x12
    //PORTC.PIN2CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC2

	PORTC.DIRSET = PIN0_bm; //Set PC0 as RX LED
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	81 83       	std	Z+1, r24	; 0x01

    // Configure Port D (PD) for USART1 TX and RX
    PORTD.DIRSET = PIN5_bm | PIN6_bm; //Set PD5 as output (Clock change command) and PD6 as output (USART1 TX)
 13a:	e0 e6       	ldi	r30, 0x60	; 96
 13c:	f4 e0       	ldi	r31, 0x04	; 4
 13e:	80 e6       	ldi	r24, 0x60	; 96
 140:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = PIN5_bm; // Set PD5 high (No action, to be controlled by software)
 142:	80 e2       	ldi	r24, 0x20	; 32
 144:	85 83       	std	Z+5, r24	; 0x05
    PORTD.OUTCLR = PIN7_bm; // Set PD7 as input (USART1 RX)
 146:	80 e8       	ldi	r24, 0x80	; 128
 148:	86 83       	std	Z+6, r24	; 0x06
    //PORTD.PIN6CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PD6 (USART1 TX)
    //PORTD.PIN7CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PD7 (USART1 RX)

    // Configure Port F (PF) for Keypad row and column control
    PORTF.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm; // Set PF0, PF1, PF2, PF3 as output (Keypad rows)
 14a:	e0 ea       	ldi	r30, 0xA0	; 160
 14c:	f4 e0       	ldi	r31, 0x04	; 4
 14e:	8f e0       	ldi	r24, 0x0F	; 15
 150:	81 83       	std	Z+1, r24	; 0x01
    PORTF.OUTSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm; // Set Keypad rows to high
 152:	85 83       	std	Z+5, r24	; 0x05
 154:	08 95       	ret

00000156 <I2C_init>:
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal to release the bus
    return data;
}
 156:	e0 e0       	ldi	r30, 0x00	; 0
 158:	f9 e0       	ldi	r31, 0x09	; 9
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	80 83       	st	Z, r24
 15e:	85 e0       	ldi	r24, 0x05	; 5
 160:	86 83       	std	Z+6, r24	; 0x06
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	83 83       	std	Z+3, r24	; 0x03
 166:	85 83       	std	Z+5, r24	; 0x05
 168:	08 95       	ret

0000016a <TransmitAdd>:
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	86 2b       	or	r24, r22
 172:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7f0907>
 176:	40 e2       	ldi	r20, 0x20	; 32
 178:	51 ea       	ldi	r21, 0xA1	; 161
 17a:	67 e0       	ldi	r22, 0x07	; 7
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	09 c0       	rjmp	.+18     	; 0x192 <TransmitAdd+0x28>
 180:	41 50       	subi	r20, 0x01	; 1
 182:	51 09       	sbc	r21, r1
 184:	61 09       	sbc	r22, r1
 186:	71 09       	sbc	r23, r1
 188:	21 f4       	brne	.+8      	; 0x192 <TransmitAdd+0x28>
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
 190:	05 c0       	rjmp	.+10     	; 0x19c <TransmitAdd+0x32>
 192:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
 196:	80 7c       	andi	r24, 0xC0	; 192
 198:	99 f3       	breq	.-26     	; 0x180 <TransmitAdd+0x16>
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
 1a0:	94 fd       	sbrc	r25, 4
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
 1a8:	9c 70       	andi	r25, 0x0C	; 12
 1aa:	09 f0       	breq	.+2      	; 0x1ae <TransmitAdd+0x44>
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	88 23       	and	r24, r24
 1b0:	19 f0       	breq	.+6      	; 0x1b8 <TransmitAdd+0x4e>
 1b2:	93 e0       	ldi	r25, 0x03	; 3
 1b4:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
 1b8:	80 93 45 63 	sts	0x6345, r24	; 0x806345 <I2C>
 1bc:	08 95       	ret

000001be <TransmitByte>:
 1be:	28 2f       	mov	r18, r24
 1c0:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
 1c4:	94 fd       	sbrc	r25, 4
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <TransmitByte+0xe>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <TransmitByte+0x10>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
 1d2:	9c 70       	andi	r25, 0x0C	; 12
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <TransmitByte+0x1a>
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	88 23       	and	r24, r24
 1da:	19 f0       	breq	.+6      	; 0x1e2 <TransmitByte+0x24>
 1dc:	93 e0       	ldi	r25, 0x03	; 3
 1de:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
 1e2:	81 11       	cpse	r24, r1
 1e4:	14 c0       	rjmp	.+40     	; 0x20e <TransmitByte+0x50>
 1e6:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <__TEXT_REGION_LENGTH__+0x7f0908>
 1ea:	40 e2       	ldi	r20, 0x20	; 32
 1ec:	51 ea       	ldi	r21, 0xA1	; 161
 1ee:	67 e0       	ldi	r22, 0x07	; 7
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	09 c0       	rjmp	.+18     	; 0x206 <TransmitByte+0x48>
 1f4:	41 50       	subi	r20, 0x01	; 1
 1f6:	51 09       	sbc	r21, r1
 1f8:	61 09       	sbc	r22, r1
 1fa:	71 09       	sbc	r23, r1
 1fc:	21 f4       	brne	.+8      	; 0x206 <TransmitByte+0x48>
 1fe:	83 e0       	ldi	r24, 0x03	; 3
 200:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
 204:	04 c0       	rjmp	.+8      	; 0x20e <TransmitByte+0x50>
 206:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
 20a:	96 ff       	sbrs	r25, 6
 20c:	f3 cf       	rjmp	.-26     	; 0x1f4 <TransmitByte+0x36>
 20e:	80 93 45 63 	sts	0x6345, r24	; 0x806345 <I2C>
 212:	08 95       	ret

00000214 <WriteToReg>:
 * @param reg Register address to write to.
 * @param data Data to write to the register.
 * 
 * This function writes the data to a specific register of an I2C device.
 */
void WriteToReg(uint8_t addr, uint8_t reg, uint8_t data) {
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	c6 2f       	mov	r28, r22
 21a:	d4 2f       	mov	r29, r20
    if (!TransmitAdd(addr, WRITE)) { // Transmit address for write
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	0e 94 b5 00 	call	0x16a	; 0x16a <TransmitAdd>
 222:	81 11       	cpse	r24, r1
 224:	08 c0       	rjmp	.+16     	; 0x236 <WriteToReg+0x22>
        if (!TransmitByte(reg)) { // Write register address
 226:	8c 2f       	mov	r24, r28
 228:	0e 94 df 00 	call	0x1be	; 0x1be <TransmitByte>
 22c:	81 11       	cpse	r24, r1
 22e:	03 c0       	rjmp	.+6      	; 0x236 <WriteToReg+0x22>
            TransmitByte(data); // Write the data with STOP
 230:	8d 2f       	mov	r24, r29
 232:	0e 94 df 00 	call	0x1be	; 0x1be <TransmitByte>
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal
 236:	e0 e0       	ldi	r30, 0x00	; 0
 238:	f9 e0       	ldi	r31, 0x09	; 9
 23a:	84 81       	ldd	r24, Z+4	; 0x04
 23c:	83 60       	ori	r24, 0x03	; 3
 23e:	84 83       	std	Z+4, r24	; 0x04
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <main>:
#include "Settings.h"

int main(void)
{
    // Initialize system clock, GPIO, I2C, ADC, USART, and screen
    CLOCK_XOSCHF_clock_init();
 246:	0e 94 6f 00 	call	0xde	; 0xde <CLOCK_XOSCHF_clock_init>
    GPIO_init();
 24a:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_init>
    I2C_init();
 24e:	0e 94 ab 00 	call	0x156	; 0x156 <I2C_init>
    ADC0_init();
 252:	0e 94 67 00 	call	0xce	; 0xce <ADC0_init>
    USART0_init();
 256:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <USART0_init>
    USART1_init();
 25a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <USART1_init>
    screen_init();
 25e:	0e 94 cb 01 	call	0x396	; 0x396 <screen_init>
    screen_clear(); // Clear the screen
 262:	0e 94 12 02 	call	0x424	; 0x424 <screen_clear>
		/*ReadJoystickValues(); //Joystick test
		screen_write_formatted_text("%3d", 0, ALIGN_CENTER, Joystick.X_Axis);
		screen_write_formatted_text("%3d", 1, ALIGN_CENTER, Joystick.Y_Axis);
		screen_write_formatted_text("%d", 2, ALIGN_CENTER, Joystick.Button);*/

		RS485Receiver();
 266:	0e 94 60 01 	call	0x2c0	; 0x2c0 <RS485Receiver>
 26a:	fd cf       	rjmp	.-6      	; 0x266 <main+0x20>

0000026c <RS485_Led>:
 */ 
#include "Settings.h"

void RS485_Led(RS485_LED_t LED){

    switch (LED) {
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	51 f0       	breq	.+20     	; 0x284 <RS485_Led+0x18>
 270:	28 f0       	brcs	.+10     	; 0x27c <RS485_Led+0x10>
 272:	82 30       	cpi	r24, 0x02	; 2
 274:	59 f0       	breq	.+22     	; 0x28c <RS485_Led+0x20>
 276:	83 30       	cpi	r24, 0x03	; 3
 278:	69 f0       	breq	.+26     	; 0x294 <RS485_Led+0x28>
 27a:	08 95       	ret
	    case RX_LED_ON:
			PORTC.OUTSET = PIN0_bm;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f0445>
		break;
 282:	08 95       	ret
	    case RX_LED_OFF:
			PORTC.OUTCLR = PIN0_bm;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f0446>
		break;
 28a:	08 95       	ret
	    case TX_LED_ON:
			PORTA.OUTSET = PIN6_bm;
 28c:	80 e4       	ldi	r24, 0x40	; 64
 28e:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f0405>
		break;
 292:	08 95       	ret
	    case TX_LED_OFF:
			PORTA.OUTCLR = PIN6_bm;
 294:	80 e4       	ldi	r24, 0x40	; 64
 296:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f0406>
 29a:	08 95       	ret

0000029c <RS485DataSplitter>:
 *  Author: Saulius
 */ 
#include "Settings.h"

void RS485DataSplitter(char *command) {
	screen_write_formatted_text("%s", 0, ALIGN_CENTER, command);
 29c:	9f 93       	push	r25
 29e:	8f 93       	push	r24
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	8f 93       	push	r24
 2a4:	1f 92       	push	r1
 2a6:	8f e3       	ldi	r24, 0x3F	; 63
 2a8:	93 e6       	ldi	r25, 0x63	; 99
 2aa:	9f 93       	push	r25
 2ac:	8f 93       	push	r24
 2ae:	0e 94 b3 02 	call	0x566	; 0x566 <screen_write_formatted_text>
}
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	08 95       	ret

000002c0 <RS485Receiver>:

void RS485Receiver() {
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
 2cc:	61 97       	sbiw	r28, 0x11	; 17
 2ce:	cd bf       	out	0x3d, r28	; 61
 2d0:	de bf       	out	0x3e, r29	; 62
	uint8_t index = 0;
	char command[MESSAGE_LENGTH] = {0}; // Empty command array
 2d2:	fe 01       	movw	r30, r28
 2d4:	31 96       	adiw	r30, 0x01	; 1
 2d6:	81 e1       	ldi	r24, 0x11	; 17
 2d8:	df 01       	movw	r26, r30
 2da:	1d 92       	st	X+, r1
 2dc:	8a 95       	dec	r24
 2de:	e9 f7       	brne	.-6      	; 0x2da <RS485Receiver+0x1a>
	uint8_t start = 0;
 2e0:	00 e0       	ldi	r16, 0x00	; 0
void RS485DataSplitter(char *command) {
	screen_write_formatted_text("%s", 0, ALIGN_CENTER, command);
}

void RS485Receiver() {
	uint8_t index = 0;
 2e2:	10 e0       	ldi	r17, 0x00	; 0
	char command[MESSAGE_LENGTH] = {0}; // Empty command array
	uint8_t start = 0;

	while (1) {
		char c = USART0_readChar(); // Reading a character from USART
 2e4:	0e 94 de 02 	call	0x5bc	; 0x5bc <USART0_readChar>

		if (Status.error) { // If an error is active
 2e8:	90 91 42 63 	lds	r25, 0x6342	; 0x806342 <__data_end>
 2ec:	99 23       	and	r25, r25
 2ee:	29 f0       	breq	.+10     	; 0x2fa <RS485Receiver+0x3a>
			//FODataSplitter("0"); // Execute command 0 for error handling
			Status.error = 0; // Reset error value
 2f0:	e2 e4       	ldi	r30, 0x42	; 66
 2f2:	f3 e6       	ldi	r31, 0x63	; 99
 2f4:	10 82       	st	Z, r1
			Status.errorCounter = 0;
 2f6:	11 82       	std	Z+1, r1	; 0x01
			break;
 2f8:	3a c0       	rjmp	.+116    	; 0x36e <RS485Receiver+0xae>
		}

		if (start) {
 2fa:	00 23       	and	r16, r16
 2fc:	d9 f0       	breq	.+54     	; 0x334 <RS485Receiver+0x74>
			if (c == '}') { // If received data end symbol
 2fe:	8d 37       	cpi	r24, 0x7D	; 125
 300:	79 f4       	brne	.+30     	; 0x320 <RS485Receiver+0x60>
				RS485_Led(RX_LED_OFF);
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 36 01 	call	0x26c	; 0x26c <RS485_Led>
				start = 0;
				command[index] = '\0';
 308:	e1 e0       	ldi	r30, 0x01	; 1
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	ec 0f       	add	r30, r28
 30e:	fd 1f       	adc	r31, r29
 310:	e1 0f       	add	r30, r17
 312:	f1 1d       	adc	r31, r1
 314:	10 82       	st	Z, r1
				index = 0;
				RS485DataSplitter(command); // Execute the received command //comment when testing lines below
 316:	ce 01       	movw	r24, r28
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	0e 94 4e 01 	call	0x29c	; 0x29c <RS485DataSplitter>
				break;
 31e:	27 c0       	rjmp	.+78     	; 0x36e <RS485Receiver+0xae>
				} else if (index < MESSAGE_LENGTH) {
 320:	11 31       	cpi	r17, 0x11	; 17
 322:	40 f4       	brcc	.+16     	; 0x334 <RS485Receiver+0x74>
				command[index++] = c; // Store received character in command array
 324:	e1 e0       	ldi	r30, 0x01	; 1
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	ec 0f       	add	r30, r28
 32a:	fd 1f       	adc	r31, r29
 32c:	e1 0f       	add	r30, r17
 32e:	f1 1d       	adc	r31, r1
 330:	80 83       	st	Z, r24
 332:	1f 5f       	subi	r17, 0xFF	; 255
			}
		}

		if (c == '{') { // If received data start symbol
 334:	8b 37       	cpi	r24, 0x7B	; 123
 336:	49 f4       	brne	.+18     	; 0x34a <RS485Receiver+0x8a>
			start = 1;
			index = 0;
			Status.error = 0; // Reset error state
 338:	e2 e4       	ldi	r30, 0x42	; 66
 33a:	f3 e6       	ldi	r31, 0x63	; 99
 33c:	10 82       	st	Z, r1
			Status.errorCounter = 0; // Reset error counter
 33e:	11 82       	std	Z+1, r1	; 0x01
			RS485_Led(RX_LED_ON);
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 36 01 	call	0x26c	; 0x26c <RS485_Led>
				command[index++] = c; // Store received character in command array
			}
		}

		if (c == '{') { // If received data start symbol
			start = 1;
 346:	01 e0       	ldi	r16, 0x01	; 1
			index = 0;
 348:	10 e0       	ldi	r17, 0x00	; 0
			Status.error = 0; // Reset error state
			Status.errorCounter = 0; // Reset error counter
			RS485_Led(RX_LED_ON);
		}

		if (Status.warning) {
 34a:	80 91 44 63 	lds	r24, 0x6344	; 0x806344 <__data_end+0x2>
 34e:	88 23       	and	r24, r24
 350:	49 f2       	breq	.-110    	; 0x2e4 <RS485Receiver+0x24>
			Status.warning = 0;
 352:	e2 e4       	ldi	r30, 0x42	; 66
 354:	f3 e6       	ldi	r31, 0x63	; 99
 356:	12 82       	std	Z+2, r1	; 0x02
			if (Status.errorCounter < CountForError) {
 358:	81 81       	ldd	r24, Z+1	; 0x01
 35a:	8a 30       	cpi	r24, 0x0A	; 10
 35c:	20 f4       	brcc	.+8      	; 0x366 <RS485Receiver+0xa6>
				Status.errorCounter++;
 35e:	8f 5f       	subi	r24, 0xFF	; 255
 360:	80 93 43 63 	sts	0x6343, r24	; 0x806343 <__data_end+0x1>
 364:	bf cf       	rjmp	.-130    	; 0x2e4 <RS485Receiver+0x24>
				} else {
				Status.error = 1; // Set error flag if too many warnings
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	80 93 42 63 	sts	0x6342, r24	; 0x806342 <__data_end>
 36c:	bb cf       	rjmp	.-138    	; 0x2e4 <RS485Receiver+0x24>
			}
		}
	}
 36e:	61 96       	adiw	r28, 0x11	; 17
 370:	cd bf       	out	0x3d, r28	; 61
 372:	de bf       	out	0x3e, r29	; 62
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	08 95       	ret

0000037e <screen_command>:
    if (contrast > 0x3f) {
        contrast = 0x3f;  ///< Ensure contrast does not exceed maximum
    }
    screen_command(0x81);  ///< Send command to set contrast
    screen_command(contrast);  ///< Set the contrast value
}
 37e:	48 2f       	mov	r20, r24
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	8c e3       	ldi	r24, 0x3C	; 60
 384:	0e 94 0a 01 	call	0x214	; 0x214 <WriteToReg>
 388:	08 95       	ret

0000038a <screen_data>:
 38a:	48 2f       	mov	r20, r24
 38c:	60 e4       	ldi	r22, 0x40	; 64
 38e:	8c e3       	ldi	r24, 0x3C	; 60
 390:	0e 94 0a 01 	call	0x214	; 0x214 <WriteToReg>
 394:	08 95       	ret

00000396 <screen_init>:
 396:	cf 93       	push	r28
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	8c e3       	ldi	r24, 0x3C	; 60
 39c:	0e 94 b5 00 	call	0x16a	; 0x16a <TransmitAdd>
 3a0:	c0 e0       	ldi	r28, 0x00	; 0
 3a2:	08 c0       	rjmp	.+16     	; 0x3b4 <screen_init+0x1e>
 3a4:	ec 2f       	mov	r30, r28
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	eb 5d       	subi	r30, 0xDB	; 219
 3aa:	fc 49       	sbci	r31, 0x9C	; 156
 3ac:	80 81       	ld	r24, Z
 3ae:	0e 94 df 00 	call	0x1be	; 0x1be <TransmitByte>
 3b2:	cf 5f       	subi	r28, 0xFF	; 255
 3b4:	ca 31       	cpi	r28, 0x1A	; 26
 3b6:	b0 f3       	brcs	.-20     	; 0x3a4 <screen_init+0xe>
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <screen_draw_char>:
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	d8 2f       	mov	r29, r24
 3c4:	80 ee       	ldi	r24, 0xE0	; 224
 3c6:	8d 0f       	add	r24, r29
 3c8:	80 36       	cpi	r24, 0x60	; 96
 3ca:	28 f0       	brcs	.+10     	; 0x3d6 <screen_draw_char+0x1a>
 3cc:	d0 3b       	cpi	r29, 0xB0	; 176
 3ce:	19 f0       	breq	.+6      	; 0x3d6 <screen_draw_char+0x1a>
 3d0:	d0 3c       	cpi	r29, 0xC0	; 192
 3d2:	08 f4       	brcc	.+2      	; 0x3d6 <screen_draw_char+0x1a>
 3d4:	d0 e2       	ldi	r29, 0x20	; 32
 3d6:	d0 3b       	cpi	r29, 0xB0	; 176
 3d8:	21 f0       	breq	.+8      	; 0x3e2 <screen_draw_char+0x26>
 3da:	d0 3c       	cpi	r29, 0xC0	; 192
 3dc:	20 f4       	brcc	.+8      	; 0x3e6 <screen_draw_char+0x2a>
 3de:	10 e2       	ldi	r17, 0x20	; 32
 3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <screen_draw_char+0x2c>
 3e2:	10 e5       	ldi	r17, 0x50	; 80
 3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <screen_draw_char+0x2c>
 3e6:	1f e5       	ldi	r17, 0x5F	; 95
 3e8:	c0 e0       	ldi	r28, 0x00	; 0
 3ea:	13 c0       	rjmp	.+38     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3ec:	8d 2f       	mov	r24, r29
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	81 1b       	sub	r24, r17
 3f2:	91 09       	sbc	r25, r1
 3f4:	fc 01       	movw	r30, r24
 3f6:	ee 0f       	add	r30, r30
 3f8:	ff 1f       	adc	r31, r31
 3fa:	ee 0f       	add	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	e8 0f       	add	r30, r24
 400:	f9 1f       	adc	r31, r25
 402:	e0 50       	subi	r30, 0x00	; 0
 404:	f0 4a       	sbci	r31, 0xA0	; 160
 406:	ec 0f       	add	r30, r28
 408:	f1 1d       	adc	r31, r1
 40a:	80 81       	ld	r24, Z
 40c:	0e 94 c5 01 	call	0x38a	; 0x38a <screen_data>
 410:	cf 5f       	subi	r28, 0xFF	; 255
 412:	c5 30       	cpi	r28, 0x05	; 5
 414:	58 f3       	brcs	.-42     	; 0x3ec <screen_draw_char+0x30>
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	0e 94 c5 01 	call	0x38a	; 0x38a <screen_data>
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	08 95       	ret

00000424 <screen_clear>:
 * @brief Clears the ST7567S display.
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
    for (int page = 0; page < 8; page++) {
 42c:	00 e0       	ldi	r16, 0x00	; 0
 42e:	10 e0       	ldi	r17, 0x00	; 0
 430:	16 c0       	rjmp	.+44     	; 0x45e <screen_clear+0x3a>
        screen_command(0xB0 + page);  ///< Select page
 432:	80 eb       	ldi	r24, 0xB0	; 176
 434:	80 0f       	add	r24, r16
 436:	0e 94 bf 01 	call	0x37e	; 0x37e <screen_command>
        screen_command(0x00);  ///< Set column address
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 bf 01 	call	0x37e	; 0x37e <screen_command>
        screen_command(0x10);  ///< Set column address
 440:	80 e1       	ldi	r24, 0x10	; 16
 442:	0e 94 bf 01 	call	0x37e	; 0x37e <screen_command>

        for (int column = 0; column < 128; column++) {
 446:	c0 e0       	ldi	r28, 0x00	; 0
 448:	d0 e0       	ldi	r29, 0x00	; 0
 44a:	04 c0       	rjmp	.+8      	; 0x454 <screen_clear+0x30>
            screen_data(0x00);  ///< Clear each column
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 c5 01 	call	0x38a	; 0x38a <screen_data>
    for (int page = 0; page < 8; page++) {
        screen_command(0xB0 + page);  ///< Select page
        screen_command(0x00);  ///< Set column address
        screen_command(0x10);  ///< Set column address

        for (int column = 0; column < 128; column++) {
 452:	21 96       	adiw	r28, 0x01	; 1
 454:	c0 38       	cpi	r28, 0x80	; 128
 456:	d1 05       	cpc	r29, r1
 458:	cc f3       	brlt	.-14     	; 0x44c <screen_clear+0x28>
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
    for (int page = 0; page < 8; page++) {
 45a:	0f 5f       	subi	r16, 0xFF	; 255
 45c:	1f 4f       	sbci	r17, 0xFF	; 255
 45e:	08 30       	cpi	r16, 0x08	; 8
 460:	11 05       	cpc	r17, r1
 462:	3c f3       	brlt	.-50     	; 0x432 <screen_clear+0xe>
        for (int column = 0; column < 128; column++) {
            screen_data(0x00);  ///< Clear each column
        }
    }
    //screen_contrast(SSD1306_CONTRAST);  ///< Restore contrast
}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	08 95       	ret

0000046e <screen_draw_text>:
 * the maximum allowed characters are displayed.
 * 
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
 46e:	0f 93       	push	r16
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	8c 01       	movw	r16, r24
 478:	d6 2f       	mov	r29, r22
    uint8_t length = 0;
 47a:	c0 e0       	ldi	r28, 0x00	; 0
    while (*text && length < max_length) {
 47c:	05 c0       	rjmp	.+10     	; 0x488 <screen_draw_text+0x1a>
        screen_draw_char(*text);  ///< Draw each character in the string
 47e:	0e 94 de 01 	call	0x3bc	; 0x3bc <screen_draw_char>
        text++;
 482:	0f 5f       	subi	r16, 0xFF	; 255
 484:	1f 4f       	sbci	r17, 0xFF	; 255
        length++;
 486:	cf 5f       	subi	r28, 0xFF	; 255
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
    uint8_t length = 0;
    while (*text && length < max_length) {
 488:	f8 01       	movw	r30, r16
 48a:	80 81       	ld	r24, Z
 48c:	88 23       	and	r24, r24
 48e:	39 f0       	breq	.+14     	; 0x49e <screen_draw_text+0x30>
 490:	cd 17       	cp	r28, r29
 492:	a8 f3       	brcs	.-22     	; 0x47e <screen_draw_text+0x10>
 494:	04 c0       	rjmp	.+8      	; 0x49e <screen_draw_text+0x30>
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
        screen_draw_char(' ');  ///< Fill remaining space with spaces
 496:	80 e2       	ldi	r24, 0x20	; 32
 498:	0e 94 de 01 	call	0x3bc	; 0x3bc <screen_draw_char>
        length++;
 49c:	cf 5f       	subi	r28, 0xFF	; 255
    while (*text && length < max_length) {
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
 49e:	cd 17       	cp	r28, r29
 4a0:	d0 f3       	brcs	.-12     	; 0x496 <screen_draw_text+0x28>
        screen_draw_char(' ');  ///< Fill remaining space with spaces
        length++;
    }
}
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	08 95       	ret

000004ac <screen_write_text>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param start_pixel The starting pixel column for the text.
 */
void screen_write_text(char *text, uint8_t line, uint8_t start_pixel) {
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	8c 01       	movw	r16, r24
 4b6:	26 2f       	mov	r18, r22
 4b8:	c4 2f       	mov	r28, r20
    uint8_t max_chars = (128 - start_pixel) / 6;  ///< Calculate max characters per line
 4ba:	80 e8       	ldi	r24, 0x80	; 128
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	84 1b       	sub	r24, r20
 4c0:	91 09       	sbc	r25, r1
 4c2:	66 e0       	ldi	r22, 0x06	; 6
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__divmodhi4>
 4ca:	d6 2f       	mov	r29, r22
    screen_command(0xB0 | line);  ///< Set the page (line)
 4cc:	82 2f       	mov	r24, r18
 4ce:	80 6b       	ori	r24, 0xB0	; 176
 4d0:	0e 94 bf 01 	call	0x37e	; 0x37e <screen_command>
    screen_command(0x10 | (start_pixel >> 4));  ///< Set high byte of column address
 4d4:	8c 2f       	mov	r24, r28
 4d6:	82 95       	swap	r24
 4d8:	8f 70       	andi	r24, 0x0F	; 15
 4da:	80 61       	ori	r24, 0x10	; 16
 4dc:	0e 94 bf 01 	call	0x37e	; 0x37e <screen_command>
    screen_command(0x00 | (start_pixel & 0x0F));  ///< Set low byte of column address
 4e0:	8c 2f       	mov	r24, r28
 4e2:	8f 70       	andi	r24, 0x0F	; 15
 4e4:	0e 94 bf 01 	call	0x37e	; 0x37e <screen_command>
    screen_draw_text(text, max_chars);  ///< Draw the text
 4e8:	6d 2f       	mov	r22, r29
 4ea:	c8 01       	movw	r24, r16
 4ec:	0e 94 37 02 	call	0x46e	; 0x46e <screen_draw_text>
}
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	08 95       	ret

000004fa <calculate_start_pixel>:
 * @param max_length The maximum number of characters.
 * @param alignment The desired text alignment (left, center, right).
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
 4fa:	ac 01       	movw	r20, r24
    uint8_t text_length = 0;
 4fc:	90 e0       	ldi	r25, 0x00	; 0
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
 4fe:	01 c0       	rjmp	.+2      	; 0x502 <calculate_start_pixel+0x8>
        text_length++;
 500:	9f 5f       	subi	r25, 0xFF	; 255
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
    uint8_t text_length = 0;
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
 502:	fa 01       	movw	r30, r20
 504:	e9 0f       	add	r30, r25
 506:	f1 1d       	adc	r31, r1
 508:	20 81       	ld	r18, Z
 50a:	21 11       	cpse	r18, r1
 50c:	f9 cf       	rjmp	.-14     	; 0x500 <calculate_start_pixel+0x6>
        text_length++;
    }

    uint8_t text_width = text_length * 6;  ///< Calculate the width of the text in pixels
 50e:	89 2f       	mov	r24, r25
 510:	88 0f       	add	r24, r24
 512:	98 0f       	add	r25, r24
 514:	29 2f       	mov	r18, r25
 516:	22 0f       	add	r18, r18
    switch (alignment) {
 518:	61 30       	cpi	r22, 0x01	; 1
 51a:	19 f0       	breq	.+6      	; 0x522 <calculate_start_pixel+0x28>
 51c:	62 30       	cpi	r22, 0x02	; 2
 51e:	69 f0       	breq	.+26     	; 0x53a <calculate_start_pixel+0x40>
 520:	0f c0       	rjmp	.+30     	; 0x540 <calculate_start_pixel+0x46>
        case ALIGN_CENTER:
            return (128 - text_width) / 2;  ///< Center the text
 522:	80 e8       	ldi	r24, 0x80	; 128
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	ac 01       	movw	r20, r24
 528:	42 1b       	sub	r20, r18
 52a:	51 09       	sbc	r21, r1
 52c:	ca 01       	movw	r24, r20
 52e:	99 23       	and	r25, r25
 530:	0c f4       	brge	.+2      	; 0x534 <calculate_start_pixel+0x3a>
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	95 95       	asr	r25
 536:	87 95       	ror	r24
 538:	08 95       	ret
        case ALIGN_RIGHT:
            return (128 - text_width);  ///< Right-align the text
 53a:	80 e8       	ldi	r24, 0x80	; 128
 53c:	82 1b       	sub	r24, r18
 53e:	08 95       	ret
        case ALIGN_LEFT:
        default:
            return 0;  ///< Left-align the text
 540:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 542:	08 95       	ret

00000544 <screen_write_text_aligned>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_text_aligned(char *text, uint8_t line, alignment_t alignment) {
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	ec 01       	movw	r28, r24
 54c:	16 2f       	mov	r17, r22
    uint8_t start_pixel = calculate_start_pixel(text, alignment);  ///< Calculate start pixel
 54e:	64 2f       	mov	r22, r20
 550:	0e 94 7d 02 	call	0x4fa	; 0x4fa <calculate_start_pixel>
   screen_write_text(text, line, start_pixel);
 554:	48 2f       	mov	r20, r24
 556:	61 2f       	mov	r22, r17
 558:	ce 01       	movw	r24, r28
 55a:	0e 94 56 02 	call	0x4ac	; 0x4ac <screen_write_text>
}
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	08 95       	ret

00000566 <screen_write_formatted_text>:
 * 
 * @param format The format string for the text.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_formatted_text(const char *format, uint8_t line, alignment_t alignment, ...) {
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
 56e:	e2 97       	sbiw	r28, 0x32	; 50
 570:	cd bf       	out	0x3d, r28	; 61
 572:	de bf       	out	0x3e, r29	; 62
    char textStorage[MAX_TEXT_LENGTH];  ///< Buffer for storing formatted text
    va_list args;  ///< Variable argument list

    va_start(args, alignment);  ///< Start reading variable arguments
    vsnprintf(textStorage, MAX_TEXT_LENGTH, format, args);  ///< Format the text
 574:	9e 01       	movw	r18, r28
 576:	25 5c       	subi	r18, 0xC5	; 197
 578:	3f 4f       	sbci	r19, 0xFF	; 255
 57a:	4f a9       	ldd	r20, Y+55	; 0x37
 57c:	58 ad       	ldd	r21, Y+56	; 0x38
 57e:	62 e3       	ldi	r22, 0x32	; 50
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	ce 01       	movw	r24, r28
 584:	01 96       	adiw	r24, 0x01	; 1
 586:	0e 94 24 03 	call	0x648	; 0x648 <vsnprintf>
    va_end(args);  ///< End reading variable arguments

    screen_write_text_aligned(textStorage, line, alignment);  ///< Write formatted text to display
 58a:	4a ad       	ldd	r20, Y+58	; 0x3a
 58c:	69 ad       	ldd	r22, Y+57	; 0x39
 58e:	ce 01       	movw	r24, r28
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	0e 94 a2 02 	call	0x544	; 0x544 <screen_write_text_aligned>
}
 596:	e2 96       	adiw	r28, 0x32	; 50
 598:	cd bf       	out	0x3d, r28	; 61
 59a:	de bf       	out	0x3e, r29	; 62
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <USART0_init>:
 * @return 0 on success.
 */
int USART0_printChar(char c, FILE *stream) {
	USART0_sendChar(c); // Send character
	return 0;
}
 5a2:	e0 e0       	ldi	r30, 0x00	; 0
 5a4:	f8 e0       	ldi	r31, 0x08	; 8
 5a6:	83 e8       	ldi	r24, 0x83	; 131
 5a8:	96 e0       	ldi	r25, 0x06	; 6
 5aa:	80 87       	std	Z+8, r24	; 0x08
 5ac:	91 87       	std	Z+9, r25	; 0x09
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	85 83       	std	Z+5, r24	; 0x05
 5b2:	82 ec       	ldi	r24, 0xC2	; 194
 5b4:	86 83       	std	Z+6, r24	; 0x06
 5b6:	83 e0       	ldi	r24, 0x03	; 3
 5b8:	87 83       	std	Z+7, r24	; 0x07
 5ba:	08 95       	ret

000005bc <USART0_readChar>:
 5bc:	80 e8       	ldi	r24, 0x80	; 128
 5be:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
 5c2:	80 e2       	ldi	r24, 0x20	; 32
 5c4:	91 ea       	ldi	r25, 0xA1	; 161
 5c6:	a7 e0       	ldi	r26, 0x07	; 7
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <USART0_readChar+0x18>
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	a1 09       	sbc	r26, r1
 5d0:	b1 09       	sbc	r27, r1
 5d2:	21 f0       	breq	.+8      	; 0x5dc <USART0_readChar+0x20>
 5d4:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
 5d8:	22 23       	and	r18, r18
 5da:	c4 f7       	brge	.-16     	; 0x5cc <USART0_readChar+0x10>
 5dc:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
 5e0:	08 95       	ret

000005e2 <USART1_init>:
 * 
 * This function configures USART1 for asynchronous communication, enabling both
 * transmission and reception at a baud rate of 2.5 Mbps with double-speed operation.
 */
void USART1_init() {
	USART1.BAUD = (uint16_t)USART1_BAUD_RATE(460800); // Set baud rate to 460.8 kbps for fiber optic
 5e2:	e0 e2       	ldi	r30, 0x20	; 32
 5e4:	f8 e0       	ldi	r31, 0x08	; 8
 5e6:	81 ea       	ldi	r24, 0xA1	; 161
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	80 87       	std	Z+8, r24	; 0x08
 5ec:	91 87       	std	Z+9, r25	; 0x09
	USART1.CTRLB = USART_RXEN_bm /*| USART_TXEN_bm*/ | USART_RXMODE_CLK2X_gc; // Enable RX, TX, double speed mode
 5ee:	82 e8       	ldi	r24, 0x82	; 130
 5f0:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc; // Configure for 8-bit, no parity, 1 stop bit, asynchronous mode
 5f2:	83 e0       	ldi	r24, 0x03	; 3
 5f4:	87 83       	std	Z+7, r24	; 0x07
 5f6:	08 95       	ret

000005f8 <__divmodhi4>:
 5f8:	97 fb       	bst	r25, 7
 5fa:	07 2e       	mov	r0, r23
 5fc:	16 f4       	brtc	.+4      	; 0x602 <__divmodhi4+0xa>
 5fe:	00 94       	com	r0
 600:	07 d0       	rcall	.+14     	; 0x610 <__divmodhi4_neg1>
 602:	77 fd       	sbrc	r23, 7
 604:	09 d0       	rcall	.+18     	; 0x618 <__divmodhi4_neg2>
 606:	0e 94 10 03 	call	0x620	; 0x620 <__udivmodhi4>
 60a:	07 fc       	sbrc	r0, 7
 60c:	05 d0       	rcall	.+10     	; 0x618 <__divmodhi4_neg2>
 60e:	3e f4       	brtc	.+14     	; 0x61e <__divmodhi4_exit>

00000610 <__divmodhi4_neg1>:
 610:	90 95       	com	r25
 612:	81 95       	neg	r24
 614:	9f 4f       	sbci	r25, 0xFF	; 255
 616:	08 95       	ret

00000618 <__divmodhi4_neg2>:
 618:	70 95       	com	r23
 61a:	61 95       	neg	r22
 61c:	7f 4f       	sbci	r23, 0xFF	; 255

0000061e <__divmodhi4_exit>:
 61e:	08 95       	ret

00000620 <__udivmodhi4>:
 620:	aa 1b       	sub	r26, r26
 622:	bb 1b       	sub	r27, r27
 624:	51 e1       	ldi	r21, 0x11	; 17
 626:	07 c0       	rjmp	.+14     	; 0x636 <__udivmodhi4_ep>

00000628 <__udivmodhi4_loop>:
 628:	aa 1f       	adc	r26, r26
 62a:	bb 1f       	adc	r27, r27
 62c:	a6 17       	cp	r26, r22
 62e:	b7 07       	cpc	r27, r23
 630:	10 f0       	brcs	.+4      	; 0x636 <__udivmodhi4_ep>
 632:	a6 1b       	sub	r26, r22
 634:	b7 0b       	sbc	r27, r23

00000636 <__udivmodhi4_ep>:
 636:	88 1f       	adc	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	5a 95       	dec	r21
 63c:	a9 f7       	brne	.-22     	; 0x628 <__udivmodhi4_loop>
 63e:	80 95       	com	r24
 640:	90 95       	com	r25
 642:	bc 01       	movw	r22, r24
 644:	cd 01       	movw	r24, r26
 646:	08 95       	ret

00000648 <vsnprintf>:
 648:	ae e0       	ldi	r26, 0x0E	; 14
 64a:	b0 e0       	ldi	r27, 0x00	; 0
 64c:	ea e2       	ldi	r30, 0x2A	; 42
 64e:	f3 e0       	ldi	r31, 0x03	; 3
 650:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__prologue_saves__+0x1c>
 654:	8c 01       	movw	r16, r24
 656:	fa 01       	movw	r30, r20
 658:	86 e0       	ldi	r24, 0x06	; 6
 65a:	8c 83       	std	Y+4, r24	; 0x04
 65c:	09 83       	std	Y+1, r16	; 0x01
 65e:	1a 83       	std	Y+2, r17	; 0x02
 660:	77 ff       	sbrs	r23, 7
 662:	02 c0       	rjmp	.+4      	; 0x668 <vsnprintf+0x20>
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	70 e8       	ldi	r23, 0x80	; 128
 668:	cb 01       	movw	r24, r22
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	8d 83       	std	Y+5, r24	; 0x05
 66e:	9e 83       	std	Y+6, r25	; 0x06
 670:	a9 01       	movw	r20, r18
 672:	bf 01       	movw	r22, r30
 674:	ce 01       	movw	r24, r28
 676:	01 96       	adiw	r24, 0x01	; 1
 678:	0e 94 50 03 	call	0x6a0	; 0x6a0 <vfprintf>
 67c:	4d 81       	ldd	r20, Y+5	; 0x05
 67e:	5e 81       	ldd	r21, Y+6	; 0x06
 680:	57 fd       	sbrc	r21, 7
 682:	0a c0       	rjmp	.+20     	; 0x698 <vsnprintf+0x50>
 684:	2f 81       	ldd	r18, Y+7	; 0x07
 686:	38 85       	ldd	r19, Y+8	; 0x08
 688:	42 17       	cp	r20, r18
 68a:	53 07       	cpc	r21, r19
 68c:	0c f4       	brge	.+2      	; 0x690 <vsnprintf+0x48>
 68e:	9a 01       	movw	r18, r20
 690:	f8 01       	movw	r30, r16
 692:	e2 0f       	add	r30, r18
 694:	f3 1f       	adc	r31, r19
 696:	10 82       	st	Z, r1
 698:	2e 96       	adiw	r28, 0x0e	; 14
 69a:	e4 e0       	ldi	r30, 0x04	; 4
 69c:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__epilogue_restores__+0x1c>

000006a0 <vfprintf>:
 6a0:	ab e0       	ldi	r26, 0x0B	; 11
 6a2:	b0 e0       	ldi	r27, 0x00	; 0
 6a4:	e6 e5       	ldi	r30, 0x56	; 86
 6a6:	f3 e0       	ldi	r31, 0x03	; 3
 6a8:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__prologue_saves__>
 6ac:	6c 01       	movw	r12, r24
 6ae:	7b 01       	movw	r14, r22
 6b0:	8a 01       	movw	r16, r20
 6b2:	fc 01       	movw	r30, r24
 6b4:	16 82       	std	Z+6, r1	; 0x06
 6b6:	17 82       	std	Z+7, r1	; 0x07
 6b8:	83 81       	ldd	r24, Z+3	; 0x03
 6ba:	81 ff       	sbrs	r24, 1
 6bc:	cc c1       	rjmp	.+920    	; 0xa56 <vfprintf+0x3b6>
 6be:	ce 01       	movw	r24, r28
 6c0:	01 96       	adiw	r24, 0x01	; 1
 6c2:	3c 01       	movw	r6, r24
 6c4:	f6 01       	movw	r30, r12
 6c6:	93 81       	ldd	r25, Z+3	; 0x03
 6c8:	f7 01       	movw	r30, r14
 6ca:	93 fd       	sbrc	r25, 3
 6cc:	85 91       	lpm	r24, Z+
 6ce:	93 ff       	sbrs	r25, 3
 6d0:	81 91       	ld	r24, Z+
 6d2:	7f 01       	movw	r14, r30
 6d4:	88 23       	and	r24, r24
 6d6:	09 f4       	brne	.+2      	; 0x6da <vfprintf+0x3a>
 6d8:	ba c1       	rjmp	.+884    	; 0xa4e <vfprintf+0x3ae>
 6da:	85 32       	cpi	r24, 0x25	; 37
 6dc:	39 f4       	brne	.+14     	; 0x6ec <vfprintf+0x4c>
 6de:	93 fd       	sbrc	r25, 3
 6e0:	85 91       	lpm	r24, Z+
 6e2:	93 ff       	sbrs	r25, 3
 6e4:	81 91       	ld	r24, Z+
 6e6:	7f 01       	movw	r14, r30
 6e8:	85 32       	cpi	r24, 0x25	; 37
 6ea:	29 f4       	brne	.+10     	; 0x6f6 <vfprintf+0x56>
 6ec:	b6 01       	movw	r22, r12
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 6f4:	e7 cf       	rjmp	.-50     	; 0x6c4 <vfprintf+0x24>
 6f6:	91 2c       	mov	r9, r1
 6f8:	21 2c       	mov	r2, r1
 6fa:	31 2c       	mov	r3, r1
 6fc:	ff e1       	ldi	r31, 0x1F	; 31
 6fe:	f3 15       	cp	r31, r3
 700:	d8 f0       	brcs	.+54     	; 0x738 <vfprintf+0x98>
 702:	8b 32       	cpi	r24, 0x2B	; 43
 704:	79 f0       	breq	.+30     	; 0x724 <vfprintf+0x84>
 706:	38 f4       	brcc	.+14     	; 0x716 <vfprintf+0x76>
 708:	80 32       	cpi	r24, 0x20	; 32
 70a:	79 f0       	breq	.+30     	; 0x72a <vfprintf+0x8a>
 70c:	83 32       	cpi	r24, 0x23	; 35
 70e:	a1 f4       	brne	.+40     	; 0x738 <vfprintf+0x98>
 710:	23 2d       	mov	r18, r3
 712:	20 61       	ori	r18, 0x10	; 16
 714:	1d c0       	rjmp	.+58     	; 0x750 <vfprintf+0xb0>
 716:	8d 32       	cpi	r24, 0x2D	; 45
 718:	61 f0       	breq	.+24     	; 0x732 <vfprintf+0x92>
 71a:	80 33       	cpi	r24, 0x30	; 48
 71c:	69 f4       	brne	.+26     	; 0x738 <vfprintf+0x98>
 71e:	23 2d       	mov	r18, r3
 720:	21 60       	ori	r18, 0x01	; 1
 722:	16 c0       	rjmp	.+44     	; 0x750 <vfprintf+0xb0>
 724:	83 2d       	mov	r24, r3
 726:	82 60       	ori	r24, 0x02	; 2
 728:	38 2e       	mov	r3, r24
 72a:	e3 2d       	mov	r30, r3
 72c:	e4 60       	ori	r30, 0x04	; 4
 72e:	3e 2e       	mov	r3, r30
 730:	2a c0       	rjmp	.+84     	; 0x786 <vfprintf+0xe6>
 732:	f3 2d       	mov	r31, r3
 734:	f8 60       	ori	r31, 0x08	; 8
 736:	1d c0       	rjmp	.+58     	; 0x772 <vfprintf+0xd2>
 738:	37 fc       	sbrc	r3, 7
 73a:	2d c0       	rjmp	.+90     	; 0x796 <vfprintf+0xf6>
 73c:	20 ed       	ldi	r18, 0xD0	; 208
 73e:	28 0f       	add	r18, r24
 740:	2a 30       	cpi	r18, 0x0A	; 10
 742:	40 f0       	brcs	.+16     	; 0x754 <vfprintf+0xb4>
 744:	8e 32       	cpi	r24, 0x2E	; 46
 746:	b9 f4       	brne	.+46     	; 0x776 <vfprintf+0xd6>
 748:	36 fc       	sbrc	r3, 6
 74a:	81 c1       	rjmp	.+770    	; 0xa4e <vfprintf+0x3ae>
 74c:	23 2d       	mov	r18, r3
 74e:	20 64       	ori	r18, 0x40	; 64
 750:	32 2e       	mov	r3, r18
 752:	19 c0       	rjmp	.+50     	; 0x786 <vfprintf+0xe6>
 754:	36 fe       	sbrs	r3, 6
 756:	06 c0       	rjmp	.+12     	; 0x764 <vfprintf+0xc4>
 758:	8a e0       	ldi	r24, 0x0A	; 10
 75a:	98 9e       	mul	r9, r24
 75c:	20 0d       	add	r18, r0
 75e:	11 24       	eor	r1, r1
 760:	92 2e       	mov	r9, r18
 762:	11 c0       	rjmp	.+34     	; 0x786 <vfprintf+0xe6>
 764:	ea e0       	ldi	r30, 0x0A	; 10
 766:	2e 9e       	mul	r2, r30
 768:	20 0d       	add	r18, r0
 76a:	11 24       	eor	r1, r1
 76c:	22 2e       	mov	r2, r18
 76e:	f3 2d       	mov	r31, r3
 770:	f0 62       	ori	r31, 0x20	; 32
 772:	3f 2e       	mov	r3, r31
 774:	08 c0       	rjmp	.+16     	; 0x786 <vfprintf+0xe6>
 776:	8c 36       	cpi	r24, 0x6C	; 108
 778:	21 f4       	brne	.+8      	; 0x782 <vfprintf+0xe2>
 77a:	83 2d       	mov	r24, r3
 77c:	80 68       	ori	r24, 0x80	; 128
 77e:	38 2e       	mov	r3, r24
 780:	02 c0       	rjmp	.+4      	; 0x786 <vfprintf+0xe6>
 782:	88 36       	cpi	r24, 0x68	; 104
 784:	41 f4       	brne	.+16     	; 0x796 <vfprintf+0xf6>
 786:	f7 01       	movw	r30, r14
 788:	93 fd       	sbrc	r25, 3
 78a:	85 91       	lpm	r24, Z+
 78c:	93 ff       	sbrs	r25, 3
 78e:	81 91       	ld	r24, Z+
 790:	7f 01       	movw	r14, r30
 792:	81 11       	cpse	r24, r1
 794:	b3 cf       	rjmp	.-154    	; 0x6fc <vfprintf+0x5c>
 796:	98 2f       	mov	r25, r24
 798:	9f 7d       	andi	r25, 0xDF	; 223
 79a:	95 54       	subi	r25, 0x45	; 69
 79c:	93 30       	cpi	r25, 0x03	; 3
 79e:	28 f4       	brcc	.+10     	; 0x7aa <vfprintf+0x10a>
 7a0:	0c 5f       	subi	r16, 0xFC	; 252
 7a2:	1f 4f       	sbci	r17, 0xFF	; 255
 7a4:	9f e3       	ldi	r25, 0x3F	; 63
 7a6:	99 83       	std	Y+1, r25	; 0x01
 7a8:	0d c0       	rjmp	.+26     	; 0x7c4 <vfprintf+0x124>
 7aa:	83 36       	cpi	r24, 0x63	; 99
 7ac:	31 f0       	breq	.+12     	; 0x7ba <vfprintf+0x11a>
 7ae:	83 37       	cpi	r24, 0x73	; 115
 7b0:	71 f0       	breq	.+28     	; 0x7ce <vfprintf+0x12e>
 7b2:	83 35       	cpi	r24, 0x53	; 83
 7b4:	09 f0       	breq	.+2      	; 0x7b8 <vfprintf+0x118>
 7b6:	59 c0       	rjmp	.+178    	; 0x86a <vfprintf+0x1ca>
 7b8:	21 c0       	rjmp	.+66     	; 0x7fc <vfprintf+0x15c>
 7ba:	f8 01       	movw	r30, r16
 7bc:	80 81       	ld	r24, Z
 7be:	89 83       	std	Y+1, r24	; 0x01
 7c0:	0e 5f       	subi	r16, 0xFE	; 254
 7c2:	1f 4f       	sbci	r17, 0xFF	; 255
 7c4:	88 24       	eor	r8, r8
 7c6:	83 94       	inc	r8
 7c8:	91 2c       	mov	r9, r1
 7ca:	53 01       	movw	r10, r6
 7cc:	13 c0       	rjmp	.+38     	; 0x7f4 <vfprintf+0x154>
 7ce:	28 01       	movw	r4, r16
 7d0:	f2 e0       	ldi	r31, 0x02	; 2
 7d2:	4f 0e       	add	r4, r31
 7d4:	51 1c       	adc	r5, r1
 7d6:	f8 01       	movw	r30, r16
 7d8:	a0 80       	ld	r10, Z
 7da:	b1 80       	ldd	r11, Z+1	; 0x01
 7dc:	36 fe       	sbrs	r3, 6
 7de:	03 c0       	rjmp	.+6      	; 0x7e6 <vfprintf+0x146>
 7e0:	69 2d       	mov	r22, r9
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <vfprintf+0x14a>
 7e6:	6f ef       	ldi	r22, 0xFF	; 255
 7e8:	7f ef       	ldi	r23, 0xFF	; 255
 7ea:	c5 01       	movw	r24, r10
 7ec:	0e 94 3c 05 	call	0xa78	; 0xa78 <strnlen>
 7f0:	4c 01       	movw	r8, r24
 7f2:	82 01       	movw	r16, r4
 7f4:	f3 2d       	mov	r31, r3
 7f6:	ff 77       	andi	r31, 0x7F	; 127
 7f8:	3f 2e       	mov	r3, r31
 7fa:	16 c0       	rjmp	.+44     	; 0x828 <vfprintf+0x188>
 7fc:	28 01       	movw	r4, r16
 7fe:	22 e0       	ldi	r18, 0x02	; 2
 800:	42 0e       	add	r4, r18
 802:	51 1c       	adc	r5, r1
 804:	f8 01       	movw	r30, r16
 806:	a0 80       	ld	r10, Z
 808:	b1 80       	ldd	r11, Z+1	; 0x01
 80a:	36 fe       	sbrs	r3, 6
 80c:	03 c0       	rjmp	.+6      	; 0x814 <vfprintf+0x174>
 80e:	69 2d       	mov	r22, r9
 810:	70 e0       	ldi	r23, 0x00	; 0
 812:	02 c0       	rjmp	.+4      	; 0x818 <vfprintf+0x178>
 814:	6f ef       	ldi	r22, 0xFF	; 255
 816:	7f ef       	ldi	r23, 0xFF	; 255
 818:	c5 01       	movw	r24, r10
 81a:	0e 94 31 05 	call	0xa62	; 0xa62 <strnlen_P>
 81e:	4c 01       	movw	r8, r24
 820:	f3 2d       	mov	r31, r3
 822:	f0 68       	ori	r31, 0x80	; 128
 824:	3f 2e       	mov	r3, r31
 826:	82 01       	movw	r16, r4
 828:	33 fc       	sbrc	r3, 3
 82a:	1b c0       	rjmp	.+54     	; 0x862 <vfprintf+0x1c2>
 82c:	82 2d       	mov	r24, r2
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	88 16       	cp	r8, r24
 832:	99 06       	cpc	r9, r25
 834:	b0 f4       	brcc	.+44     	; 0x862 <vfprintf+0x1c2>
 836:	b6 01       	movw	r22, r12
 838:	80 e2       	ldi	r24, 0x20	; 32
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 840:	2a 94       	dec	r2
 842:	f4 cf       	rjmp	.-24     	; 0x82c <vfprintf+0x18c>
 844:	f5 01       	movw	r30, r10
 846:	37 fc       	sbrc	r3, 7
 848:	85 91       	lpm	r24, Z+
 84a:	37 fe       	sbrs	r3, 7
 84c:	81 91       	ld	r24, Z+
 84e:	5f 01       	movw	r10, r30
 850:	b6 01       	movw	r22, r12
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 858:	21 10       	cpse	r2, r1
 85a:	2a 94       	dec	r2
 85c:	21 e0       	ldi	r18, 0x01	; 1
 85e:	82 1a       	sub	r8, r18
 860:	91 08       	sbc	r9, r1
 862:	81 14       	cp	r8, r1
 864:	91 04       	cpc	r9, r1
 866:	71 f7       	brne	.-36     	; 0x844 <vfprintf+0x1a4>
 868:	e8 c0       	rjmp	.+464    	; 0xa3a <vfprintf+0x39a>
 86a:	84 36       	cpi	r24, 0x64	; 100
 86c:	11 f0       	breq	.+4      	; 0x872 <vfprintf+0x1d2>
 86e:	89 36       	cpi	r24, 0x69	; 105
 870:	41 f5       	brne	.+80     	; 0x8c2 <vfprintf+0x222>
 872:	f8 01       	movw	r30, r16
 874:	37 fe       	sbrs	r3, 7
 876:	07 c0       	rjmp	.+14     	; 0x886 <vfprintf+0x1e6>
 878:	60 81       	ld	r22, Z
 87a:	71 81       	ldd	r23, Z+1	; 0x01
 87c:	82 81       	ldd	r24, Z+2	; 0x02
 87e:	93 81       	ldd	r25, Z+3	; 0x03
 880:	0c 5f       	subi	r16, 0xFC	; 252
 882:	1f 4f       	sbci	r17, 0xFF	; 255
 884:	08 c0       	rjmp	.+16     	; 0x896 <vfprintf+0x1f6>
 886:	60 81       	ld	r22, Z
 888:	71 81       	ldd	r23, Z+1	; 0x01
 88a:	07 2e       	mov	r0, r23
 88c:	00 0c       	add	r0, r0
 88e:	88 0b       	sbc	r24, r24
 890:	99 0b       	sbc	r25, r25
 892:	0e 5f       	subi	r16, 0xFE	; 254
 894:	1f 4f       	sbci	r17, 0xFF	; 255
 896:	f3 2d       	mov	r31, r3
 898:	ff 76       	andi	r31, 0x6F	; 111
 89a:	3f 2e       	mov	r3, r31
 89c:	97 ff       	sbrs	r25, 7
 89e:	09 c0       	rjmp	.+18     	; 0x8b2 <vfprintf+0x212>
 8a0:	90 95       	com	r25
 8a2:	80 95       	com	r24
 8a4:	70 95       	com	r23
 8a6:	61 95       	neg	r22
 8a8:	7f 4f       	sbci	r23, 0xFF	; 255
 8aa:	8f 4f       	sbci	r24, 0xFF	; 255
 8ac:	9f 4f       	sbci	r25, 0xFF	; 255
 8ae:	f0 68       	ori	r31, 0x80	; 128
 8b0:	3f 2e       	mov	r3, r31
 8b2:	2a e0       	ldi	r18, 0x0A	; 10
 8b4:	30 e0       	ldi	r19, 0x00	; 0
 8b6:	a3 01       	movw	r20, r6
 8b8:	0e 94 83 05 	call	0xb06	; 0xb06 <__ultoa_invert>
 8bc:	88 2e       	mov	r8, r24
 8be:	86 18       	sub	r8, r6
 8c0:	45 c0       	rjmp	.+138    	; 0x94c <vfprintf+0x2ac>
 8c2:	85 37       	cpi	r24, 0x75	; 117
 8c4:	31 f4       	brne	.+12     	; 0x8d2 <vfprintf+0x232>
 8c6:	23 2d       	mov	r18, r3
 8c8:	2f 7e       	andi	r18, 0xEF	; 239
 8ca:	b2 2e       	mov	r11, r18
 8cc:	2a e0       	ldi	r18, 0x0A	; 10
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	25 c0       	rjmp	.+74     	; 0x91c <vfprintf+0x27c>
 8d2:	93 2d       	mov	r25, r3
 8d4:	99 7f       	andi	r25, 0xF9	; 249
 8d6:	b9 2e       	mov	r11, r25
 8d8:	8f 36       	cpi	r24, 0x6F	; 111
 8da:	c1 f0       	breq	.+48     	; 0x90c <vfprintf+0x26c>
 8dc:	18 f4       	brcc	.+6      	; 0x8e4 <vfprintf+0x244>
 8de:	88 35       	cpi	r24, 0x58	; 88
 8e0:	79 f0       	breq	.+30     	; 0x900 <vfprintf+0x260>
 8e2:	b5 c0       	rjmp	.+362    	; 0xa4e <vfprintf+0x3ae>
 8e4:	80 37       	cpi	r24, 0x70	; 112
 8e6:	19 f0       	breq	.+6      	; 0x8ee <vfprintf+0x24e>
 8e8:	88 37       	cpi	r24, 0x78	; 120
 8ea:	21 f0       	breq	.+8      	; 0x8f4 <vfprintf+0x254>
 8ec:	b0 c0       	rjmp	.+352    	; 0xa4e <vfprintf+0x3ae>
 8ee:	e9 2f       	mov	r30, r25
 8f0:	e0 61       	ori	r30, 0x10	; 16
 8f2:	be 2e       	mov	r11, r30
 8f4:	b4 fe       	sbrs	r11, 4
 8f6:	0d c0       	rjmp	.+26     	; 0x912 <vfprintf+0x272>
 8f8:	fb 2d       	mov	r31, r11
 8fa:	f4 60       	ori	r31, 0x04	; 4
 8fc:	bf 2e       	mov	r11, r31
 8fe:	09 c0       	rjmp	.+18     	; 0x912 <vfprintf+0x272>
 900:	34 fe       	sbrs	r3, 4
 902:	0a c0       	rjmp	.+20     	; 0x918 <vfprintf+0x278>
 904:	29 2f       	mov	r18, r25
 906:	26 60       	ori	r18, 0x06	; 6
 908:	b2 2e       	mov	r11, r18
 90a:	06 c0       	rjmp	.+12     	; 0x918 <vfprintf+0x278>
 90c:	28 e0       	ldi	r18, 0x08	; 8
 90e:	30 e0       	ldi	r19, 0x00	; 0
 910:	05 c0       	rjmp	.+10     	; 0x91c <vfprintf+0x27c>
 912:	20 e1       	ldi	r18, 0x10	; 16
 914:	30 e0       	ldi	r19, 0x00	; 0
 916:	02 c0       	rjmp	.+4      	; 0x91c <vfprintf+0x27c>
 918:	20 e1       	ldi	r18, 0x10	; 16
 91a:	32 e0       	ldi	r19, 0x02	; 2
 91c:	f8 01       	movw	r30, r16
 91e:	b7 fe       	sbrs	r11, 7
 920:	07 c0       	rjmp	.+14     	; 0x930 <vfprintf+0x290>
 922:	60 81       	ld	r22, Z
 924:	71 81       	ldd	r23, Z+1	; 0x01
 926:	82 81       	ldd	r24, Z+2	; 0x02
 928:	93 81       	ldd	r25, Z+3	; 0x03
 92a:	0c 5f       	subi	r16, 0xFC	; 252
 92c:	1f 4f       	sbci	r17, 0xFF	; 255
 92e:	06 c0       	rjmp	.+12     	; 0x93c <vfprintf+0x29c>
 930:	60 81       	ld	r22, Z
 932:	71 81       	ldd	r23, Z+1	; 0x01
 934:	80 e0       	ldi	r24, 0x00	; 0
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	0e 5f       	subi	r16, 0xFE	; 254
 93a:	1f 4f       	sbci	r17, 0xFF	; 255
 93c:	a3 01       	movw	r20, r6
 93e:	0e 94 83 05 	call	0xb06	; 0xb06 <__ultoa_invert>
 942:	88 2e       	mov	r8, r24
 944:	86 18       	sub	r8, r6
 946:	fb 2d       	mov	r31, r11
 948:	ff 77       	andi	r31, 0x7F	; 127
 94a:	3f 2e       	mov	r3, r31
 94c:	36 fe       	sbrs	r3, 6
 94e:	0d c0       	rjmp	.+26     	; 0x96a <vfprintf+0x2ca>
 950:	23 2d       	mov	r18, r3
 952:	2e 7f       	andi	r18, 0xFE	; 254
 954:	a2 2e       	mov	r10, r18
 956:	89 14       	cp	r8, r9
 958:	58 f4       	brcc	.+22     	; 0x970 <vfprintf+0x2d0>
 95a:	34 fe       	sbrs	r3, 4
 95c:	0b c0       	rjmp	.+22     	; 0x974 <vfprintf+0x2d4>
 95e:	32 fc       	sbrc	r3, 2
 960:	09 c0       	rjmp	.+18     	; 0x974 <vfprintf+0x2d4>
 962:	83 2d       	mov	r24, r3
 964:	8e 7e       	andi	r24, 0xEE	; 238
 966:	a8 2e       	mov	r10, r24
 968:	05 c0       	rjmp	.+10     	; 0x974 <vfprintf+0x2d4>
 96a:	b8 2c       	mov	r11, r8
 96c:	a3 2c       	mov	r10, r3
 96e:	03 c0       	rjmp	.+6      	; 0x976 <vfprintf+0x2d6>
 970:	b8 2c       	mov	r11, r8
 972:	01 c0       	rjmp	.+2      	; 0x976 <vfprintf+0x2d6>
 974:	b9 2c       	mov	r11, r9
 976:	a4 fe       	sbrs	r10, 4
 978:	0f c0       	rjmp	.+30     	; 0x998 <vfprintf+0x2f8>
 97a:	fe 01       	movw	r30, r28
 97c:	e8 0d       	add	r30, r8
 97e:	f1 1d       	adc	r31, r1
 980:	80 81       	ld	r24, Z
 982:	80 33       	cpi	r24, 0x30	; 48
 984:	21 f4       	brne	.+8      	; 0x98e <vfprintf+0x2ee>
 986:	9a 2d       	mov	r25, r10
 988:	99 7e       	andi	r25, 0xE9	; 233
 98a:	a9 2e       	mov	r10, r25
 98c:	09 c0       	rjmp	.+18     	; 0x9a0 <vfprintf+0x300>
 98e:	a2 fe       	sbrs	r10, 2
 990:	06 c0       	rjmp	.+12     	; 0x99e <vfprintf+0x2fe>
 992:	b3 94       	inc	r11
 994:	b3 94       	inc	r11
 996:	04 c0       	rjmp	.+8      	; 0x9a0 <vfprintf+0x300>
 998:	8a 2d       	mov	r24, r10
 99a:	86 78       	andi	r24, 0x86	; 134
 99c:	09 f0       	breq	.+2      	; 0x9a0 <vfprintf+0x300>
 99e:	b3 94       	inc	r11
 9a0:	a3 fc       	sbrc	r10, 3
 9a2:	11 c0       	rjmp	.+34     	; 0x9c6 <vfprintf+0x326>
 9a4:	a0 fe       	sbrs	r10, 0
 9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <vfprintf+0x314>
 9a8:	b2 14       	cp	r11, r2
 9aa:	88 f4       	brcc	.+34     	; 0x9ce <vfprintf+0x32e>
 9ac:	28 0c       	add	r2, r8
 9ae:	92 2c       	mov	r9, r2
 9b0:	9b 18       	sub	r9, r11
 9b2:	0e c0       	rjmp	.+28     	; 0x9d0 <vfprintf+0x330>
 9b4:	b2 14       	cp	r11, r2
 9b6:	60 f4       	brcc	.+24     	; 0x9d0 <vfprintf+0x330>
 9b8:	b6 01       	movw	r22, r12
 9ba:	80 e2       	ldi	r24, 0x20	; 32
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 9c2:	b3 94       	inc	r11
 9c4:	f7 cf       	rjmp	.-18     	; 0x9b4 <vfprintf+0x314>
 9c6:	b2 14       	cp	r11, r2
 9c8:	18 f4       	brcc	.+6      	; 0x9d0 <vfprintf+0x330>
 9ca:	2b 18       	sub	r2, r11
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <vfprintf+0x332>
 9ce:	98 2c       	mov	r9, r8
 9d0:	21 2c       	mov	r2, r1
 9d2:	a4 fe       	sbrs	r10, 4
 9d4:	10 c0       	rjmp	.+32     	; 0x9f6 <vfprintf+0x356>
 9d6:	b6 01       	movw	r22, r12
 9d8:	80 e3       	ldi	r24, 0x30	; 48
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 9e0:	a2 fe       	sbrs	r10, 2
 9e2:	17 c0       	rjmp	.+46     	; 0xa12 <vfprintf+0x372>
 9e4:	a1 fc       	sbrc	r10, 1
 9e6:	03 c0       	rjmp	.+6      	; 0x9ee <vfprintf+0x34e>
 9e8:	88 e7       	ldi	r24, 0x78	; 120
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <vfprintf+0x352>
 9ee:	88 e5       	ldi	r24, 0x58	; 88
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	b6 01       	movw	r22, r12
 9f4:	0c c0       	rjmp	.+24     	; 0xa0e <vfprintf+0x36e>
 9f6:	8a 2d       	mov	r24, r10
 9f8:	86 78       	andi	r24, 0x86	; 134
 9fa:	59 f0       	breq	.+22     	; 0xa12 <vfprintf+0x372>
 9fc:	a1 fe       	sbrs	r10, 1
 9fe:	02 c0       	rjmp	.+4      	; 0xa04 <vfprintf+0x364>
 a00:	8b e2       	ldi	r24, 0x2B	; 43
 a02:	01 c0       	rjmp	.+2      	; 0xa06 <vfprintf+0x366>
 a04:	80 e2       	ldi	r24, 0x20	; 32
 a06:	a7 fc       	sbrc	r10, 7
 a08:	8d e2       	ldi	r24, 0x2D	; 45
 a0a:	b6 01       	movw	r22, r12
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 a12:	89 14       	cp	r8, r9
 a14:	38 f4       	brcc	.+14     	; 0xa24 <vfprintf+0x384>
 a16:	b6 01       	movw	r22, r12
 a18:	80 e3       	ldi	r24, 0x30	; 48
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 a20:	9a 94       	dec	r9
 a22:	f7 cf       	rjmp	.-18     	; 0xa12 <vfprintf+0x372>
 a24:	8a 94       	dec	r8
 a26:	f3 01       	movw	r30, r6
 a28:	e8 0d       	add	r30, r8
 a2a:	f1 1d       	adc	r31, r1
 a2c:	80 81       	ld	r24, Z
 a2e:	b6 01       	movw	r22, r12
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 a36:	81 10       	cpse	r8, r1
 a38:	f5 cf       	rjmp	.-22     	; 0xa24 <vfprintf+0x384>
 a3a:	22 20       	and	r2, r2
 a3c:	09 f4       	brne	.+2      	; 0xa40 <vfprintf+0x3a0>
 a3e:	42 ce       	rjmp	.-892    	; 0x6c4 <vfprintf+0x24>
 a40:	b6 01       	movw	r22, r12
 a42:	80 e2       	ldi	r24, 0x20	; 32
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	0e 94 47 05 	call	0xa8e	; 0xa8e <fputc>
 a4a:	2a 94       	dec	r2
 a4c:	f6 cf       	rjmp	.-20     	; 0xa3a <vfprintf+0x39a>
 a4e:	f6 01       	movw	r30, r12
 a50:	86 81       	ldd	r24, Z+6	; 0x06
 a52:	97 81       	ldd	r25, Z+7	; 0x07
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <vfprintf+0x3ba>
 a56:	8f ef       	ldi	r24, 0xFF	; 255
 a58:	9f ef       	ldi	r25, 0xFF	; 255
 a5a:	2b 96       	adiw	r28, 0x0b	; 11
 a5c:	e2 e1       	ldi	r30, 0x12	; 18
 a5e:	0c 94 00 06 	jmp	0xc00	; 0xc00 <__epilogue_restores__>

00000a62 <strnlen_P>:
 a62:	fc 01       	movw	r30, r24
 a64:	05 90       	lpm	r0, Z+
 a66:	61 50       	subi	r22, 0x01	; 1
 a68:	70 40       	sbci	r23, 0x00	; 0
 a6a:	01 10       	cpse	r0, r1
 a6c:	d8 f7       	brcc	.-10     	; 0xa64 <strnlen_P+0x2>
 a6e:	80 95       	com	r24
 a70:	90 95       	com	r25
 a72:	8e 0f       	add	r24, r30
 a74:	9f 1f       	adc	r25, r31
 a76:	08 95       	ret

00000a78 <strnlen>:
 a78:	fc 01       	movw	r30, r24
 a7a:	61 50       	subi	r22, 0x01	; 1
 a7c:	70 40       	sbci	r23, 0x00	; 0
 a7e:	01 90       	ld	r0, Z+
 a80:	01 10       	cpse	r0, r1
 a82:	d8 f7       	brcc	.-10     	; 0xa7a <strnlen+0x2>
 a84:	80 95       	com	r24
 a86:	90 95       	com	r25
 a88:	8e 0f       	add	r24, r30
 a8a:	9f 1f       	adc	r25, r31
 a8c:	08 95       	ret

00000a8e <fputc>:
 a8e:	0f 93       	push	r16
 a90:	1f 93       	push	r17
 a92:	cf 93       	push	r28
 a94:	df 93       	push	r29
 a96:	fb 01       	movw	r30, r22
 a98:	23 81       	ldd	r18, Z+3	; 0x03
 a9a:	21 fd       	sbrc	r18, 1
 a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <fputc+0x16>
 a9e:	8f ef       	ldi	r24, 0xFF	; 255
 aa0:	9f ef       	ldi	r25, 0xFF	; 255
 aa2:	2c c0       	rjmp	.+88     	; 0xafc <fputc+0x6e>
 aa4:	22 ff       	sbrs	r18, 2
 aa6:	16 c0       	rjmp	.+44     	; 0xad4 <fputc+0x46>
 aa8:	46 81       	ldd	r20, Z+6	; 0x06
 aaa:	57 81       	ldd	r21, Z+7	; 0x07
 aac:	24 81       	ldd	r18, Z+4	; 0x04
 aae:	35 81       	ldd	r19, Z+5	; 0x05
 ab0:	42 17       	cp	r20, r18
 ab2:	53 07       	cpc	r21, r19
 ab4:	44 f4       	brge	.+16     	; 0xac6 <fputc+0x38>
 ab6:	a0 81       	ld	r26, Z
 ab8:	b1 81       	ldd	r27, Z+1	; 0x01
 aba:	9d 01       	movw	r18, r26
 abc:	2f 5f       	subi	r18, 0xFF	; 255
 abe:	3f 4f       	sbci	r19, 0xFF	; 255
 ac0:	20 83       	st	Z, r18
 ac2:	31 83       	std	Z+1, r19	; 0x01
 ac4:	8c 93       	st	X, r24
 ac6:	26 81       	ldd	r18, Z+6	; 0x06
 ac8:	37 81       	ldd	r19, Z+7	; 0x07
 aca:	2f 5f       	subi	r18, 0xFF	; 255
 acc:	3f 4f       	sbci	r19, 0xFF	; 255
 ace:	26 83       	std	Z+6, r18	; 0x06
 ad0:	37 83       	std	Z+7, r19	; 0x07
 ad2:	14 c0       	rjmp	.+40     	; 0xafc <fputc+0x6e>
 ad4:	8b 01       	movw	r16, r22
 ad6:	ec 01       	movw	r28, r24
 ad8:	fb 01       	movw	r30, r22
 ada:	00 84       	ldd	r0, Z+8	; 0x08
 adc:	f1 85       	ldd	r31, Z+9	; 0x09
 ade:	e0 2d       	mov	r30, r0
 ae0:	09 95       	icall
 ae2:	89 2b       	or	r24, r25
 ae4:	e1 f6       	brne	.-72     	; 0xa9e <fputc+0x10>
 ae6:	d8 01       	movw	r26, r16
 ae8:	16 96       	adiw	r26, 0x06	; 6
 aea:	8d 91       	ld	r24, X+
 aec:	9c 91       	ld	r25, X
 aee:	17 97       	sbiw	r26, 0x07	; 7
 af0:	01 96       	adiw	r24, 0x01	; 1
 af2:	16 96       	adiw	r26, 0x06	; 6
 af4:	8d 93       	st	X+, r24
 af6:	9c 93       	st	X, r25
 af8:	17 97       	sbiw	r26, 0x07	; 7
 afa:	ce 01       	movw	r24, r28
 afc:	df 91       	pop	r29
 afe:	cf 91       	pop	r28
 b00:	1f 91       	pop	r17
 b02:	0f 91       	pop	r16
 b04:	08 95       	ret

00000b06 <__ultoa_invert>:
 b06:	fa 01       	movw	r30, r20
 b08:	aa 27       	eor	r26, r26
 b0a:	28 30       	cpi	r18, 0x08	; 8
 b0c:	51 f1       	breq	.+84     	; 0xb62 <__ultoa_invert+0x5c>
 b0e:	20 31       	cpi	r18, 0x10	; 16
 b10:	81 f1       	breq	.+96     	; 0xb72 <__ultoa_invert+0x6c>
 b12:	e8 94       	clt
 b14:	6f 93       	push	r22
 b16:	6e 7f       	andi	r22, 0xFE	; 254
 b18:	6e 5f       	subi	r22, 0xFE	; 254
 b1a:	7f 4f       	sbci	r23, 0xFF	; 255
 b1c:	8f 4f       	sbci	r24, 0xFF	; 255
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255
 b20:	af 4f       	sbci	r26, 0xFF	; 255
 b22:	b1 e0       	ldi	r27, 0x01	; 1
 b24:	3e d0       	rcall	.+124    	; 0xba2 <__ultoa_invert+0x9c>
 b26:	b4 e0       	ldi	r27, 0x04	; 4
 b28:	3c d0       	rcall	.+120    	; 0xba2 <__ultoa_invert+0x9c>
 b2a:	67 0f       	add	r22, r23
 b2c:	78 1f       	adc	r23, r24
 b2e:	89 1f       	adc	r24, r25
 b30:	9a 1f       	adc	r25, r26
 b32:	a1 1d       	adc	r26, r1
 b34:	68 0f       	add	r22, r24
 b36:	79 1f       	adc	r23, r25
 b38:	8a 1f       	adc	r24, r26
 b3a:	91 1d       	adc	r25, r1
 b3c:	a1 1d       	adc	r26, r1
 b3e:	6a 0f       	add	r22, r26
 b40:	71 1d       	adc	r23, r1
 b42:	81 1d       	adc	r24, r1
 b44:	91 1d       	adc	r25, r1
 b46:	a1 1d       	adc	r26, r1
 b48:	20 d0       	rcall	.+64     	; 0xb8a <__ultoa_invert+0x84>
 b4a:	09 f4       	brne	.+2      	; 0xb4e <__ultoa_invert+0x48>
 b4c:	68 94       	set
 b4e:	3f 91       	pop	r19
 b50:	2a e0       	ldi	r18, 0x0A	; 10
 b52:	26 9f       	mul	r18, r22
 b54:	11 24       	eor	r1, r1
 b56:	30 19       	sub	r19, r0
 b58:	30 5d       	subi	r19, 0xD0	; 208
 b5a:	31 93       	st	Z+, r19
 b5c:	de f6       	brtc	.-74     	; 0xb14 <__ultoa_invert+0xe>
 b5e:	cf 01       	movw	r24, r30
 b60:	08 95       	ret
 b62:	46 2f       	mov	r20, r22
 b64:	47 70       	andi	r20, 0x07	; 7
 b66:	40 5d       	subi	r20, 0xD0	; 208
 b68:	41 93       	st	Z+, r20
 b6a:	b3 e0       	ldi	r27, 0x03	; 3
 b6c:	0f d0       	rcall	.+30     	; 0xb8c <__ultoa_invert+0x86>
 b6e:	c9 f7       	brne	.-14     	; 0xb62 <__ultoa_invert+0x5c>
 b70:	f6 cf       	rjmp	.-20     	; 0xb5e <__ultoa_invert+0x58>
 b72:	46 2f       	mov	r20, r22
 b74:	4f 70       	andi	r20, 0x0F	; 15
 b76:	40 5d       	subi	r20, 0xD0	; 208
 b78:	4a 33       	cpi	r20, 0x3A	; 58
 b7a:	18 f0       	brcs	.+6      	; 0xb82 <__ultoa_invert+0x7c>
 b7c:	49 5d       	subi	r20, 0xD9	; 217
 b7e:	31 fd       	sbrc	r19, 1
 b80:	40 52       	subi	r20, 0x20	; 32
 b82:	41 93       	st	Z+, r20
 b84:	02 d0       	rcall	.+4      	; 0xb8a <__ultoa_invert+0x84>
 b86:	a9 f7       	brne	.-22     	; 0xb72 <__ultoa_invert+0x6c>
 b88:	ea cf       	rjmp	.-44     	; 0xb5e <__ultoa_invert+0x58>
 b8a:	b4 e0       	ldi	r27, 0x04	; 4
 b8c:	a6 95       	lsr	r26
 b8e:	97 95       	ror	r25
 b90:	87 95       	ror	r24
 b92:	77 95       	ror	r23
 b94:	67 95       	ror	r22
 b96:	ba 95       	dec	r27
 b98:	c9 f7       	brne	.-14     	; 0xb8c <__ultoa_invert+0x86>
 b9a:	00 97       	sbiw	r24, 0x00	; 0
 b9c:	61 05       	cpc	r22, r1
 b9e:	71 05       	cpc	r23, r1
 ba0:	08 95       	ret
 ba2:	9b 01       	movw	r18, r22
 ba4:	ac 01       	movw	r20, r24
 ba6:	0a 2e       	mov	r0, r26
 ba8:	06 94       	lsr	r0
 baa:	57 95       	ror	r21
 bac:	47 95       	ror	r20
 bae:	37 95       	ror	r19
 bb0:	27 95       	ror	r18
 bb2:	ba 95       	dec	r27
 bb4:	c9 f7       	brne	.-14     	; 0xba8 <__ultoa_invert+0xa2>
 bb6:	62 0f       	add	r22, r18
 bb8:	73 1f       	adc	r23, r19
 bba:	84 1f       	adc	r24, r20
 bbc:	95 1f       	adc	r25, r21
 bbe:	a0 1d       	adc	r26, r0
 bc0:	08 95       	ret

00000bc2 <ccp_write_io>:
 bc2:	dc 01       	movw	r26, r24
 bc4:	28 ed       	ldi	r18, 0xD8	; 216
 bc6:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f0034>
 bca:	6c 93       	st	X, r22
 bcc:	08 95       	ret

00000bce <__prologue_saves__>:
 bce:	2f 92       	push	r2
 bd0:	3f 92       	push	r3
 bd2:	4f 92       	push	r4
 bd4:	5f 92       	push	r5
 bd6:	6f 92       	push	r6
 bd8:	7f 92       	push	r7
 bda:	8f 92       	push	r8
 bdc:	9f 92       	push	r9
 bde:	af 92       	push	r10
 be0:	bf 92       	push	r11
 be2:	cf 92       	push	r12
 be4:	df 92       	push	r13
 be6:	ef 92       	push	r14
 be8:	ff 92       	push	r15
 bea:	0f 93       	push	r16
 bec:	1f 93       	push	r17
 bee:	cf 93       	push	r28
 bf0:	df 93       	push	r29
 bf2:	cd b7       	in	r28, 0x3d	; 61
 bf4:	de b7       	in	r29, 0x3e	; 62
 bf6:	ca 1b       	sub	r28, r26
 bf8:	db 0b       	sbc	r29, r27
 bfa:	cd bf       	out	0x3d, r28	; 61
 bfc:	de bf       	out	0x3e, r29	; 62
 bfe:	09 94       	ijmp

00000c00 <__epilogue_restores__>:
 c00:	2a 88       	ldd	r2, Y+18	; 0x12
 c02:	39 88       	ldd	r3, Y+17	; 0x11
 c04:	48 88       	ldd	r4, Y+16	; 0x10
 c06:	5f 84       	ldd	r5, Y+15	; 0x0f
 c08:	6e 84       	ldd	r6, Y+14	; 0x0e
 c0a:	7d 84       	ldd	r7, Y+13	; 0x0d
 c0c:	8c 84       	ldd	r8, Y+12	; 0x0c
 c0e:	9b 84       	ldd	r9, Y+11	; 0x0b
 c10:	aa 84       	ldd	r10, Y+10	; 0x0a
 c12:	b9 84       	ldd	r11, Y+9	; 0x09
 c14:	c8 84       	ldd	r12, Y+8	; 0x08
 c16:	df 80       	ldd	r13, Y+7	; 0x07
 c18:	ee 80       	ldd	r14, Y+6	; 0x06
 c1a:	fd 80       	ldd	r15, Y+5	; 0x05
 c1c:	0c 81       	ldd	r16, Y+4	; 0x04
 c1e:	1b 81       	ldd	r17, Y+3	; 0x03
 c20:	aa 81       	ldd	r26, Y+2	; 0x02
 c22:	b9 81       	ldd	r27, Y+1	; 0x01
 c24:	ce 0f       	add	r28, r30
 c26:	d1 1d       	adc	r29, r1
 c28:	cd bf       	out	0x3d, r28	; 61
 c2a:	de bf       	out	0x3e, r29	; 62
 c2c:	ed 01       	movw	r28, r26
 c2e:	08 95       	ret

00000c30 <_exit>:
 c30:	f8 94       	cli

00000c32 <__stop_program>:
 c32:	ff cf       	rjmp	.-2      	; 0xc32 <__stop_program>
