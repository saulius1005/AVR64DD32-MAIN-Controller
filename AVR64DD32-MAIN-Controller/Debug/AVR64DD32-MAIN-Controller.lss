
AVR64DD32-MAIN-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000049c  00806000  0000212e  000021c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000212e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  0080649c  0080649c  0000265e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000265e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000026bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  000026f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008010  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003998  00000000  00000000  0000ab28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000287c  00000000  00000000  0000e4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009d4  00000000  00000000  00010d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f7e  00000000  00000000  00011710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024c2  00000000  00000000  0001468e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  00016b50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e7       	ldi	r29, 0x7F	; 127
      9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
      9c:	14 e6       	ldi	r17, 0x64	; 100
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b0 e6       	ldi	r27, 0x60	; 96
      a2:	ee e2       	ldi	r30, 0x2E	; 46
      a4:	f1 e2       	ldi	r31, 0x21	; 33
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 39       	cpi	r26, 0x9C	; 156
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	24 e6       	ldi	r18, 0x64	; 100
      b4:	ac e9       	ldi	r26, 0x9C	; 156
      b6:	b4 e6       	ldi	r27, 0x64	; 100
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 3c       	cpi	r26, 0xCC	; 204
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 16 05 	call	0xa2c	; 0xa2c <main>
      c6:	0c 94 95 10 	jmp	0x212a	; 0x212a <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <normalize>:
#include "Settings.h"
#include "ActionsVar.h"

// Pagalbinë funkcija: normalizuoja kampà á [0,360)
int16_t normalize(int16_t angle) {
	angle %= 360;
      ce:	68 e6       	ldi	r22, 0x68	; 104
      d0:	71 e0       	ldi	r23, 0x01	; 1
      d2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__divmodhi4>
	if (angle < 0) angle += 360;
      d6:	99 23       	and	r25, r25
      d8:	14 f4       	brge	.+4      	; 0xde <normalize+0x10>
      da:	88 59       	subi	r24, 0x98	; 152
      dc:	9e 4f       	sbci	r25, 0xFE	; 254
	return angle;
}
      de:	08 95       	ret

000000e0 <angle_diff>:

// Pagalbinë: apskaièiuoja maþiausià kampiná atstumà
int16_t angle_diff(int16_t a, int16_t b) {
	int16_t d = abs(a - b) % 360;
      e0:	9c 01       	movw	r18, r24
      e2:	26 1b       	sub	r18, r22
      e4:	37 0b       	sbc	r19, r23
      e6:	c9 01       	movw	r24, r18
      e8:	99 23       	and	r25, r25
      ea:	24 f4       	brge	.+8      	; 0xf4 <angle_diff+0x14>
      ec:	88 27       	eor	r24, r24
      ee:	99 27       	eor	r25, r25
      f0:	82 1b       	sub	r24, r18
      f2:	93 0b       	sbc	r25, r19
      f4:	68 e6       	ldi	r22, 0x68	; 104
      f6:	71 e0       	ldi	r23, 0x01	; 1
      f8:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__divmodhi4>
	return (d > 180) ? 360 - d : d;
      fc:	85 3b       	cpi	r24, 0xB5	; 181
      fe:	91 05       	cpc	r25, r1
     100:	34 f0       	brlt	.+12     	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
     102:	28 e6       	ldi	r18, 0x68	; 104
     104:	31 e0       	ldi	r19, 0x01	; 1
     106:	a9 01       	movw	r20, r18
     108:	48 1b       	sub	r20, r24
     10a:	59 0b       	sbc	r21, r25
     10c:	ca 01       	movw	r24, r20
}
     10e:	08 95       	ret

00000110 <get_safe_azimuth>:

void get_safe_azimuth() {
     110:	cf 92       	push	r12
     112:	df 92       	push	r13
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
	// Galimos saugios kryptys
	int16_t safe1 = normalize((WSData.winddirection * 45) + 90);
     120:	c0 91 c2 64 	lds	r28, 0x64C2	; 0x8064c2 <WSData+0x7>
     124:	2d e2       	ldi	r18, 0x2D	; 45
     126:	c2 9f       	mul	r28, r18
     128:	e0 01       	movw	r28, r0
     12a:	11 24       	eor	r1, r1
     12c:	ce 01       	movw	r24, r28
     12e:	86 5a       	subi	r24, 0xA6	; 166
     130:	9f 4f       	sbci	r25, 0xFF	; 255
     132:	0e 94 67 00 	call	0xce	; 0xce <normalize>
     136:	8c 01       	movw	r16, r24
	int16_t safe2 = normalize((WSData.winddirection * 45) - 90);
     138:	ce 01       	movw	r24, r28
     13a:	8a 55       	subi	r24, 0x5A	; 90
     13c:	91 09       	sbc	r25, r1
     13e:	0e 94 67 00 	call	0xce	; 0xce <normalize>
     142:	ec 01       	movw	r28, r24

	bool valid1 = (safe1 >= MIN_AZIMUTH && safe1 <= MAX_AZIMUTH);
     144:	c8 01       	movw	r24, r16
     146:	4e 97       	sbiw	r24, 0x1e	; 30
	bool valid2 = (safe2 >= MIN_AZIMUTH && safe2 <= MAX_AZIMUTH);
     148:	9e 01       	movw	r18, r28
     14a:	2e 51       	subi	r18, 0x1E	; 30
     14c:	31 09       	sbc	r19, r1

	if (valid1 && valid2) {
     14e:	8d 32       	cpi	r24, 0x2D	; 45
     150:	41 e0       	ldi	r20, 0x01	; 1
     152:	94 07       	cpc	r25, r20
     154:	e8 f4       	brcc	.+58     	; 0x190 <get_safe_azimuth+0x80>
     156:	2d 32       	cpi	r18, 0x2D	; 45
     158:	31 40       	sbci	r19, 0x01	; 1
     15a:	d0 f4       	brcc	.+52     	; 0x190 <get_safe_azimuth+0x80>
		int16_t d1 = angle_diff(SensorData.Azimuth, safe1);
     15c:	e0 90 a2 64 	lds	r14, 0x64A2	; 0x8064a2 <SensorData+0x4>
     160:	f0 90 a3 64 	lds	r15, 0x64A3	; 0x8064a3 <SensorData+0x5>
     164:	b8 01       	movw	r22, r16
     166:	c7 01       	movw	r24, r14
     168:	0e 94 70 00 	call	0xe0	; 0xe0 <angle_diff>
     16c:	6c 01       	movw	r12, r24
		int16_t d2 = angle_diff(SensorData.Azimuth, safe2);
     16e:	be 01       	movw	r22, r28
     170:	c7 01       	movw	r24, r14
     172:	0e 94 70 00 	call	0xe0	; 0xe0 <angle_diff>
		Target.azimuth = (d1 <= d2) ? safe1 : safe2;
     176:	8c 15       	cp	r24, r12
     178:	9d 05       	cpc	r25, r13
     17a:	1c f0       	brlt	.+6      	; 0x182 <get_safe_azimuth+0x72>
     17c:	90 2f       	mov	r25, r16
     17e:	81 2f       	mov	r24, r17
     180:	02 c0       	rjmp	.+4      	; 0x186 <get_safe_azimuth+0x76>
     182:	9c 2f       	mov	r25, r28
     184:	8d 2f       	mov	r24, r29
     186:	90 93 02 60 	sts	0x6002, r25	; 0x806002 <__DATA_REGION_ORIGIN__+0x2>
     18a:	80 93 03 60 	sts	0x6003, r24	; 0x806003 <__DATA_REGION_ORIGIN__+0x3>
	int16_t safe2 = normalize((WSData.winddirection * 45) - 90);

	bool valid1 = (safe1 >= MIN_AZIMUTH && safe1 <= MAX_AZIMUTH);
	bool valid2 = (safe2 >= MIN_AZIMUTH && safe2 <= MAX_AZIMUTH);

	if (valid1 && valid2) {
     18e:	0c c0       	rjmp	.+24     	; 0x1a8 <get_safe_azimuth+0x98>
		int16_t d1 = angle_diff(SensorData.Azimuth, safe1);
		int16_t d2 = angle_diff(SensorData.Azimuth, safe2);
		Target.azimuth = (d1 <= d2) ? safe1 : safe2;
		} else if (valid1) {
     190:	8d 32       	cpi	r24, 0x2D	; 45
     192:	91 40       	sbci	r25, 0x01	; 1
     194:	28 f4       	brcc	.+10     	; 0x1a0 <get_safe_azimuth+0x90>
		Target.azimuth = safe1;
     196:	00 93 02 60 	sts	0x6002, r16	; 0x806002 <__DATA_REGION_ORIGIN__+0x2>
     19a:	10 93 03 60 	sts	0x6003, r17	; 0x806003 <__DATA_REGION_ORIGIN__+0x3>
     19e:	04 c0       	rjmp	.+8      	; 0x1a8 <get_safe_azimuth+0x98>
		} else {
		Target.azimuth = safe2; // visada bus bent vienas tinkamas
     1a0:	c0 93 02 60 	sts	0x6002, r28	; 0x806002 <__DATA_REGION_ORIGIN__+0x2>
     1a4:	d0 93 03 60 	sts	0x6003, r29	; 0x806003 <__DATA_REGION_ORIGIN__+0x3>
	}
}
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	1f 91       	pop	r17
     1ae:	0f 91       	pop	r16
     1b0:	ff 90       	pop	r15
     1b2:	ef 90       	pop	r14
     1b4:	df 90       	pop	r13
     1b6:	cf 90       	pop	r12
     1b8:	08 95       	ret

000001ba <ReachTarget>:

void ReachTarget(){
	if (SensorData.Elevation == Target.elevation) {
     1ba:	20 91 9e 64 	lds	r18, 0x649E	; 0x80649e <SensorData>
     1be:	30 91 9f 64 	lds	r19, 0x649F	; 0x80649f <SensorData+0x1>
     1c2:	80 91 00 60 	lds	r24, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
     1c6:	90 91 01 60 	lds	r25, 0x6001	; 0x806001 <__DATA_REGION_ORIGIN__+0x1>
     1ca:	28 17       	cp	r18, r24
     1cc:	39 07       	cpc	r19, r25
     1ce:	29 f4       	brne	.+10     	; 0x1da <ReachTarget+0x20>
		LinearMotor_stop();
     1d0:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LinearMotor_stop>
		LinearMotor_disable();
     1d4:	0e 94 b0 04 	call	0x960	; 0x960 <LinearMotor_disable>
     1d8:	27 c0       	rjmp	.+78     	; 0x228 <ReachTarget+0x6e>
	} 
	else if(SensorData.Elevation < (Target.elevation - ELEVATION_BACKLASH) || SensorData.Elevation > (Target.elevation + ELEVATION_BACKLASH)){
     1da:	ac 01       	movw	r20, r24
     1dc:	42 50       	subi	r20, 0x02	; 2
     1de:	51 09       	sbc	r21, r1
     1e0:	24 17       	cp	r18, r20
     1e2:	35 07       	cpc	r19, r21
     1e4:	20 f0       	brcs	.+8      	; 0x1ee <ReachTarget+0x34>
     1e6:	02 96       	adiw	r24, 0x02	; 2
     1e8:	82 17       	cp	r24, r18
     1ea:	93 07       	cpc	r25, r19
     1ec:	e8 f4       	brcc	.+58     	; 0x228 <ReachTarget+0x6e>
		LinearMotor_enable();
     1ee:	0e 94 9d 04 	call	0x93a	; 0x93a <LinearMotor_enable>
		LinearMotor_start();
     1f2:	0e 94 c3 04 	call	0x986	; 0x986 <LinearMotor_start>
		if (SensorData.Elevation < (Target.elevation - ELEVATION_BACKLASH)){
     1f6:	20 91 9e 64 	lds	r18, 0x649E	; 0x80649e <SensorData>
     1fa:	30 91 9f 64 	lds	r19, 0x649F	; 0x80649f <SensorData+0x1>
     1fe:	80 91 00 60 	lds	r24, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
     202:	90 91 01 60 	lds	r25, 0x6001	; 0x806001 <__DATA_REGION_ORIGIN__+0x1>
     206:	ac 01       	movw	r20, r24
     208:	42 50       	subi	r20, 0x02	; 2
     20a:	51 09       	sbc	r21, r1
     20c:	24 17       	cp	r18, r20
     20e:	35 07       	cpc	r19, r21
     210:	20 f4       	brcc	.+8      	; 0x21a <ReachTarget+0x60>
			LinearMotor_set_direction(1);
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LinearMotor_set_direction>
     218:	07 c0       	rjmp	.+14     	; 0x228 <ReachTarget+0x6e>
		}
		else if(SensorData.Elevation > (Target.elevation + ELEVATION_BACKLASH)){
     21a:	02 96       	adiw	r24, 0x02	; 2
     21c:	82 17       	cp	r24, r18
     21e:	93 07       	cpc	r25, r19
     220:	18 f4       	brcc	.+6      	; 0x228 <ReachTarget+0x6e>
			LinearMotor_set_direction(0);
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LinearMotor_set_direction>
		}
	}
	if (SensorData.Azimuth == Target.azimuth) {
     228:	20 91 a2 64 	lds	r18, 0x64A2	; 0x8064a2 <SensorData+0x4>
     22c:	30 91 a3 64 	lds	r19, 0x64A3	; 0x8064a3 <SensorData+0x5>
     230:	80 91 02 60 	lds	r24, 0x6002	; 0x806002 <__DATA_REGION_ORIGIN__+0x2>
     234:	90 91 03 60 	lds	r25, 0x6003	; 0x806003 <__DATA_REGION_ORIGIN__+0x3>
     238:	28 17       	cp	r18, r24
     23a:	39 07       	cpc	r19, r25
     23c:	29 f4       	brne	.+10     	; 0x248 <ReachTarget+0x8e>
		Stepper_stop();
     23e:	0e 94 69 07 	call	0xed2	; 0xed2 <Stepper_stop>
		Stepper_disable();
     242:	0e 94 44 07 	call	0xe88	; 0xe88 <Stepper_disable>
     246:	08 95       	ret
	} 
	else  if(SensorData.Azimuth < (Target.azimuth - AZIMUTH_BACKLASH) || SensorData.Azimuth > (Target.azimuth + AZIMUTH_BACKLASH)){
     248:	ac 01       	movw	r20, r24
     24a:	45 50       	subi	r20, 0x05	; 5
     24c:	51 09       	sbc	r21, r1
     24e:	24 17       	cp	r18, r20
     250:	35 07       	cpc	r19, r21
     252:	20 f0       	brcs	.+8      	; 0x25c <ReachTarget+0xa2>
     254:	05 96       	adiw	r24, 0x05	; 5
     256:	82 17       	cp	r24, r18
     258:	93 07       	cpc	r25, r19
     25a:	e8 f4       	brcc	.+58     	; 0x296 <ReachTarget+0xdc>
		Stepper_enable();
     25c:	0e 94 31 07 	call	0xe62	; 0xe62 <Stepper_enable>
		Stepper_start();
     260:	0e 94 57 07 	call	0xeae	; 0xeae <Stepper_start>
		if (SensorData.Azimuth < (Target.azimuth - AZIMUTH_BACKLASH)){
     264:	20 91 a2 64 	lds	r18, 0x64A2	; 0x8064a2 <SensorData+0x4>
     268:	30 91 a3 64 	lds	r19, 0x64A3	; 0x8064a3 <SensorData+0x5>
     26c:	80 91 02 60 	lds	r24, 0x6002	; 0x806002 <__DATA_REGION_ORIGIN__+0x2>
     270:	90 91 03 60 	lds	r25, 0x6003	; 0x806003 <__DATA_REGION_ORIGIN__+0x3>
     274:	ac 01       	movw	r20, r24
     276:	45 50       	subi	r20, 0x05	; 5
     278:	51 09       	sbc	r21, r1
     27a:	24 17       	cp	r18, r20
     27c:	35 07       	cpc	r19, r21
     27e:	20 f4       	brcc	.+8      	; 0x288 <ReachTarget+0xce>
			Stepper_set_direction(1);
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	0e 94 7e 07 	call	0xefc	; 0xefc <Stepper_set_direction>
     286:	08 95       	ret
		}
		else if(SensorData.Azimuth > (Target.azimuth + AZIMUTH_BACKLASH)){
     288:	05 96       	adiw	r24, 0x05	; 5
     28a:	82 17       	cp	r24, r18
     28c:	93 07       	cpc	r25, r19
     28e:	18 f4       	brcc	.+6      	; 0x296 <ReachTarget+0xdc>
			Stepper_set_direction(0);
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	0e 94 7e 07 	call	0xefc	; 0xefc <Stepper_set_direction>
     296:	08 95       	ret

00000298 <work>:
		}
	}
}

void work(){
	if(WSData.windspeed > MAX_WIND){
     298:	80 91 c1 64 	lds	r24, 0x64C1	; 0x8064c1 <WSData+0x6>
     29c:	80 31       	cpi	r24, 0x10	; 16
     29e:	48 f0       	brcs	.+18     	; 0x2b2 <work+0x1a>
		get_safe_azimuth();
     2a0:	0e 94 88 00 	call	0x110	; 0x110 <get_safe_azimuth>
		Target.elevation = SAFE_ELEVATION;
     2a4:	84 e1       	ldi	r24, 0x14	; 20
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	80 93 00 60 	sts	0x6000, r24	; 0x806000 <__DATA_REGION_ORIGIN__>
     2ac:	90 93 01 60 	sts	0x6001, r25	; 0x806001 <__DATA_REGION_ORIGIN__+0x1>
     2b0:	08 95       	ret
	}
	else{
		Target.azimuth = WSData.azimuth;
     2b2:	ab eb       	ldi	r26, 0xBB	; 187
     2b4:	b4 e6       	ldi	r27, 0x64	; 100
     2b6:	8d 91       	ld	r24, X+
     2b8:	9c 91       	ld	r25, X
     2ba:	11 97       	sbiw	r26, 0x01	; 1
     2bc:	e0 e0       	ldi	r30, 0x00	; 0
     2be:	f0 e6       	ldi	r31, 0x60	; 96
     2c0:	82 83       	std	Z+2, r24	; 0x02
     2c2:	93 83       	std	Z+3, r25	; 0x03
		Target.elevation = WSData.elevation;
     2c4:	12 96       	adiw	r26, 0x02	; 2
     2c6:	8d 91       	ld	r24, X+
     2c8:	9c 91       	ld	r25, X
     2ca:	13 97       	sbiw	r26, 0x03	; 3
     2cc:	80 83       	st	Z, r24
     2ce:	91 83       	std	Z+1, r25	; 0x01
		ReachTarget();
     2d0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ReachTarget>
     2d4:	08 95       	ret

000002d6 <ADC0_init>:

}

void ADC0_SetupSysVoltage(){
	VREF.ADC0REF = VREF_REFSEL_1V024_gc; // 1.024V = 4096| 1.024 = 10.24V|
	ADC0.MUXPOS = ADC_MUXPOS_VDDDIV10_gc; //5V = 0.5V
     2d6:	e0 e0       	ldi	r30, 0x00	; 0
     2d8:	f6 e0       	ldi	r31, 0x06	; 6
     2da:	87 e0       	ldi	r24, 0x07	; 7
     2dc:	81 83       	std	Z+1, r24	; 0x01
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	82 83       	std	Z+2, r24	; 0x02
     2e2:	80 83       	st	Z, r24
     2e4:	08 95       	ret

000002e6 <ADC0_SetupJoystick>:
     2e6:	95 e0       	ldi	r25, 0x05	; 5
     2e8:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
     2ec:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     2f0:	08 95       	ret

000002f2 <ADC0_read>:
 * appropriately.
 *
 * @return The ADC conversion result as a 12-bit value.
 */
uint16_t ADC0_read() {
    ADC0.COMMAND = ADC_STCONV_bm; // Start conversion
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7f060a>
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)); // Wait until result is ready
     2f8:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7f060d>
     2fc:	80 ff       	sbrs	r24, 0
     2fe:	fc cf       	rjmp	.-8      	; 0x2f8 <ADC0_read+0x6>
    ADC0.INTFLAGS = ADC_RESRDY_bm; // Clear result ready flag
     300:	e0 e0       	ldi	r30, 0x00	; 0
     302:	f6 e0       	ldi	r31, 0x06	; 6
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	85 87       	std	Z+13, r24	; 0x0d
    return ADC0.RES >> 4; // Shift result if accumulation is over 16
     308:	80 89       	ldd	r24, Z+16	; 0x10
     30a:	91 89       	ldd	r25, Z+17	; 0x11
}
     30c:	92 95       	swap	r25
     30e:	82 95       	swap	r24
     310:	8f 70       	andi	r24, 0x0F	; 15
     312:	89 27       	eor	r24, r25
     314:	9f 70       	andi	r25, 0x0F	; 15
     316:	89 27       	eor	r24, r25
     318:	08 95       	ret

0000031a <CLOCK_XOSCHF_clock_init>:
#include "Settings.h"

void CLOCK_XOSCHF_clock_init()
{
	/* Enable external (32 MHz) clock input */
	ccp_write_io((uint8_t *) &CLKCTRL.XOSCHFCTRLA, CLKCTRL_SELHF_EXTCLOCK_gc | CLKCTRL_FRQRANGE_24M_gc | CLKCTRL_ENABLE_bm);
     31a:	6b e0       	ldi	r22, 0x0B	; 11
     31c:	80 e8       	ldi	r24, 0x80	; 128
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 43 10 	call	0x2086	; 0x2086 <ccp_write_io>

	/* Set the main clock to use external clock as source */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc);
     324:	63 e0       	ldi	r22, 0x03	; 3
     326:	80 e6       	ldi	r24, 0x60	; 96
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 43 10 	call	0x2086	; 0x2086 <ccp_write_io>

	/* Wait for system oscillator change to complete */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm)
     32e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
     332:	80 fd       	sbrc	r24, 0
     334:	fc cf       	rjmp	.-8      	; 0x32e <CLOCK_XOSCHF_clock_init+0x14>
	{};
	/* Configuration complete;*/
}
     336:	08 95       	ret

00000338 <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
     338:	2f 92       	push	r2
     33a:	3f 92       	push	r3
     33c:	4f 92       	push	r4
     33e:	5f 92       	push	r5
     340:	6f 92       	push	r6
     342:	7f 92       	push	r7
     344:	8f 92       	push	r8
     346:	9f 92       	push	r9
     348:	af 92       	push	r10
     34a:	bf 92       	push	r11
     34c:	cf 92       	push	r12
     34e:	df 92       	push	r13
     350:	ef 92       	push	r14
     352:	ff 92       	push	r15
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
     360:	2b 97       	sbiw	r28, 0x0b	; 11
     362:	cd bf       	out	0x3d, r28	; 61
     364:	de bf       	out	0x3e, r29	; 62
     366:	c2 2e       	mov	r12, r18
     368:	b3 2e       	mov	r11, r19
     36a:	a4 2e       	mov	r10, r20
     36c:	95 2e       	mov	r9, r21
     36e:	86 2e       	mov	r8, r22
     370:	77 2e       	mov	r7, r23
     372:	68 2e       	mov	r6, r24
     374:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
     376:	f2 2e       	mov	r15, r18
     378:	03 2f       	mov	r16, r19
     37a:	14 2f       	mov	r17, r20
     37c:	5a 87       	std	Y+10, r21	; 0x0a
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	b7 2f       	mov	r27, r23
     382:	d8 2e       	mov	r13, r24
     384:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
     386:	e0 e0       	ldi	r30, 0x00	; 0
     388:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     38a:	14 c0       	rjmp	.+40     	; 0x3b4 <crc8_cdma2000+0x7c>
        length++;
     38c:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
     38e:	2f 2d       	mov	r18, r15
     390:	30 2f       	mov	r19, r16
     392:	41 2f       	mov	r20, r17
     394:	5a 85       	ldd	r21, Y+10	; 0x0a
     396:	69 81       	ldd	r22, Y+1	; 0x01
     398:	7b 2f       	mov	r23, r27
     39a:	8d 2d       	mov	r24, r13
     39c:	9e 2d       	mov	r25, r14
     39e:	08 e0       	ldi	r16, 0x08	; 8
     3a0:	0e 94 ef 0a 	call	0x15de	; 0x15de <__lshrdi3>
     3a4:	f2 2e       	mov	r15, r18
     3a6:	03 2f       	mov	r16, r19
     3a8:	14 2f       	mov	r17, r20
     3aa:	5a 87       	std	Y+10, r21	; 0x0a
     3ac:	69 83       	std	Y+1, r22	; 0x01
     3ae:	b7 2f       	mov	r27, r23
     3b0:	d8 2e       	mov	r13, r24
     3b2:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     3b4:	2f 2d       	mov	r18, r15
     3b6:	30 2f       	mov	r19, r16
     3b8:	41 2f       	mov	r20, r17
     3ba:	5a 85       	ldd	r21, Y+10	; 0x0a
     3bc:	69 81       	ldd	r22, Y+1	; 0x01
     3be:	7b 2f       	mov	r23, r27
     3c0:	8d 2d       	mov	r24, r13
     3c2:	9e 2d       	mov	r25, r14
     3c4:	a0 e0       	ldi	r26, 0x00	; 0
     3c6:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__cmpdi2_s8>
     3ca:	01 f7       	brne	.-64     	; 0x38c <crc8_cdma2000+0x54>
     3cc:	8f ef       	ldi	r24, 0xFF	; 255
     3ce:	8a 87       	std	Y+10, r24	; 0x0a
     3d0:	cb 86       	std	Y+11, r12	; 0x0b
     3d2:	b9 82       	std	Y+1, r11	; 0x01
     3d4:	4a 2c       	mov	r4, r10
     3d6:	39 2c       	mov	r3, r9
     3d8:	28 2c       	mov	r2, r8
     3da:	1a c0       	rjmp	.+52     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
     3dc:	8d 01       	movw	r16, r26
     3de:	00 0f       	add	r16, r16
     3e0:	11 1f       	adc	r17, r17
     3e2:	00 0f       	add	r16, r16
     3e4:	11 1f       	adc	r17, r17
     3e6:	00 0f       	add	r16, r16
     3e8:	11 1f       	adc	r17, r17
     3ea:	2b 85       	ldd	r18, Y+11	; 0x0b
     3ec:	39 81       	ldd	r19, Y+1	; 0x01
     3ee:	44 2d       	mov	r20, r4
     3f0:	53 2d       	mov	r21, r3
     3f2:	62 2d       	mov	r22, r2
     3f4:	77 2d       	mov	r23, r7
     3f6:	86 2d       	mov	r24, r6
     3f8:	95 2d       	mov	r25, r5
     3fa:	0e 94 ef 0a 	call	0x15de	; 0x15de <__lshrdi3>
     3fe:	8a 84       	ldd	r8, Y+10	; 0x0a
     400:	82 26       	eor	r8, r18
     402:	91 2c       	mov	r9, r1
     404:	f4 01       	movw	r30, r8
     406:	e3 59       	subi	r30, 0x93	; 147
     408:	fc 49       	sbci	r31, 0x9C	; 156
     40a:	80 81       	ld	r24, Z
     40c:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
     40e:	fd 01       	movw	r30, r26
     410:	df 01       	movw	r26, r30
     412:	11 97       	sbiw	r26, 0x01	; 1
     414:	ef 2b       	or	r30, r31
     416:	11 f7       	brne	.-60     	; 0x3dc <crc8_cdma2000+0xa4>
     418:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
     41a:	2b 96       	adiw	r28, 0x0b	; 11
     41c:	cd bf       	out	0x3d, r28	; 61
     41e:	de bf       	out	0x3e, r29	; 62
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	bf 90       	pop	r11
     432:	af 90       	pop	r10
     434:	9f 90       	pop	r9
     436:	8f 90       	pop	r8
     438:	7f 90       	pop	r7
     43a:	6f 90       	pop	r6
     43c:	5f 90       	pop	r5
     43e:	4f 90       	pop	r4
     440:	3f 90       	pop	r3
     442:	2f 90       	pop	r2
     444:	08 95       	ret

00000446 <verify_crc8_cdma2000>:
 * without the CRC byte. Otherwise, it returns 0 to indicate a mismatch.
 * 
 * @param data_with_crc The input data with the CRC byte appended.
 * @return The data without the CRC byte if the checksum is valid, or 0 if invalid.
 */
uint8_t verify_crc8_cdma2000(uint64_t data_without_crc, uint8_t crc) {
     446:	0f 93       	push	r16
     448:	cf 93       	push	r28
     44a:	c2 2f       	mov	r28, r18

	return crc8_cdma2000(data_without_crc) == crc ?  data_without_crc : 0;
     44c:	0e 94 9c 01 	call	0x338	; 0x338 <crc8_cdma2000>
     450:	80 13       	cpse	r24, r16
     452:	02 c0       	rjmp	.+4      	; 0x458 <verify_crc8_cdma2000+0x12>
     454:	8c 2f       	mov	r24, r28
     456:	01 c0       	rjmp	.+2      	; 0x45a <verify_crc8_cdma2000+0x14>
     458:	80 e0       	ldi	r24, 0x00	; 0

     45a:	cf 91       	pop	r28
     45c:	0f 91       	pop	r16
     45e:	08 95       	ret

00000460 <hexToUint64>:
 *  Author: Saulius
 */ 
#include "Settings.h"
#include "FOUSARTVar.h"

uint64_t hexToUint64(const char *str) {
     460:	0f 93       	push	r16
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	fc 01       	movw	r30, r24
	uint64_t result = 0;
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	40 e0       	ldi	r20, 0x00	; 0
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
	char c;

	while ((c = *str++)) {
     478:	3a c0       	rjmp	.+116    	; 0x4ee <hexToUint64+0x8e>
		result <<= 4; // kiekvienas hex simbolis = 4 bitai
     47a:	04 e0       	ldi	r16, 0x04	; 4
     47c:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__ashldi3>

		if (c >= '0' && c <= '9') {
     480:	e0 ed       	ldi	r30, 0xD0	; 208
     482:	ec 0f       	add	r30, r28
     484:	ea 30       	cpi	r30, 0x0A	; 10
     486:	70 f4       	brcc	.+28     	; 0x4a4 <hexToUint64+0x44>
			result |= (uint64_t)(c - '0');
     488:	d0 e0       	ldi	r29, 0x00	; 0
     48a:	e0 97       	sbiw	r28, 0x30	; 48
     48c:	ed 2f       	mov	r30, r29
     48e:	ee 0f       	add	r30, r30
     490:	ee 0b       	sbc	r30, r30
     492:	2c 2b       	or	r18, r28
     494:	3d 2b       	or	r19, r29
     496:	4e 2b       	or	r20, r30
     498:	5e 2b       	or	r21, r30
     49a:	6e 2b       	or	r22, r30
     49c:	7e 2b       	or	r23, r30
     49e:	8e 2b       	or	r24, r30
     4a0:	9e 2b       	or	r25, r30
     4a2:	24 c0       	rjmp	.+72     	; 0x4ec <hexToUint64+0x8c>
			} else if (c >= 'A' && c <= 'F') {
     4a4:	ef eb       	ldi	r30, 0xBF	; 191
     4a6:	ec 0f       	add	r30, r28
     4a8:	e6 30       	cpi	r30, 0x06	; 6
     4aa:	70 f4       	brcc	.+28     	; 0x4c8 <hexToUint64+0x68>
			result |= (uint64_t)(c - 'A' + 10);
     4ac:	d0 e0       	ldi	r29, 0x00	; 0
     4ae:	e7 97       	sbiw	r28, 0x37	; 55
     4b0:	ed 2f       	mov	r30, r29
     4b2:	ee 0f       	add	r30, r30
     4b4:	ee 0b       	sbc	r30, r30
     4b6:	2c 2b       	or	r18, r28
     4b8:	3d 2b       	or	r19, r29
     4ba:	4e 2b       	or	r20, r30
     4bc:	5e 2b       	or	r21, r30
     4be:	6e 2b       	or	r22, r30
     4c0:	7e 2b       	or	r23, r30
     4c2:	8e 2b       	or	r24, r30
     4c4:	9e 2b       	or	r25, r30
     4c6:	12 c0       	rjmp	.+36     	; 0x4ec <hexToUint64+0x8c>
			} else if (c >= 'a' && c <= 'f') {
     4c8:	ef e9       	ldi	r30, 0x9F	; 159
     4ca:	ec 0f       	add	r30, r28
     4cc:	e6 30       	cpi	r30, 0x06	; 6
     4ce:	a8 f4       	brcc	.+42     	; 0x4fa <hexToUint64+0x9a>
			result |= (uint64_t)(c - 'a' + 10);
     4d0:	d0 e0       	ldi	r29, 0x00	; 0
     4d2:	c7 55       	subi	r28, 0x57	; 87
     4d4:	d1 09       	sbc	r29, r1
     4d6:	ed 2f       	mov	r30, r29
     4d8:	ee 0f       	add	r30, r30
     4da:	ee 0b       	sbc	r30, r30
     4dc:	2c 2b       	or	r18, r28
     4de:	3d 2b       	or	r19, r29
     4e0:	4e 2b       	or	r20, r30
     4e2:	5e 2b       	or	r21, r30
     4e4:	6e 2b       	or	r22, r30
     4e6:	7e 2b       	or	r23, r30
     4e8:	8e 2b       	or	r24, r30
     4ea:	9e 2b       	or	r25, r30
     4ec:	fd 01       	movw	r30, r26

uint64_t hexToUint64(const char *str) {
	uint64_t result = 0;
	char c;

	while ((c = *str++)) {
     4ee:	df 01       	movw	r26, r30
     4f0:	11 96       	adiw	r26, 0x01	; 1
     4f2:	c0 81       	ld	r28, Z
     4f4:	c1 11       	cpse	r28, r1
     4f6:	c1 cf       	rjmp	.-126    	; 0x47a <hexToUint64+0x1a>
     4f8:	08 c0       	rjmp	.+16     	; 0x50a <hexToUint64+0xaa>
			result |= (uint64_t)(c - 'A' + 10);
			} else if (c >= 'a' && c <= 'f') {
			result |= (uint64_t)(c - 'a' + 10);
			} else {
			// netinkamas simbolis
			return 0;
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return result;
}
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	0f 91       	pop	r16
     510:	08 95       	ret

00000512 <FODataSplitter>:

void FODataSplitter(char *command) {
     512:	7f 92       	push	r7
     514:	8f 92       	push	r8
     516:	9f 92       	push	r9
     518:	af 92       	push	r10
     51a:	bf 92       	push	r11
     51c:	cf 92       	push	r12
     51e:	df 92       	push	r13
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
     530:	a0 97       	sbiw	r28, 0x20	; 32
     532:	cd bf       	out	0x3d, r28	; 61
     534:	de bf       	out	0x3e, r29	; 62
     536:	6c 01       	movw	r12, r24
	const uint8_t lengths[] = {4, 4, 3, 3, 1, 2};
     538:	86 e0       	ldi	r24, 0x06	; 6
     53a:	e3 e4       	ldi	r30, 0x43	; 67
     53c:	f3 e6       	ldi	r31, 0x63	; 99
     53e:	de 01       	movw	r26, r28
     540:	11 96       	adiw	r26, 0x01	; 1
     542:	01 90       	ld	r0, Z+
     544:	0d 92       	st	X+, r0
     546:	8a 95       	dec	r24
     548:	e1 f7       	brne	.-8      	; 0x542 <FODataSplitter+0x30>
	char temp[16];

	strncpy(temp, command, 15);
     54a:	4f e0       	ldi	r20, 0x0F	; 15
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	b6 01       	movw	r22, r12
     550:	ce 01       	movw	r24, r28
     552:	07 96       	adiw	r24, 0x07	; 7
     554:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <strncpy>
	temp[15] = '\0';
     558:	1e 8a       	std	Y+22, r1	; 0x16
	uint64_t datatocheck = hexToUint64(temp);
     55a:	ce 01       	movw	r24, r28
     55c:	07 96       	adiw	r24, 0x07	; 7
     55e:	0e 94 30 02 	call	0x460	; 0x460 <hexToUint64>
     562:	72 2e       	mov	r7, r18
     564:	83 2e       	mov	r8, r19
     566:	94 2e       	mov	r9, r20
     568:	a5 2e       	mov	r10, r21
     56a:	b6 2e       	mov	r11, r22
     56c:	e7 2e       	mov	r14, r23
     56e:	f8 2e       	mov	r15, r24
     570:	19 2f       	mov	r17, r25
	strncpy(temp, command + 15, 2); 
     572:	b6 01       	movw	r22, r12
     574:	61 5f       	subi	r22, 0xF1	; 241
     576:	7f 4f       	sbci	r23, 0xFF	; 255
     578:	42 e0       	ldi	r20, 0x02	; 2
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	ce 01       	movw	r24, r28
     57e:	07 96       	adiw	r24, 0x07	; 7
     580:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <strncpy>
	temp[2] = '\0';
     584:	19 86       	std	Y+9, r1	; 0x09
	uint8_t crctocheck = (uint8_t)strtol(temp, NULL, 16);
     586:	40 e1       	ldi	r20, 0x10	; 16
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	ce 01       	movw	r24, r28
     590:	07 96       	adiw	r24, 0x07	; 7
     592:	0e 94 2b 0b 	call	0x1656	; 0x1656 <strtol>

	if(verify_crc8_cdma2000(datatocheck, crctocheck)){ //if data valid update it
     596:	06 2f       	mov	r16, r22
     598:	27 2d       	mov	r18, r7
     59a:	38 2d       	mov	r19, r8
     59c:	49 2d       	mov	r20, r9
     59e:	5a 2d       	mov	r21, r10
     5a0:	6b 2d       	mov	r22, r11
     5a2:	7e 2d       	mov	r23, r14
     5a4:	8f 2d       	mov	r24, r15
     5a6:	91 2f       	mov	r25, r17
     5a8:	0e 94 23 02 	call	0x446	; 0x446 <verify_crc8_cdma2000>
     5ac:	81 11       	cpse	r24, r1
     5ae:	75 c0       	rjmp	.+234    	; 0x69a <FODataSplitter+0x188>
     5b0:	98 c0       	rjmp	.+304    	; 0x6e2 <FODataSplitter+0x1d0>
		//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
		const char *p = command;
		uint8_t EndSwitchesValue = 0;

		for (uint8_t i = 0; i < 6; i++) {
			char token[10] = {0};
     5b2:	5e 01       	movw	r10, r28
     5b4:	87 e1       	ldi	r24, 0x17	; 23
     5b6:	a8 0e       	add	r10, r24
     5b8:	b1 1c       	adc	r11, r1
     5ba:	8a e0       	ldi	r24, 0x0A	; 10
     5bc:	f5 01       	movw	r30, r10
     5be:	11 92       	st	Z+, r1
     5c0:	8a 95       	dec	r24
     5c2:	e9 f7       	brne	.-6      	; 0x5be <FODataSplitter+0xac>

			memcpy(token, p, lengths[i]);
     5c4:	e1 e0       	ldi	r30, 0x01	; 1
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	ec 0f       	add	r30, r28
     5ca:	fd 1f       	adc	r31, r29
     5cc:	e1 0f       	add	r30, r17
     5ce:	f1 1d       	adc	r31, r1
     5d0:	e0 80       	ld	r14, Z
     5d2:	f1 2c       	mov	r15, r1
     5d4:	a7 01       	movw	r20, r14
     5d6:	b6 01       	movw	r22, r12
     5d8:	c5 01       	movw	r24, r10
     5da:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <memcpy>
			token[lengths[i]] = '\0';
     5de:	f5 01       	movw	r30, r10
     5e0:	ee 0d       	add	r30, r14
     5e2:	ff 1d       	adc	r31, r15
     5e4:	10 82       	st	Z, r1

			switch (i) {
     5e6:	12 30       	cpi	r17, 0x02	; 2
     5e8:	89 f1       	breq	.+98     	; 0x64c <FODataSplitter+0x13a>
     5ea:	28 f4       	brcc	.+10     	; 0x5f6 <FODataSplitter+0xe4>
     5ec:	11 23       	and	r17, r17
     5ee:	49 f0       	breq	.+18     	; 0x602 <FODataSplitter+0xf0>
     5f0:	11 30       	cpi	r17, 0x01	; 1
     5f2:	a1 f0       	breq	.+40     	; 0x61c <FODataSplitter+0x10a>
     5f4:	4e c0       	rjmp	.+156    	; 0x692 <FODataSplitter+0x180>
     5f6:	13 30       	cpi	r17, 0x03	; 3
     5f8:	b1 f1       	breq	.+108    	; 0x666 <FODataSplitter+0x154>
     5fa:	14 30       	cpi	r17, 0x04	; 4
     5fc:	09 f4       	brne	.+2      	; 0x600 <FODataSplitter+0xee>
     5fe:	40 c0       	rjmp	.+128    	; 0x680 <FODataSplitter+0x16e>
     600:	48 c0       	rjmp	.+144    	; 0x692 <FODataSplitter+0x180>
				case 0: SensorData.HPElevation   = (uint16_t)strtol(token, NULL, 16); break;
     602:	40 e1       	ldi	r20, 0x10	; 16
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	ce 01       	movw	r24, r28
     60c:	47 96       	adiw	r24, 0x17	; 23
     60e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <strtol>
     612:	60 93 a0 64 	sts	0x64A0, r22	; 0x8064a0 <SensorData+0x2>
     616:	70 93 a1 64 	sts	0x64A1, r23	; 0x8064a1 <SensorData+0x3>
     61a:	3b c0       	rjmp	.+118    	; 0x692 <FODataSplitter+0x180>
				case 1: SensorData.Azimuth     = (uint16_t)strtol(token, NULL, 16)/ Angle_Precizion; break;
     61c:	40 e1       	ldi	r20, 0x10	; 16
     61e:	50 e0       	ldi	r21, 0x00	; 0
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	ce 01       	movw	r24, r28
     626:	47 96       	adiw	r24, 0x17	; 23
     628:	0e 94 2b 0b 	call	0x1656	; 0x1656 <strtol>
     62c:	9b 01       	movw	r18, r22
     62e:	36 95       	lsr	r19
     630:	27 95       	ror	r18
     632:	36 95       	lsr	r19
     634:	27 95       	ror	r18
     636:	ab e7       	ldi	r26, 0x7B	; 123
     638:	b4 e1       	ldi	r27, 0x14	; 20
     63a:	0e 94 c5 0a 	call	0x158a	; 0x158a <__umulhisi3>
     63e:	96 95       	lsr	r25
     640:	87 95       	ror	r24
     642:	80 93 a2 64 	sts	0x64A2, r24	; 0x8064a2 <SensorData+0x4>
     646:	90 93 a3 64 	sts	0x64A3, r25	; 0x8064a3 <SensorData+0x5>
     64a:	23 c0       	rjmp	.+70     	; 0x692 <FODataSplitter+0x180>
				case 2: SensorData.PVU         = (uint16_t)strtol(token, NULL, 16)/ U_I_Precizion; break;
     64c:	40 e1       	ldi	r20, 0x10	; 16
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	ce 01       	movw	r24, r28
     656:	47 96       	adiw	r24, 0x17	; 23
     658:	0e 94 2b 0b 	call	0x1656	; 0x1656 <strtol>
     65c:	60 93 a4 64 	sts	0x64A4, r22	; 0x8064a4 <SensorData+0x6>
     660:	70 93 a5 64 	sts	0x64A5, r23	; 0x8064a5 <SensorData+0x7>
     664:	16 c0       	rjmp	.+44     	; 0x692 <FODataSplitter+0x180>
				case 3: SensorData.PVI         = (uint16_t)strtol(token, NULL, 16)/ U_I_Precizion; break;
     666:	40 e1       	ldi	r20, 0x10	; 16
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	ce 01       	movw	r24, r28
     670:	47 96       	adiw	r24, 0x17	; 23
     672:	0e 94 2b 0b 	call	0x1656	; 0x1656 <strtol>
     676:	60 93 a6 64 	sts	0x64A6, r22	; 0x8064a6 <SensorData+0x8>
     67a:	70 93 a7 64 	sts	0x64A7, r23	; 0x8064a7 <SensorData+0x9>
     67e:	09 c0       	rjmp	.+18     	; 0x692 <FODataSplitter+0x180>
				case 4: EndSwitchesValue       = (uint8_t)strtol(token, NULL, 16); break; //common end switches value
     680:	40 e1       	ldi	r20, 0x10	; 16
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	ce 01       	movw	r24, r28
     68a:	47 96       	adiw	r24, 0x17	; 23
     68c:	0e 94 2b 0b 	call	0x1656	; 0x1656 <strtol>
     690:	06 2f       	mov	r16, r22
			}

			p += lengths[i];
     692:	ce 0c       	add	r12, r14
     694:	df 1c       	adc	r13, r15
	if(verify_crc8_cdma2000(datatocheck, crctocheck)){ //if data valid update it
		//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
		const char *p = command;
		uint8_t EndSwitchesValue = 0;

		for (uint8_t i = 0; i < 6; i++) {
     696:	1f 5f       	subi	r17, 0xFF	; 255
     698:	02 c0       	rjmp	.+4      	; 0x69e <FODataSplitter+0x18c>
     69a:	10 e0       	ldi	r17, 0x00	; 0
     69c:	00 e0       	ldi	r16, 0x00	; 0
     69e:	16 30       	cpi	r17, 0x06	; 6
     6a0:	08 f4       	brcc	.+2      	; 0x6a4 <FODataSplitter+0x192>
     6a2:	87 cf       	rjmp	.-242    	; 0x5b2 <FODataSplitter+0xa0>
				case 4: EndSwitchesValue       = (uint8_t)strtol(token, NULL, 16); break; //common end switches value
			}

			p += lengths[i];
		}
		SensorData.Elevation = SensorData.HPElevation / Angle_Precizion;
     6a4:	ee e9       	ldi	r30, 0x9E	; 158
     6a6:	f4 e6       	ldi	r31, 0x64	; 100
     6a8:	22 81       	ldd	r18, Z+2	; 0x02
     6aa:	33 81       	ldd	r19, Z+3	; 0x03
     6ac:	36 95       	lsr	r19
     6ae:	27 95       	ror	r18
     6b0:	36 95       	lsr	r19
     6b2:	27 95       	ror	r18
     6b4:	ab e7       	ldi	r26, 0x7B	; 123
     6b6:	b4 e1       	ldi	r27, 0x14	; 20
     6b8:	0e 94 c5 0a 	call	0x158a	; 0x158a <__umulhisi3>
     6bc:	96 95       	lsr	r25
     6be:	87 95       	ror	r24
     6c0:	80 83       	st	Z, r24
     6c2:	91 83       	std	Z+1, r25	; 0x01
		//spliting end switch value to separate end switch value according to axis
		SensorData.ElMin = (EndSwitchesValue & 0x01) ? 1 : 0;
     6c4:	80 2f       	mov	r24, r16
     6c6:	81 70       	andi	r24, 0x01	; 1
     6c8:	82 87       	std	Z+10, r24	; 0x0a
		SensorData.ElMax = (EndSwitchesValue & 0x02) ? 1 : 0;
     6ca:	01 fb       	bst	r16, 1
     6cc:	88 27       	eor	r24, r24
     6ce:	80 f9       	bld	r24, 0
     6d0:	83 87       	std	Z+11, r24	; 0x0b
		SensorData.AzMin = (EndSwitchesValue & 0x04) ? 1 : 0;
     6d2:	02 fb       	bst	r16, 2
     6d4:	88 27       	eor	r24, r24
     6d6:	80 f9       	bld	r24, 0
     6d8:	84 87       	std	Z+12, r24	; 0x0c
		SensorData.AzMax = (EndSwitchesValue & 0x08) ? 1 : 0;
     6da:	03 fb       	bst	r16, 3
     6dc:	00 27       	eor	r16, r16
     6de:	00 f9       	bld	r16, 0
     6e0:	05 87       	std	Z+13, r16	; 0x0d
	}
	else{
		//uncomment if nedded
		//screen_write_formatted_text("data is corupted!", 1, ALIGN_CENTER); // bad crc
	}	
}
     6e2:	a0 96       	adiw	r28, 0x20	; 32
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	de bf       	out	0x3e, r29	; 62
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	df 90       	pop	r13
     6f6:	cf 90       	pop	r12
     6f8:	bf 90       	pop	r11
     6fa:	af 90       	pop	r10
     6fc:	9f 90       	pop	r9
     6fe:	8f 90       	pop	r8
     700:	7f 90       	pop	r7
     702:	08 95       	ret

00000704 <FOReceiver>:
 * This function continuously reads incoming data via USART, processes the data, 
 * and executes the appropriate command. If an error occurs or a warning is set, 
 * it handles the corresponding state. The function handles both normal command 
 * processing and error recovery.
 */
void FOReceiver() {
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	64 97       	sbiw	r28, 0x14	; 20
     716:	cd bf       	out	0x3d, r28	; 61
     718:	de bf       	out	0x3e, r29	; 62
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
     71a:	fe 01       	movw	r30, r28
     71c:	31 96       	adiw	r30, 0x01	; 1
     71e:	84 e1       	ldi	r24, 0x14	; 20
     720:	df 01       	movw	r26, r30
     722:	1d 92       	st	X+, r1
     724:	8a 95       	dec	r24
     726:	e9 f7       	brne	.-6      	; 0x722 <FOReceiver+0x1e>
    uint8_t start = 0;
	uint16_t timeout = FO_TIMEOUT_COUNTER;
     728:	08 e8       	ldi	r16, 0x88	; 136
     72a:	13 e1       	ldi	r17, 0x13	; 19
 * processing and error recovery.
 */
void FOReceiver() {
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
    uint8_t start = 0;
     72c:	e1 2c       	mov	r14, r1
 * and executes the appropriate command. If an error occurs or a warning is set, 
 * it handles the corresponding state. The function handles both normal command 
 * processing and error recovery.
 */
void FOReceiver() {
    uint8_t index = 0;
     72e:	f1 2c       	mov	r15, r1
     730:	03 c0       	rjmp	.+6      	; 0x738 <FOReceiver+0x34>
            } else if (index < MESSAGE_LENGTH_FO) {
                command[index++] = c; // Store received character in command array
            }
        }
        if (c == '<') { // If received data start symbol
            start = 1;
     732:	ee 24       	eor	r14, r14
     734:	e3 94       	inc	r14
            index = 0;
     736:	f1 2c       	mov	r15, r1
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
    uint8_t start = 0;
	uint16_t timeout = FO_TIMEOUT_COUNTER;

    while (1) {
        char c = USART1_readChar(); // Reading a character from USART
     738:	0e 94 c1 08 	call	0x1182	; 0x1182 <USART1_readChar>

		if (--timeout == 0) { // Timeout condition
     73c:	01 50       	subi	r16, 0x01	; 1
     73e:	11 09       	sbc	r17, r1
     740:	f1 f0       	breq	.+60     	; 0x77e <FOReceiver+0x7a>
			break;
		}
        if (start) {
     742:	ee 20       	and	r14, r14
     744:	c9 f0       	breq	.+50     	; 0x778 <FOReceiver+0x74>
            if (c == '>') { // If received data end symbol
     746:	8e 33       	cpi	r24, 0x3E	; 62
     748:	61 f4       	brne	.+24     	; 0x762 <FOReceiver+0x5e>
               start = 0;
			   command[index] = '\0';
     74a:	e1 e0       	ldi	r30, 0x01	; 1
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	ec 0f       	add	r30, r28
     750:	fd 1f       	adc	r31, r29
     752:	ef 0d       	add	r30, r15
     754:	f1 1d       	adc	r31, r1
     756:	10 82       	st	Z, r1
               index = 0;
               FODataSplitter(command); // Execute the received command //comment when testing lines below
     758:	ce 01       	movw	r24, r28
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	0e 94 89 02 	call	0x512	; 0x512 <FODataSplitter>
               break;
     760:	0e c0       	rjmp	.+28     	; 0x77e <FOReceiver+0x7a>
            } else if (index < MESSAGE_LENGTH_FO) {
     762:	b3 e1       	ldi	r27, 0x13	; 19
     764:	bf 15       	cp	r27, r15
     766:	40 f0       	brcs	.+16     	; 0x778 <FOReceiver+0x74>
                command[index++] = c; // Store received character in command array
     768:	e1 e0       	ldi	r30, 0x01	; 1
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	ec 0f       	add	r30, r28
     76e:	fd 1f       	adc	r31, r29
     770:	ef 0d       	add	r30, r15
     772:	f1 1d       	adc	r31, r1
     774:	80 83       	st	Z, r24
     776:	f3 94       	inc	r15
            }
        }
        if (c == '<') { // If received data start symbol
     778:	8c 33       	cpi	r24, 0x3C	; 60
     77a:	f1 f6       	brne	.-68     	; 0x738 <FOReceiver+0x34>
     77c:	da cf       	rjmp	.-76     	; 0x732 <FOReceiver+0x2e>
            start = 1;
            index = 0;
        }
    }
     77e:	64 96       	adiw	r28, 0x14	; 20
     780:	cd bf       	out	0x3d, r28	; 61
     782:	de bf       	out	0x3e, r29	; 62
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	08 95       	ret

00000792 <GPIO_init>:

#include "Settings.h"

void GPIO_init(){
    // Configure USART0 and USART1 pin routing
    PORTMUX.USARTROUTEA = PORTMUX_USART0_ALT1_gc | PORTMUX_USART1_ALT2_gc; // Set USART0 to alternative pins set 1, USART1 to alternative pins set 2
     792:	e0 ee       	ldi	r30, 0xE0	; 224
     794:	f5 e0       	ldi	r31, 0x05	; 5
     796:	81 e1       	ldi	r24, 0x11	; 17
     798:	82 83       	std	Z+2, r24	; 0x02
    PORTMUX.TWIROUTEA = PORTMUX_TWI0_DEFAULT_gc; // Set TWI0 to default pins
     79a:	16 82       	std	Z+6, r1	; 0x06
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;
     79c:	83 e0       	ldi	r24, 0x03	; 3
     79e:	87 83       	std	Z+7, r24	; 0x07
	PORTMUX.TCDROUTEA = PORTMUX_TCD0_ALT2_gc; ///< Select alternative WOC pin variant 2
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	81 87       	std	Z+9, r24	; 0x09


    // Configure Port A (PA) for RX LED, I2C SDA, SCL, USART0 TX, TX LED and XDIR
    PORTA.DIRSET = PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // Set PA2, PA3, PA4, PA7 as output (RX LED, I2C SDA, SCL, USART0 TX, TX LED, XDIR)
     7a4:	e0 e0       	ldi	r30, 0x00	; 0
     7a6:	f4 e0       	ldi	r31, 0x04	; 4
     7a8:	8c ed       	ldi	r24, 0xDC	; 220
     7aa:	81 83       	std	Z+1, r24	; 0x01
    PORTA.DIRCLR = PIN1_bm | PIN5_bm; // Set  PA1 as Joystick button,  PA5 as input (USART0 RX)
     7ac:	82 e2       	ldi	r24, 0x22	; 34
     7ae:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA1 (Joystick button)
     7b0:	88 e0       	ldi	r24, 0x08	; 8
     7b2:	81 8b       	std	Z+17, r24	; 0x11
    PORTA.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA4 (I2C SCL)
     7b4:	84 8b       	std	Z+20, r24	; 0x14
    PORTA.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA5 (USART0 RX)
     7b6:	85 8b       	std	Z+21, r24	; 0x15

    // Configure ADC pins for Joystick x and y axis
    PORTC.PIN1CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC1 (X axis)
     7b8:	e0 e4       	ldi	r30, 0x40	; 64
     7ba:	f4 e0       	ldi	r31, 0x04	; 4
     7bc:	91 89       	ldd	r25, Z+17	; 0x11
     7be:	98 7f       	andi	r25, 0xF8	; 248
     7c0:	91 8b       	std	Z+17, r25	; 0x11
    PORTC.PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC1
     7c2:	91 89       	ldd	r25, Z+17	; 0x11
     7c4:	94 60       	ori	r25, 0x04	; 4
     7c6:	91 8b       	std	Z+17, r25	; 0x11
    //PORTC.PIN1CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC1

    PORTC.PIN2CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC2 (Y axis)
     7c8:	92 89       	ldd	r25, Z+18	; 0x12
     7ca:	98 7f       	andi	r25, 0xF8	; 248
     7cc:	92 8b       	std	Z+18, r25	; 0x12
    PORTC.PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC2
     7ce:	92 89       	ldd	r25, Z+18	; 0x12
     7d0:	94 60       	ori	r25, 0x04	; 4
     7d2:	92 8b       	std	Z+18, r25	; 0x12
    //PORTC.PIN2CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC2

	PORTC.DIRSET = PIN0_bm; //Set PC0 as RX LED
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	91 83       	std	Z+1, r25	; 0x01

    // Configure Port D (PD) for USART1 TX and RX
    PORTD.DIRSET = PIN2_bm | PIN3_bm | PIN5_bm; //Set PD2 as linear motor disable pin, PD3 as PWM, PD5 as direction
     7d8:	9c e2       	ldi	r25, 0x2C	; 44
     7da:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f0461>
	//PORTD.DIRCLR = PIN4_bm; //Linear motor driver TLE9201SG error flag pin

	PORTF.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm; //Set PF1 as enable, PF2 as pulse, PIN3 as direction signals output for HBS86 driver
     7de:	e0 ea       	ldi	r30, 0xA0	; 160
     7e0:	f4 e0       	ldi	r31, 0x04	; 4
     7e2:	9e e0       	ldi	r25, 0x0E	; 14
     7e4:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRCLR = PIN4_bm | PIN5_bm; //Set PF4 as alarm and PF5 as Pend signals inputs from HBS86 driver
     7e6:	90 e3       	ldi	r25, 0x30	; 48
     7e8:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PF4
     7ea:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PF5
     7ec:	85 8b       	std	Z+21, r24	; 0x15
     7ee:	08 95       	ret

000007f0 <I2C_init>:
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal to release the bus
    return data;
}
     7f0:	e0 e0       	ldi	r30, 0x00	; 0
     7f2:	f9 e0       	ldi	r31, 0x09	; 9
     7f4:	82 e0       	ldi	r24, 0x02	; 2
     7f6:	80 83       	st	Z, r24
     7f8:	85 e0       	ldi	r24, 0x05	; 5
     7fa:	86 83       	std	Z+6, r24	; 0x06
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	83 83       	std	Z+3, r24	; 0x03
     800:	85 83       	std	Z+5, r24	; 0x05
     802:	08 95       	ret

00000804 <TransmitAdd>:
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	88 0f       	add	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	86 2b       	or	r24, r22
     80c:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7f0907>
     810:	48 e8       	ldi	r20, 0x88	; 136
     812:	53 e1       	ldi	r21, 0x13	; 19
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	09 c0       	rjmp	.+18     	; 0x82c <TransmitAdd+0x28>
     81a:	41 50       	subi	r20, 0x01	; 1
     81c:	51 09       	sbc	r21, r1
     81e:	61 09       	sbc	r22, r1
     820:	71 09       	sbc	r23, r1
     822:	21 f4       	brne	.+8      	; 0x82c <TransmitAdd+0x28>
     824:	83 e0       	ldi	r24, 0x03	; 3
     826:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     82a:	05 c0       	rjmp	.+10     	; 0x836 <TransmitAdd+0x32>
     82c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     830:	80 7c       	andi	r24, 0xC0	; 192
     832:	99 f3       	breq	.-26     	; 0x81a <TransmitAdd+0x16>
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     83a:	94 fd       	sbrc	r25, 4
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     842:	9c 70       	andi	r25, 0x0C	; 12
     844:	09 f0       	breq	.+2      	; 0x848 <TransmitAdd+0x44>
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	88 23       	and	r24, r24
     84a:	19 f0       	breq	.+6      	; 0x852 <TransmitAdd+0x4e>
     84c:	93 e0       	ldi	r25, 0x03	; 3
     84e:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     852:	80 93 ac 64 	sts	0x64AC, r24	; 0x8064ac <I2C>
     856:	08 95       	ret

00000858 <TransmitByte>:
     858:	28 2f       	mov	r18, r24
     85a:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     85e:	94 fd       	sbrc	r25, 4
     860:	02 c0       	rjmp	.+4      	; 0x866 <TransmitByte+0xe>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	01 c0       	rjmp	.+2      	; 0x868 <TransmitByte+0x10>
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     86c:	9c 70       	andi	r25, 0x0C	; 12
     86e:	09 f0       	breq	.+2      	; 0x872 <TransmitByte+0x1a>
     870:	82 e0       	ldi	r24, 0x02	; 2
     872:	88 23       	and	r24, r24
     874:	19 f0       	breq	.+6      	; 0x87c <TransmitByte+0x24>
     876:	93 e0       	ldi	r25, 0x03	; 3
     878:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     87c:	81 11       	cpse	r24, r1
     87e:	14 c0       	rjmp	.+40     	; 0x8a8 <TransmitByte+0x50>
     880:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <__TEXT_REGION_LENGTH__+0x7f0908>
     884:	48 e8       	ldi	r20, 0x88	; 136
     886:	53 e1       	ldi	r21, 0x13	; 19
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	09 c0       	rjmp	.+18     	; 0x8a0 <TransmitByte+0x48>
     88e:	41 50       	subi	r20, 0x01	; 1
     890:	51 09       	sbc	r21, r1
     892:	61 09       	sbc	r22, r1
     894:	71 09       	sbc	r23, r1
     896:	21 f4       	brne	.+8      	; 0x8a0 <TransmitByte+0x48>
     898:	83 e0       	ldi	r24, 0x03	; 3
     89a:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     89e:	04 c0       	rjmp	.+8      	; 0x8a8 <TransmitByte+0x50>
     8a0:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     8a4:	96 ff       	sbrs	r25, 6
     8a6:	f3 cf       	rjmp	.-26     	; 0x88e <TransmitByte+0x36>
     8a8:	80 93 ac 64 	sts	0x64AC, r24	; 0x8064ac <I2C>
     8ac:	08 95       	ret

000008ae <WriteToReg>:
 * @param reg Register address to write to.
 * @param data Data to write to the register.
 * 
 * This function writes the data to a specific register of an I2C device.
 */
void WriteToReg(uint8_t addr, uint8_t reg, uint8_t data) {
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	c6 2f       	mov	r28, r22
     8b4:	d4 2f       	mov	r29, r20
    if (!TransmitAdd(addr, WRITE)) { // Transmit address for write
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	0e 94 02 04 	call	0x804	; 0x804 <TransmitAdd>
     8bc:	81 11       	cpse	r24, r1
     8be:	08 c0       	rjmp	.+16     	; 0x8d0 <WriteToReg+0x22>
        if (!TransmitByte(reg)) { // Write register address
     8c0:	8c 2f       	mov	r24, r28
     8c2:	0e 94 2c 04 	call	0x858	; 0x858 <TransmitByte>
     8c6:	81 11       	cpse	r24, r1
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <WriteToReg+0x22>
            TransmitByte(data); // Write the data with STOP
     8ca:	8d 2f       	mov	r24, r29
     8cc:	0e 94 2c 04 	call	0x858	; 0x858 <TransmitByte>
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal
     8d0:	e0 e0       	ldi	r30, 0x00	; 0
     8d2:	f9 e0       	ldi	r31, 0x09	; 9
     8d4:	84 81       	ldd	r24, Z+4	; 0x04
     8d6:	83 60       	ori	r24, 0x03	; 3
     8d8:	84 83       	std	Z+4, r24	; 0x04
}
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <ReadButton>:
 */ 
#include "Settings.h"
#include "JoystickVar.h"

uint8_t ReadButton(){
	return !(PORTA.IN & PIN1_bm);
     8e0:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
     8e4:	86 95       	lsr	r24
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	89 27       	eor	r24, r25
}
     8ea:	81 70       	andi	r24, 0x01	; 1
     8ec:	08 95       	ret

000008ee <ReadJoystickValues>:


void ReadJoystickValues(){
     8ee:	0f 93       	push	r16
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
	ADC0_SetupJoystick(Joystick_X_axis_CH);
     8f6:	8e e1       	ldi	r24, 0x1E	; 30
     8f8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <ADC0_SetupJoystick>
	Joystick.X_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps; // 5 steps total: -2,-1,0,1,2 (4096/1000 = 4,096)
     8fc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <ADC0_read>
     900:	98 50       	subi	r25, 0x08	; 8
     902:	04 ef       	ldi	r16, 0xF4	; 244
     904:	11 e0       	ldi	r17, 0x01	; 1
     906:	b8 01       	movw	r22, r16
     908:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__divmodhi4>
     90c:	cd ea       	ldi	r28, 0xAD	; 173
     90e:	d4 e6       	ldi	r29, 0x64	; 100
     910:	68 83       	st	Y, r22
     912:	79 83       	std	Y+1, r23	; 0x01
	ADC0_SetupJoystick(Joystick_Y_axis_CH);
     914:	8d e1       	ldi	r24, 0x1D	; 29
     916:	0e 94 73 01 	call	0x2e6	; 0x2e6 <ADC0_SetupJoystick>
	Joystick.Y_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps;
     91a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <ADC0_read>
     91e:	98 50       	subi	r25, 0x08	; 8
     920:	b8 01       	movw	r22, r16
     922:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__divmodhi4>
     926:	6a 83       	std	Y+2, r22	; 0x02
     928:	7b 83       	std	Y+3, r23	; 0x03
	Joystick.Button = ReadButton();
     92a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <ReadButton>
     92e:	8c 83       	std	Y+4, r24	; 0x04
}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	08 95       	ret

0000093a <LinearMotor_enable>:
 */ 
#include "Settings.h"
#include "LinearMotorVar.h"

void LinearMotor_enable(){ //turn on TLE9201SG
	if(LinearMotor.alreadyEnabled == false){
     93a:	80 91 b5 64 	lds	r24, 0x64B5	; 0x8064b5 <LinearMotor+0x3>
     93e:	81 11       	cpse	r24, r1
     940:	0e c0       	rjmp	.+28     	; 0x95e <LinearMotor_enable+0x24>
		PORTD.OUTCLR = PIN2_bm;  // DIS=0
     942:	84 e0       	ldi	r24, 0x04	; 4
     944:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     948:	8f e5       	ldi	r24, 0x5F	; 95
     94a:	9a ee       	ldi	r25, 0xEA	; 234
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <LinearMotor_enable+0x12>
     950:	00 c0       	rjmp	.+0      	; 0x952 <LinearMotor_enable+0x18>
     952:	00 00       	nop
		_delay_ms(10);
		LinearMotor.alreadyEnabled = true;
     954:	e2 eb       	ldi	r30, 0xB2	; 178
     956:	f4 e6       	ldi	r31, 0x64	; 100
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	83 83       	std	Z+3, r24	; 0x03
		LinearMotor.alreadyDisabled = false;
     95c:	14 82       	std	Z+4, r1	; 0x04
     95e:	08 95       	ret

00000960 <LinearMotor_disable>:
	}
}

void LinearMotor_disable(){ //turn off TLE9201SG
	if(LinearMotor.alreadyDisabled == false){
     960:	80 91 b6 64 	lds	r24, 0x64B6	; 0x8064b6 <LinearMotor+0x4>
     964:	81 11       	cpse	r24, r1
     966:	0e c0       	rjmp	.+28     	; 0x984 <LinearMotor_disable+0x24>
		PORTD.OUTSET = PIN2_bm;  // DIS=1
     968:	84 e0       	ldi	r24, 0x04	; 4
     96a:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     96e:	8f e5       	ldi	r24, 0x5F	; 95
     970:	9a ee       	ldi	r25, 0xEA	; 234
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <LinearMotor_disable+0x12>
     976:	00 c0       	rjmp	.+0      	; 0x978 <LinearMotor_disable+0x18>
     978:	00 00       	nop
		_delay_ms(10);
		LinearMotor.alreadyDisabled = true;
     97a:	e2 eb       	ldi	r30, 0xB2	; 178
     97c:	f4 e6       	ldi	r31, 0x64	; 100
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	84 83       	std	Z+4, r24	; 0x04
		LinearMotor.alreadyEnabled = false;
     982:	13 82       	std	Z+3, r1	; 0x03
     984:	08 95       	ret

00000986 <LinearMotor_start>:
	}
}

void LinearMotor_start(){ //starting pwm signal generation
	if(LinearMotor.alreadyStarted == false){		
     986:	80 91 b3 64 	lds	r24, 0x64B3	; 0x8064b3 <LinearMotor+0x1>
     98a:	81 11       	cpse	r24, r1
     98c:	0d c0       	rjmp	.+26     	; 0x9a8 <LinearMotor_start+0x22>
		TCA0.SPLIT.CTRLB |= TCA_SPLIT_HCMP0EN_bm; //connecting TCA to PD3
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	fa e0       	ldi	r31, 0x0A	; 10
     992:	81 81       	ldd	r24, Z+1	; 0x01
     994:	80 61       	ori	r24, 0x10	; 16
     996:	81 83       	std	Z+1, r24	; 0x01
		TCA0.SPLIT.CTRLA |= TCA_SPLIT_ENABLE_bm; //turn on TCA back
     998:	80 81       	ld	r24, Z
     99a:	81 60       	ori	r24, 0x01	; 1
     99c:	80 83       	st	Z, r24
		LinearMotor.alreadyStarted = true;
     99e:	e2 eb       	ldi	r30, 0xB2	; 178
     9a0:	f4 e6       	ldi	r31, 0x64	; 100
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	81 83       	std	Z+1, r24	; 0x01
		LinearMotor.alreadyStoped = false;
     9a6:	12 82       	std	Z+2, r1	; 0x02
     9a8:	08 95       	ret

000009aa <LinearMotor_stop>:
	}

}

void LinearMotor_stop(){
	if(LinearMotor.alreadyStoped == false){ //stoping pwm signal generation
     9aa:	80 91 b4 64 	lds	r24, 0x64B4	; 0x8064b4 <LinearMotor+0x2>
     9ae:	81 11       	cpse	r24, r1
     9b0:	19 c0       	rjmp	.+50     	; 0x9e4 <LinearMotor_stop+0x3a>
		TCA0.SPLIT.CTRLB &= ~(TCA_SPLIT_HCMP0EN_bm); //disconecting TCA from PD3
     9b2:	e0 e0       	ldi	r30, 0x00	; 0
     9b4:	fa e0       	ldi	r31, 0x0A	; 10
     9b6:	81 81       	ldd	r24, Z+1	; 0x01
     9b8:	8f 7e       	andi	r24, 0xEF	; 239
     9ba:	81 83       	std	Z+1, r24	; 0x01
		TCA0.SPLIT.CTRLA &= ~TCA_SPLIT_ENABLE_bm;  // turn off TCA
     9bc:	80 81       	ld	r24, Z
     9be:	8e 7f       	andi	r24, 0xFE	; 254
     9c0:	80 83       	st	Z, r24
		PORTD.OUTCLR = PIN3_bm; //ensure PWM low level
     9c2:	88 e0       	ldi	r24, 0x08	; 8
     9c4:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
     9c8:	2f ef       	ldi	r18, 0xFF	; 255
     9ca:	8e e9       	ldi	r24, 0x9E	; 158
     9cc:	94 e2       	ldi	r25, 0x24	; 36
     9ce:	21 50       	subi	r18, 0x01	; 1
     9d0:	80 40       	sbci	r24, 0x00	; 0
     9d2:	90 40       	sbci	r25, 0x00	; 0
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <LinearMotor_stop+0x24>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <LinearMotor_stop+0x2e>
     9d8:	00 00       	nop
		_delay_ms(500); //preventing from error flag- 500mS of free spinning
		LinearMotor.alreadyStoped = true;
     9da:	e2 eb       	ldi	r30, 0xB2	; 178
     9dc:	f4 e6       	ldi	r31, 0x64	; 100
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	82 83       	std	Z+2, r24	; 0x02
		LinearMotor.alreadyStarted = false;
     9e2:	11 82       	std	Z+1, r1	; 0x01
     9e4:	08 95       	ret

000009e6 <LinearMotor_set_direction>:
	}

}

void LinearMotor_set_direction(bool dir)
{
     9e6:	cf 93       	push	r28
    if (dir != LinearMotor.lastDirection)  // if direction change (single time per cycle)
     9e8:	90 91 b2 64 	lds	r25, 0x64B2	; 0x8064b2 <LinearMotor>
     9ec:	98 17       	cp	r25, r24
     9ee:	81 f0       	breq	.+32     	; 0xa10 <LinearMotor_set_direction+0x2a>
     9f0:	c8 2f       	mov	r28, r24
    {
		LinearMotor_stop();
     9f2:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LinearMotor_stop>
		if(dir)
     9f6:	cc 23       	and	r28, r28
     9f8:	21 f0       	breq	.+8      	; 0xa02 <LinearMotor_set_direction+0x1c>
            PORTD.OUTSET = PIN5_bm;   // UP
     9fa:	80 e2       	ldi	r24, 0x20	; 32
     9fc:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     a00:	03 c0       	rjmp	.+6      	; 0xa08 <LinearMotor_set_direction+0x22>
		else
            PORTD.OUTCLR = PIN5_bm;   // DOWN
     a02:	80 e2       	ldi	r24, 0x20	; 32
     a04:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
		LinearMotor_start();
     a08:	0e 94 c3 04 	call	0x986	; 0x986 <LinearMotor_start>
        LinearMotor.lastDirection = dir;
     a0c:	c0 93 b2 64 	sts	0x64B2, r28	; 0x8064b2 <LinearMotor>
    }
}
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <LinearMotor_init>:

void LinearMotor_init(){
	TCA0_init_linear_PWM(20000, 50);
     a14:	62 e3       	ldi	r22, 0x32	; 50
     a16:	80 e2       	ldi	r24, 0x20	; 32
     a18:	9e e4       	ldi	r25, 0x4E	; 78
     a1a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <TCA0_init_linear_PWM>

	PORTD.OUTCLR = PIN3_bm; //set PWM signal low
     a1e:	e0 e6       	ldi	r30, 0x60	; 96
     a20:	f4 e0       	ldi	r31, 0x04	; 4
     a22:	88 e0       	ldi	r24, 0x08	; 8
     a24:	86 83       	std	Z+6, r24	; 0x06
	PORTD.OUTSET = PIN2_bm; //set output disabled for TLE9201SG
     a26:	84 e0       	ldi	r24, 0x04	; 4
     a28:	85 83       	std	Z+5, r24	; 0x05
     a2a:	08 95       	ret

00000a2c <main>:

#include "Settings.h"

int main(void)
{
    CLOCK_XOSCHF_clock_init();
     a2c:	0e 94 8d 01 	call	0x31a	; 0x31a <CLOCK_XOSCHF_clock_init>
    GPIO_init();
     a30:	0e 94 c9 03 	call	0x792	; 0x792 <GPIO_init>
    I2C_init();
     a34:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <I2C_init>
    ADC0_init();
     a38:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <ADC0_init>
    USART0_init();
     a3c:	0e 94 96 08 	call	0x112c	; 0x112c <USART0_init>
    USART1_init();
     a40:	0e 94 b6 08 	call	0x116c	; 0x116c <USART1_init>
    screen_init();
     a44:	0e 94 2b 06 	call	0xc56	; 0xc56 <screen_init>
    screen_clear();
     a48:	0e 94 72 06 	call	0xce4	; 0xce4 <screen_clear>
	LinearMotor_init();
     a4c:	0e 94 0a 05 	call	0xa14	; 0xa14 <LinearMotor_init>
	Stepper_init();
     a50:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Stepper_init>
	
    while (1) 
    {
		RS485Receiver(); //RS485 communication
     a54:	0e 94 d3 05 	call	0xba6	; 0xba6 <RS485Receiver>
		FOReceiver(); // Received Fiber optic data
     a58:	0e 94 82 03 	call	0x704	; 0x704 <FOReceiver>
		ReadJoystickValues(); //Joystick read
     a5c:	0e 94 77 04 	call	0x8ee	; 0x8ee <ReadJoystickValues>
		work();
     a60:	0e 94 4c 01 	call	0x298	; 0x298 <work>
		screen_write_formatted_text("SE:%3d TE:%3d", 0, ALIGN_LEFT, SensorData.Elevation, Target.elevation);
     a64:	00 e0       	ldi	r16, 0x00	; 0
     a66:	10 e6       	ldi	r17, 0x60	; 96
     a68:	f8 01       	movw	r30, r16
     a6a:	81 81       	ldd	r24, Z+1	; 0x01
     a6c:	8f 93       	push	r24
     a6e:	80 81       	ld	r24, Z
     a70:	8f 93       	push	r24
     a72:	ce e9       	ldi	r28, 0x9E	; 158
     a74:	d4 e6       	ldi	r29, 0x64	; 100
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	8f 93       	push	r24
     a7a:	88 81       	ld	r24, Y
     a7c:	8f 93       	push	r24
     a7e:	1f 92       	push	r1
     a80:	1f 92       	push	r1
     a82:	8d e6       	ldi	r24, 0x6D	; 109
     a84:	94 e6       	ldi	r25, 0x64	; 100
     a86:	9f 93       	push	r25
     a88:	8f 93       	push	r24
     a8a:	0e 94 13 07 	call	0xe26	; 0xe26 <screen_write_formatted_text>
		screen_write_formatted_text("SA:%3d TA:%3d", 1, ALIGN_LEFT, SensorData.Azimuth, Target.azimuth);
     a8e:	f8 01       	movw	r30, r16
     a90:	83 81       	ldd	r24, Z+3	; 0x03
     a92:	8f 93       	push	r24
     a94:	82 81       	ldd	r24, Z+2	; 0x02
     a96:	8f 93       	push	r24
     a98:	8d 81       	ldd	r24, Y+5	; 0x05
     a9a:	8f 93       	push	r24
     a9c:	8c 81       	ldd	r24, Y+4	; 0x04
     a9e:	8f 93       	push	r24
     aa0:	1f 92       	push	r1
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	8f 93       	push	r24
     aa6:	8b e7       	ldi	r24, 0x7B	; 123
     aa8:	94 e6       	ldi	r25, 0x64	; 100
     aaa:	9f 93       	push	r25
     aac:	8f 93       	push	r24
     aae:	0e 94 13 07 	call	0xe26	; 0xe26 <screen_write_formatted_text>
		screen_write_formatted_text("SCU:%3d SCI:%3d", 2, ALIGN_LEFT, SensorData.PVU, SensorData.PVI);
     ab2:	89 85       	ldd	r24, Y+9	; 0x09
     ab4:	8f 93       	push	r24
     ab6:	88 85       	ldd	r24, Y+8	; 0x08
     ab8:	8f 93       	push	r24
     aba:	8f 81       	ldd	r24, Y+7	; 0x07
     abc:	8f 93       	push	r24
     abe:	8e 81       	ldd	r24, Y+6	; 0x06
     ac0:	8f 93       	push	r24
     ac2:	1f 92       	push	r1
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	8f 93       	push	r24
     ac8:	89 e8       	ldi	r24, 0x89	; 137
     aca:	94 e6       	ldi	r25, 0x64	; 100
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	0e 94 13 07 	call	0xe26	; 0xe26 <screen_write_formatted_text>
     ad4:	ff ef       	ldi	r31, 0xFF	; 255
     ad6:	22 e5       	ldi	r18, 0x52	; 82
     ad8:	87 e0       	ldi	r24, 0x07	; 7
     ada:	f1 50       	subi	r31, 0x01	; 1
     adc:	20 40       	sbci	r18, 0x00	; 0
     ade:	80 40       	sbci	r24, 0x00	; 0
     ae0:	e1 f7       	brne	.-8      	; 0xada <main+0xae>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <main+0xb8>
     ae4:	00 00       	nop
     ae6:	ed b7       	in	r30, 0x3d	; 61
     ae8:	fe b7       	in	r31, 0x3e	; 62
     aea:	78 96       	adiw	r30, 0x18	; 24
     aec:	ed bf       	out	0x3d, r30	; 61
     aee:	fe bf       	out	0x3e, r31	; 62
     af0:	b1 cf       	rjmp	.-158    	; 0xa54 <main+0x28>

00000af2 <RS485_Led>:
 */ 
#include "Settings.h"

void RS485_Led(RS485_LED_t LED){

    switch (LED) {
     af2:	81 30       	cpi	r24, 0x01	; 1
     af4:	51 f0       	breq	.+20     	; 0xb0a <RS485_Led+0x18>
     af6:	28 f0       	brcs	.+10     	; 0xb02 <RS485_Led+0x10>
     af8:	82 30       	cpi	r24, 0x02	; 2
     afa:	59 f0       	breq	.+22     	; 0xb12 <RS485_Led+0x20>
     afc:	83 30       	cpi	r24, 0x03	; 3
     afe:	69 f0       	breq	.+26     	; 0xb1a <RS485_Led+0x28>
     b00:	08 95       	ret
	    case RX_LED_ON:
			PORTC.OUTSET = PIN0_bm;
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f0445>
		break;
     b08:	08 95       	ret
	    case RX_LED_OFF:
			PORTC.OUTCLR = PIN0_bm;
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f0446>
		break;
     b10:	08 95       	ret
	    case TX_LED_ON:
			PORTA.OUTSET = PIN6_bm;
     b12:	80 e4       	ldi	r24, 0x40	; 64
     b14:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f0405>
		break;
     b18:	08 95       	ret
	    case TX_LED_OFF:
			PORTA.OUTCLR = PIN6_bm;
     b1a:	80 e4       	ldi	r24, 0x40	; 64
     b1c:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f0406>
     b20:	08 95       	ret

00000b22 <RS485DataSplitter>:
 *  Author: Saulius
 */ 
#include "Settings.h"
#include "RS485USARTVar.h"

void RS485DataSplitter(char *command) {
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2c 97       	sbiw	r28, 0x0c	; 12
     b32:	cd bf       	out	0x3d, r28	; 61
     b34:	de bf       	out	0x3e, r29	; 62
	uint16_t *fields[] = {
     b36:	2c e0       	ldi	r18, 0x0C	; 12
     b38:	e9 e4       	ldi	r30, 0x49	; 73
     b3a:	f3 e6       	ldi	r31, 0x63	; 99
     b3c:	de 01       	movw	r26, r28
     b3e:	11 96       	adiw	r26, 0x01	; 1
     b40:	01 90       	ld	r0, Z+
     b42:	0d 92       	st	X+, r0
     b44:	2a 95       	dec	r18
     b46:	e1 f7       	brne	.-8      	; 0xb40 <RS485DataSplitter+0x1e>
		(uint16_t*)&WSData.windspeed,
		(uint16_t*)&WSData.winddirection,
		&WSData.lightlevel
	};

	char *token = strtok(command, "|");
     b48:	69 e9       	ldi	r22, 0x99	; 153
     b4a:	74 e6       	ldi	r23, 0x64	; 100
     b4c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <strtok>
	for (uint8_t i = 0; token != NULL && i < 6; i++) {
     b50:	10 e0       	ldi	r17, 0x00	; 0
     b52:	1c c0       	rjmp	.+56     	; 0xb8c <RS485DataSplitter+0x6a>
		*fields[i] = (uint16_t)strtoul(token, NULL, 10);
     b54:	e1 2f       	mov	r30, r17
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	ee 0f       	add	r30, r30
     b5a:	ff 1f       	adc	r31, r31
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	2c 0f       	add	r18, r28
     b62:	3d 1f       	adc	r19, r29
     b64:	e2 0f       	add	r30, r18
     b66:	f3 1f       	adc	r31, r19
     b68:	e0 80       	ld	r14, Z
     b6a:	f1 80       	ldd	r15, Z+1	; 0x01
     b6c:	4a e0       	ldi	r20, 0x0A	; 10
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	0e 94 41 0c 	call	0x1882	; 0x1882 <strtoul>
     b78:	f7 01       	movw	r30, r14
     b7a:	60 83       	st	Z, r22
     b7c:	71 83       	std	Z+1, r23	; 0x01
		token = strtok(NULL, "|");
     b7e:	69 e9       	ldi	r22, 0x99	; 153
     b80:	74 e6       	ldi	r23, 0x64	; 100
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <strtok>
		(uint16_t*)&WSData.winddirection,
		&WSData.lightlevel
	};

	char *token = strtok(command, "|");
	for (uint8_t i = 0; token != NULL && i < 6; i++) {
     b8a:	1f 5f       	subi	r17, 0xFF	; 255
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	11 f0       	breq	.+4      	; 0xb94 <RS485DataSplitter+0x72>
     b90:	16 30       	cpi	r17, 0x06	; 6
     b92:	00 f3       	brcs	.-64     	; 0xb54 <RS485DataSplitter+0x32>
		*fields[i] = (uint16_t)strtoul(token, NULL, 10);
		token = strtok(NULL, "|");
	}

}
     b94:	2c 96       	adiw	r28, 0x0c	; 12
     b96:	cd bf       	out	0x3d, r28	; 61
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	08 95       	ret

00000ba6 <RS485Receiver>:

void RS485Receiver() {
     ba6:	ef 92       	push	r14
     ba8:	ff 92       	push	r15
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	6b 97       	sbiw	r28, 0x1b	; 27
     bb8:	cd bf       	out	0x3d, r28	; 61
     bba:	de bf       	out	0x3e, r29	; 62
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
     bbc:	fe 01       	movw	r30, r28
     bbe:	31 96       	adiw	r30, 0x01	; 1
     bc0:	8b e1       	ldi	r24, 0x1B	; 27
     bc2:	df 01       	movw	r26, r30
     bc4:	1d 92       	st	X+, r1
     bc6:	8a 95       	dec	r24
     bc8:	e9 f7       	brne	.-6      	; 0xbc4 <RS485Receiver+0x1e>
	uint8_t start = 0;
	uint16_t timeout = RS485_TIMEOUT_COUNTER;
     bca:	08 ee       	ldi	r16, 0xE8	; 232
     bcc:	13 e0       	ldi	r17, 0x03	; 3
}

void RS485Receiver() {
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
	uint8_t start = 0;
     bce:	e1 2c       	mov	r14, r1
	}

}

void RS485Receiver() {
	uint8_t index = 0;
     bd0:	f1 2c       	mov	r15, r1
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
	uint8_t start = 0;
	uint16_t timeout = RS485_TIMEOUT_COUNTER;

	while (1) {
		char c = USART0_readChar(); // Reading a character from USART	
     bd2:	0e 94 a3 08 	call	0x1146	; 0x1146 <USART0_readChar>
		if (--timeout == 0) { // Timeout condition
     bd6:	01 50       	subi	r16, 0x01	; 1
     bd8:	11 09       	sbc	r17, r1
     bda:	39 f1       	breq	.+78     	; 0xc2a <RS485Receiver+0x84>
			break;
		}
		if (start) {
     bdc:	ee 20       	and	r14, r14
     bde:	e1 f0       	breq	.+56     	; 0xc18 <RS485Receiver+0x72>
			if (c == '}') { // If received data end symbol
     be0:	8d 37       	cpi	r24, 0x7D	; 125
     be2:	79 f4       	brne	.+30     	; 0xc02 <RS485Receiver+0x5c>
				RS485_Led(RX_LED_OFF);
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	0e 94 79 05 	call	0xaf2	; 0xaf2 <RS485_Led>
				start = 0;
				command[index] = '\0';
     bea:	e1 e0       	ldi	r30, 0x01	; 1
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	ec 0f       	add	r30, r28
     bf0:	fd 1f       	adc	r31, r29
     bf2:	ef 0d       	add	r30, r15
     bf4:	f1 1d       	adc	r31, r1
     bf6:	10 82       	st	Z, r1
				index = 0;
				RS485DataSplitter(command); // Execute the received command //comment when testing lines below
     bf8:	ce 01       	movw	r24, r28
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	0e 94 91 05 	call	0xb22	; 0xb22 <RS485DataSplitter>
				break;
     c00:	14 c0       	rjmp	.+40     	; 0xc2a <RS485Receiver+0x84>
				} else if (index < MESSAGE_LENGTH_RS485) {
     c02:	ba e1       	ldi	r27, 0x1A	; 26
     c04:	bf 15       	cp	r27, r15
     c06:	40 f0       	brcs	.+16     	; 0xc18 <RS485Receiver+0x72>
				command[index++] = c; // Store received character in command array
     c08:	e1 e0       	ldi	r30, 0x01	; 1
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	ec 0f       	add	r30, r28
     c0e:	fd 1f       	adc	r31, r29
     c10:	ef 0d       	add	r30, r15
     c12:	f1 1d       	adc	r31, r1
     c14:	80 83       	st	Z, r24
     c16:	f3 94       	inc	r15
			}
		}
		if (c == '{') { // If received data start symbol
     c18:	8b 37       	cpi	r24, 0x7B	; 123
     c1a:	d9 f6       	brne	.-74     	; 0xbd2 <RS485Receiver+0x2c>
			start = 1;
			index = 0;
			RS485_Led(RX_LED_ON);
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	0e 94 79 05 	call	0xaf2	; 0xaf2 <RS485_Led>
				} else if (index < MESSAGE_LENGTH_RS485) {
				command[index++] = c; // Store received character in command array
			}
		}
		if (c == '{') { // If received data start symbol
			start = 1;
     c22:	ee 24       	eor	r14, r14
     c24:	e3 94       	inc	r14
			index = 0;
     c26:	f1 2c       	mov	r15, r1
     c28:	d4 cf       	rjmp	.-88     	; 0xbd2 <RS485Receiver+0x2c>
			RS485_Led(RX_LED_ON);
		}
	}
     c2a:	6b 96       	adiw	r28, 0x1b	; 27
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	08 95       	ret

00000c3e <screen_command>:
    if (contrast > 0x3f) {
        contrast = 0x3f;  ///< Ensure contrast does not exceed maximum
    }
    screen_command(0x81);  ///< Send command to set contrast
    screen_command(contrast);  ///< Set the contrast value
}
     c3e:	48 2f       	mov	r20, r24
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	8c e3       	ldi	r24, 0x3C	; 60
     c44:	0e 94 57 04 	call	0x8ae	; 0x8ae <WriteToReg>
     c48:	08 95       	ret

00000c4a <screen_data>:
     c4a:	48 2f       	mov	r20, r24
     c4c:	60 e4       	ldi	r22, 0x40	; 64
     c4e:	8c e3       	ldi	r24, 0x3C	; 60
     c50:	0e 94 57 04 	call	0x8ae	; 0x8ae <WriteToReg>
     c54:	08 95       	ret

00000c56 <screen_init>:
     c56:	cf 93       	push	r28
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	8c e3       	ldi	r24, 0x3C	; 60
     c5c:	0e 94 02 04 	call	0x804	; 0x804 <TransmitAdd>
     c60:	c0 e0       	ldi	r28, 0x00	; 0
     c62:	08 c0       	rjmp	.+16     	; 0xc74 <screen_init+0x1e>
     c64:	ec 2f       	mov	r30, r28
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	e7 5d       	subi	r30, 0xD7	; 215
     c6a:	fc 49       	sbci	r31, 0x9C	; 156
     c6c:	80 81       	ld	r24, Z
     c6e:	0e 94 2c 04 	call	0x858	; 0x858 <TransmitByte>
     c72:	cf 5f       	subi	r28, 0xFF	; 255
     c74:	ca 31       	cpi	r28, 0x1A	; 26
     c76:	b0 f3       	brcs	.-20     	; 0xc64 <screen_init+0xe>
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <screen_draw_char>:
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	d8 2f       	mov	r29, r24
     c84:	80 ee       	ldi	r24, 0xE0	; 224
     c86:	8d 0f       	add	r24, r29
     c88:	80 36       	cpi	r24, 0x60	; 96
     c8a:	28 f0       	brcs	.+10     	; 0xc96 <screen_draw_char+0x1a>
     c8c:	d0 3b       	cpi	r29, 0xB0	; 176
     c8e:	19 f0       	breq	.+6      	; 0xc96 <screen_draw_char+0x1a>
     c90:	d0 3c       	cpi	r29, 0xC0	; 192
     c92:	08 f4       	brcc	.+2      	; 0xc96 <screen_draw_char+0x1a>
     c94:	d0 e2       	ldi	r29, 0x20	; 32
     c96:	d0 3b       	cpi	r29, 0xB0	; 176
     c98:	21 f0       	breq	.+8      	; 0xca2 <screen_draw_char+0x26>
     c9a:	d0 3c       	cpi	r29, 0xC0	; 192
     c9c:	20 f4       	brcc	.+8      	; 0xca6 <screen_draw_char+0x2a>
     c9e:	10 e2       	ldi	r17, 0x20	; 32
     ca0:	03 c0       	rjmp	.+6      	; 0xca8 <screen_draw_char+0x2c>
     ca2:	10 e5       	ldi	r17, 0x50	; 80
     ca4:	01 c0       	rjmp	.+2      	; 0xca8 <screen_draw_char+0x2c>
     ca6:	1f e5       	ldi	r17, 0x5F	; 95
     ca8:	c0 e0       	ldi	r28, 0x00	; 0
     caa:	13 c0       	rjmp	.+38     	; 0xcd2 <screen_draw_char+0x56>
     cac:	8d 2f       	mov	r24, r29
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	81 1b       	sub	r24, r17
     cb2:	91 09       	sbc	r25, r1
     cb4:	fc 01       	movw	r30, r24
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	ee 0f       	add	r30, r30
     cbc:	ff 1f       	adc	r31, r31
     cbe:	e8 0f       	add	r30, r24
     cc0:	f9 1f       	adc	r31, r25
     cc2:	ec 5f       	subi	r30, 0xFC	; 252
     cc4:	ff 49       	sbci	r31, 0x9F	; 159
     cc6:	ec 0f       	add	r30, r28
     cc8:	f1 1d       	adc	r31, r1
     cca:	80 81       	ld	r24, Z
     ccc:	0e 94 25 06 	call	0xc4a	; 0xc4a <screen_data>
     cd0:	cf 5f       	subi	r28, 0xFF	; 255
     cd2:	c5 30       	cpi	r28, 0x05	; 5
     cd4:	58 f3       	brcs	.-42     	; 0xcac <screen_draw_char+0x30>
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	0e 94 25 06 	call	0xc4a	; 0xc4a <screen_data>
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	08 95       	ret

00000ce4 <screen_clear>:
 * @brief Clears the ST7567S display.
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
    for (int page = 0; page < 8; page++) {
     cec:	00 e0       	ldi	r16, 0x00	; 0
     cee:	10 e0       	ldi	r17, 0x00	; 0
     cf0:	16 c0       	rjmp	.+44     	; 0xd1e <screen_clear+0x3a>
        screen_command(0xB0 + page);  ///< Select page
     cf2:	80 eb       	ldi	r24, 0xB0	; 176
     cf4:	80 0f       	add	r24, r16
     cf6:	0e 94 1f 06 	call	0xc3e	; 0xc3e <screen_command>
        screen_command(0x00);  ///< Set column address
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	0e 94 1f 06 	call	0xc3e	; 0xc3e <screen_command>
        screen_command(0x10);  ///< Set column address
     d00:	80 e1       	ldi	r24, 0x10	; 16
     d02:	0e 94 1f 06 	call	0xc3e	; 0xc3e <screen_command>

        for (int column = 0; column < 128; column++) {
     d06:	c0 e0       	ldi	r28, 0x00	; 0
     d08:	d0 e0       	ldi	r29, 0x00	; 0
     d0a:	04 c0       	rjmp	.+8      	; 0xd14 <screen_clear+0x30>
            screen_data(0x00);  ///< Clear each column
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	0e 94 25 06 	call	0xc4a	; 0xc4a <screen_data>
    for (int page = 0; page < 8; page++) {
        screen_command(0xB0 + page);  ///< Select page
        screen_command(0x00);  ///< Set column address
        screen_command(0x10);  ///< Set column address

        for (int column = 0; column < 128; column++) {
     d12:	21 96       	adiw	r28, 0x01	; 1
     d14:	c0 38       	cpi	r28, 0x80	; 128
     d16:	d1 05       	cpc	r29, r1
     d18:	cc f3       	brlt	.-14     	; 0xd0c <screen_clear+0x28>
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
    for (int page = 0; page < 8; page++) {
     d1a:	0f 5f       	subi	r16, 0xFF	; 255
     d1c:	1f 4f       	sbci	r17, 0xFF	; 255
     d1e:	08 30       	cpi	r16, 0x08	; 8
     d20:	11 05       	cpc	r17, r1
     d22:	3c f3       	brlt	.-50     	; 0xcf2 <screen_clear+0xe>
        for (int column = 0; column < 128; column++) {
            screen_data(0x00);  ///< Clear each column
        }
    }
    //screen_contrast(SSD1306_CONTRAST);  ///< Restore contrast
}
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	08 95       	ret

00000d2e <screen_draw_text>:
 * the maximum allowed characters are displayed.
 * 
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	8c 01       	movw	r16, r24
     d38:	d6 2f       	mov	r29, r22
    uint8_t length = 0;
     d3a:	c0 e0       	ldi	r28, 0x00	; 0
    while (*text && length < max_length) {
     d3c:	05 c0       	rjmp	.+10     	; 0xd48 <screen_draw_text+0x1a>
        screen_draw_char(*text);  ///< Draw each character in the string
     d3e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <screen_draw_char>
        text++;
     d42:	0f 5f       	subi	r16, 0xFF	; 255
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
        length++;
     d46:	cf 5f       	subi	r28, 0xFF	; 255
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
    uint8_t length = 0;
    while (*text && length < max_length) {
     d48:	f8 01       	movw	r30, r16
     d4a:	80 81       	ld	r24, Z
     d4c:	88 23       	and	r24, r24
     d4e:	39 f0       	breq	.+14     	; 0xd5e <screen_draw_text+0x30>
     d50:	cd 17       	cp	r28, r29
     d52:	a8 f3       	brcs	.-22     	; 0xd3e <screen_draw_text+0x10>
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <screen_draw_text+0x30>
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
        screen_draw_char(' ');  ///< Fill remaining space with spaces
     d56:	80 e2       	ldi	r24, 0x20	; 32
     d58:	0e 94 3e 06 	call	0xc7c	; 0xc7c <screen_draw_char>
        length++;
     d5c:	cf 5f       	subi	r28, 0xFF	; 255
    while (*text && length < max_length) {
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
     d5e:	cd 17       	cp	r28, r29
     d60:	d0 f3       	brcs	.-12     	; 0xd56 <screen_draw_text+0x28>
        screen_draw_char(' ');  ///< Fill remaining space with spaces
        length++;
    }
}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	08 95       	ret

00000d6c <screen_write_text>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param start_pixel The starting pixel column for the text.
 */
void screen_write_text(char *text, uint8_t line, uint8_t start_pixel) {
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	8c 01       	movw	r16, r24
     d76:	26 2f       	mov	r18, r22
     d78:	c4 2f       	mov	r28, r20
    uint8_t max_chars = (128 - start_pixel) / 6;  ///< Calculate max characters per line
     d7a:	80 e8       	ldi	r24, 0x80	; 128
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	84 1b       	sub	r24, r20
     d80:	91 09       	sbc	r25, r1
     d82:	66 e0       	ldi	r22, 0x06	; 6
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__divmodhi4>
     d8a:	d6 2f       	mov	r29, r22
    screen_command(0xB0 | line);  ///< Set the page (line)
     d8c:	82 2f       	mov	r24, r18
     d8e:	80 6b       	ori	r24, 0xB0	; 176
     d90:	0e 94 1f 06 	call	0xc3e	; 0xc3e <screen_command>
    screen_command(0x10 | (start_pixel >> 4));  ///< Set high byte of column address
     d94:	8c 2f       	mov	r24, r28
     d96:	82 95       	swap	r24
     d98:	8f 70       	andi	r24, 0x0F	; 15
     d9a:	80 61       	ori	r24, 0x10	; 16
     d9c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <screen_command>
    screen_command(0x00 | (start_pixel & 0x0F));  ///< Set low byte of column address
     da0:	8c 2f       	mov	r24, r28
     da2:	8f 70       	andi	r24, 0x0F	; 15
     da4:	0e 94 1f 06 	call	0xc3e	; 0xc3e <screen_command>
    screen_draw_text(text, max_chars);  ///< Draw the text
     da8:	6d 2f       	mov	r22, r29
     daa:	c8 01       	movw	r24, r16
     dac:	0e 94 97 06 	call	0xd2e	; 0xd2e <screen_draw_text>
}
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	08 95       	ret

00000dba <calculate_start_pixel>:
 * @param max_length The maximum number of characters.
 * @param alignment The desired text alignment (left, center, right).
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
     dba:	ac 01       	movw	r20, r24
    uint8_t text_length = 0;
     dbc:	90 e0       	ldi	r25, 0x00	; 0
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
     dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <calculate_start_pixel+0x8>
        text_length++;
     dc0:	9f 5f       	subi	r25, 0xFF	; 255
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
    uint8_t text_length = 0;
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
     dc2:	fa 01       	movw	r30, r20
     dc4:	e9 0f       	add	r30, r25
     dc6:	f1 1d       	adc	r31, r1
     dc8:	20 81       	ld	r18, Z
     dca:	21 11       	cpse	r18, r1
     dcc:	f9 cf       	rjmp	.-14     	; 0xdc0 <calculate_start_pixel+0x6>
        text_length++;
    }

    uint8_t text_width = text_length * 6;  ///< Calculate the width of the text in pixels
     dce:	89 2f       	mov	r24, r25
     dd0:	88 0f       	add	r24, r24
     dd2:	98 0f       	add	r25, r24
     dd4:	29 2f       	mov	r18, r25
     dd6:	22 0f       	add	r18, r18
    switch (alignment) {
     dd8:	61 30       	cpi	r22, 0x01	; 1
     dda:	19 f0       	breq	.+6      	; 0xde2 <calculate_start_pixel+0x28>
     ddc:	62 30       	cpi	r22, 0x02	; 2
     dde:	69 f0       	breq	.+26     	; 0xdfa <calculate_start_pixel+0x40>
     de0:	0f c0       	rjmp	.+30     	; 0xe00 <calculate_start_pixel+0x46>
        case ALIGN_CENTER:
            return (128 - text_width) / 2;  ///< Center the text
     de2:	80 e8       	ldi	r24, 0x80	; 128
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	ac 01       	movw	r20, r24
     de8:	42 1b       	sub	r20, r18
     dea:	51 09       	sbc	r21, r1
     dec:	ca 01       	movw	r24, r20
     dee:	99 23       	and	r25, r25
     df0:	0c f4       	brge	.+2      	; 0xdf4 <calculate_start_pixel+0x3a>
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	95 95       	asr	r25
     df6:	87 95       	ror	r24
     df8:	08 95       	ret
        case ALIGN_RIGHT:
            return (128 - text_width);  ///< Right-align the text
     dfa:	80 e8       	ldi	r24, 0x80	; 128
     dfc:	82 1b       	sub	r24, r18
     dfe:	08 95       	ret
        case ALIGN_LEFT:
        default:
            return 0;  ///< Left-align the text
     e00:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     e02:	08 95       	ret

00000e04 <screen_write_text_aligned>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_text_aligned(char *text, uint8_t line, alignment_t alignment) {
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	ec 01       	movw	r28, r24
     e0c:	16 2f       	mov	r17, r22
    uint8_t start_pixel = calculate_start_pixel(text, alignment);  ///< Calculate start pixel
     e0e:	64 2f       	mov	r22, r20
     e10:	0e 94 dd 06 	call	0xdba	; 0xdba <calculate_start_pixel>
   screen_write_text(text, line, start_pixel);
     e14:	48 2f       	mov	r20, r24
     e16:	61 2f       	mov	r22, r17
     e18:	ce 01       	movw	r24, r28
     e1a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <screen_write_text>
}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	08 95       	ret

00000e26 <screen_write_formatted_text>:
 * 
 * @param format The format string for the text.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_formatted_text(const char *format, uint8_t line, alignment_t alignment, ...) {
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	e2 97       	sbiw	r28, 0x32	; 50
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	de bf       	out	0x3e, r29	; 62
    char textStorage[MAX_TEXT_LENGTH];  ///< Buffer for storing formatted text
    va_list args;  ///< Variable argument list

    va_start(args, alignment);  ///< Start reading variable arguments
    vsnprintf(textStorage, MAX_TEXT_LENGTH, format, args);  ///< Format the text
     e34:	9e 01       	movw	r18, r28
     e36:	25 5c       	subi	r18, 0xC5	; 197
     e38:	3f 4f       	sbci	r19, 0xFF	; 255
     e3a:	4f a9       	ldd	r20, Y+55	; 0x37
     e3c:	58 ad       	ldd	r21, Y+56	; 0x38
     e3e:	62 e3       	ldi	r22, 0x32	; 50
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	ce 01       	movw	r24, r28
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <vsnprintf>
    va_end(args);  ///< End reading variable arguments

    screen_write_text_aligned(textStorage, line, alignment);  ///< Write formatted text to display
     e4a:	4a ad       	ldd	r20, Y+58	; 0x3a
     e4c:	69 ad       	ldd	r22, Y+57	; 0x39
     e4e:	ce 01       	movw	r24, r28
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	0e 94 02 07 	call	0xe04	; 0xe04 <screen_write_text_aligned>
}
     e56:	e2 96       	adiw	r28, 0x32	; 50
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <Stepper_enable>:

// -------------------------
// Stepper Enable / Disable
// -------------------------
void Stepper_enable() {
	if(StepperMotor.alreadyEnabled == false){
     e62:	80 91 c8 64 	lds	r24, 0x64C8	; 0x8064c8 <StepperMotor+0x3>
     e66:	81 11       	cpse	r24, r1
     e68:	0e c0       	rjmp	.+28     	; 0xe86 <Stepper_enable+0x24>
		PORTF.OUTCLR = PIN1_bm; // aktyvus LOW
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
     e70:	8f e5       	ldi	r24, 0x5F	; 95
     e72:	9a ee       	ldi	r25, 0xEA	; 234
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <Stepper_enable+0x12>
     e78:	00 c0       	rjmp	.+0      	; 0xe7a <Stepper_enable+0x18>
     e7a:	00 00       	nop
		_delay_ms(10);
		StepperMotor.alreadyEnabled = true;
     e7c:	e5 ec       	ldi	r30, 0xC5	; 197
     e7e:	f4 e6       	ldi	r31, 0x64	; 100
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	83 83       	std	Z+3, r24	; 0x03
		StepperMotor.alreadyDisabled = false;
     e84:	14 82       	std	Z+4, r1	; 0x04
     e86:	08 95       	ret

00000e88 <Stepper_disable>:
	}
}

void Stepper_disable() {
	if(StepperMotor.alreadyDisabled == false){
     e88:	80 91 c9 64 	lds	r24, 0x64C9	; 0x8064c9 <StepperMotor+0x4>
     e8c:	81 11       	cpse	r24, r1
     e8e:	0e c0       	rjmp	.+28     	; 0xeac <Stepper_disable+0x24>
		PORTF.OUTSET = PIN1_bm; // HIGH = inactive
     e90:	82 e0       	ldi	r24, 0x02	; 2
     e92:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f04a5>
     e96:	8f e5       	ldi	r24, 0x5F	; 95
     e98:	9a ee       	ldi	r25, 0xEA	; 234
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <Stepper_disable+0x12>
     e9e:	00 c0       	rjmp	.+0      	; 0xea0 <Stepper_disable+0x18>
     ea0:	00 00       	nop
		_delay_ms(10);
		StepperMotor.alreadyDisabled = true;
     ea2:	e5 ec       	ldi	r30, 0xC5	; 197
     ea4:	f4 e6       	ldi	r31, 0x64	; 100
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	84 83       	std	Z+4, r24	; 0x04
		StepperMotor.alreadyEnabled = false;
     eaa:	13 82       	std	Z+3, r1	; 0x03
     eac:	08 95       	ret

00000eae <Stepper_start>:

// -------------------------
// Stepper Start / Stop
// -------------------------
void Stepper_start() {
	if(StepperMotor.alreadyStarted == false){
     eae:	80 91 c6 64 	lds	r24, 0x64C6	; 0x8064c6 <StepperMotor+0x1>
     eb2:	81 11       	cpse	r24, r1
     eb4:	0d c0       	rjmp	.+26     	; 0xed0 <Stepper_start+0x22>
		TCD0.FAULTCTRL |= (TCD_CMPAEN_bm | TCD_CMPBEN_bm | TCD_CMPCEN_bm);
     eb6:	e0 e8       	ldi	r30, 0x80	; 128
     eb8:	fb e0       	ldi	r31, 0x0B	; 11
     eba:	82 89       	ldd	r24, Z+18	; 0x12
     ebc:	80 67       	ori	r24, 0x70	; 112
     ebe:	82 8b       	std	Z+18, r24	; 0x12
		TCD0.CTRLA |= TCD_ENABLE_bm;
     ec0:	80 81       	ld	r24, Z
     ec2:	81 60       	ori	r24, 0x01	; 1
     ec4:	80 83       	st	Z, r24
		StepperMotor.alreadyStarted = true;
     ec6:	e5 ec       	ldi	r30, 0xC5	; 197
     ec8:	f4 e6       	ldi	r31, 0x64	; 100
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	81 83       	std	Z+1, r24	; 0x01
		StepperMotor.alreadyStoped = false;
     ece:	12 82       	std	Z+2, r1	; 0x02
     ed0:	08 95       	ret

00000ed2 <Stepper_stop>:
	}
}


void Stepper_stop() {
	if(StepperMotor.alreadyStoped == false){
     ed2:	80 91 c7 64 	lds	r24, 0x64C7	; 0x8064c7 <StepperMotor+0x2>
     ed6:	81 11       	cpse	r24, r1
     ed8:	10 c0       	rjmp	.+32     	; 0xefa <Stepper_stop+0x28>
		TCD0.CTRLA &= ~TCD_ENABLE_bm;
     eda:	e0 e8       	ldi	r30, 0x80	; 128
     edc:	fb e0       	ldi	r31, 0x0B	; 11
     ede:	80 81       	ld	r24, Z
     ee0:	8e 7f       	andi	r24, 0xFE	; 254
     ee2:	80 83       	st	Z, r24
		TCD0.FAULTCTRL &= ~(TCD_CMPAEN_bm | TCD_CMPBEN_bm | TCD_CMPCEN_bm); //disconnecting PF2 from TCD counter
     ee4:	82 89       	ldd	r24, Z+18	; 0x12
     ee6:	8f 78       	andi	r24, 0x8F	; 143
     ee8:	82 8b       	std	Z+18, r24	; 0x12
		PORTF.OUTCLR = PIN2_bm;
     eea:	84 e0       	ldi	r24, 0x04	; 4
     eec:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
		StepperMotor.alreadyStoped = true;
     ef0:	e5 ec       	ldi	r30, 0xC5	; 197
     ef2:	f4 e6       	ldi	r31, 0x64	; 100
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	82 83       	std	Z+2, r24	; 0x02
		StepperMotor.alreadyStarted = false;
     ef8:	11 82       	std	Z+1, r1	; 0x01
     efa:	08 95       	ret

00000efc <Stepper_set_direction>:

// -------------------------
// Stepper Direction
// -------------------------
void Stepper_set_direction(bool dir) {
	if (dir != StepperMotor.lastDirection)  // if direction change (single time per cycle)
     efc:	90 91 c5 64 	lds	r25, 0x64C5	; 0x8064c5 <StepperMotor>
     f00:	98 17       	cp	r25, r24
     f02:	59 f0       	breq	.+22     	; 0xf1a <Stepper_set_direction+0x1e>
	{
		if (dir)
     f04:	88 23       	and	r24, r24
     f06:	21 f0       	breq	.+8      	; 0xf10 <Stepper_set_direction+0x14>
			PORTF.OUTSET = PIN3_bm;
     f08:	98 e0       	ldi	r25, 0x08	; 8
     f0a:	90 93 a5 04 	sts	0x04A5, r25	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f04a5>
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <Stepper_set_direction+0x1a>
		else
			PORTF.OUTCLR = PIN3_bm;
     f10:	98 e0       	ldi	r25, 0x08	; 8
     f12:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
		StepperMotor.lastDirection = dir;
     f16:	80 93 c5 64 	sts	0x64C5, r24	; 0x8064c5 <StepperMotor>
     f1a:	08 95       	ret

00000f1c <Stepper_init>:
// Init function
// -------------------------
void Stepper_init() {

	// Default PWM
	TCD0_init_stepper_PWM(51200, 50); // 51.2kHz, 50% duty
     f1c:	42 e3       	ldi	r20, 0x32	; 50
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	78 ec       	ldi	r23, 0xC8	; 200
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 2e 08 	call	0x105c	; 0x105c <TCD0_init_stepper_PWM>

	// Set idle states
	PORTF.OUTCLR = PIN2_bm; // pulse low
     f2a:	e0 ea       	ldi	r30, 0xA0	; 160
     f2c:	f4 e0       	ldi	r31, 0x04	; 4
     f2e:	84 e0       	ldi	r24, 0x04	; 4
     f30:	86 83       	std	Z+6, r24	; 0x06
	PORTF.OUTSET = PIN1_bm; // disable
     f32:	82 e0       	ldi	r24, 0x02	; 2
     f34:	85 83       	std	Z+5, r24	; 0x05
	PORTF.OUTCLR = PIN3_bm; // default direction
     f36:	88 e0       	ldi	r24, 0x08	; 8
     f38:	86 83       	std	Z+6, r24	; 0x06
     f3a:	08 95       	ret

00000f3c <TCA0_init_linear_PWM>:
 *  Author: Saulius
 */ 
#include "Settings.h"

void TCA0_init_linear_PWM(uint16_t freq_hz, uint8_t duty_percent) //Auto TCA prescaler selection, that give us Frequency range: ~366Hz - ~93kHz. TLE9201SG max 20kHz
{
     f3c:	8f 92       	push	r8
     f3e:	9f 92       	push	r9
     f40:	af 92       	push	r10
     f42:	bf 92       	push	r11
     f44:	cf 92       	push	r12
     f46:	df 92       	push	r13
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	68 97       	sbiw	r28, 0x18	; 24
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	7c 01       	movw	r14, r24
     f60:	c6 2e       	mov	r12, r22
	const uint16_t prescalers[] = {1, 2, 4, 8, 16, 64, 256, 1024};
     f62:	80 e1       	ldi	r24, 0x10	; 16
     f64:	e5 e5       	ldi	r30, 0x55	; 85
     f66:	f3 e6       	ldi	r31, 0x63	; 99
     f68:	de 01       	movw	r26, r28
     f6a:	11 96       	adiw	r26, 0x01	; 1
     f6c:	01 90       	ld	r0, Z+
     f6e:	0d 92       	st	X+, r0
     f70:	8a 95       	dec	r24
     f72:	e1 f7       	brne	.-8      	; 0xf6c <TCA0_init_linear_PWM+0x30>
	const uint8_t clk_select[] = {
     f74:	88 e0       	ldi	r24, 0x08	; 8
     f76:	e5 e6       	ldi	r30, 0x65	; 101
     f78:	f3 e6       	ldi	r31, 0x63	; 99
     f7a:	de 01       	movw	r26, r28
     f7c:	51 96       	adiw	r26, 0x11	; 17
     f7e:	01 90       	ld	r0, Z+
     f80:	0d 92       	st	X+, r0
     f82:	8a 95       	dec	r24
     f84:	e1 f7       	brne	.-8      	; 0xf7e <TCA0_init_linear_PWM+0x42>

	uint8_t chosen_clk = 0;
	uint8_t period = 0;

	// surandam tinkamà prescaler
	for (uint8_t i = 0; i < 8; i++) {
     f86:	d1 2c       	mov	r13, r1
     f88:	38 c0       	rjmp	.+112    	; 0xffa <TCA0_init_linear_PWM+0xbe>
		uint32_t f_timer = F_CPU / prescalers[i];
     f8a:	0d 2d       	mov	r16, r13
     f8c:	10 e0       	ldi	r17, 0x00	; 0
     f8e:	f8 01       	movw	r30, r16
     f90:	ee 0f       	add	r30, r30
     f92:	ff 1f       	adc	r31, r31
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	8c 0f       	add	r24, r28
     f9a:	9d 1f       	adc	r25, r29
     f9c:	e8 0f       	add	r30, r24
     f9e:	f9 1f       	adc	r31, r25
     fa0:	20 81       	ld	r18, Z
     fa2:	31 81       	ldd	r19, Z+1	; 0x01
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	76 e3       	ldi	r23, 0x36	; 54
     fac:	8e e6       	ldi	r24, 0x6E	; 110
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	0e 94 a6 0a 	call	0x154c	; 0x154c <__divmodsi4>
		uint32_t tmp_period = (f_timer / freq_hz) - 1;
     fb4:	47 01       	movw	r8, r14
     fb6:	a1 2c       	mov	r10, r1
     fb8:	b1 2c       	mov	r11, r1
     fba:	ca 01       	movw	r24, r20
     fbc:	b9 01       	movw	r22, r18
     fbe:	a5 01       	movw	r20, r10
     fc0:	94 01       	movw	r18, r8
     fc2:	0e 94 84 0a 	call	0x1508	; 0x1508 <__udivmodsi4>
     fc6:	da 01       	movw	r26, r20
     fc8:	c9 01       	movw	r24, r18
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	a1 09       	sbc	r26, r1
     fce:	b1 09       	sbc	r27, r1

		if (tmp_period <= 255 && tmp_period >= 1) {
     fd0:	ba 01       	movw	r22, r20
     fd2:	a9 01       	movw	r20, r18
     fd4:	42 50       	subi	r20, 0x02	; 2
     fd6:	51 09       	sbc	r21, r1
     fd8:	61 09       	sbc	r22, r1
     fda:	71 09       	sbc	r23, r1
     fdc:	4f 3f       	cpi	r20, 0xFF	; 255
     fde:	51 05       	cpc	r21, r1
     fe0:	61 05       	cpc	r22, r1
     fe2:	71 05       	cpc	r23, r1
     fe4:	48 f4       	brcc	.+18     	; 0xff8 <TCA0_init_linear_PWM+0xbc>
			period = (uint8_t)tmp_period;
     fe6:	f8 2e       	mov	r15, r24
			chosen_clk = clk_select[i];
     fe8:	e1 e1       	ldi	r30, 0x11	; 17
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	ec 0f       	add	r30, r28
     fee:	fd 1f       	adc	r31, r29
     ff0:	e0 0f       	add	r30, r16
     ff2:	f1 1f       	adc	r31, r17
     ff4:	10 81       	ld	r17, Z
			break; // radom maþiausià tinkamà prescaler
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <TCA0_init_linear_PWM+0xc8>

	uint8_t chosen_clk = 0;
	uint8_t period = 0;

	// surandam tinkamà prescaler
	for (uint8_t i = 0; i < 8; i++) {
     ff8:	d3 94       	inc	r13
     ffa:	97 e0       	ldi	r25, 0x07	; 7
     ffc:	9d 15       	cp	r25, r13
     ffe:	28 f6       	brcc	.-118    	; 0xf8a <TCA0_init_linear_PWM+0x4e>
		TCA_SINGLE_CLKSEL_DIV256_gc,
		TCA_SINGLE_CLKSEL_DIV1024_gc
	};

	uint8_t chosen_clk = 0;
	uint8_t period = 0;
    1000:	f1 2c       	mov	r15, r1
		TCA_SINGLE_CLKSEL_DIV64_gc,
		TCA_SINGLE_CLKSEL_DIV256_gc,
		TCA_SINGLE_CLKSEL_DIV1024_gc
	};

	uint8_t chosen_clk = 0;
    1002:	10 e0       	ldi	r17, 0x00	; 0
			break; // radom maþiausià tinkamà prescaler
		}
	}

	// duty skaièiavimas
	uint8_t duty = (uint32_t)period * duty_percent / 100;
    1004:	2f 2d       	mov	r18, r15
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	ac 2d       	mov	r26, r12
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	0e 94 c5 0a 	call	0x158a	; 0x158a <__umulhisi3>
    1010:	24 e6       	ldi	r18, 0x64	; 100
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	0e 94 84 0a 	call	0x1508	; 0x1508 <__udivmodsi4>
	if (duty > period) duty = period;
    101c:	f2 16       	cp	r15, r18
    101e:	08 f4       	brcc	.+2      	; 0x1022 <TCA0_init_linear_PWM+0xe6>
    1020:	2f 2d       	mov	r18, r15

	// konfigûracija
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;  // WOx ant PORTD
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <__TEXT_REGION_LENGTH__+0x7f05e7>

	TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;   // Split mode
    1028:	e0 e0       	ldi	r30, 0x00	; 0
    102a:	fa e0       	ldi	r31, 0x0A	; 10
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	83 83       	std	Z+3, r24	; 0x03
	TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm;    // enable WO3 (HCMP0 ? PD3)
    1030:	80 e1       	ldi	r24, 0x10	; 16
    1032:	81 83       	std	Z+1, r24	; 0x01

	TCA0.SPLIT.HPER  = period;
    1034:	f7 a2       	std	Z+39, r15	; 0x27
	TCA0.SPLIT.HCMP0 = duty;
    1036:	21 a7       	std	Z+41, r18	; 0x29

	TCA0.SPLIT.CTRLA = chosen_clk | TCA_SPLIT_ENABLE_bm; // paleidþiam su pasirinktu prescaler
    1038:	11 60       	ori	r17, 0x01	; 1
    103a:	10 83       	st	Z, r17
}
    103c:	68 96       	adiw	r28, 0x18	; 24
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	df 90       	pop	r13
    1050:	cf 90       	pop	r12
    1052:	bf 90       	pop	r11
    1054:	af 90       	pop	r10
    1056:	9f 90       	pop	r9
    1058:	8f 90       	pop	r8
    105a:	08 95       	ret

0000105c <TCD0_init_stepper_PWM>:
 * @date 2025-01-09
 */

#include "Settings.h"

void TCD0_init_stepper_PWM(uint32_t freq_hz, uint8_t duty_percent) {
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	14 2f       	mov	r17, r20

	// Calculate compare registers
	uint16_t cmpbclr = (F_CPU / (4 * freq_hz * 2)) - 1;
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	aa 1f       	adc	r26, r26
    1078:	bb 1f       	adc	r27, r27
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	aa 1f       	adc	r26, r26
    1080:	bb 1f       	adc	r27, r27
    1082:	9c 01       	movw	r18, r24
    1084:	ad 01       	movw	r20, r26
    1086:	22 0f       	add	r18, r18
    1088:	33 1f       	adc	r19, r19
    108a:	44 1f       	adc	r20, r20
    108c:	55 1f       	adc	r21, r21
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	76 e3       	ldi	r23, 0x36	; 54
    1092:	8e e6       	ldi	r24, 0x6E	; 110
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	0e 94 84 0a 	call	0x1508	; 0x1508 <__udivmodsi4>
    109a:	e9 01       	movw	r28, r18
    109c:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t cmpaset = (uint16_t)(cmpbclr * (duty_percent / 100.0)) + 1;
    109e:	61 2f       	mov	r22, r17
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 77 09 	call	0x12ee	; 0x12ee <__floatsisf>
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	48 ec       	ldi	r20, 0xC8	; 200
    10b0:	52 e4       	ldi	r21, 0x42	; 66
    10b2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__divsf3>
    10b6:	6b 01       	movw	r12, r22
    10b8:	7c 01       	movw	r14, r24
    10ba:	be 01       	movw	r22, r28
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 75 09 	call	0x12ea	; 0x12ea <__floatunsisf>
    10c4:	a7 01       	movw	r20, r14
    10c6:	96 01       	movw	r18, r12
    10c8:	0e 94 03 0a 	call	0x1406	; 0x1406 <__mulsf3>
    10cc:	0e 94 46 09 	call	0x128c	; 0x128c <__fixunssfsi>
    10d0:	6f 5f       	subi	r22, 0xFF	; 255
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t cmpbset = cmpbclr - cmpaset - 1;
    10d4:	ce 01       	movw	r24, r28
    10d6:	86 1b       	sub	r24, r22
    10d8:	97 0b       	sbc	r25, r23
    10da:	01 97       	sbiw	r24, 0x01	; 1

	// Set TCD compare registers
	TCD0.CMPBCLR = cmpbclr;
    10dc:	00 e8       	ldi	r16, 0x80	; 128
    10de:	1b e0       	ldi	r17, 0x0B	; 11
    10e0:	f8 01       	movw	r30, r16
    10e2:	c6 a7       	std	Z+46, r28	; 0x2e
    10e4:	d7 a7       	std	Z+47, r29	; 0x2f
	TCD0.CMPBSET = cmpbset;
    10e6:	84 a7       	std	Z+44, r24	; 0x2c
    10e8:	95 a7       	std	Z+45, r25	; 0x2d
	TCD0.CMPASET = cmpaset;
    10ea:	60 a7       	std	Z+40, r22	; 0x28
    10ec:	71 a7       	std	Z+41, r23	; 0x29

	ccp_write_io((uint8_t *) &TCD0.FAULTCTRL, TCD_CMPCEN_bm); ///< Enable WOC on PF2
    10ee:	60 e4       	ldi	r22, 0x40	; 64
    10f0:	82 e9       	ldi	r24, 0x92	; 146
    10f2:	9b e0       	ldi	r25, 0x0B	; 11
    10f4:	0e 94 43 10 	call	0x2086	; 0x2086 <ccp_write_io>
	TCD0.CTRLB = TCD_WGMODE_DS_gc; ///< Set waveform mode to double slope
    10f8:	83 e0       	ldi	r24, 0x03	; 3
    10fa:	f8 01       	movw	r30, r16
    10fc:	81 83       	std	Z+1, r24	; 0x01

	while (!(TCD0.STATUS & TCD_ENRDY_bm));
    10fe:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
    1102:	80 ff       	sbrs	r24, 0
    1104:	fc cf       	rjmp	.-8      	; 0x10fe <TCD0_init_stepper_PWM+0xa2>

	// Ájungiam WOC iðëjimà
	TCD0.FAULTCTRL = TCD_CMPAEN_bm | TCD_CMPBEN_bm | TCD_CMPCEN_bm;
    1106:	e0 e8       	ldi	r30, 0x80	; 128
    1108:	fb e0       	ldi	r31, 0x0B	; 11
    110a:	80 e7       	ldi	r24, 0x70	; 112
    110c:	82 8b       	std	Z+18, r24	; 0x12

	// Paleidþiam su prescaler = 4
	TCD0.CTRLA = TCD_CLKSEL_CLKPER_gc | TCD_CNTPRES_DIV4_gc;
    110e:	88 e6       	ldi	r24, 0x68	; 104
    1110:	80 83       	st	Z, r24


	// Palaukti, kol sinchronizuosis
	while (!(TCD0.STATUS & TCD_ENRDY_bm));
    1112:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
    1116:	80 ff       	sbrs	r24, 0
    1118:	fc cf       	rjmp	.-8      	; 0x1112 <TCD0_init_stepper_PWM+0xb6>
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	df 90       	pop	r13
    1128:	cf 90       	pop	r12
    112a:	08 95       	ret

0000112c <USART0_init>:
 * @return 0 on success.
 */
int USART1_printChar(char c, FILE *stream) {
	USART1_sendChar(c); // Send character
	return 0;
}
    112c:	e0 e0       	ldi	r30, 0x00	; 0
    112e:	f8 e0       	ldi	r31, 0x08	; 8
    1130:	83 e8       	ldi	r24, 0x83	; 131
    1132:	96 e0       	ldi	r25, 0x06	; 6
    1134:	80 87       	std	Z+8, r24	; 0x08
    1136:	91 87       	std	Z+9, r25	; 0x09
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	85 83       	std	Z+5, r24	; 0x05
    113c:	82 ec       	ldi	r24, 0xC2	; 194
    113e:	86 83       	std	Z+6, r24	; 0x06
    1140:	83 e0       	ldi	r24, 0x03	; 3
    1142:	87 83       	std	Z+7, r24	; 0x07
    1144:	08 95       	ret

00001146 <USART0_readChar>:
    1146:	80 e8       	ldi	r24, 0x80	; 128
    1148:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    114c:	88 ee       	ldi	r24, 0xE8	; 232
    114e:	93 e0       	ldi	r25, 0x03	; 3
    1150:	a0 e0       	ldi	r26, 0x00	; 0
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	04 c0       	rjmp	.+8      	; 0x115e <USART0_readChar+0x18>
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	a1 09       	sbc	r26, r1
    115a:	b1 09       	sbc	r27, r1
    115c:	21 f0       	breq	.+8      	; 0x1166 <USART0_readChar+0x20>
    115e:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    1162:	22 23       	and	r18, r18
    1164:	c4 f7       	brge	.-16     	; 0x1156 <USART0_readChar+0x10>
    1166:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
    116a:	08 95       	ret

0000116c <USART1_init>:
    116c:	e0 e2       	ldi	r30, 0x20	; 32
    116e:	f8 e0       	ldi	r31, 0x08	; 8
    1170:	81 ea       	ldi	r24, 0xA1	; 161
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	80 87       	std	Z+8, r24	; 0x08
    1176:	91 87       	std	Z+9, r25	; 0x09
    1178:	82 e8       	ldi	r24, 0x82	; 130
    117a:	86 83       	std	Z+6, r24	; 0x06
    117c:	83 e0       	ldi	r24, 0x03	; 3
    117e:	87 83       	std	Z+7, r24	; 0x07
    1180:	08 95       	ret

00001182 <USART1_readChar>:
 * If a timeout occurs, it returns a predefined warning.
 * 
 * @return The received character.
 */
char USART1_readChar() {
	USART1.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    1182:	80 e8       	ldi	r24, 0x80	; 128
    1184:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f0824>
	uint32_t timeout_counter = FO_TIMEOUT_COUNTER; // Set a timeout counter
    1188:	88 e8       	ldi	r24, 0x88	; 136
    118a:	93 e1       	ldi	r25, 0x13	; 19
    118c:	a0 e0       	ldi	r26, 0x00	; 0
    118e:	b0 e0       	ldi	r27, 0x00	; 0
	while (!(USART1.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
    1190:	04 c0       	rjmp	.+8      	; 0x119a <USART1_readChar+0x18>
		if (--timeout_counter == 0) { // Timeout condition
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	a1 09       	sbc	r26, r1
    1196:	b1 09       	sbc	r27, r1
    1198:	21 f0       	breq	.+8      	; 0x11a2 <USART1_readChar+0x20>
 * @return The received character.
 */
char USART1_readChar() {
	USART1.STATUS = USART_RXCIF_bm; // Clear buffer before reading
	uint32_t timeout_counter = FO_TIMEOUT_COUNTER; // Set a timeout counter
	while (!(USART1.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
    119a:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f0824>
    119e:	22 23       	and	r18, r18
    11a0:	c4 f7       	brge	.-16     	; 0x1192 <USART1_readChar+0x10>
		if (--timeout_counter == 0) { // Timeout condition
			break;
		}
	}
	return USART1.RXDATAL; // Return received character
    11a2:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f0820>
}
    11a6:	08 95       	ret

000011a8 <__divsf3>:
    11a8:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__divsf3x>
    11ac:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__fp_round>
    11b0:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fp_pscB>
    11b4:	58 f0       	brcs	.+22     	; 0x11cc <__divsf3+0x24>
    11b6:	0e 94 bb 09 	call	0x1376	; 0x1376 <__fp_pscA>
    11ba:	40 f0       	brcs	.+16     	; 0x11cc <__divsf3+0x24>
    11bc:	29 f4       	brne	.+10     	; 0x11c8 <__divsf3+0x20>
    11be:	5f 3f       	cpi	r21, 0xFF	; 255
    11c0:	29 f0       	breq	.+10     	; 0x11cc <__divsf3+0x24>
    11c2:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__fp_inf>
    11c6:	51 11       	cpse	r21, r1
    11c8:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__fp_szero>
    11cc:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__fp_nan>

000011d0 <__divsf3x>:
    11d0:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__fp_split3>
    11d4:	68 f3       	brcs	.-38     	; 0x11b0 <__divsf3+0x8>

000011d6 <__divsf3_pse>:
    11d6:	99 23       	and	r25, r25
    11d8:	b1 f3       	breq	.-20     	; 0x11c6 <__divsf3+0x1e>
    11da:	55 23       	and	r21, r21
    11dc:	91 f3       	breq	.-28     	; 0x11c2 <__divsf3+0x1a>
    11de:	95 1b       	sub	r25, r21
    11e0:	55 0b       	sbc	r21, r21
    11e2:	bb 27       	eor	r27, r27
    11e4:	aa 27       	eor	r26, r26
    11e6:	62 17       	cp	r22, r18
    11e8:	73 07       	cpc	r23, r19
    11ea:	84 07       	cpc	r24, r20
    11ec:	38 f0       	brcs	.+14     	; 0x11fc <__divsf3_pse+0x26>
    11ee:	9f 5f       	subi	r25, 0xFF	; 255
    11f0:	5f 4f       	sbci	r21, 0xFF	; 255
    11f2:	22 0f       	add	r18, r18
    11f4:	33 1f       	adc	r19, r19
    11f6:	44 1f       	adc	r20, r20
    11f8:	aa 1f       	adc	r26, r26
    11fa:	a9 f3       	breq	.-22     	; 0x11e6 <__divsf3_pse+0x10>
    11fc:	35 d0       	rcall	.+106    	; 0x1268 <__divsf3_pse+0x92>
    11fe:	0e 2e       	mov	r0, r30
    1200:	3a f0       	brmi	.+14     	; 0x1210 <__divsf3_pse+0x3a>
    1202:	e0 e8       	ldi	r30, 0x80	; 128
    1204:	32 d0       	rcall	.+100    	; 0x126a <__divsf3_pse+0x94>
    1206:	91 50       	subi	r25, 0x01	; 1
    1208:	50 40       	sbci	r21, 0x00	; 0
    120a:	e6 95       	lsr	r30
    120c:	00 1c       	adc	r0, r0
    120e:	ca f7       	brpl	.-14     	; 0x1202 <__divsf3_pse+0x2c>
    1210:	2b d0       	rcall	.+86     	; 0x1268 <__divsf3_pse+0x92>
    1212:	fe 2f       	mov	r31, r30
    1214:	29 d0       	rcall	.+82     	; 0x1268 <__divsf3_pse+0x92>
    1216:	66 0f       	add	r22, r22
    1218:	77 1f       	adc	r23, r23
    121a:	88 1f       	adc	r24, r24
    121c:	bb 1f       	adc	r27, r27
    121e:	26 17       	cp	r18, r22
    1220:	37 07       	cpc	r19, r23
    1222:	48 07       	cpc	r20, r24
    1224:	ab 07       	cpc	r26, r27
    1226:	b0 e8       	ldi	r27, 0x80	; 128
    1228:	09 f0       	breq	.+2      	; 0x122c <__divsf3_pse+0x56>
    122a:	bb 0b       	sbc	r27, r27
    122c:	80 2d       	mov	r24, r0
    122e:	bf 01       	movw	r22, r30
    1230:	ff 27       	eor	r31, r31
    1232:	93 58       	subi	r25, 0x83	; 131
    1234:	5f 4f       	sbci	r21, 0xFF	; 255
    1236:	3a f0       	brmi	.+14     	; 0x1246 <__divsf3_pse+0x70>
    1238:	9e 3f       	cpi	r25, 0xFE	; 254
    123a:	51 05       	cpc	r21, r1
    123c:	78 f0       	brcs	.+30     	; 0x125c <__divsf3_pse+0x86>
    123e:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__fp_inf>
    1242:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__fp_szero>
    1246:	5f 3f       	cpi	r21, 0xFF	; 255
    1248:	e4 f3       	brlt	.-8      	; 0x1242 <__divsf3_pse+0x6c>
    124a:	98 3e       	cpi	r25, 0xE8	; 232
    124c:	d4 f3       	brlt	.-12     	; 0x1242 <__divsf3_pse+0x6c>
    124e:	86 95       	lsr	r24
    1250:	77 95       	ror	r23
    1252:	67 95       	ror	r22
    1254:	b7 95       	ror	r27
    1256:	f7 95       	ror	r31
    1258:	9f 5f       	subi	r25, 0xFF	; 255
    125a:	c9 f7       	brne	.-14     	; 0x124e <__divsf3_pse+0x78>
    125c:	88 0f       	add	r24, r24
    125e:	91 1d       	adc	r25, r1
    1260:	96 95       	lsr	r25
    1262:	87 95       	ror	r24
    1264:	97 f9       	bld	r25, 7
    1266:	08 95       	ret
    1268:	e1 e0       	ldi	r30, 0x01	; 1
    126a:	66 0f       	add	r22, r22
    126c:	77 1f       	adc	r23, r23
    126e:	88 1f       	adc	r24, r24
    1270:	bb 1f       	adc	r27, r27
    1272:	62 17       	cp	r22, r18
    1274:	73 07       	cpc	r23, r19
    1276:	84 07       	cpc	r24, r20
    1278:	ba 07       	cpc	r27, r26
    127a:	20 f0       	brcs	.+8      	; 0x1284 <__divsf3_pse+0xae>
    127c:	62 1b       	sub	r22, r18
    127e:	73 0b       	sbc	r23, r19
    1280:	84 0b       	sbc	r24, r20
    1282:	ba 0b       	sbc	r27, r26
    1284:	ee 1f       	adc	r30, r30
    1286:	88 f7       	brcc	.-30     	; 0x126a <__divsf3_pse+0x94>
    1288:	e0 95       	com	r30
    128a:	08 95       	ret

0000128c <__fixunssfsi>:
    128c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fp_splitA>
    1290:	88 f0       	brcs	.+34     	; 0x12b4 <__fixunssfsi+0x28>
    1292:	9f 57       	subi	r25, 0x7F	; 127
    1294:	98 f0       	brcs	.+38     	; 0x12bc <__fixunssfsi+0x30>
    1296:	b9 2f       	mov	r27, r25
    1298:	99 27       	eor	r25, r25
    129a:	b7 51       	subi	r27, 0x17	; 23
    129c:	b0 f0       	brcs	.+44     	; 0x12ca <__fixunssfsi+0x3e>
    129e:	e1 f0       	breq	.+56     	; 0x12d8 <__fixunssfsi+0x4c>
    12a0:	66 0f       	add	r22, r22
    12a2:	77 1f       	adc	r23, r23
    12a4:	88 1f       	adc	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	1a f0       	brmi	.+6      	; 0x12b0 <__fixunssfsi+0x24>
    12aa:	ba 95       	dec	r27
    12ac:	c9 f7       	brne	.-14     	; 0x12a0 <__fixunssfsi+0x14>
    12ae:	14 c0       	rjmp	.+40     	; 0x12d8 <__fixunssfsi+0x4c>
    12b0:	b1 30       	cpi	r27, 0x01	; 1
    12b2:	91 f0       	breq	.+36     	; 0x12d8 <__fixunssfsi+0x4c>
    12b4:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__fp_zero>
    12b8:	b1 e0       	ldi	r27, 0x01	; 1
    12ba:	08 95       	ret
    12bc:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__fp_zero>
    12c0:	67 2f       	mov	r22, r23
    12c2:	78 2f       	mov	r23, r24
    12c4:	88 27       	eor	r24, r24
    12c6:	b8 5f       	subi	r27, 0xF8	; 248
    12c8:	39 f0       	breq	.+14     	; 0x12d8 <__fixunssfsi+0x4c>
    12ca:	b9 3f       	cpi	r27, 0xF9	; 249
    12cc:	cc f3       	brlt	.-14     	; 0x12c0 <__fixunssfsi+0x34>
    12ce:	86 95       	lsr	r24
    12d0:	77 95       	ror	r23
    12d2:	67 95       	ror	r22
    12d4:	b3 95       	inc	r27
    12d6:	d9 f7       	brne	.-10     	; 0x12ce <__fixunssfsi+0x42>
    12d8:	3e f4       	brtc	.+14     	; 0x12e8 <__fixunssfsi+0x5c>
    12da:	90 95       	com	r25
    12dc:	80 95       	com	r24
    12de:	70 95       	com	r23
    12e0:	61 95       	neg	r22
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255
    12e4:	8f 4f       	sbci	r24, 0xFF	; 255
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	08 95       	ret

000012ea <__floatunsisf>:
    12ea:	e8 94       	clt
    12ec:	09 c0       	rjmp	.+18     	; 0x1300 <__floatsisf+0x12>

000012ee <__floatsisf>:
    12ee:	97 fb       	bst	r25, 7
    12f0:	3e f4       	brtc	.+14     	; 0x1300 <__floatsisf+0x12>
    12f2:	90 95       	com	r25
    12f4:	80 95       	com	r24
    12f6:	70 95       	com	r23
    12f8:	61 95       	neg	r22
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	8f 4f       	sbci	r24, 0xFF	; 255
    12fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1300:	99 23       	and	r25, r25
    1302:	a9 f0       	breq	.+42     	; 0x132e <__floatsisf+0x40>
    1304:	f9 2f       	mov	r31, r25
    1306:	96 e9       	ldi	r25, 0x96	; 150
    1308:	bb 27       	eor	r27, r27
    130a:	93 95       	inc	r25
    130c:	f6 95       	lsr	r31
    130e:	87 95       	ror	r24
    1310:	77 95       	ror	r23
    1312:	67 95       	ror	r22
    1314:	b7 95       	ror	r27
    1316:	f1 11       	cpse	r31, r1
    1318:	f8 cf       	rjmp	.-16     	; 0x130a <__floatsisf+0x1c>
    131a:	fa f4       	brpl	.+62     	; 0x135a <__floatsisf+0x6c>
    131c:	bb 0f       	add	r27, r27
    131e:	11 f4       	brne	.+4      	; 0x1324 <__floatsisf+0x36>
    1320:	60 ff       	sbrs	r22, 0
    1322:	1b c0       	rjmp	.+54     	; 0x135a <__floatsisf+0x6c>
    1324:	6f 5f       	subi	r22, 0xFF	; 255
    1326:	7f 4f       	sbci	r23, 0xFF	; 255
    1328:	8f 4f       	sbci	r24, 0xFF	; 255
    132a:	9f 4f       	sbci	r25, 0xFF	; 255
    132c:	16 c0       	rjmp	.+44     	; 0x135a <__floatsisf+0x6c>
    132e:	88 23       	and	r24, r24
    1330:	11 f0       	breq	.+4      	; 0x1336 <__floatsisf+0x48>
    1332:	96 e9       	ldi	r25, 0x96	; 150
    1334:	11 c0       	rjmp	.+34     	; 0x1358 <__floatsisf+0x6a>
    1336:	77 23       	and	r23, r23
    1338:	21 f0       	breq	.+8      	; 0x1342 <__floatsisf+0x54>
    133a:	9e e8       	ldi	r25, 0x8E	; 142
    133c:	87 2f       	mov	r24, r23
    133e:	76 2f       	mov	r23, r22
    1340:	05 c0       	rjmp	.+10     	; 0x134c <__floatsisf+0x5e>
    1342:	66 23       	and	r22, r22
    1344:	71 f0       	breq	.+28     	; 0x1362 <__floatsisf+0x74>
    1346:	96 e8       	ldi	r25, 0x86	; 134
    1348:	86 2f       	mov	r24, r22
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	2a f0       	brmi	.+10     	; 0x135a <__floatsisf+0x6c>
    1350:	9a 95       	dec	r25
    1352:	66 0f       	add	r22, r22
    1354:	77 1f       	adc	r23, r23
    1356:	88 1f       	adc	r24, r24
    1358:	da f7       	brpl	.-10     	; 0x1350 <__floatsisf+0x62>
    135a:	88 0f       	add	r24, r24
    135c:	96 95       	lsr	r25
    135e:	87 95       	ror	r24
    1360:	97 f9       	bld	r25, 7
    1362:	08 95       	ret

00001364 <__fp_inf>:
    1364:	97 f9       	bld	r25, 7
    1366:	9f 67       	ori	r25, 0x7F	; 127
    1368:	80 e8       	ldi	r24, 0x80	; 128
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	60 e0       	ldi	r22, 0x00	; 0
    136e:	08 95       	ret

00001370 <__fp_nan>:
    1370:	9f ef       	ldi	r25, 0xFF	; 255
    1372:	80 ec       	ldi	r24, 0xC0	; 192
    1374:	08 95       	ret

00001376 <__fp_pscA>:
    1376:	00 24       	eor	r0, r0
    1378:	0a 94       	dec	r0
    137a:	16 16       	cp	r1, r22
    137c:	17 06       	cpc	r1, r23
    137e:	18 06       	cpc	r1, r24
    1380:	09 06       	cpc	r0, r25
    1382:	08 95       	ret

00001384 <__fp_pscB>:
    1384:	00 24       	eor	r0, r0
    1386:	0a 94       	dec	r0
    1388:	12 16       	cp	r1, r18
    138a:	13 06       	cpc	r1, r19
    138c:	14 06       	cpc	r1, r20
    138e:	05 06       	cpc	r0, r21
    1390:	08 95       	ret

00001392 <__fp_round>:
    1392:	09 2e       	mov	r0, r25
    1394:	03 94       	inc	r0
    1396:	00 0c       	add	r0, r0
    1398:	11 f4       	brne	.+4      	; 0x139e <__fp_round+0xc>
    139a:	88 23       	and	r24, r24
    139c:	52 f0       	brmi	.+20     	; 0x13b2 <__fp_round+0x20>
    139e:	bb 0f       	add	r27, r27
    13a0:	40 f4       	brcc	.+16     	; 0x13b2 <__fp_round+0x20>
    13a2:	bf 2b       	or	r27, r31
    13a4:	11 f4       	brne	.+4      	; 0x13aa <__fp_round+0x18>
    13a6:	60 ff       	sbrs	r22, 0
    13a8:	04 c0       	rjmp	.+8      	; 0x13b2 <__fp_round+0x20>
    13aa:	6f 5f       	subi	r22, 0xFF	; 255
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	8f 4f       	sbci	r24, 0xFF	; 255
    13b0:	9f 4f       	sbci	r25, 0xFF	; 255
    13b2:	08 95       	ret

000013b4 <__fp_split3>:
    13b4:	57 fd       	sbrc	r21, 7
    13b6:	90 58       	subi	r25, 0x80	; 128
    13b8:	44 0f       	add	r20, r20
    13ba:	55 1f       	adc	r21, r21
    13bc:	59 f0       	breq	.+22     	; 0x13d4 <__fp_splitA+0x10>
    13be:	5f 3f       	cpi	r21, 0xFF	; 255
    13c0:	71 f0       	breq	.+28     	; 0x13de <__fp_splitA+0x1a>
    13c2:	47 95       	ror	r20

000013c4 <__fp_splitA>:
    13c4:	88 0f       	add	r24, r24
    13c6:	97 fb       	bst	r25, 7
    13c8:	99 1f       	adc	r25, r25
    13ca:	61 f0       	breq	.+24     	; 0x13e4 <__fp_splitA+0x20>
    13cc:	9f 3f       	cpi	r25, 0xFF	; 255
    13ce:	79 f0       	breq	.+30     	; 0x13ee <__fp_splitA+0x2a>
    13d0:	87 95       	ror	r24
    13d2:	08 95       	ret
    13d4:	12 16       	cp	r1, r18
    13d6:	13 06       	cpc	r1, r19
    13d8:	14 06       	cpc	r1, r20
    13da:	55 1f       	adc	r21, r21
    13dc:	f2 cf       	rjmp	.-28     	; 0x13c2 <__fp_split3+0xe>
    13de:	46 95       	lsr	r20
    13e0:	f1 df       	rcall	.-30     	; 0x13c4 <__fp_splitA>
    13e2:	08 c0       	rjmp	.+16     	; 0x13f4 <__fp_splitA+0x30>
    13e4:	16 16       	cp	r1, r22
    13e6:	17 06       	cpc	r1, r23
    13e8:	18 06       	cpc	r1, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	f1 cf       	rjmp	.-30     	; 0x13d0 <__fp_splitA+0xc>
    13ee:	86 95       	lsr	r24
    13f0:	71 05       	cpc	r23, r1
    13f2:	61 05       	cpc	r22, r1
    13f4:	08 94       	sec
    13f6:	08 95       	ret

000013f8 <__fp_zero>:
    13f8:	e8 94       	clt

000013fa <__fp_szero>:
    13fa:	bb 27       	eor	r27, r27
    13fc:	66 27       	eor	r22, r22
    13fe:	77 27       	eor	r23, r23
    1400:	cb 01       	movw	r24, r22
    1402:	97 f9       	bld	r25, 7
    1404:	08 95       	ret

00001406 <__mulsf3>:
    1406:	0e 94 16 0a 	call	0x142c	; 0x142c <__mulsf3x>
    140a:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__fp_round>
    140e:	0e 94 bb 09 	call	0x1376	; 0x1376 <__fp_pscA>
    1412:	38 f0       	brcs	.+14     	; 0x1422 <__mulsf3+0x1c>
    1414:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fp_pscB>
    1418:	20 f0       	brcs	.+8      	; 0x1422 <__mulsf3+0x1c>
    141a:	95 23       	and	r25, r21
    141c:	11 f0       	breq	.+4      	; 0x1422 <__mulsf3+0x1c>
    141e:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__fp_inf>
    1422:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__fp_nan>
    1426:	11 24       	eor	r1, r1
    1428:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__fp_szero>

0000142c <__mulsf3x>:
    142c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__fp_split3>
    1430:	70 f3       	brcs	.-36     	; 0x140e <__mulsf3+0x8>

00001432 <__mulsf3_pse>:
    1432:	95 9f       	mul	r25, r21
    1434:	c1 f3       	breq	.-16     	; 0x1426 <__mulsf3+0x20>
    1436:	95 0f       	add	r25, r21
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	55 1f       	adc	r21, r21
    143c:	62 9f       	mul	r22, r18
    143e:	f0 01       	movw	r30, r0
    1440:	72 9f       	mul	r23, r18
    1442:	bb 27       	eor	r27, r27
    1444:	f0 0d       	add	r31, r0
    1446:	b1 1d       	adc	r27, r1
    1448:	63 9f       	mul	r22, r19
    144a:	aa 27       	eor	r26, r26
    144c:	f0 0d       	add	r31, r0
    144e:	b1 1d       	adc	r27, r1
    1450:	aa 1f       	adc	r26, r26
    1452:	64 9f       	mul	r22, r20
    1454:	66 27       	eor	r22, r22
    1456:	b0 0d       	add	r27, r0
    1458:	a1 1d       	adc	r26, r1
    145a:	66 1f       	adc	r22, r22
    145c:	82 9f       	mul	r24, r18
    145e:	22 27       	eor	r18, r18
    1460:	b0 0d       	add	r27, r0
    1462:	a1 1d       	adc	r26, r1
    1464:	62 1f       	adc	r22, r18
    1466:	73 9f       	mul	r23, r19
    1468:	b0 0d       	add	r27, r0
    146a:	a1 1d       	adc	r26, r1
    146c:	62 1f       	adc	r22, r18
    146e:	83 9f       	mul	r24, r19
    1470:	a0 0d       	add	r26, r0
    1472:	61 1d       	adc	r22, r1
    1474:	22 1f       	adc	r18, r18
    1476:	74 9f       	mul	r23, r20
    1478:	33 27       	eor	r19, r19
    147a:	a0 0d       	add	r26, r0
    147c:	61 1d       	adc	r22, r1
    147e:	23 1f       	adc	r18, r19
    1480:	84 9f       	mul	r24, r20
    1482:	60 0d       	add	r22, r0
    1484:	21 1d       	adc	r18, r1
    1486:	82 2f       	mov	r24, r18
    1488:	76 2f       	mov	r23, r22
    148a:	6a 2f       	mov	r22, r26
    148c:	11 24       	eor	r1, r1
    148e:	9f 57       	subi	r25, 0x7F	; 127
    1490:	50 40       	sbci	r21, 0x00	; 0
    1492:	9a f0       	brmi	.+38     	; 0x14ba <__mulsf3_pse+0x88>
    1494:	f1 f0       	breq	.+60     	; 0x14d2 <__mulsf3_pse+0xa0>
    1496:	88 23       	and	r24, r24
    1498:	4a f0       	brmi	.+18     	; 0x14ac <__mulsf3_pse+0x7a>
    149a:	ee 0f       	add	r30, r30
    149c:	ff 1f       	adc	r31, r31
    149e:	bb 1f       	adc	r27, r27
    14a0:	66 1f       	adc	r22, r22
    14a2:	77 1f       	adc	r23, r23
    14a4:	88 1f       	adc	r24, r24
    14a6:	91 50       	subi	r25, 0x01	; 1
    14a8:	50 40       	sbci	r21, 0x00	; 0
    14aa:	a9 f7       	brne	.-22     	; 0x1496 <__mulsf3_pse+0x64>
    14ac:	9e 3f       	cpi	r25, 0xFE	; 254
    14ae:	51 05       	cpc	r21, r1
    14b0:	80 f0       	brcs	.+32     	; 0x14d2 <__mulsf3_pse+0xa0>
    14b2:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__fp_inf>
    14b6:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__fp_szero>
    14ba:	5f 3f       	cpi	r21, 0xFF	; 255
    14bc:	e4 f3       	brlt	.-8      	; 0x14b6 <__mulsf3_pse+0x84>
    14be:	98 3e       	cpi	r25, 0xE8	; 232
    14c0:	d4 f3       	brlt	.-12     	; 0x14b6 <__mulsf3_pse+0x84>
    14c2:	86 95       	lsr	r24
    14c4:	77 95       	ror	r23
    14c6:	67 95       	ror	r22
    14c8:	b7 95       	ror	r27
    14ca:	f7 95       	ror	r31
    14cc:	e7 95       	ror	r30
    14ce:	9f 5f       	subi	r25, 0xFF	; 255
    14d0:	c1 f7       	brne	.-16     	; 0x14c2 <__mulsf3_pse+0x90>
    14d2:	fe 2b       	or	r31, r30
    14d4:	88 0f       	add	r24, r24
    14d6:	91 1d       	adc	r25, r1
    14d8:	96 95       	lsr	r25
    14da:	87 95       	ror	r24
    14dc:	97 f9       	bld	r25, 7
    14de:	08 95       	ret

000014e0 <__divmodhi4>:
    14e0:	97 fb       	bst	r25, 7
    14e2:	07 2e       	mov	r0, r23
    14e4:	16 f4       	brtc	.+4      	; 0x14ea <__divmodhi4+0xa>
    14e6:	00 94       	com	r0
    14e8:	07 d0       	rcall	.+14     	; 0x14f8 <__divmodhi4_neg1>
    14ea:	77 fd       	sbrc	r23, 7
    14ec:	09 d0       	rcall	.+18     	; 0x1500 <__divmodhi4_neg2>
    14ee:	0e 94 17 0b 	call	0x162e	; 0x162e <__udivmodhi4>
    14f2:	07 fc       	sbrc	r0, 7
    14f4:	05 d0       	rcall	.+10     	; 0x1500 <__divmodhi4_neg2>
    14f6:	3e f4       	brtc	.+14     	; 0x1506 <__divmodhi4_exit>

000014f8 <__divmodhi4_neg1>:
    14f8:	90 95       	com	r25
    14fa:	81 95       	neg	r24
    14fc:	9f 4f       	sbci	r25, 0xFF	; 255
    14fe:	08 95       	ret

00001500 <__divmodhi4_neg2>:
    1500:	70 95       	com	r23
    1502:	61 95       	neg	r22
    1504:	7f 4f       	sbci	r23, 0xFF	; 255

00001506 <__divmodhi4_exit>:
    1506:	08 95       	ret

00001508 <__udivmodsi4>:
    1508:	a1 e2       	ldi	r26, 0x21	; 33
    150a:	1a 2e       	mov	r1, r26
    150c:	aa 1b       	sub	r26, r26
    150e:	bb 1b       	sub	r27, r27
    1510:	fd 01       	movw	r30, r26
    1512:	0d c0       	rjmp	.+26     	; 0x152e <__udivmodsi4_ep>

00001514 <__udivmodsi4_loop>:
    1514:	aa 1f       	adc	r26, r26
    1516:	bb 1f       	adc	r27, r27
    1518:	ee 1f       	adc	r30, r30
    151a:	ff 1f       	adc	r31, r31
    151c:	a2 17       	cp	r26, r18
    151e:	b3 07       	cpc	r27, r19
    1520:	e4 07       	cpc	r30, r20
    1522:	f5 07       	cpc	r31, r21
    1524:	20 f0       	brcs	.+8      	; 0x152e <__udivmodsi4_ep>
    1526:	a2 1b       	sub	r26, r18
    1528:	b3 0b       	sbc	r27, r19
    152a:	e4 0b       	sbc	r30, r20
    152c:	f5 0b       	sbc	r31, r21

0000152e <__udivmodsi4_ep>:
    152e:	66 1f       	adc	r22, r22
    1530:	77 1f       	adc	r23, r23
    1532:	88 1f       	adc	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	1a 94       	dec	r1
    1538:	69 f7       	brne	.-38     	; 0x1514 <__udivmodsi4_loop>
    153a:	60 95       	com	r22
    153c:	70 95       	com	r23
    153e:	80 95       	com	r24
    1540:	90 95       	com	r25
    1542:	9b 01       	movw	r18, r22
    1544:	ac 01       	movw	r20, r24
    1546:	bd 01       	movw	r22, r26
    1548:	cf 01       	movw	r24, r30
    154a:	08 95       	ret

0000154c <__divmodsi4>:
    154c:	05 2e       	mov	r0, r21
    154e:	97 fb       	bst	r25, 7
    1550:	1e f4       	brtc	.+6      	; 0x1558 <__divmodsi4+0xc>
    1552:	00 94       	com	r0
    1554:	0e 94 bd 0a 	call	0x157a	; 0x157a <__negsi2>
    1558:	57 fd       	sbrc	r21, 7
    155a:	07 d0       	rcall	.+14     	; 0x156a <__divmodsi4_neg2>
    155c:	0e 94 84 0a 	call	0x1508	; 0x1508 <__udivmodsi4>
    1560:	07 fc       	sbrc	r0, 7
    1562:	03 d0       	rcall	.+6      	; 0x156a <__divmodsi4_neg2>
    1564:	4e f4       	brtc	.+18     	; 0x1578 <__divmodsi4_exit>
    1566:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__negsi2>

0000156a <__divmodsi4_neg2>:
    156a:	50 95       	com	r21
    156c:	40 95       	com	r20
    156e:	30 95       	com	r19
    1570:	21 95       	neg	r18
    1572:	3f 4f       	sbci	r19, 0xFF	; 255
    1574:	4f 4f       	sbci	r20, 0xFF	; 255
    1576:	5f 4f       	sbci	r21, 0xFF	; 255

00001578 <__divmodsi4_exit>:
    1578:	08 95       	ret

0000157a <__negsi2>:
    157a:	90 95       	com	r25
    157c:	80 95       	com	r24
    157e:	70 95       	com	r23
    1580:	61 95       	neg	r22
    1582:	7f 4f       	sbci	r23, 0xFF	; 255
    1584:	8f 4f       	sbci	r24, 0xFF	; 255
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
    1588:	08 95       	ret

0000158a <__umulhisi3>:
    158a:	a2 9f       	mul	r26, r18
    158c:	b0 01       	movw	r22, r0
    158e:	b3 9f       	mul	r27, r19
    1590:	c0 01       	movw	r24, r0
    1592:	a3 9f       	mul	r26, r19
    1594:	70 0d       	add	r23, r0
    1596:	81 1d       	adc	r24, r1
    1598:	11 24       	eor	r1, r1
    159a:	91 1d       	adc	r25, r1
    159c:	b2 9f       	mul	r27, r18
    159e:	70 0d       	add	r23, r0
    15a0:	81 1d       	adc	r24, r1
    15a2:	11 24       	eor	r1, r1
    15a4:	91 1d       	adc	r25, r1
    15a6:	08 95       	ret

000015a8 <__ashldi3>:
    15a8:	0f 93       	push	r16
    15aa:	08 30       	cpi	r16, 0x08	; 8
    15ac:	90 f0       	brcs	.+36     	; 0x15d2 <__ashldi3+0x2a>
    15ae:	98 2f       	mov	r25, r24
    15b0:	87 2f       	mov	r24, r23
    15b2:	76 2f       	mov	r23, r22
    15b4:	65 2f       	mov	r22, r21
    15b6:	54 2f       	mov	r21, r20
    15b8:	43 2f       	mov	r20, r19
    15ba:	32 2f       	mov	r19, r18
    15bc:	22 27       	eor	r18, r18
    15be:	08 50       	subi	r16, 0x08	; 8
    15c0:	f4 cf       	rjmp	.-24     	; 0x15aa <__ashldi3+0x2>
    15c2:	22 0f       	add	r18, r18
    15c4:	33 1f       	adc	r19, r19
    15c6:	44 1f       	adc	r20, r20
    15c8:	55 1f       	adc	r21, r21
    15ca:	66 1f       	adc	r22, r22
    15cc:	77 1f       	adc	r23, r23
    15ce:	88 1f       	adc	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 95       	dec	r16
    15d4:	b2 f7       	brpl	.-20     	; 0x15c2 <__ashldi3+0x1a>
    15d6:	0f 91       	pop	r16
    15d8:	08 95       	ret

000015da <__ashrdi3>:
    15da:	97 fb       	bst	r25, 7
    15dc:	10 f8       	bld	r1, 0

000015de <__lshrdi3>:
    15de:	16 94       	lsr	r1
    15e0:	00 08       	sbc	r0, r0
    15e2:	0f 93       	push	r16
    15e4:	08 30       	cpi	r16, 0x08	; 8
    15e6:	98 f0       	brcs	.+38     	; 0x160e <__lshrdi3+0x30>
    15e8:	08 50       	subi	r16, 0x08	; 8
    15ea:	23 2f       	mov	r18, r19
    15ec:	34 2f       	mov	r19, r20
    15ee:	45 2f       	mov	r20, r21
    15f0:	56 2f       	mov	r21, r22
    15f2:	67 2f       	mov	r22, r23
    15f4:	78 2f       	mov	r23, r24
    15f6:	89 2f       	mov	r24, r25
    15f8:	90 2d       	mov	r25, r0
    15fa:	f4 cf       	rjmp	.-24     	; 0x15e4 <__lshrdi3+0x6>
    15fc:	05 94       	asr	r0
    15fe:	97 95       	ror	r25
    1600:	87 95       	ror	r24
    1602:	77 95       	ror	r23
    1604:	67 95       	ror	r22
    1606:	57 95       	ror	r21
    1608:	47 95       	ror	r20
    160a:	37 95       	ror	r19
    160c:	27 95       	ror	r18
    160e:	0a 95       	dec	r16
    1610:	aa f7       	brpl	.-22     	; 0x15fc <__lshrdi3+0x1e>
    1612:	0f 91       	pop	r16
    1614:	08 95       	ret

00001616 <__cmpdi2_s8>:
    1616:	00 24       	eor	r0, r0
    1618:	a7 fd       	sbrc	r26, 7
    161a:	00 94       	com	r0
    161c:	2a 17       	cp	r18, r26
    161e:	30 05       	cpc	r19, r0
    1620:	40 05       	cpc	r20, r0
    1622:	50 05       	cpc	r21, r0
    1624:	60 05       	cpc	r22, r0
    1626:	70 05       	cpc	r23, r0
    1628:	80 05       	cpc	r24, r0
    162a:	90 05       	cpc	r25, r0
    162c:	08 95       	ret

0000162e <__udivmodhi4>:
    162e:	aa 1b       	sub	r26, r26
    1630:	bb 1b       	sub	r27, r27
    1632:	51 e1       	ldi	r21, 0x11	; 17
    1634:	07 c0       	rjmp	.+14     	; 0x1644 <__udivmodhi4_ep>

00001636 <__udivmodhi4_loop>:
    1636:	aa 1f       	adc	r26, r26
    1638:	bb 1f       	adc	r27, r27
    163a:	a6 17       	cp	r26, r22
    163c:	b7 07       	cpc	r27, r23
    163e:	10 f0       	brcs	.+4      	; 0x1644 <__udivmodhi4_ep>
    1640:	a6 1b       	sub	r26, r22
    1642:	b7 0b       	sbc	r27, r23

00001644 <__udivmodhi4_ep>:
    1644:	88 1f       	adc	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	5a 95       	dec	r21
    164a:	a9 f7       	brne	.-22     	; 0x1636 <__udivmodhi4_loop>
    164c:	80 95       	com	r24
    164e:	90 95       	com	r25
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	08 95       	ret

00001656 <strtol>:
    1656:	a0 e0       	ldi	r26, 0x00	; 0
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e1 e3       	ldi	r30, 0x31	; 49
    165c:	fb e0       	ldi	r31, 0x0B	; 11
    165e:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__prologue_saves__+0x2>
    1662:	5c 01       	movw	r10, r24
    1664:	6b 01       	movw	r12, r22
    1666:	7a 01       	movw	r14, r20
    1668:	61 15       	cp	r22, r1
    166a:	71 05       	cpc	r23, r1
    166c:	19 f0       	breq	.+6      	; 0x1674 <strtol+0x1e>
    166e:	fb 01       	movw	r30, r22
    1670:	80 83       	st	Z, r24
    1672:	91 83       	std	Z+1, r25	; 0x01
    1674:	e1 14       	cp	r14, r1
    1676:	f1 04       	cpc	r15, r1
    1678:	29 f0       	breq	.+10     	; 0x1684 <strtol+0x2e>
    167a:	c7 01       	movw	r24, r14
    167c:	02 97       	sbiw	r24, 0x02	; 2
    167e:	83 97       	sbiw	r24, 0x23	; 35
    1680:	08 f0       	brcs	.+2      	; 0x1684 <strtol+0x2e>
    1682:	e5 c0       	rjmp	.+458    	; 0x184e <strtol+0x1f8>
    1684:	e5 01       	movw	r28, r10
    1686:	21 96       	adiw	r28, 0x01	; 1
    1688:	f5 01       	movw	r30, r10
    168a:	10 81       	ld	r17, Z
    168c:	81 2f       	mov	r24, r17
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <isspace>
    1694:	89 2b       	or	r24, r25
    1696:	11 f0       	breq	.+4      	; 0x169c <strtol+0x46>
    1698:	5e 01       	movw	r10, r28
    169a:	f4 cf       	rjmp	.-24     	; 0x1684 <strtol+0x2e>
    169c:	1d 32       	cpi	r17, 0x2D	; 45
    169e:	29 f4       	brne	.+10     	; 0x16aa <strtol+0x54>
    16a0:	21 96       	adiw	r28, 0x01	; 1
    16a2:	f5 01       	movw	r30, r10
    16a4:	11 81       	ldd	r17, Z+1	; 0x01
    16a6:	01 e0       	ldi	r16, 0x01	; 1
    16a8:	07 c0       	rjmp	.+14     	; 0x16b8 <strtol+0x62>
    16aa:	1b 32       	cpi	r17, 0x2B	; 43
    16ac:	21 f4       	brne	.+8      	; 0x16b6 <strtol+0x60>
    16ae:	e5 01       	movw	r28, r10
    16b0:	22 96       	adiw	r28, 0x02	; 2
    16b2:	f5 01       	movw	r30, r10
    16b4:	11 81       	ldd	r17, Z+1	; 0x01
    16b6:	00 e0       	ldi	r16, 0x00	; 0
    16b8:	e1 14       	cp	r14, r1
    16ba:	f1 04       	cpc	r15, r1
    16bc:	09 f1       	breq	.+66     	; 0x1700 <strtol+0xaa>
    16be:	f0 e1       	ldi	r31, 0x10	; 16
    16c0:	ef 16       	cp	r14, r31
    16c2:	f1 04       	cpc	r15, r1
    16c4:	29 f4       	brne	.+10     	; 0x16d0 <strtol+0x7a>
    16c6:	3f c0       	rjmp	.+126    	; 0x1746 <strtol+0xf0>
    16c8:	10 e3       	ldi	r17, 0x30	; 48
    16ca:	e1 14       	cp	r14, r1
    16cc:	f1 04       	cpc	r15, r1
    16ce:	21 f1       	breq	.+72     	; 0x1718 <strtol+0xc2>
    16d0:	28 e0       	ldi	r18, 0x08	; 8
    16d2:	e2 16       	cp	r14, r18
    16d4:	f1 04       	cpc	r15, r1
    16d6:	01 f1       	breq	.+64     	; 0x1718 <strtol+0xc2>
    16d8:	54 f4       	brge	.+20     	; 0x16ee <strtol+0x98>
    16da:	e2 e0       	ldi	r30, 0x02	; 2
    16dc:	ee 16       	cp	r14, r30
    16de:	f1 04       	cpc	r15, r1
    16e0:	21 f5       	brne	.+72     	; 0x172a <strtol+0xd4>
    16e2:	81 2c       	mov	r8, r1
    16e4:	91 2c       	mov	r9, r1
    16e6:	a1 2c       	mov	r10, r1
    16e8:	b0 e4       	ldi	r27, 0x40	; 64
    16ea:	bb 2e       	mov	r11, r27
    16ec:	3e c0       	rjmp	.+124    	; 0x176a <strtol+0x114>
    16ee:	fa e0       	ldi	r31, 0x0A	; 10
    16f0:	ef 16       	cp	r14, r31
    16f2:	f1 04       	cpc	r15, r1
    16f4:	39 f0       	breq	.+14     	; 0x1704 <strtol+0xae>
    16f6:	20 e1       	ldi	r18, 0x10	; 16
    16f8:	e2 16       	cp	r14, r18
    16fa:	f1 04       	cpc	r15, r1
    16fc:	b1 f4       	brne	.+44     	; 0x172a <strtol+0xd4>
    16fe:	30 c0       	rjmp	.+96     	; 0x1760 <strtol+0x10a>
    1700:	10 33       	cpi	r17, 0x30	; 48
    1702:	19 f1       	breq	.+70     	; 0x174a <strtol+0xf4>
    1704:	fa e0       	ldi	r31, 0x0A	; 10
    1706:	ef 2e       	mov	r14, r31
    1708:	f1 2c       	mov	r15, r1
    170a:	ac ec       	ldi	r26, 0xCC	; 204
    170c:	8a 2e       	mov	r8, r26
    170e:	98 2c       	mov	r9, r8
    1710:	a8 2c       	mov	r10, r8
    1712:	ac e0       	ldi	r26, 0x0C	; 12
    1714:	ba 2e       	mov	r11, r26
    1716:	29 c0       	rjmp	.+82     	; 0x176a <strtol+0x114>
    1718:	78 e0       	ldi	r23, 0x08	; 8
    171a:	e7 2e       	mov	r14, r23
    171c:	f1 2c       	mov	r15, r1
    171e:	81 2c       	mov	r8, r1
    1720:	91 2c       	mov	r9, r1
    1722:	a1 2c       	mov	r10, r1
    1724:	e0 e1       	ldi	r30, 0x10	; 16
    1726:	be 2e       	mov	r11, r30
    1728:	20 c0       	rjmp	.+64     	; 0x176a <strtol+0x114>
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e8       	ldi	r25, 0x80	; 128
    1732:	97 01       	movw	r18, r14
    1734:	0f 2c       	mov	r0, r15
    1736:	00 0c       	add	r0, r0
    1738:	44 0b       	sbc	r20, r20
    173a:	55 0b       	sbc	r21, r21
    173c:	0e 94 84 0a 	call	0x1508	; 0x1508 <__udivmodsi4>
    1740:	49 01       	movw	r8, r18
    1742:	5a 01       	movw	r10, r20
    1744:	12 c0       	rjmp	.+36     	; 0x176a <strtol+0x114>
    1746:	10 33       	cpi	r17, 0x30	; 48
    1748:	59 f4       	brne	.+22     	; 0x1760 <strtol+0x10a>
    174a:	88 81       	ld	r24, Y
    174c:	8f 7d       	andi	r24, 0xDF	; 223
    174e:	88 35       	cpi	r24, 0x58	; 88
    1750:	09 f0       	breq	.+2      	; 0x1754 <strtol+0xfe>
    1752:	ba cf       	rjmp	.-140    	; 0x16c8 <strtol+0x72>
    1754:	19 81       	ldd	r17, Y+1	; 0x01
    1756:	22 96       	adiw	r28, 0x02	; 2
    1758:	02 60       	ori	r16, 0x02	; 2
    175a:	80 e1       	ldi	r24, 0x10	; 16
    175c:	e8 2e       	mov	r14, r24
    175e:	f1 2c       	mov	r15, r1
    1760:	81 2c       	mov	r8, r1
    1762:	91 2c       	mov	r9, r1
    1764:	a1 2c       	mov	r10, r1
    1766:	68 e0       	ldi	r22, 0x08	; 8
    1768:	b6 2e       	mov	r11, r22
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	cb 01       	movw	r24, r22
    1772:	27 01       	movw	r4, r14
    1774:	0f 2c       	mov	r0, r15
    1776:	00 0c       	add	r0, r0
    1778:	66 08       	sbc	r6, r6
    177a:	77 08       	sbc	r7, r7
    177c:	fe 01       	movw	r30, r28
    177e:	50 ed       	ldi	r21, 0xD0	; 208
    1780:	35 2e       	mov	r3, r21
    1782:	31 0e       	add	r3, r17
    1784:	29 e0       	ldi	r18, 0x09	; 9
    1786:	23 15       	cp	r18, r3
    1788:	70 f4       	brcc	.+28     	; 0x17a6 <strtol+0x150>
    178a:	2f eb       	ldi	r18, 0xBF	; 191
    178c:	21 0f       	add	r18, r17
    178e:	2a 31       	cpi	r18, 0x1A	; 26
    1790:	18 f4       	brcc	.+6      	; 0x1798 <strtol+0x142>
    1792:	39 ec       	ldi	r19, 0xC9	; 201
    1794:	33 2e       	mov	r3, r19
    1796:	06 c0       	rjmp	.+12     	; 0x17a4 <strtol+0x14e>
    1798:	2f e9       	ldi	r18, 0x9F	; 159
    179a:	21 0f       	add	r18, r17
    179c:	2a 31       	cpi	r18, 0x1A	; 26
    179e:	18 f5       	brcc	.+70     	; 0x17e6 <strtol+0x190>
    17a0:	29 ea       	ldi	r18, 0xA9	; 169
    17a2:	32 2e       	mov	r3, r18
    17a4:	31 0e       	add	r3, r17
    17a6:	23 2d       	mov	r18, r3
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	2e 15       	cp	r18, r14
    17ac:	3f 05       	cpc	r19, r15
    17ae:	dc f4       	brge	.+54     	; 0x17e6 <strtol+0x190>
    17b0:	47 fd       	sbrc	r20, 7
    17b2:	16 c0       	rjmp	.+44     	; 0x17e0 <strtol+0x18a>
    17b4:	86 16       	cp	r8, r22
    17b6:	97 06       	cpc	r9, r23
    17b8:	a8 06       	cpc	r10, r24
    17ba:	b9 06       	cpc	r11, r25
    17bc:	70 f0       	brcs	.+28     	; 0x17da <strtol+0x184>
    17be:	a3 01       	movw	r20, r6
    17c0:	92 01       	movw	r18, r4
    17c2:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsi3>
    17c6:	63 0d       	add	r22, r3
    17c8:	71 1d       	adc	r23, r1
    17ca:	81 1d       	adc	r24, r1
    17cc:	91 1d       	adc	r25, r1
    17ce:	61 30       	cpi	r22, 0x01	; 1
    17d0:	71 05       	cpc	r23, r1
    17d2:	81 05       	cpc	r24, r1
    17d4:	20 e8       	ldi	r18, 0x80	; 128
    17d6:	92 07       	cpc	r25, r18
    17d8:	10 f0       	brcs	.+4      	; 0x17de <strtol+0x188>
    17da:	4f ef       	ldi	r20, 0xFF	; 255
    17dc:	01 c0       	rjmp	.+2      	; 0x17e0 <strtol+0x18a>
    17de:	41 e0       	ldi	r20, 0x01	; 1
    17e0:	21 96       	adiw	r28, 0x01	; 1
    17e2:	10 81       	ld	r17, Z
    17e4:	cb cf       	rjmp	.-106    	; 0x177c <strtol+0x126>
    17e6:	20 2f       	mov	r18, r16
    17e8:	21 70       	andi	r18, 0x01	; 1
    17ea:	c1 14       	cp	r12, r1
    17ec:	d1 04       	cpc	r13, r1
    17ee:	71 f0       	breq	.+28     	; 0x180c <strtol+0x1b6>
    17f0:	44 23       	and	r20, r20
    17f2:	29 f0       	breq	.+10     	; 0x17fe <strtol+0x1a8>
    17f4:	21 97       	sbiw	r28, 0x01	; 1
    17f6:	f6 01       	movw	r30, r12
    17f8:	c0 83       	st	Z, r28
    17fa:	d1 83       	std	Z+1, r29	; 0x01
    17fc:	07 c0       	rjmp	.+14     	; 0x180c <strtol+0x1b6>
    17fe:	01 ff       	sbrs	r16, 1
    1800:	19 c0       	rjmp	.+50     	; 0x1834 <strtol+0x1de>
    1802:	22 97       	sbiw	r28, 0x02	; 2
    1804:	f6 01       	movw	r30, r12
    1806:	c0 83       	st	Z, r28
    1808:	d1 83       	std	Z+1, r29	; 0x01
    180a:	14 c0       	rjmp	.+40     	; 0x1834 <strtol+0x1de>
    180c:	47 ff       	sbrs	r20, 7
    180e:	12 c0       	rjmp	.+36     	; 0x1834 <strtol+0x1de>
    1810:	22 23       	and	r18, r18
    1812:	29 f0       	breq	.+10     	; 0x181e <strtol+0x1c8>
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e8       	ldi	r25, 0x80	; 128
    181c:	04 c0       	rjmp	.+8      	; 0x1826 <strtol+0x1d0>
    181e:	6f ef       	ldi	r22, 0xFF	; 255
    1820:	7f ef       	ldi	r23, 0xFF	; 255
    1822:	8f ef       	ldi	r24, 0xFF	; 255
    1824:	9f e7       	ldi	r25, 0x7F	; 127
    1826:	22 e2       	ldi	r18, 0x22	; 34
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	20 93 ca 64 	sts	0x64CA, r18	; 0x8064ca <errno>
    182e:	30 93 cb 64 	sts	0x64CB, r19	; 0x8064cb <errno+0x1>
    1832:	09 c0       	rjmp	.+18     	; 0x1846 <strtol+0x1f0>
    1834:	22 23       	and	r18, r18
    1836:	81 f0       	breq	.+32     	; 0x1858 <strtol+0x202>
    1838:	90 95       	com	r25
    183a:	80 95       	com	r24
    183c:	70 95       	com	r23
    183e:	61 95       	neg	r22
    1840:	7f 4f       	sbci	r23, 0xFF	; 255
    1842:	8f 4f       	sbci	r24, 0xFF	; 255
    1844:	9f 4f       	sbci	r25, 0xFF	; 255
    1846:	46 2f       	mov	r20, r22
    1848:	37 2f       	mov	r19, r23
    184a:	28 2f       	mov	r18, r24
    184c:	12 c0       	rjmp	.+36     	; 0x1872 <strtol+0x21c>
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0d c0       	rjmp	.+26     	; 0x1872 <strtol+0x21c>
    1858:	97 ff       	sbrs	r25, 7
    185a:	f5 cf       	rjmp	.-22     	; 0x1846 <strtol+0x1f0>
    185c:	82 e2       	ldi	r24, 0x22	; 34
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	80 93 ca 64 	sts	0x64CA, r24	; 0x8064ca <errno>
    1864:	90 93 cb 64 	sts	0x64CB, r25	; 0x8064cb <errno+0x1>
    1868:	6f ef       	ldi	r22, 0xFF	; 255
    186a:	7f ef       	ldi	r23, 0xFF	; 255
    186c:	8f ef       	ldi	r24, 0xFF	; 255
    186e:	9f e7       	ldi	r25, 0x7F	; 127
    1870:	ea cf       	rjmp	.-44     	; 0x1846 <strtol+0x1f0>
    1872:	64 2f       	mov	r22, r20
    1874:	73 2f       	mov	r23, r19
    1876:	82 2f       	mov	r24, r18
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	e1 e1       	ldi	r30, 0x11	; 17
    187e:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__+0x2>

00001882 <strtoul>:
    1882:	a0 e0       	ldi	r26, 0x00	; 0
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e7 e4       	ldi	r30, 0x47	; 71
    1888:	fc e0       	ldi	r31, 0x0C	; 12
    188a:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__prologue_saves__+0x2>
    188e:	5c 01       	movw	r10, r24
    1890:	6b 01       	movw	r12, r22
    1892:	7a 01       	movw	r14, r20
    1894:	61 15       	cp	r22, r1
    1896:	71 05       	cpc	r23, r1
    1898:	19 f0       	breq	.+6      	; 0x18a0 <strtoul+0x1e>
    189a:	fb 01       	movw	r30, r22
    189c:	80 83       	st	Z, r24
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	e1 14       	cp	r14, r1
    18a2:	f1 04       	cpc	r15, r1
    18a4:	29 f0       	breq	.+10     	; 0x18b0 <strtoul+0x2e>
    18a6:	c7 01       	movw	r24, r14
    18a8:	02 97       	sbiw	r24, 0x02	; 2
    18aa:	83 97       	sbiw	r24, 0x23	; 35
    18ac:	08 f0       	brcs	.+2      	; 0x18b0 <strtoul+0x2e>
    18ae:	c9 c0       	rjmp	.+402    	; 0x1a42 <strtoul+0x1c0>
    18b0:	e5 01       	movw	r28, r10
    18b2:	21 96       	adiw	r28, 0x01	; 1
    18b4:	f5 01       	movw	r30, r10
    18b6:	10 81       	ld	r17, Z
    18b8:	81 2f       	mov	r24, r17
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <isspace>
    18c0:	89 2b       	or	r24, r25
    18c2:	11 f0       	breq	.+4      	; 0x18c8 <strtoul+0x46>
    18c4:	5e 01       	movw	r10, r28
    18c6:	f4 cf       	rjmp	.-24     	; 0x18b0 <strtoul+0x2e>
    18c8:	1d 32       	cpi	r17, 0x2D	; 45
    18ca:	29 f4       	brne	.+10     	; 0x18d6 <strtoul+0x54>
    18cc:	21 96       	adiw	r28, 0x01	; 1
    18ce:	f5 01       	movw	r30, r10
    18d0:	11 81       	ldd	r17, Z+1	; 0x01
    18d2:	01 e0       	ldi	r16, 0x01	; 1
    18d4:	07 c0       	rjmp	.+14     	; 0x18e4 <strtoul+0x62>
    18d6:	1b 32       	cpi	r17, 0x2B	; 43
    18d8:	21 f4       	brne	.+8      	; 0x18e2 <strtoul+0x60>
    18da:	e5 01       	movw	r28, r10
    18dc:	22 96       	adiw	r28, 0x02	; 2
    18de:	f5 01       	movw	r30, r10
    18e0:	11 81       	ldd	r17, Z+1	; 0x01
    18e2:	00 e0       	ldi	r16, 0x00	; 0
    18e4:	e1 14       	cp	r14, r1
    18e6:	f1 04       	cpc	r15, r1
    18e8:	b1 f0       	breq	.+44     	; 0x1916 <strtoul+0x94>
    18ea:	f0 e1       	ldi	r31, 0x10	; 16
    18ec:	ef 16       	cp	r14, r31
    18ee:	f1 04       	cpc	r15, r1
    18f0:	29 f4       	brne	.+10     	; 0x18fc <strtoul+0x7a>
    18f2:	b0 c0       	rjmp	.+352    	; 0x1a54 <strtoul+0x1d2>
    18f4:	10 e3       	ldi	r17, 0x30	; 48
    18f6:	e1 14       	cp	r14, r1
    18f8:	f1 04       	cpc	r15, r1
    18fa:	01 f1       	breq	.+64     	; 0x193c <strtoul+0xba>
    18fc:	2a e0       	ldi	r18, 0x0A	; 10
    18fe:	e2 16       	cp	r14, r18
    1900:	f1 04       	cpc	r15, r1
    1902:	b1 f1       	breq	.+108    	; 0x1970 <strtoul+0xee>
    1904:	80 e1       	ldi	r24, 0x10	; 16
    1906:	e8 16       	cp	r14, r24
    1908:	f1 04       	cpc	r15, r1
    190a:	71 f0       	breq	.+28     	; 0x1928 <strtoul+0xa6>
    190c:	e8 e0       	ldi	r30, 0x08	; 8
    190e:	ee 16       	cp	r14, r30
    1910:	f1 04       	cpc	r15, r1
    1912:	f1 f4       	brne	.+60     	; 0x1950 <strtoul+0xce>
    1914:	13 c0       	rjmp	.+38     	; 0x193c <strtoul+0xba>
    1916:	10 33       	cpi	r17, 0x30	; 48
    1918:	41 f5       	brne	.+80     	; 0x196a <strtoul+0xe8>
    191a:	88 81       	ld	r24, Y
    191c:	8f 7d       	andi	r24, 0xDF	; 223
    191e:	88 35       	cpi	r24, 0x58	; 88
    1920:	49 f7       	brne	.-46     	; 0x18f4 <strtoul+0x72>
    1922:	19 81       	ldd	r17, Y+1	; 0x01
    1924:	22 96       	adiw	r28, 0x02	; 2
    1926:	02 60       	ori	r16, 0x02	; 2
    1928:	f0 e1       	ldi	r31, 0x10	; 16
    192a:	ef 2e       	mov	r14, r31
    192c:	f1 2c       	mov	r15, r1
    192e:	88 24       	eor	r8, r8
    1930:	8a 94       	dec	r8
    1932:	98 2c       	mov	r9, r8
    1934:	a8 2c       	mov	r10, r8
    1936:	af e0       	ldi	r26, 0x0F	; 15
    1938:	ba 2e       	mov	r11, r26
    193a:	20 c0       	rjmp	.+64     	; 0x197c <strtoul+0xfa>
    193c:	78 e0       	ldi	r23, 0x08	; 8
    193e:	e7 2e       	mov	r14, r23
    1940:	f1 2c       	mov	r15, r1
    1942:	88 24       	eor	r8, r8
    1944:	8a 94       	dec	r8
    1946:	98 2c       	mov	r9, r8
    1948:	a8 2c       	mov	r10, r8
    194a:	ef e1       	ldi	r30, 0x1F	; 31
    194c:	be 2e       	mov	r11, r30
    194e:	16 c0       	rjmp	.+44     	; 0x197c <strtoul+0xfa>
    1950:	6f ef       	ldi	r22, 0xFF	; 255
    1952:	7f ef       	ldi	r23, 0xFF	; 255
    1954:	cb 01       	movw	r24, r22
    1956:	97 01       	movw	r18, r14
    1958:	0f 2c       	mov	r0, r15
    195a:	00 0c       	add	r0, r0
    195c:	44 0b       	sbc	r20, r20
    195e:	55 0b       	sbc	r21, r21
    1960:	0e 94 84 0a 	call	0x1508	; 0x1508 <__udivmodsi4>
    1964:	49 01       	movw	r8, r18
    1966:	5a 01       	movw	r10, r20
    1968:	09 c0       	rjmp	.+18     	; 0x197c <strtoul+0xfa>
    196a:	8a e0       	ldi	r24, 0x0A	; 10
    196c:	e8 2e       	mov	r14, r24
    196e:	f1 2c       	mov	r15, r1
    1970:	69 e9       	ldi	r22, 0x99	; 153
    1972:	86 2e       	mov	r8, r22
    1974:	98 2c       	mov	r9, r8
    1976:	a8 2c       	mov	r10, r8
    1978:	69 e1       	ldi	r22, 0x19	; 25
    197a:	b6 2e       	mov	r11, r22
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	cb 01       	movw	r24, r22
    1984:	27 01       	movw	r4, r14
    1986:	0f 2c       	mov	r0, r15
    1988:	00 0c       	add	r0, r0
    198a:	66 08       	sbc	r6, r6
    198c:	77 08       	sbc	r7, r7
    198e:	fe 01       	movw	r30, r28
    1990:	50 ed       	ldi	r21, 0xD0	; 208
    1992:	35 2e       	mov	r3, r21
    1994:	31 0e       	add	r3, r17
    1996:	29 e0       	ldi	r18, 0x09	; 9
    1998:	23 15       	cp	r18, r3
    199a:	70 f4       	brcc	.+28     	; 0x19b8 <strtoul+0x136>
    199c:	2f eb       	ldi	r18, 0xBF	; 191
    199e:	21 0f       	add	r18, r17
    19a0:	2a 31       	cpi	r18, 0x1A	; 26
    19a2:	18 f4       	brcc	.+6      	; 0x19aa <strtoul+0x128>
    19a4:	39 ec       	ldi	r19, 0xC9	; 201
    19a6:	33 2e       	mov	r3, r19
    19a8:	06 c0       	rjmp	.+12     	; 0x19b6 <strtoul+0x134>
    19aa:	2f e9       	ldi	r18, 0x9F	; 159
    19ac:	21 0f       	add	r18, r17
    19ae:	2a 31       	cpi	r18, 0x1A	; 26
    19b0:	30 f5       	brcc	.+76     	; 0x19fe <strtoul+0x17c>
    19b2:	29 ea       	ldi	r18, 0xA9	; 169
    19b4:	32 2e       	mov	r3, r18
    19b6:	31 0e       	add	r3, r17
    19b8:	23 2d       	mov	r18, r3
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	2e 15       	cp	r18, r14
    19be:	3f 05       	cpc	r19, r15
    19c0:	f4 f4       	brge	.+60     	; 0x19fe <strtoul+0x17c>
    19c2:	4f 3f       	cpi	r20, 0xFF	; 255
    19c4:	c9 f0       	breq	.+50     	; 0x19f8 <strtoul+0x176>
    19c6:	86 16       	cp	r8, r22
    19c8:	97 06       	cpc	r9, r23
    19ca:	a8 06       	cpc	r10, r24
    19cc:	b9 06       	cpc	r11, r25
    19ce:	88 f0       	brcs	.+34     	; 0x19f2 <strtoul+0x170>
    19d0:	a3 01       	movw	r20, r6
    19d2:	92 01       	movw	r18, r4
    19d4:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsi3>
    19d8:	23 2d       	mov	r18, r3
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	62 0f       	add	r22, r18
    19e2:	73 1f       	adc	r23, r19
    19e4:	84 1f       	adc	r24, r20
    19e6:	95 1f       	adc	r25, r21
    19e8:	62 17       	cp	r22, r18
    19ea:	73 07       	cpc	r23, r19
    19ec:	84 07       	cpc	r24, r20
    19ee:	95 07       	cpc	r25, r21
    19f0:	10 f4       	brcc	.+4      	; 0x19f6 <strtoul+0x174>
    19f2:	4f ef       	ldi	r20, 0xFF	; 255
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <strtoul+0x176>
    19f6:	41 e0       	ldi	r20, 0x01	; 1
    19f8:	21 96       	adiw	r28, 0x01	; 1
    19fa:	10 81       	ld	r17, Z
    19fc:	c8 cf       	rjmp	.-112    	; 0x198e <strtoul+0x10c>
    19fe:	c1 14       	cp	r12, r1
    1a00:	d1 04       	cpc	r13, r1
    1a02:	51 f0       	breq	.+20     	; 0x1a18 <strtoul+0x196>
    1a04:	44 23       	and	r20, r20
    1a06:	11 f0       	breq	.+4      	; 0x1a0c <strtoul+0x18a>
    1a08:	21 97       	sbiw	r28, 0x01	; 1
    1a0a:	03 c0       	rjmp	.+6      	; 0x1a12 <strtoul+0x190>
    1a0c:	01 ff       	sbrs	r16, 1
    1a0e:	04 c0       	rjmp	.+8      	; 0x1a18 <strtoul+0x196>
    1a10:	22 97       	sbiw	r28, 0x02	; 2
    1a12:	f6 01       	movw	r30, r12
    1a14:	c0 83       	st	Z, r28
    1a16:	d1 83       	std	Z+1, r29	; 0x01
    1a18:	00 ff       	sbrs	r16, 0
    1a1a:	07 c0       	rjmp	.+14     	; 0x1a2a <strtoul+0x1a8>
    1a1c:	90 95       	com	r25
    1a1e:	80 95       	com	r24
    1a20:	70 95       	com	r23
    1a22:	61 95       	neg	r22
    1a24:	7f 4f       	sbci	r23, 0xFF	; 255
    1a26:	8f 4f       	sbci	r24, 0xFF	; 255
    1a28:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2a:	4f 3f       	cpi	r20, 0xFF	; 255
    1a2c:	79 f4       	brne	.+30     	; 0x1a4c <strtoul+0x1ca>
    1a2e:	82 e2       	ldi	r24, 0x22	; 34
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	80 93 ca 64 	sts	0x64CA, r24	; 0x8064ca <errno>
    1a36:	90 93 cb 64 	sts	0x64CB, r25	; 0x8064cb <errno+0x1>
    1a3a:	3f ef       	ldi	r19, 0xFF	; 255
    1a3c:	2f ef       	ldi	r18, 0xFF	; 255
    1a3e:	9f ef       	ldi	r25, 0xFF	; 255
    1a40:	0d c0       	rjmp	.+26     	; 0x1a5c <strtoul+0x1da>
    1a42:	40 e0       	ldi	r20, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	08 c0       	rjmp	.+16     	; 0x1a5c <strtoul+0x1da>
    1a4c:	46 2f       	mov	r20, r22
    1a4e:	37 2f       	mov	r19, r23
    1a50:	28 2f       	mov	r18, r24
    1a52:	04 c0       	rjmp	.+8      	; 0x1a5c <strtoul+0x1da>
    1a54:	10 33       	cpi	r17, 0x30	; 48
    1a56:	09 f0       	breq	.+2      	; 0x1a5a <strtoul+0x1d8>
    1a58:	67 cf       	rjmp	.-306    	; 0x1928 <strtoul+0xa6>
    1a5a:	5f cf       	rjmp	.-322    	; 0x191a <strtoul+0x98>
    1a5c:	64 2f       	mov	r22, r20
    1a5e:	73 2f       	mov	r23, r19
    1a60:	82 2f       	mov	r24, r18
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	e1 e1       	ldi	r30, 0x11	; 17
    1a68:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__+0x2>

00001a6c <isspace>:
    1a6c:	91 11       	cpse	r25, r1
    1a6e:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__ctype_isfalse>
    1a72:	80 32       	cpi	r24, 0x20	; 32
    1a74:	19 f0       	breq	.+6      	; 0x1a7c <isspace+0x10>
    1a76:	89 50       	subi	r24, 0x09	; 9
    1a78:	85 50       	subi	r24, 0x05	; 5
    1a7a:	c8 f7       	brcc	.-14     	; 0x1a6e <isspace+0x2>
    1a7c:	08 95       	ret

00001a7e <strtok>:
    1a7e:	4c e9       	ldi	r20, 0x9C	; 156
    1a80:	54 e6       	ldi	r21, 0x64	; 100
    1a82:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <strtok_r>
    1a86:	08 95       	ret

00001a88 <memcpy>:
    1a88:	fb 01       	movw	r30, r22
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <memcpy+0xa>
    1a8e:	01 90       	ld	r0, Z+
    1a90:	0d 92       	st	X+, r0
    1a92:	41 50       	subi	r20, 0x01	; 1
    1a94:	50 40       	sbci	r21, 0x00	; 0
    1a96:	d8 f7       	brcc	.-10     	; 0x1a8e <memcpy+0x6>
    1a98:	08 95       	ret

00001a9a <strncpy>:
    1a9a:	fb 01       	movw	r30, r22
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	41 50       	subi	r20, 0x01	; 1
    1aa0:	50 40       	sbci	r21, 0x00	; 0
    1aa2:	48 f0       	brcs	.+18     	; 0x1ab6 <strncpy+0x1c>
    1aa4:	01 90       	ld	r0, Z+
    1aa6:	0d 92       	st	X+, r0
    1aa8:	00 20       	and	r0, r0
    1aaa:	c9 f7       	brne	.-14     	; 0x1a9e <strncpy+0x4>
    1aac:	01 c0       	rjmp	.+2      	; 0x1ab0 <strncpy+0x16>
    1aae:	1d 92       	st	X+, r1
    1ab0:	41 50       	subi	r20, 0x01	; 1
    1ab2:	50 40       	sbci	r21, 0x00	; 0
    1ab4:	e0 f7       	brcc	.-8      	; 0x1aae <strncpy+0x14>
    1ab6:	08 95       	ret

00001ab8 <strtok_r>:
    1ab8:	fa 01       	movw	r30, r20
    1aba:	a1 91       	ld	r26, Z+
    1abc:	b0 81       	ld	r27, Z
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	19 f4       	brne	.+6      	; 0x1ac8 <strtok_r+0x10>
    1ac2:	10 97       	sbiw	r26, 0x00	; 0
    1ac4:	e1 f0       	breq	.+56     	; 0x1afe <strtok_r+0x46>
    1ac6:	cd 01       	movw	r24, r26
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cd 01       	movw	r24, r26
    1acc:	0d 90       	ld	r0, X+
    1ace:	00 20       	and	r0, r0
    1ad0:	11 f4       	brne	.+4      	; 0x1ad6 <strtok_r+0x1e>
    1ad2:	c0 01       	movw	r24, r0
    1ad4:	13 c0       	rjmp	.+38     	; 0x1afc <strtok_r+0x44>
    1ad6:	fb 01       	movw	r30, r22
    1ad8:	21 91       	ld	r18, Z+
    1ada:	22 23       	and	r18, r18
    1adc:	19 f0       	breq	.+6      	; 0x1ae4 <strtok_r+0x2c>
    1ade:	20 15       	cp	r18, r0
    1ae0:	d9 f7       	brne	.-10     	; 0x1ad8 <strtok_r+0x20>
    1ae2:	f3 cf       	rjmp	.-26     	; 0x1aca <strtok_r+0x12>
    1ae4:	fb 01       	movw	r30, r22
    1ae6:	21 91       	ld	r18, Z+
    1ae8:	20 15       	cp	r18, r0
    1aea:	19 f4       	brne	.+6      	; 0x1af2 <strtok_r+0x3a>
    1aec:	1e 92       	st	-X, r1
    1aee:	11 96       	adiw	r26, 0x01	; 1
    1af0:	06 c0       	rjmp	.+12     	; 0x1afe <strtok_r+0x46>
    1af2:	22 23       	and	r18, r18
    1af4:	c1 f7       	brne	.-16     	; 0x1ae6 <strtok_r+0x2e>
    1af6:	0d 90       	ld	r0, X+
    1af8:	00 20       	and	r0, r0
    1afa:	a1 f7       	brne	.-24     	; 0x1ae4 <strtok_r+0x2c>
    1afc:	d0 01       	movw	r26, r0
    1afe:	fa 01       	movw	r30, r20
    1b00:	a1 93       	st	Z+, r26
    1b02:	b0 83       	st	Z, r27
    1b04:	08 95       	ret

00001b06 <vsnprintf>:
    1b06:	ae e0       	ldi	r26, 0x0E	; 14
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e9 e8       	ldi	r30, 0x89	; 137
    1b0c:	fd e0       	ldi	r31, 0x0D	; 13
    1b0e:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__prologue_saves__+0x1c>
    1b12:	8c 01       	movw	r16, r24
    1b14:	fa 01       	movw	r30, r20
    1b16:	86 e0       	ldi	r24, 0x06	; 6
    1b18:	8c 83       	std	Y+4, r24	; 0x04
    1b1a:	09 83       	std	Y+1, r16	; 0x01
    1b1c:	1a 83       	std	Y+2, r17	; 0x02
    1b1e:	77 ff       	sbrs	r23, 7
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <vsnprintf+0x20>
    1b22:	60 e0       	ldi	r22, 0x00	; 0
    1b24:	70 e8       	ldi	r23, 0x80	; 128
    1b26:	cb 01       	movw	r24, r22
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	8d 83       	std	Y+5, r24	; 0x05
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	a9 01       	movw	r20, r18
    1b30:	bf 01       	movw	r22, r30
    1b32:	ce 01       	movw	r24, r28
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <vfprintf>
    1b3a:	4d 81       	ldd	r20, Y+5	; 0x05
    1b3c:	5e 81       	ldd	r21, Y+6	; 0x06
    1b3e:	57 fd       	sbrc	r21, 7
    1b40:	0a c0       	rjmp	.+20     	; 0x1b56 <vsnprintf+0x50>
    1b42:	2f 81       	ldd	r18, Y+7	; 0x07
    1b44:	38 85       	ldd	r19, Y+8	; 0x08
    1b46:	42 17       	cp	r20, r18
    1b48:	53 07       	cpc	r21, r19
    1b4a:	0c f4       	brge	.+2      	; 0x1b4e <vsnprintf+0x48>
    1b4c:	9a 01       	movw	r18, r20
    1b4e:	f8 01       	movw	r30, r16
    1b50:	e2 0f       	add	r30, r18
    1b52:	f3 1f       	adc	r31, r19
    1b54:	10 82       	st	Z, r1
    1b56:	2e 96       	adiw	r28, 0x0e	; 14
    1b58:	e4 e0       	ldi	r30, 0x04	; 4
    1b5a:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__epilogue_restores__+0x1c>

00001b5e <vfprintf>:
    1b5e:	ab e0       	ldi	r26, 0x0B	; 11
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e5 eb       	ldi	r30, 0xB5	; 181
    1b64:	fd e0       	ldi	r31, 0x0D	; 13
    1b66:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__prologue_saves__>
    1b6a:	6c 01       	movw	r12, r24
    1b6c:	7b 01       	movw	r14, r22
    1b6e:	8a 01       	movw	r16, r20
    1b70:	fc 01       	movw	r30, r24
    1b72:	16 82       	std	Z+6, r1	; 0x06
    1b74:	17 82       	std	Z+7, r1	; 0x07
    1b76:	83 81       	ldd	r24, Z+3	; 0x03
    1b78:	81 ff       	sbrs	r24, 1
    1b7a:	cc c1       	rjmp	.+920    	; 0x1f14 <vfprintf+0x3b6>
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	3c 01       	movw	r6, r24
    1b82:	f6 01       	movw	r30, r12
    1b84:	93 81       	ldd	r25, Z+3	; 0x03
    1b86:	f7 01       	movw	r30, r14
    1b88:	93 fd       	sbrc	r25, 3
    1b8a:	85 91       	lpm	r24, Z+
    1b8c:	93 ff       	sbrs	r25, 3
    1b8e:	81 91       	ld	r24, Z+
    1b90:	7f 01       	movw	r14, r30
    1b92:	88 23       	and	r24, r24
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <vfprintf+0x3a>
    1b96:	ba c1       	rjmp	.+884    	; 0x1f0c <vfprintf+0x3ae>
    1b98:	85 32       	cpi	r24, 0x25	; 37
    1b9a:	39 f4       	brne	.+14     	; 0x1baa <vfprintf+0x4c>
    1b9c:	93 fd       	sbrc	r25, 3
    1b9e:	85 91       	lpm	r24, Z+
    1ba0:	93 ff       	sbrs	r25, 3
    1ba2:	81 91       	ld	r24, Z+
    1ba4:	7f 01       	movw	r14, r30
    1ba6:	85 32       	cpi	r24, 0x25	; 37
    1ba8:	29 f4       	brne	.+10     	; 0x1bb4 <vfprintf+0x56>
    1baa:	b6 01       	movw	r22, r12
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <fputc>
    1bb2:	e7 cf       	rjmp	.-50     	; 0x1b82 <vfprintf+0x24>
    1bb4:	91 2c       	mov	r9, r1
    1bb6:	21 2c       	mov	r2, r1
    1bb8:	31 2c       	mov	r3, r1
    1bba:	ff e1       	ldi	r31, 0x1F	; 31
    1bbc:	f3 15       	cp	r31, r3
    1bbe:	d8 f0       	brcs	.+54     	; 0x1bf6 <vfprintf+0x98>
    1bc0:	8b 32       	cpi	r24, 0x2B	; 43
    1bc2:	79 f0       	breq	.+30     	; 0x1be2 <vfprintf+0x84>
    1bc4:	38 f4       	brcc	.+14     	; 0x1bd4 <vfprintf+0x76>
    1bc6:	80 32       	cpi	r24, 0x20	; 32
    1bc8:	79 f0       	breq	.+30     	; 0x1be8 <vfprintf+0x8a>
    1bca:	83 32       	cpi	r24, 0x23	; 35
    1bcc:	a1 f4       	brne	.+40     	; 0x1bf6 <vfprintf+0x98>
    1bce:	23 2d       	mov	r18, r3
    1bd0:	20 61       	ori	r18, 0x10	; 16
    1bd2:	1d c0       	rjmp	.+58     	; 0x1c0e <vfprintf+0xb0>
    1bd4:	8d 32       	cpi	r24, 0x2D	; 45
    1bd6:	61 f0       	breq	.+24     	; 0x1bf0 <vfprintf+0x92>
    1bd8:	80 33       	cpi	r24, 0x30	; 48
    1bda:	69 f4       	brne	.+26     	; 0x1bf6 <vfprintf+0x98>
    1bdc:	23 2d       	mov	r18, r3
    1bde:	21 60       	ori	r18, 0x01	; 1
    1be0:	16 c0       	rjmp	.+44     	; 0x1c0e <vfprintf+0xb0>
    1be2:	83 2d       	mov	r24, r3
    1be4:	82 60       	ori	r24, 0x02	; 2
    1be6:	38 2e       	mov	r3, r24
    1be8:	e3 2d       	mov	r30, r3
    1bea:	e4 60       	ori	r30, 0x04	; 4
    1bec:	3e 2e       	mov	r3, r30
    1bee:	2a c0       	rjmp	.+84     	; 0x1c44 <vfprintf+0xe6>
    1bf0:	f3 2d       	mov	r31, r3
    1bf2:	f8 60       	ori	r31, 0x08	; 8
    1bf4:	1d c0       	rjmp	.+58     	; 0x1c30 <vfprintf+0xd2>
    1bf6:	37 fc       	sbrc	r3, 7
    1bf8:	2d c0       	rjmp	.+90     	; 0x1c54 <vfprintf+0xf6>
    1bfa:	20 ed       	ldi	r18, 0xD0	; 208
    1bfc:	28 0f       	add	r18, r24
    1bfe:	2a 30       	cpi	r18, 0x0A	; 10
    1c00:	40 f0       	brcs	.+16     	; 0x1c12 <vfprintf+0xb4>
    1c02:	8e 32       	cpi	r24, 0x2E	; 46
    1c04:	b9 f4       	brne	.+46     	; 0x1c34 <vfprintf+0xd6>
    1c06:	36 fc       	sbrc	r3, 6
    1c08:	81 c1       	rjmp	.+770    	; 0x1f0c <vfprintf+0x3ae>
    1c0a:	23 2d       	mov	r18, r3
    1c0c:	20 64       	ori	r18, 0x40	; 64
    1c0e:	32 2e       	mov	r3, r18
    1c10:	19 c0       	rjmp	.+50     	; 0x1c44 <vfprintf+0xe6>
    1c12:	36 fe       	sbrs	r3, 6
    1c14:	06 c0       	rjmp	.+12     	; 0x1c22 <vfprintf+0xc4>
    1c16:	8a e0       	ldi	r24, 0x0A	; 10
    1c18:	98 9e       	mul	r9, r24
    1c1a:	20 0d       	add	r18, r0
    1c1c:	11 24       	eor	r1, r1
    1c1e:	92 2e       	mov	r9, r18
    1c20:	11 c0       	rjmp	.+34     	; 0x1c44 <vfprintf+0xe6>
    1c22:	ea e0       	ldi	r30, 0x0A	; 10
    1c24:	2e 9e       	mul	r2, r30
    1c26:	20 0d       	add	r18, r0
    1c28:	11 24       	eor	r1, r1
    1c2a:	22 2e       	mov	r2, r18
    1c2c:	f3 2d       	mov	r31, r3
    1c2e:	f0 62       	ori	r31, 0x20	; 32
    1c30:	3f 2e       	mov	r3, r31
    1c32:	08 c0       	rjmp	.+16     	; 0x1c44 <vfprintf+0xe6>
    1c34:	8c 36       	cpi	r24, 0x6C	; 108
    1c36:	21 f4       	brne	.+8      	; 0x1c40 <vfprintf+0xe2>
    1c38:	83 2d       	mov	r24, r3
    1c3a:	80 68       	ori	r24, 0x80	; 128
    1c3c:	38 2e       	mov	r3, r24
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <vfprintf+0xe6>
    1c40:	88 36       	cpi	r24, 0x68	; 104
    1c42:	41 f4       	brne	.+16     	; 0x1c54 <vfprintf+0xf6>
    1c44:	f7 01       	movw	r30, r14
    1c46:	93 fd       	sbrc	r25, 3
    1c48:	85 91       	lpm	r24, Z+
    1c4a:	93 ff       	sbrs	r25, 3
    1c4c:	81 91       	ld	r24, Z+
    1c4e:	7f 01       	movw	r14, r30
    1c50:	81 11       	cpse	r24, r1
    1c52:	b3 cf       	rjmp	.-154    	; 0x1bba <vfprintf+0x5c>
    1c54:	98 2f       	mov	r25, r24
    1c56:	9f 7d       	andi	r25, 0xDF	; 223
    1c58:	95 54       	subi	r25, 0x45	; 69
    1c5a:	93 30       	cpi	r25, 0x03	; 3
    1c5c:	28 f4       	brcc	.+10     	; 0x1c68 <vfprintf+0x10a>
    1c5e:	0c 5f       	subi	r16, 0xFC	; 252
    1c60:	1f 4f       	sbci	r17, 0xFF	; 255
    1c62:	9f e3       	ldi	r25, 0x3F	; 63
    1c64:	99 83       	std	Y+1, r25	; 0x01
    1c66:	0d c0       	rjmp	.+26     	; 0x1c82 <vfprintf+0x124>
    1c68:	83 36       	cpi	r24, 0x63	; 99
    1c6a:	31 f0       	breq	.+12     	; 0x1c78 <vfprintf+0x11a>
    1c6c:	83 37       	cpi	r24, 0x73	; 115
    1c6e:	71 f0       	breq	.+28     	; 0x1c8c <vfprintf+0x12e>
    1c70:	83 35       	cpi	r24, 0x53	; 83
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <vfprintf+0x118>
    1c74:	59 c0       	rjmp	.+178    	; 0x1d28 <vfprintf+0x1ca>
    1c76:	21 c0       	rjmp	.+66     	; 0x1cba <vfprintf+0x15c>
    1c78:	f8 01       	movw	r30, r16
    1c7a:	80 81       	ld	r24, Z
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	0e 5f       	subi	r16, 0xFE	; 254
    1c80:	1f 4f       	sbci	r17, 0xFF	; 255
    1c82:	88 24       	eor	r8, r8
    1c84:	83 94       	inc	r8
    1c86:	91 2c       	mov	r9, r1
    1c88:	53 01       	movw	r10, r6
    1c8a:	13 c0       	rjmp	.+38     	; 0x1cb2 <vfprintf+0x154>
    1c8c:	28 01       	movw	r4, r16
    1c8e:	f2 e0       	ldi	r31, 0x02	; 2
    1c90:	4f 0e       	add	r4, r31
    1c92:	51 1c       	adc	r5, r1
    1c94:	f8 01       	movw	r30, r16
    1c96:	a0 80       	ld	r10, Z
    1c98:	b1 80       	ldd	r11, Z+1	; 0x01
    1c9a:	36 fe       	sbrs	r3, 6
    1c9c:	03 c0       	rjmp	.+6      	; 0x1ca4 <vfprintf+0x146>
    1c9e:	69 2d       	mov	r22, r9
    1ca0:	70 e0       	ldi	r23, 0x00	; 0
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <vfprintf+0x14a>
    1ca4:	6f ef       	ldi	r22, 0xFF	; 255
    1ca6:	7f ef       	ldi	r23, 0xFF	; 255
    1ca8:	c5 01       	movw	r24, r10
    1caa:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <strnlen>
    1cae:	4c 01       	movw	r8, r24
    1cb0:	82 01       	movw	r16, r4
    1cb2:	f3 2d       	mov	r31, r3
    1cb4:	ff 77       	andi	r31, 0x7F	; 127
    1cb6:	3f 2e       	mov	r3, r31
    1cb8:	16 c0       	rjmp	.+44     	; 0x1ce6 <vfprintf+0x188>
    1cba:	28 01       	movw	r4, r16
    1cbc:	22 e0       	ldi	r18, 0x02	; 2
    1cbe:	42 0e       	add	r4, r18
    1cc0:	51 1c       	adc	r5, r1
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	a0 80       	ld	r10, Z
    1cc6:	b1 80       	ldd	r11, Z+1	; 0x01
    1cc8:	36 fe       	sbrs	r3, 6
    1cca:	03 c0       	rjmp	.+6      	; 0x1cd2 <vfprintf+0x174>
    1ccc:	69 2d       	mov	r22, r9
    1cce:	70 e0       	ldi	r23, 0x00	; 0
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <vfprintf+0x178>
    1cd2:	6f ef       	ldi	r22, 0xFF	; 255
    1cd4:	7f ef       	ldi	r23, 0xFF	; 255
    1cd6:	c5 01       	movw	r24, r10
    1cd8:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <strnlen_P>
    1cdc:	4c 01       	movw	r8, r24
    1cde:	f3 2d       	mov	r31, r3
    1ce0:	f0 68       	ori	r31, 0x80	; 128
    1ce2:	3f 2e       	mov	r3, r31
    1ce4:	82 01       	movw	r16, r4
    1ce6:	33 fc       	sbrc	r3, 3
    1ce8:	1b c0       	rjmp	.+54     	; 0x1d20 <vfprintf+0x1c2>
    1cea:	82 2d       	mov	r24, r2
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	88 16       	cp	r8, r24
    1cf0:	99 06       	cpc	r9, r25
    1cf2:	b0 f4       	brcc	.+44     	; 0x1d20 <vfprintf+0x1c2>
    1cf4:	b6 01       	movw	r22, r12
    1cf6:	80 e2       	ldi	r24, 0x20	; 32
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <fputc>
    1cfe:	2a 94       	dec	r2
    1d00:	f4 cf       	rjmp	.-24     	; 0x1cea <vfprintf+0x18c>
    1d02:	f5 01       	movw	r30, r10
    1d04:	37 fc       	sbrc	r3, 7
    1d06:	85 91       	lpm	r24, Z+
    1d08:	37 fe       	sbrs	r3, 7
    1d0a:	81 91       	ld	r24, Z+
    1d0c:	5f 01       	movw	r10, r30
    1d0e:	b6 01       	movw	r22, r12
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <fputc>
    1d16:	21 10       	cpse	r2, r1
    1d18:	2a 94       	dec	r2
    1d1a:	21 e0       	ldi	r18, 0x01	; 1
    1d1c:	82 1a       	sub	r8, r18
    1d1e:	91 08       	sbc	r9, r1
    1d20:	81 14       	cp	r8, r1
    1d22:	91 04       	cpc	r9, r1
    1d24:	71 f7       	brne	.-36     	; 0x1d02 <vfprintf+0x1a4>
    1d26:	e8 c0       	rjmp	.+464    	; 0x1ef8 <vfprintf+0x39a>
    1d28:	84 36       	cpi	r24, 0x64	; 100
    1d2a:	11 f0       	breq	.+4      	; 0x1d30 <vfprintf+0x1d2>
    1d2c:	89 36       	cpi	r24, 0x69	; 105
    1d2e:	41 f5       	brne	.+80     	; 0x1d80 <vfprintf+0x222>
    1d30:	f8 01       	movw	r30, r16
    1d32:	37 fe       	sbrs	r3, 7
    1d34:	07 c0       	rjmp	.+14     	; 0x1d44 <vfprintf+0x1e6>
    1d36:	60 81       	ld	r22, Z
    1d38:	71 81       	ldd	r23, Z+1	; 0x01
    1d3a:	82 81       	ldd	r24, Z+2	; 0x02
    1d3c:	93 81       	ldd	r25, Z+3	; 0x03
    1d3e:	0c 5f       	subi	r16, 0xFC	; 252
    1d40:	1f 4f       	sbci	r17, 0xFF	; 255
    1d42:	08 c0       	rjmp	.+16     	; 0x1d54 <vfprintf+0x1f6>
    1d44:	60 81       	ld	r22, Z
    1d46:	71 81       	ldd	r23, Z+1	; 0x01
    1d48:	07 2e       	mov	r0, r23
    1d4a:	00 0c       	add	r0, r0
    1d4c:	88 0b       	sbc	r24, r24
    1d4e:	99 0b       	sbc	r25, r25
    1d50:	0e 5f       	subi	r16, 0xFE	; 254
    1d52:	1f 4f       	sbci	r17, 0xFF	; 255
    1d54:	f3 2d       	mov	r31, r3
    1d56:	ff 76       	andi	r31, 0x6F	; 111
    1d58:	3f 2e       	mov	r3, r31
    1d5a:	97 ff       	sbrs	r25, 7
    1d5c:	09 c0       	rjmp	.+18     	; 0x1d70 <vfprintf+0x212>
    1d5e:	90 95       	com	r25
    1d60:	80 95       	com	r24
    1d62:	70 95       	com	r23
    1d64:	61 95       	neg	r22
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	f0 68       	ori	r31, 0x80	; 128
    1d6e:	3f 2e       	mov	r3, r31
    1d70:	2a e0       	ldi	r18, 0x0A	; 10
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	a3 01       	movw	r20, r6
    1d76:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__ultoa_invert>
    1d7a:	88 2e       	mov	r8, r24
    1d7c:	86 18       	sub	r8, r6
    1d7e:	45 c0       	rjmp	.+138    	; 0x1e0a <vfprintf+0x2ac>
    1d80:	85 37       	cpi	r24, 0x75	; 117
    1d82:	31 f4       	brne	.+12     	; 0x1d90 <vfprintf+0x232>
    1d84:	23 2d       	mov	r18, r3
    1d86:	2f 7e       	andi	r18, 0xEF	; 239
    1d88:	b2 2e       	mov	r11, r18
    1d8a:	2a e0       	ldi	r18, 0x0A	; 10
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	25 c0       	rjmp	.+74     	; 0x1dda <vfprintf+0x27c>
    1d90:	93 2d       	mov	r25, r3
    1d92:	99 7f       	andi	r25, 0xF9	; 249
    1d94:	b9 2e       	mov	r11, r25
    1d96:	8f 36       	cpi	r24, 0x6F	; 111
    1d98:	c1 f0       	breq	.+48     	; 0x1dca <vfprintf+0x26c>
    1d9a:	18 f4       	brcc	.+6      	; 0x1da2 <vfprintf+0x244>
    1d9c:	88 35       	cpi	r24, 0x58	; 88
    1d9e:	79 f0       	breq	.+30     	; 0x1dbe <vfprintf+0x260>
    1da0:	b5 c0       	rjmp	.+362    	; 0x1f0c <vfprintf+0x3ae>
    1da2:	80 37       	cpi	r24, 0x70	; 112
    1da4:	19 f0       	breq	.+6      	; 0x1dac <vfprintf+0x24e>
    1da6:	88 37       	cpi	r24, 0x78	; 120
    1da8:	21 f0       	breq	.+8      	; 0x1db2 <vfprintf+0x254>
    1daa:	b0 c0       	rjmp	.+352    	; 0x1f0c <vfprintf+0x3ae>
    1dac:	e9 2f       	mov	r30, r25
    1dae:	e0 61       	ori	r30, 0x10	; 16
    1db0:	be 2e       	mov	r11, r30
    1db2:	b4 fe       	sbrs	r11, 4
    1db4:	0d c0       	rjmp	.+26     	; 0x1dd0 <vfprintf+0x272>
    1db6:	fb 2d       	mov	r31, r11
    1db8:	f4 60       	ori	r31, 0x04	; 4
    1dba:	bf 2e       	mov	r11, r31
    1dbc:	09 c0       	rjmp	.+18     	; 0x1dd0 <vfprintf+0x272>
    1dbe:	34 fe       	sbrs	r3, 4
    1dc0:	0a c0       	rjmp	.+20     	; 0x1dd6 <vfprintf+0x278>
    1dc2:	29 2f       	mov	r18, r25
    1dc4:	26 60       	ori	r18, 0x06	; 6
    1dc6:	b2 2e       	mov	r11, r18
    1dc8:	06 c0       	rjmp	.+12     	; 0x1dd6 <vfprintf+0x278>
    1dca:	28 e0       	ldi	r18, 0x08	; 8
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	05 c0       	rjmp	.+10     	; 0x1dda <vfprintf+0x27c>
    1dd0:	20 e1       	ldi	r18, 0x10	; 16
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <vfprintf+0x27c>
    1dd6:	20 e1       	ldi	r18, 0x10	; 16
    1dd8:	32 e0       	ldi	r19, 0x02	; 2
    1dda:	f8 01       	movw	r30, r16
    1ddc:	b7 fe       	sbrs	r11, 7
    1dde:	07 c0       	rjmp	.+14     	; 0x1dee <vfprintf+0x290>
    1de0:	60 81       	ld	r22, Z
    1de2:	71 81       	ldd	r23, Z+1	; 0x01
    1de4:	82 81       	ldd	r24, Z+2	; 0x02
    1de6:	93 81       	ldd	r25, Z+3	; 0x03
    1de8:	0c 5f       	subi	r16, 0xFC	; 252
    1dea:	1f 4f       	sbci	r17, 0xFF	; 255
    1dec:	06 c0       	rjmp	.+12     	; 0x1dfa <vfprintf+0x29c>
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	0e 5f       	subi	r16, 0xFE	; 254
    1df8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfa:	a3 01       	movw	r20, r6
    1dfc:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__ultoa_invert>
    1e00:	88 2e       	mov	r8, r24
    1e02:	86 18       	sub	r8, r6
    1e04:	fb 2d       	mov	r31, r11
    1e06:	ff 77       	andi	r31, 0x7F	; 127
    1e08:	3f 2e       	mov	r3, r31
    1e0a:	36 fe       	sbrs	r3, 6
    1e0c:	0d c0       	rjmp	.+26     	; 0x1e28 <vfprintf+0x2ca>
    1e0e:	23 2d       	mov	r18, r3
    1e10:	2e 7f       	andi	r18, 0xFE	; 254
    1e12:	a2 2e       	mov	r10, r18
    1e14:	89 14       	cp	r8, r9
    1e16:	58 f4       	brcc	.+22     	; 0x1e2e <vfprintf+0x2d0>
    1e18:	34 fe       	sbrs	r3, 4
    1e1a:	0b c0       	rjmp	.+22     	; 0x1e32 <vfprintf+0x2d4>
    1e1c:	32 fc       	sbrc	r3, 2
    1e1e:	09 c0       	rjmp	.+18     	; 0x1e32 <vfprintf+0x2d4>
    1e20:	83 2d       	mov	r24, r3
    1e22:	8e 7e       	andi	r24, 0xEE	; 238
    1e24:	a8 2e       	mov	r10, r24
    1e26:	05 c0       	rjmp	.+10     	; 0x1e32 <vfprintf+0x2d4>
    1e28:	b8 2c       	mov	r11, r8
    1e2a:	a3 2c       	mov	r10, r3
    1e2c:	03 c0       	rjmp	.+6      	; 0x1e34 <vfprintf+0x2d6>
    1e2e:	b8 2c       	mov	r11, r8
    1e30:	01 c0       	rjmp	.+2      	; 0x1e34 <vfprintf+0x2d6>
    1e32:	b9 2c       	mov	r11, r9
    1e34:	a4 fe       	sbrs	r10, 4
    1e36:	0f c0       	rjmp	.+30     	; 0x1e56 <vfprintf+0x2f8>
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e8 0d       	add	r30, r8
    1e3c:	f1 1d       	adc	r31, r1
    1e3e:	80 81       	ld	r24, Z
    1e40:	80 33       	cpi	r24, 0x30	; 48
    1e42:	21 f4       	brne	.+8      	; 0x1e4c <vfprintf+0x2ee>
    1e44:	9a 2d       	mov	r25, r10
    1e46:	99 7e       	andi	r25, 0xE9	; 233
    1e48:	a9 2e       	mov	r10, r25
    1e4a:	09 c0       	rjmp	.+18     	; 0x1e5e <vfprintf+0x300>
    1e4c:	a2 fe       	sbrs	r10, 2
    1e4e:	06 c0       	rjmp	.+12     	; 0x1e5c <vfprintf+0x2fe>
    1e50:	b3 94       	inc	r11
    1e52:	b3 94       	inc	r11
    1e54:	04 c0       	rjmp	.+8      	; 0x1e5e <vfprintf+0x300>
    1e56:	8a 2d       	mov	r24, r10
    1e58:	86 78       	andi	r24, 0x86	; 134
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <vfprintf+0x300>
    1e5c:	b3 94       	inc	r11
    1e5e:	a3 fc       	sbrc	r10, 3
    1e60:	11 c0       	rjmp	.+34     	; 0x1e84 <vfprintf+0x326>
    1e62:	a0 fe       	sbrs	r10, 0
    1e64:	06 c0       	rjmp	.+12     	; 0x1e72 <vfprintf+0x314>
    1e66:	b2 14       	cp	r11, r2
    1e68:	88 f4       	brcc	.+34     	; 0x1e8c <vfprintf+0x32e>
    1e6a:	28 0c       	add	r2, r8
    1e6c:	92 2c       	mov	r9, r2
    1e6e:	9b 18       	sub	r9, r11
    1e70:	0e c0       	rjmp	.+28     	; 0x1e8e <vfprintf+0x330>
    1e72:	b2 14       	cp	r11, r2
    1e74:	60 f4       	brcc	.+24     	; 0x1e8e <vfprintf+0x330>
    1e76:	b6 01       	movw	r22, r12
    1e78:	80 e2       	ldi	r24, 0x20	; 32
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <fputc>
    1e80:	b3 94       	inc	r11
    1e82:	f7 cf       	rjmp	.-18     	; 0x1e72 <vfprintf+0x314>
    1e84:	b2 14       	cp	r11, r2
    1e86:	18 f4       	brcc	.+6      	; 0x1e8e <vfprintf+0x330>
    1e88:	2b 18       	sub	r2, r11
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <vfprintf+0x332>
    1e8c:	98 2c       	mov	r9, r8
    1e8e:	21 2c       	mov	r2, r1
    1e90:	a4 fe       	sbrs	r10, 4
    1e92:	10 c0       	rjmp	.+32     	; 0x1eb4 <vfprintf+0x356>
    1e94:	b6 01       	movw	r22, r12
    1e96:	80 e3       	ldi	r24, 0x30	; 48
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <fputc>
    1e9e:	a2 fe       	sbrs	r10, 2
    1ea0:	17 c0       	rjmp	.+46     	; 0x1ed0 <vfprintf+0x372>
    1ea2:	a1 fc       	sbrc	r10, 1
    1ea4:	03 c0       	rjmp	.+6      	; 0x1eac <vfprintf+0x34e>
    1ea6:	88 e7       	ldi	r24, 0x78	; 120
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <vfprintf+0x352>
    1eac:	88 e5       	ldi	r24, 0x58	; 88
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	b6 01       	movw	r22, r12
    1eb2:	0c c0       	rjmp	.+24     	; 0x1ecc <vfprintf+0x36e>
    1eb4:	8a 2d       	mov	r24, r10
    1eb6:	86 78       	andi	r24, 0x86	; 134
    1eb8:	59 f0       	breq	.+22     	; 0x1ed0 <vfprintf+0x372>
    1eba:	a1 fe       	sbrs	r10, 1
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <vfprintf+0x364>
    1ebe:	8b e2       	ldi	r24, 0x2B	; 43
    1ec0:	01 c0       	rjmp	.+2      	; 0x1ec4 <vfprintf+0x366>
    1ec2:	80 e2       	ldi	r24, 0x20	; 32
    1ec4:	a7 fc       	sbrc	r10, 7
    1ec6:	8d e2       	ldi	r24, 0x2D	; 45
    1ec8:	b6 01       	movw	r22, r12
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <fputc>
    1ed0:	89 14       	cp	r8, r9
    1ed2:	38 f4       	brcc	.+14     	; 0x1ee2 <vfprintf+0x384>
    1ed4:	b6 01       	movw	r22, r12
    1ed6:	80 e3       	ldi	r24, 0x30	; 48
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <fputc>
    1ede:	9a 94       	dec	r9
    1ee0:	f7 cf       	rjmp	.-18     	; 0x1ed0 <vfprintf+0x372>
    1ee2:	8a 94       	dec	r8
    1ee4:	f3 01       	movw	r30, r6
    1ee6:	e8 0d       	add	r30, r8
    1ee8:	f1 1d       	adc	r31, r1
    1eea:	80 81       	ld	r24, Z
    1eec:	b6 01       	movw	r22, r12
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <fputc>
    1ef4:	81 10       	cpse	r8, r1
    1ef6:	f5 cf       	rjmp	.-22     	; 0x1ee2 <vfprintf+0x384>
    1ef8:	22 20       	and	r2, r2
    1efa:	09 f4       	brne	.+2      	; 0x1efe <vfprintf+0x3a0>
    1efc:	42 ce       	rjmp	.-892    	; 0x1b82 <vfprintf+0x24>
    1efe:	b6 01       	movw	r22, r12
    1f00:	80 e2       	ldi	r24, 0x20	; 32
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <fputc>
    1f08:	2a 94       	dec	r2
    1f0a:	f6 cf       	rjmp	.-20     	; 0x1ef8 <vfprintf+0x39a>
    1f0c:	f6 01       	movw	r30, r12
    1f0e:	86 81       	ldd	r24, Z+6	; 0x06
    1f10:	97 81       	ldd	r25, Z+7	; 0x07
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <vfprintf+0x3ba>
    1f14:	8f ef       	ldi	r24, 0xFF	; 255
    1f16:	9f ef       	ldi	r25, 0xFF	; 255
    1f18:	2b 96       	adiw	r28, 0x0b	; 11
    1f1a:	e2 e1       	ldi	r30, 0x12	; 18
    1f1c:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__epilogue_restores__>

00001f20 <__ctype_isfalse>:
    1f20:	99 27       	eor	r25, r25
    1f22:	88 27       	eor	r24, r24

00001f24 <__ctype_istrue>:
    1f24:	08 95       	ret

00001f26 <strnlen_P>:
    1f26:	fc 01       	movw	r30, r24
    1f28:	05 90       	lpm	r0, Z+
    1f2a:	61 50       	subi	r22, 0x01	; 1
    1f2c:	70 40       	sbci	r23, 0x00	; 0
    1f2e:	01 10       	cpse	r0, r1
    1f30:	d8 f7       	brcc	.-10     	; 0x1f28 <strnlen_P+0x2>
    1f32:	80 95       	com	r24
    1f34:	90 95       	com	r25
    1f36:	8e 0f       	add	r24, r30
    1f38:	9f 1f       	adc	r25, r31
    1f3a:	08 95       	ret

00001f3c <strnlen>:
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	61 50       	subi	r22, 0x01	; 1
    1f40:	70 40       	sbci	r23, 0x00	; 0
    1f42:	01 90       	ld	r0, Z+
    1f44:	01 10       	cpse	r0, r1
    1f46:	d8 f7       	brcc	.-10     	; 0x1f3e <strnlen+0x2>
    1f48:	80 95       	com	r24
    1f4a:	90 95       	com	r25
    1f4c:	8e 0f       	add	r24, r30
    1f4e:	9f 1f       	adc	r25, r31
    1f50:	08 95       	ret

00001f52 <fputc>:
    1f52:	0f 93       	push	r16
    1f54:	1f 93       	push	r17
    1f56:	cf 93       	push	r28
    1f58:	df 93       	push	r29
    1f5a:	fb 01       	movw	r30, r22
    1f5c:	23 81       	ldd	r18, Z+3	; 0x03
    1f5e:	21 fd       	sbrc	r18, 1
    1f60:	03 c0       	rjmp	.+6      	; 0x1f68 <fputc+0x16>
    1f62:	8f ef       	ldi	r24, 0xFF	; 255
    1f64:	9f ef       	ldi	r25, 0xFF	; 255
    1f66:	2c c0       	rjmp	.+88     	; 0x1fc0 <fputc+0x6e>
    1f68:	22 ff       	sbrs	r18, 2
    1f6a:	16 c0       	rjmp	.+44     	; 0x1f98 <fputc+0x46>
    1f6c:	46 81       	ldd	r20, Z+6	; 0x06
    1f6e:	57 81       	ldd	r21, Z+7	; 0x07
    1f70:	24 81       	ldd	r18, Z+4	; 0x04
    1f72:	35 81       	ldd	r19, Z+5	; 0x05
    1f74:	42 17       	cp	r20, r18
    1f76:	53 07       	cpc	r21, r19
    1f78:	44 f4       	brge	.+16     	; 0x1f8a <fputc+0x38>
    1f7a:	a0 81       	ld	r26, Z
    1f7c:	b1 81       	ldd	r27, Z+1	; 0x01
    1f7e:	9d 01       	movw	r18, r26
    1f80:	2f 5f       	subi	r18, 0xFF	; 255
    1f82:	3f 4f       	sbci	r19, 0xFF	; 255
    1f84:	20 83       	st	Z, r18
    1f86:	31 83       	std	Z+1, r19	; 0x01
    1f88:	8c 93       	st	X, r24
    1f8a:	26 81       	ldd	r18, Z+6	; 0x06
    1f8c:	37 81       	ldd	r19, Z+7	; 0x07
    1f8e:	2f 5f       	subi	r18, 0xFF	; 255
    1f90:	3f 4f       	sbci	r19, 0xFF	; 255
    1f92:	26 83       	std	Z+6, r18	; 0x06
    1f94:	37 83       	std	Z+7, r19	; 0x07
    1f96:	14 c0       	rjmp	.+40     	; 0x1fc0 <fputc+0x6e>
    1f98:	8b 01       	movw	r16, r22
    1f9a:	ec 01       	movw	r28, r24
    1f9c:	fb 01       	movw	r30, r22
    1f9e:	00 84       	ldd	r0, Z+8	; 0x08
    1fa0:	f1 85       	ldd	r31, Z+9	; 0x09
    1fa2:	e0 2d       	mov	r30, r0
    1fa4:	09 95       	icall
    1fa6:	89 2b       	or	r24, r25
    1fa8:	e1 f6       	brne	.-72     	; 0x1f62 <fputc+0x10>
    1faa:	d8 01       	movw	r26, r16
    1fac:	16 96       	adiw	r26, 0x06	; 6
    1fae:	8d 91       	ld	r24, X+
    1fb0:	9c 91       	ld	r25, X
    1fb2:	17 97       	sbiw	r26, 0x07	; 7
    1fb4:	01 96       	adiw	r24, 0x01	; 1
    1fb6:	16 96       	adiw	r26, 0x06	; 6
    1fb8:	8d 93       	st	X+, r24
    1fba:	9c 93       	st	X, r25
    1fbc:	17 97       	sbiw	r26, 0x07	; 7
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	1f 91       	pop	r17
    1fc6:	0f 91       	pop	r16
    1fc8:	08 95       	ret

00001fca <__ultoa_invert>:
    1fca:	fa 01       	movw	r30, r20
    1fcc:	aa 27       	eor	r26, r26
    1fce:	28 30       	cpi	r18, 0x08	; 8
    1fd0:	51 f1       	breq	.+84     	; 0x2026 <__DATA_REGION_LENGTH__+0x26>
    1fd2:	20 31       	cpi	r18, 0x10	; 16
    1fd4:	81 f1       	breq	.+96     	; 0x2036 <__DATA_REGION_LENGTH__+0x36>
    1fd6:	e8 94       	clt
    1fd8:	6f 93       	push	r22
    1fda:	6e 7f       	andi	r22, 0xFE	; 254
    1fdc:	6e 5f       	subi	r22, 0xFE	; 254
    1fde:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe4:	af 4f       	sbci	r26, 0xFF	; 255
    1fe6:	b1 e0       	ldi	r27, 0x01	; 1
    1fe8:	3e d0       	rcall	.+124    	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    1fea:	b4 e0       	ldi	r27, 0x04	; 4
    1fec:	3c d0       	rcall	.+120    	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    1fee:	67 0f       	add	r22, r23
    1ff0:	78 1f       	adc	r23, r24
    1ff2:	89 1f       	adc	r24, r25
    1ff4:	9a 1f       	adc	r25, r26
    1ff6:	a1 1d       	adc	r26, r1
    1ff8:	68 0f       	add	r22, r24
    1ffa:	79 1f       	adc	r23, r25
    1ffc:	8a 1f       	adc	r24, r26
    1ffe:	91 1d       	adc	r25, r1
    2000:	a1 1d       	adc	r26, r1
    2002:	6a 0f       	add	r22, r26
    2004:	71 1d       	adc	r23, r1
    2006:	81 1d       	adc	r24, r1
    2008:	91 1d       	adc	r25, r1
    200a:	a1 1d       	adc	r26, r1
    200c:	20 d0       	rcall	.+64     	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    200e:	09 f4       	brne	.+2      	; 0x2012 <__DATA_REGION_LENGTH__+0x12>
    2010:	68 94       	set
    2012:	3f 91       	pop	r19
    2014:	2a e0       	ldi	r18, 0x0A	; 10
    2016:	26 9f       	mul	r18, r22
    2018:	11 24       	eor	r1, r1
    201a:	30 19       	sub	r19, r0
    201c:	30 5d       	subi	r19, 0xD0	; 208
    201e:	31 93       	st	Z+, r19
    2020:	de f6       	brtc	.-74     	; 0x1fd8 <__ultoa_invert+0xe>
    2022:	cf 01       	movw	r24, r30
    2024:	08 95       	ret
    2026:	46 2f       	mov	r20, r22
    2028:	47 70       	andi	r20, 0x07	; 7
    202a:	40 5d       	subi	r20, 0xD0	; 208
    202c:	41 93       	st	Z+, r20
    202e:	b3 e0       	ldi	r27, 0x03	; 3
    2030:	0f d0       	rcall	.+30     	; 0x2050 <__DATA_REGION_LENGTH__+0x50>
    2032:	c9 f7       	brne	.-14     	; 0x2026 <__DATA_REGION_LENGTH__+0x26>
    2034:	f6 cf       	rjmp	.-20     	; 0x2022 <__DATA_REGION_LENGTH__+0x22>
    2036:	46 2f       	mov	r20, r22
    2038:	4f 70       	andi	r20, 0x0F	; 15
    203a:	40 5d       	subi	r20, 0xD0	; 208
    203c:	4a 33       	cpi	r20, 0x3A	; 58
    203e:	18 f0       	brcs	.+6      	; 0x2046 <__DATA_REGION_LENGTH__+0x46>
    2040:	49 5d       	subi	r20, 0xD9	; 217
    2042:	31 fd       	sbrc	r19, 1
    2044:	40 52       	subi	r20, 0x20	; 32
    2046:	41 93       	st	Z+, r20
    2048:	02 d0       	rcall	.+4      	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    204a:	a9 f7       	brne	.-22     	; 0x2036 <__DATA_REGION_LENGTH__+0x36>
    204c:	ea cf       	rjmp	.-44     	; 0x2022 <__DATA_REGION_LENGTH__+0x22>
    204e:	b4 e0       	ldi	r27, 0x04	; 4
    2050:	a6 95       	lsr	r26
    2052:	97 95       	ror	r25
    2054:	87 95       	ror	r24
    2056:	77 95       	ror	r23
    2058:	67 95       	ror	r22
    205a:	ba 95       	dec	r27
    205c:	c9 f7       	brne	.-14     	; 0x2050 <__DATA_REGION_LENGTH__+0x50>
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	61 05       	cpc	r22, r1
    2062:	71 05       	cpc	r23, r1
    2064:	08 95       	ret
    2066:	9b 01       	movw	r18, r22
    2068:	ac 01       	movw	r20, r24
    206a:	0a 2e       	mov	r0, r26
    206c:	06 94       	lsr	r0
    206e:	57 95       	ror	r21
    2070:	47 95       	ror	r20
    2072:	37 95       	ror	r19
    2074:	27 95       	ror	r18
    2076:	ba 95       	dec	r27
    2078:	c9 f7       	brne	.-14     	; 0x206c <__DATA_REGION_LENGTH__+0x6c>
    207a:	62 0f       	add	r22, r18
    207c:	73 1f       	adc	r23, r19
    207e:	84 1f       	adc	r24, r20
    2080:	95 1f       	adc	r25, r21
    2082:	a0 1d       	adc	r26, r0
    2084:	08 95       	ret

00002086 <ccp_write_io>:
    2086:	dc 01       	movw	r26, r24
    2088:	28 ed       	ldi	r18, 0xD8	; 216
    208a:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f0034>
    208e:	6c 93       	st	X, r22
    2090:	08 95       	ret

00002092 <__mulsi3>:
    2092:	db 01       	movw	r26, r22
    2094:	8f 93       	push	r24
    2096:	9f 93       	push	r25
    2098:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__muluhisi3>
    209c:	bf 91       	pop	r27
    209e:	af 91       	pop	r26
    20a0:	a2 9f       	mul	r26, r18
    20a2:	80 0d       	add	r24, r0
    20a4:	91 1d       	adc	r25, r1
    20a6:	a3 9f       	mul	r26, r19
    20a8:	90 0d       	add	r25, r0
    20aa:	b2 9f       	mul	r27, r18
    20ac:	90 0d       	add	r25, r0
    20ae:	11 24       	eor	r1, r1
    20b0:	08 95       	ret

000020b2 <__muluhisi3>:
    20b2:	0e 94 c5 0a 	call	0x158a	; 0x158a <__umulhisi3>
    20b6:	a5 9f       	mul	r26, r21
    20b8:	90 0d       	add	r25, r0
    20ba:	b4 9f       	mul	r27, r20
    20bc:	90 0d       	add	r25, r0
    20be:	a4 9f       	mul	r26, r20
    20c0:	80 0d       	add	r24, r0
    20c2:	91 1d       	adc	r25, r1
    20c4:	11 24       	eor	r1, r1
    20c6:	08 95       	ret

000020c8 <__prologue_saves__>:
    20c8:	2f 92       	push	r2
    20ca:	3f 92       	push	r3
    20cc:	4f 92       	push	r4
    20ce:	5f 92       	push	r5
    20d0:	6f 92       	push	r6
    20d2:	7f 92       	push	r7
    20d4:	8f 92       	push	r8
    20d6:	9f 92       	push	r9
    20d8:	af 92       	push	r10
    20da:	bf 92       	push	r11
    20dc:	cf 92       	push	r12
    20de:	df 92       	push	r13
    20e0:	ef 92       	push	r14
    20e2:	ff 92       	push	r15
    20e4:	0f 93       	push	r16
    20e6:	1f 93       	push	r17
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	ca 1b       	sub	r28, r26
    20f2:	db 0b       	sbc	r29, r27
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	09 94       	ijmp

000020fa <__epilogue_restores__>:
    20fa:	2a 88       	ldd	r2, Y+18	; 0x12
    20fc:	39 88       	ldd	r3, Y+17	; 0x11
    20fe:	48 88       	ldd	r4, Y+16	; 0x10
    2100:	5f 84       	ldd	r5, Y+15	; 0x0f
    2102:	6e 84       	ldd	r6, Y+14	; 0x0e
    2104:	7d 84       	ldd	r7, Y+13	; 0x0d
    2106:	8c 84       	ldd	r8, Y+12	; 0x0c
    2108:	9b 84       	ldd	r9, Y+11	; 0x0b
    210a:	aa 84       	ldd	r10, Y+10	; 0x0a
    210c:	b9 84       	ldd	r11, Y+9	; 0x09
    210e:	c8 84       	ldd	r12, Y+8	; 0x08
    2110:	df 80       	ldd	r13, Y+7	; 0x07
    2112:	ee 80       	ldd	r14, Y+6	; 0x06
    2114:	fd 80       	ldd	r15, Y+5	; 0x05
    2116:	0c 81       	ldd	r16, Y+4	; 0x04
    2118:	1b 81       	ldd	r17, Y+3	; 0x03
    211a:	aa 81       	ldd	r26, Y+2	; 0x02
    211c:	b9 81       	ldd	r27, Y+1	; 0x01
    211e:	ce 0f       	add	r28, r30
    2120:	d1 1d       	adc	r29, r1
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	ed 01       	movw	r28, r26
    2128:	08 95       	ret

0000212a <_exit>:
    212a:	f8 94       	cli

0000212c <__stop_program>:
    212c:	ff cf       	rjmp	.-2      	; 0x212c <__stop_program>
