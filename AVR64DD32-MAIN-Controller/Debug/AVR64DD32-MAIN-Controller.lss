
AVR64DD32-MAIN-Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005a2  00806000  00002bf6  00002c8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002bf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  008065a2  008065a2  0000322c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000322c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000460  00000000  00000000  000032c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000092fe  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d0a  00000000  00000000  0000ca26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002fc0  00000000  00000000  00010730  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c50  00000000  00000000  000136f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003280  00000000  00000000  00014340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000316f  00000000  00000000  000175c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  0001a72f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e7       	ldi	r29, 0x7F	; 127
      9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
      9c:	15 e6       	ldi	r17, 0x65	; 101
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b0 e6       	ldi	r27, 0x60	; 96
      a2:	e6 ef       	ldi	r30, 0xF6	; 246
      a4:	fb e2       	ldi	r31, 0x2B	; 43
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 3a       	cpi	r26, 0xA2	; 162
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	26 e6       	ldi	r18, 0x66	; 102
      b4:	a2 ea       	ldi	r26, 0xA2	; 162
      b6:	b5 e6       	ldi	r27, 0x65	; 101
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 31       	cpi	r26, 0x12	; 18
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <main>
      c6:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <normalize>:
#include "ActionsVar.h"


// Pagalbinë funkcija: normalizuoja kampà á [0,360)
int16_t normalize(int16_t angle) {
	angle %= 360;
      ce:	68 e6       	ldi	r22, 0x68	; 104
      d0:	71 e0       	ldi	r23, 0x01	; 1
      d2:	0e 94 cb 10 	call	0x2196	; 0x2196 <__divmodhi4>
	if (angle < 0) angle += 360;
      d6:	99 23       	and	r25, r25
      d8:	14 f4       	brge	.+4      	; 0xde <normalize+0x10>
      da:	88 59       	subi	r24, 0x98	; 152
      dc:	9e 4f       	sbci	r25, 0xFE	; 254
	return angle;
}
      de:	08 95       	ret

000000e0 <angle_diff>:

// Pagalbinë: apskaièiuoja maþiausià kampiná atstumà
int16_t angle_diff(int16_t a, int16_t b) {
	int16_t d = abs(a - b) % 360;
      e0:	9c 01       	movw	r18, r24
      e2:	26 1b       	sub	r18, r22
      e4:	37 0b       	sbc	r19, r23
      e6:	c9 01       	movw	r24, r18
      e8:	99 23       	and	r25, r25
      ea:	24 f4       	brge	.+8      	; 0xf4 <angle_diff+0x14>
      ec:	88 27       	eor	r24, r24
      ee:	99 27       	eor	r25, r25
      f0:	82 1b       	sub	r24, r18
      f2:	93 0b       	sbc	r25, r19
      f4:	68 e6       	ldi	r22, 0x68	; 104
      f6:	71 e0       	ldi	r23, 0x01	; 1
      f8:	0e 94 cb 10 	call	0x2196	; 0x2196 <__divmodhi4>
	return (d > 180) ? 360 - d : d;
      fc:	85 3b       	cpi	r24, 0xB5	; 181
      fe:	91 05       	cpc	r25, r1
     100:	34 f0       	brlt	.+12     	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
     102:	28 e6       	ldi	r18, 0x68	; 104
     104:	31 e0       	ldi	r19, 0x01	; 1
     106:	a9 01       	movw	r20, r18
     108:	48 1b       	sub	r20, r24
     10a:	59 0b       	sbc	r21, r25
     10c:	ca 01       	movw	r24, r20
}
     10e:	08 95       	ret

00000110 <get_safe_azimuth>:

void get_safe_azimuth() {
     110:	cf 92       	push	r12
     112:	df 92       	push	r13
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
	// Galimos saugios kryptys
	int16_t safe1 = normalize((WSData.winddirection * 45) + 90);
     120:	c0 91 e5 65 	lds	r28, 0x65E5	; 0x8065e5 <WSData+0x7>
     124:	2d e2       	ldi	r18, 0x2D	; 45
     126:	c2 9f       	mul	r28, r18
     128:	e0 01       	movw	r28, r0
     12a:	11 24       	eor	r1, r1
     12c:	ce 01       	movw	r24, r28
     12e:	86 5a       	subi	r24, 0xA6	; 166
     130:	9f 4f       	sbci	r25, 0xFF	; 255
     132:	0e 94 67 00 	call	0xce	; 0xce <normalize>
     136:	8c 01       	movw	r16, r24
	int16_t safe2 = normalize((WSData.winddirection * 45) - 90);
     138:	ce 01       	movw	r24, r28
     13a:	8a 55       	subi	r24, 0x5A	; 90
     13c:	91 09       	sbc	r25, r1
     13e:	0e 94 67 00 	call	0xce	; 0xce <normalize>
     142:	ec 01       	movw	r28, r24

	bool valid1 = (safe1 >= MIN_AZIMUTH && safe1 <= MAX_AZIMUTH);
     144:	c8 01       	movw	r24, r16
     146:	4e 97       	sbiw	r24, 0x1e	; 30
	bool valid2 = (safe2 >= MIN_AZIMUTH && safe2 <= MAX_AZIMUTH);
     148:	9e 01       	movw	r18, r28
     14a:	2e 51       	subi	r18, 0x1E	; 30
     14c:	31 09       	sbc	r19, r1

	if (valid1 && valid2) {
     14e:	8d 32       	cpi	r24, 0x2D	; 45
     150:	41 e0       	ldi	r20, 0x01	; 1
     152:	94 07       	cpc	r25, r20
     154:	e8 f4       	brcc	.+58     	; 0x190 <get_safe_azimuth+0x80>
     156:	2d 32       	cpi	r18, 0x2D	; 45
     158:	31 40       	sbci	r19, 0x01	; 1
     15a:	d0 f4       	brcc	.+52     	; 0x190 <get_safe_azimuth+0x80>
		int16_t d1 = angle_diff(SensorData.Azimuth, safe1);
     15c:	e0 90 a6 65 	lds	r14, 0x65A6	; 0x8065a6 <__data_end+0x4>
     160:	f0 90 a7 65 	lds	r15, 0x65A7	; 0x8065a7 <__data_end+0x5>
     164:	b8 01       	movw	r22, r16
     166:	c7 01       	movw	r24, r14
     168:	0e 94 70 00 	call	0xe0	; 0xe0 <angle_diff>
     16c:	6c 01       	movw	r12, r24
		int16_t d2 = angle_diff(SensorData.Azimuth, safe2);
     16e:	be 01       	movw	r22, r28
     170:	c7 01       	movw	r24, r14
     172:	0e 94 70 00 	call	0xe0	; 0xe0 <angle_diff>
		Target.azimuth = (d1 <= d2) ? safe1 : safe2;
     176:	8c 15       	cp	r24, r12
     178:	9d 05       	cpc	r25, r13
     17a:	1c f0       	brlt	.+6      	; 0x182 <get_safe_azimuth+0x72>
     17c:	90 2f       	mov	r25, r16
     17e:	81 2f       	mov	r24, r17
     180:	02 c0       	rjmp	.+4      	; 0x186 <get_safe_azimuth+0x76>
     182:	9c 2f       	mov	r25, r28
     184:	8d 2f       	mov	r24, r29
     186:	90 93 4f 60 	sts	0x604F, r25	; 0x80604f <Target+0x5>
     18a:	80 93 50 60 	sts	0x6050, r24	; 0x806050 <Target+0x6>
	int16_t safe2 = normalize((WSData.winddirection * 45) - 90);

	bool valid1 = (safe1 >= MIN_AZIMUTH && safe1 <= MAX_AZIMUTH);
	bool valid2 = (safe2 >= MIN_AZIMUTH && safe2 <= MAX_AZIMUTH);

	if (valid1 && valid2) {
     18e:	0c c0       	rjmp	.+24     	; 0x1a8 <get_safe_azimuth+0x98>
		int16_t d1 = angle_diff(SensorData.Azimuth, safe1);
		int16_t d2 = angle_diff(SensorData.Azimuth, safe2);
		Target.azimuth = (d1 <= d2) ? safe1 : safe2;
		} else if (valid1) {
     190:	8d 32       	cpi	r24, 0x2D	; 45
     192:	91 40       	sbci	r25, 0x01	; 1
     194:	28 f4       	brcc	.+10     	; 0x1a0 <get_safe_azimuth+0x90>
		Target.azimuth = safe1;
     196:	00 93 4f 60 	sts	0x604F, r16	; 0x80604f <Target+0x5>
     19a:	10 93 50 60 	sts	0x6050, r17	; 0x806050 <Target+0x6>
     19e:	04 c0       	rjmp	.+8      	; 0x1a8 <get_safe_azimuth+0x98>
		} else {
		Target.azimuth = safe2; // visada bus bent vienas tinkamas
     1a0:	c0 93 4f 60 	sts	0x604F, r28	; 0x80604f <Target+0x5>
     1a4:	d0 93 50 60 	sts	0x6050, r29	; 0x806050 <Target+0x6>
	}
}
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	1f 91       	pop	r17
     1ae:	0f 91       	pop	r16
     1b0:	ff 90       	pop	r15
     1b2:	ef 90       	pop	r14
     1b4:	df 90       	pop	r13
     1b6:	cf 90       	pop	r12
     1b8:	08 95       	ret

000001ba <MotorControl>:

//Motor control function wrtited based on void LinearMotorControl()
void MotorControl(MotorControlObj* m)
{
     1ba:	8f 92       	push	r8
     1bc:	9f 92       	push	r9
     1be:	af 92       	push	r10
     1c0:	bf 92       	push	r11
     1c2:	cf 92       	push	r12
     1c4:	df 92       	push	r13
     1c6:	ef 92       	push	r14
     1c8:	ff 92       	push	r15
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	ec 01       	movw	r28, r24
	// 1. FO jungtis
	if (SensorData.FO_lost_connecton_fault) {
     1d4:	80 91 b5 65 	lds	r24, 0x65B5	; 0x8065b5 <__data_end+0x13>
     1d8:	88 23       	and	r24, r24
     1da:	39 f0       	breq	.+14     	; 0x1ea <MotorControl+0x30>
		m->iface.stop();
     1dc:	ef 81       	ldd	r30, Y+7	; 0x07
     1de:	f8 85       	ldd	r31, Y+8	; 0x08
     1e0:	09 95       	icall
		m->iface.disable();
     1e2:	eb 81       	ldd	r30, Y+3	; 0x03
     1e4:	fc 81       	ldd	r31, Y+4	; 0x04
     1e6:	09 95       	icall
		return;
     1e8:	1b c1       	rjmp	.+566    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	}

	// 2. Tikslas pasiektas
	if (*m->sensor.position == *m->sensor.target) {
     1ea:	ef 85       	ldd	r30, Y+15	; 0x0f
     1ec:	f8 89       	ldd	r31, Y+16	; 0x10
     1ee:	20 81       	ld	r18, Z
     1f0:	31 81       	ldd	r19, Z+1	; 0x01
     1f2:	ef 89       	ldd	r30, Y+23	; 0x17
     1f4:	f8 8d       	ldd	r31, Y+24	; 0x18
     1f6:	80 81       	ld	r24, Z
     1f8:	91 81       	ldd	r25, Z+1	; 0x01
     1fa:	28 17       	cp	r18, r24
     1fc:	39 07       	cpc	r19, r25
     1fe:	81 f4       	brne	.+32     	; 0x220 <MotorControl+0x66>
		m->iface.stop();
     200:	ef 81       	ldd	r30, Y+7	; 0x07
     202:	f8 85       	ldd	r31, Y+8	; 0x08
     204:	09 95       	icall
		m->iface.disable();
     206:	eb 81       	ldd	r30, Y+3	; 0x03
     208:	fc 81       	ldd	r31, Y+4	; 0x04
     20a:	09 95       	icall
		*m->sensor.faultFlag = false;
     20c:	eb 89       	ldd	r30, Y+19	; 0x13
     20e:	fc 89       	ldd	r31, Y+20	; 0x14
     210:	10 82       	st	Z, r1
		*m->sensor.targetReached = true;
     212:	e9 8d       	ldd	r30, Y+25	; 0x19
     214:	fa 8d       	ldd	r31, Y+26	; 0x1a
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	80 83       	st	Z, r24
		m->stuckCount = 0;
     21a:	1b 8e       	std	Y+27, r1	; 0x1b
		m->noChangeCount = 0;
     21c:	1c 8e       	std	Y+28, r1	; 0x1c
		return;
     21e:	00 c1       	rjmp	.+512    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	}

	// 2.1  Nuskaitomi elektriniai parametrai
	*m->voltage = m->iface.read_voltage(); //read and save voltage
     220:	09 a1       	ldd	r16, Y+33	; 0x21
     222:	1a a1       	ldd	r17, Y+34	; 0x22
     224:	eb 85       	ldd	r30, Y+11	; 0x0b
     226:	fc 85       	ldd	r31, Y+12	; 0x0c
     228:	09 95       	icall
     22a:	f8 01       	movw	r30, r16
     22c:	80 83       	st	Z, r24
     22e:	91 83       	std	Z+1, r25	; 0x01
	*m->current = m->iface.read_current(); //read and save current
     230:	0b a1       	ldd	r16, Y+35	; 0x23
     232:	1c a1       	ldd	r17, Y+36	; 0x24
     234:	ed 85       	ldd	r30, Y+13	; 0x0d
     236:	fe 85       	ldd	r31, Y+14	; 0x0e
     238:	09 95       	icall
     23a:	f8 01       	movw	r30, r16
     23c:	80 83       	st	Z, r24
     23e:	91 83       	std	Z+1, r25	; 0x01

	// 3. Backlash logika
	bool inBacklash = (*m->sensor.position >= (*m->sensor.target - m->backlash)) &&
     240:	ef 85       	ldd	r30, Y+15	; 0x0f
     242:	f8 89       	ldd	r31, Y+16	; 0x10
     244:	80 81       	ld	r24, Z
     246:	91 81       	ldd	r25, Z+1	; 0x01
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	ef 89       	ldd	r30, Y+23	; 0x17
     24e:	f8 8d       	ldd	r31, Y+24	; 0x18
     250:	40 81       	ld	r20, Z
     252:	51 81       	ldd	r21, Z+1	; 0x01
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	0d 8d       	ldd	r16, Y+29	; 0x1d
     25a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     25c:	2f 8d       	ldd	r18, Y+31	; 0x1f
     25e:	38 a1       	ldd	r19, Y+32	; 0x20
     260:	6a 01       	movw	r12, r20
     262:	7b 01       	movw	r14, r22
     264:	c0 1a       	sub	r12, r16
     266:	d1 0a       	sbc	r13, r17
     268:	e2 0a       	sbc	r14, r18
     26a:	f3 0a       	sbc	r15, r19
     26c:	8c 15       	cp	r24, r12
     26e:	9d 05       	cpc	r25, r13
     270:	ae 05       	cpc	r26, r14
     272:	bf 05       	cpc	r27, r15
     274:	5c f0       	brlt	.+22     	; 0x28c <MotorControl+0xd2>
	(*m->sensor.position <= (*m->sensor.target + m->backlash));
     276:	40 0f       	add	r20, r16
     278:	51 1f       	adc	r21, r17
     27a:	62 1f       	adc	r22, r18
     27c:	73 1f       	adc	r23, r19
	// 2.1  Nuskaitomi elektriniai parametrai
	*m->voltage = m->iface.read_voltage(); //read and save voltage
	*m->current = m->iface.read_current(); //read and save current

	// 3. Backlash logika
	bool inBacklash = (*m->sensor.position >= (*m->sensor.target - m->backlash)) &&
     27e:	48 17       	cp	r20, r24
     280:	59 07       	cpc	r21, r25
     282:	6a 07       	cpc	r22, r26
     284:	7b 07       	cpc	r23, r27
     286:	24 f4       	brge	.+8      	; 0x290 <MotorControl+0xd6>
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	03 c0       	rjmp	.+6      	; 0x292 <MotorControl+0xd8>
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	01 c0       	rjmp	.+2      	; 0x292 <MotorControl+0xd8>
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	89 2f       	mov	r24, r25
     294:	81 70       	andi	r24, 0x01	; 1
	(*m->sensor.position <= (*m->sensor.target + m->backlash));

	if (!inBacklash || !*m->sensor.targetReached) {
     296:	29 f0       	breq	.+10     	; 0x2a2 <MotorControl+0xe8>
     298:	e9 8d       	ldd	r30, Y+25	; 0x19
     29a:	fa 8d       	ldd	r31, Y+26	; 0x1a
     29c:	80 81       	ld	r24, Z
     29e:	81 11       	cpse	r24, r1
     2a0:	09 c0       	rjmp	.+18     	; 0x2b4 <MotorControl+0xfa>
		m->iface.start();
     2a2:	ed 81       	ldd	r30, Y+5	; 0x05
     2a4:	fe 81       	ldd	r31, Y+6	; 0x06
     2a6:	09 95       	icall
		m->iface.enable();
     2a8:	e9 81       	ldd	r30, Y+1	; 0x01
     2aa:	fa 81       	ldd	r31, Y+2	; 0x02
     2ac:	09 95       	icall
		*m->sensor.targetReached = false;
     2ae:	e9 8d       	ldd	r30, Y+25	; 0x19
     2b0:	fa 8d       	ldd	r31, Y+26	; 0x1a
     2b2:	10 82       	st	Z, r1
	}

	// 4. Pokytis
	int32_t delta = (int32_t)(*m->sensor.positionFiltered) - (int32_t)(*m->sensor.lastPosition);
     2b4:	e9 89       	ldd	r30, Y+17	; 0x11
     2b6:	fa 89       	ldd	r31, Y+18	; 0x12
     2b8:	c0 80       	ld	r12, Z
     2ba:	d1 80       	ldd	r13, Z+1	; 0x01
     2bc:	e1 2c       	mov	r14, r1
     2be:	f1 2c       	mov	r15, r1
     2c0:	ed 89       	ldd	r30, Y+21	; 0x15
     2c2:	fe 89       	ldd	r31, Y+22	; 0x16
     2c4:	80 81       	ld	r24, Z
     2c6:	91 81       	ldd	r25, Z+1	; 0x01
     2c8:	c8 1a       	sub	r12, r24
     2ca:	d9 0a       	sbc	r13, r25
     2cc:	e1 08       	sbc	r14, r1
     2ce:	f1 08       	sbc	r15, r1
	if (delta > -SENSOR_DEADBAND && delta < SENSOR_DEADBAND) {
     2d0:	d7 01       	movw	r26, r14
     2d2:	c6 01       	movw	r24, r12
     2d4:	89 53       	subi	r24, 0x39	; 57
     2d6:	9f 4f       	sbci	r25, 0xFF	; 255
     2d8:	af 4f       	sbci	r26, 0xFF	; 255
     2da:	bf 4f       	sbci	r27, 0xFF	; 255
     2dc:	8f 38       	cpi	r24, 0x8F	; 143
     2de:	91 40       	sbci	r25, 0x01	; 1
     2e0:	a1 05       	cpc	r26, r1
     2e2:	b1 05       	cpc	r27, r1
     2e4:	18 f4       	brcc	.+6      	; 0x2ec <MotorControl+0x132>
		delta = 0;
     2e6:	c1 2c       	mov	r12, r1
     2e8:	d1 2c       	mov	r13, r1
     2ea:	76 01       	movw	r14, r12
	}

	// 5. Kryptis
	if (*m->sensor.position < *m->sensor.target) {
     2ec:	ef 85       	ldd	r30, Y+15	; 0x0f
     2ee:	f8 89       	ldd	r31, Y+16	; 0x10
     2f0:	20 81       	ld	r18, Z
     2f2:	31 81       	ldd	r19, Z+1	; 0x01
     2f4:	ef 89       	ldd	r30, Y+23	; 0x17
     2f6:	f8 8d       	ldd	r31, Y+24	; 0x18
     2f8:	80 81       	ld	r24, Z
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	28 17       	cp	r18, r24
     2fe:	39 07       	cpc	r19, r25
     300:	28 f4       	brcc	.+10     	; 0x30c <MotorControl+0x152>
		m->iface.set_direction(1);
     302:	e9 85       	ldd	r30, Y+9	; 0x09
     304:	fa 85       	ldd	r31, Y+10	; 0x0a
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	09 95       	icall
     30a:	07 c0       	rjmp	.+14     	; 0x31a <MotorControl+0x160>
		} else if (*m->sensor.position > *m->sensor.target) {
     30c:	82 17       	cp	r24, r18
     30e:	93 07       	cpc	r25, r19
     310:	20 f4       	brcc	.+8      	; 0x31a <MotorControl+0x160>
		m->iface.set_direction(0);
     312:	e9 85       	ldd	r30, Y+9	; 0x09
     314:	fa 85       	ldd	r31, Y+10	; 0x0a
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	09 95       	icall
	}

	// 6. Uþstrigimo tikrinimas (neteisinga kryptis)
	if (*m->sensor.position < (*m->sensor.target - m->backlash)) {
     31a:	ef 85       	ldd	r30, Y+15	; 0x0f
     31c:	f8 89       	ldd	r31, Y+16	; 0x10
     31e:	80 81       	ld	r24, Z
     320:	91 81       	ldd	r25, Z+1	; 0x01
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	ef 89       	ldd	r30, Y+23	; 0x17
     328:	f8 8d       	ldd	r31, Y+24	; 0x18
     32a:	40 81       	ld	r20, Z
     32c:	51 81       	ldd	r21, Z+1	; 0x01
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	0d 8d       	ldd	r16, Y+29	; 0x1d
     334:	1e 8d       	ldd	r17, Y+30	; 0x1e
     336:	2f 8d       	ldd	r18, Y+31	; 0x1f
     338:	38 a1       	ldd	r19, Y+32	; 0x20
     33a:	4a 01       	movw	r8, r20
     33c:	5b 01       	movw	r10, r22
     33e:	80 1a       	sub	r8, r16
     340:	91 0a       	sbc	r9, r17
     342:	a2 0a       	sbc	r10, r18
     344:	b3 0a       	sbc	r11, r19
     346:	88 15       	cp	r24, r8
     348:	99 05       	cpc	r25, r9
     34a:	aa 05       	cpc	r26, r10
     34c:	bb 05       	cpc	r27, r11
     34e:	fc f4       	brge	.+62     	; 0x38e <MotorControl+0x1d4>
		if (delta < -SENSOR_DEADBAND && ++m->stuckCount >= STUCK_LIMIT) {
     350:	28 e3       	ldi	r18, 0x38	; 56
     352:	c2 16       	cp	r12, r18
     354:	2f ef       	ldi	r18, 0xFF	; 255
     356:	d2 06       	cpc	r13, r18
     358:	e2 06       	cpc	r14, r18
     35a:	f2 06       	cpc	r15, r18
     35c:	84 f4       	brge	.+32     	; 0x37e <MotorControl+0x1c4>
     35e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     360:	8f 5f       	subi	r24, 0xFF	; 255
     362:	8b 8f       	std	Y+27, r24	; 0x1b
     364:	82 30       	cpi	r24, 0x02	; 2
     366:	58 f0       	brcs	.+22     	; 0x37e <MotorControl+0x1c4>
			*m->sensor.faultFlag = true;
     368:	eb 89       	ldd	r30, Y+19	; 0x13
     36a:	fc 89       	ldd	r31, Y+20	; 0x14
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	80 83       	st	Z, r24
			m->iface.stop();
     370:	ef 81       	ldd	r30, Y+7	; 0x07
     372:	f8 85       	ldd	r31, Y+8	; 0x08
     374:	09 95       	icall
			m->iface.disable();
     376:	eb 81       	ldd	r30, Y+3	; 0x03
     378:	fc 81       	ldd	r31, Y+4	; 0x04
     37a:	09 95       	icall
     37c:	2f c0       	rjmp	.+94     	; 0x3dc <MotorControl+0x222>
			} else if (delta > SENSOR_DEADBAND) {
     37e:	89 ec       	ldi	r24, 0xC9	; 201
     380:	c8 16       	cp	r12, r24
     382:	d1 04       	cpc	r13, r1
     384:	e1 04       	cpc	r14, r1
     386:	f1 04       	cpc	r15, r1
     388:	4c f1       	brlt	.+82     	; 0x3dc <MotorControl+0x222>
			m->stuckCount = 0;
     38a:	1b 8e       	std	Y+27, r1	; 0x1b
     38c:	27 c0       	rjmp	.+78     	; 0x3dc <MotorControl+0x222>
		}
		} else if (*m->sensor.position > (*m->sensor.target + m->backlash)) {
     38e:	40 0f       	add	r20, r16
     390:	51 1f       	adc	r21, r17
     392:	62 1f       	adc	r22, r18
     394:	73 1f       	adc	r23, r19
     396:	48 17       	cp	r20, r24
     398:	59 07       	cpc	r21, r25
     39a:	6a 07       	cpc	r22, r26
     39c:	7b 07       	cpc	r23, r27
     39e:	f4 f4       	brge	.+60     	; 0x3dc <MotorControl+0x222>
		if (delta > SENSOR_DEADBAND && ++m->stuckCount >= STUCK_LIMIT) {
     3a0:	e9 ec       	ldi	r30, 0xC9	; 201
     3a2:	ce 16       	cp	r12, r30
     3a4:	d1 04       	cpc	r13, r1
     3a6:	e1 04       	cpc	r14, r1
     3a8:	f1 04       	cpc	r15, r1
     3aa:	84 f0       	brlt	.+32     	; 0x3cc <MotorControl+0x212>
     3ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3ae:	8f 5f       	subi	r24, 0xFF	; 255
     3b0:	8b 8f       	std	Y+27, r24	; 0x1b
     3b2:	82 30       	cpi	r24, 0x02	; 2
     3b4:	58 f0       	brcs	.+22     	; 0x3cc <MotorControl+0x212>
			*m->sensor.faultFlag = true;
     3b6:	eb 89       	ldd	r30, Y+19	; 0x13
     3b8:	fc 89       	ldd	r31, Y+20	; 0x14
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	80 83       	st	Z, r24
			m->iface.stop();
     3be:	ef 81       	ldd	r30, Y+7	; 0x07
     3c0:	f8 85       	ldd	r31, Y+8	; 0x08
     3c2:	09 95       	icall
			m->iface.disable();
     3c4:	eb 81       	ldd	r30, Y+3	; 0x03
     3c6:	fc 81       	ldd	r31, Y+4	; 0x04
     3c8:	09 95       	icall
     3ca:	08 c0       	rjmp	.+16     	; 0x3dc <MotorControl+0x222>
			} else if (delta < -SENSOR_DEADBAND) {
     3cc:	f8 e3       	ldi	r31, 0x38	; 56
     3ce:	cf 16       	cp	r12, r31
     3d0:	ff ef       	ldi	r31, 0xFF	; 255
     3d2:	df 06       	cpc	r13, r31
     3d4:	ef 06       	cpc	r14, r31
     3d6:	ff 06       	cpc	r15, r31
     3d8:	0c f4       	brge	.+2      	; 0x3dc <MotorControl+0x222>
			m->stuckCount = 0;
     3da:	1b 8e       	std	Y+27, r1	; 0x1b
		}
	}

	// 7. Uþstrigimas vietoje
	if (delta == 0 && !*m->sensor.targetReached) {
     3dc:	cd 28       	or	r12, r13
     3de:	ce 28       	or	r12, r14
     3e0:	cf 28       	or	r12, r15
     3e2:	a9 f4       	brne	.+42     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3e4:	e9 8d       	ldd	r30, Y+25	; 0x19
     3e6:	fa 8d       	ldd	r31, Y+26	; 0x1a
     3e8:	80 81       	ld	r24, Z
     3ea:	81 11       	cpse	r24, r1
     3ec:	10 c0       	rjmp	.+32     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		if (++m->noChangeCount >= STUCK_LIMIT) {
     3ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3f0:	8f 5f       	subi	r24, 0xFF	; 255
     3f2:	8c 8f       	std	Y+28, r24	; 0x1c
     3f4:	82 30       	cpi	r24, 0x02	; 2
     3f6:	60 f0       	brcs	.+24     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			*m->sensor.faultFlag = true;
     3f8:	eb 89       	ldd	r30, Y+19	; 0x13
     3fa:	fc 89       	ldd	r31, Y+20	; 0x14
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	80 83       	st	Z, r24
			m->iface.stop();
     400:	ef 81       	ldd	r30, Y+7	; 0x07
     402:	f8 85       	ldd	r31, Y+8	; 0x08
     404:	09 95       	icall
			m->iface.disable();
     406:	eb 81       	ldd	r30, Y+3	; 0x03
     408:	fc 81       	ldd	r31, Y+4	; 0x04
     40a:	09 95       	icall
     40c:	01 c0       	rjmp	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		}
		} else {
		m->noChangeCount = 0;
     40e:	1c 8e       	std	Y+28, r1	; 0x1c
	}

	// 8. Atnaujinam paskutinæ reikðmæ
	*m->sensor.lastPosition = *m->sensor.positionFiltered;
     410:	ed 89       	ldd	r30, Y+21	; 0x15
     412:	fe 89       	ldd	r31, Y+22	; 0x16
     414:	a9 89       	ldd	r26, Y+17	; 0x11
     416:	ba 89       	ldd	r27, Y+18	; 0x12
     418:	8d 91       	ld	r24, X+
     41a:	9c 91       	ld	r25, X
     41c:	80 83       	st	Z, r24
     41e:	91 83       	std	Z+1, r25	; 0x01
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	bf 90       	pop	r11
     432:	af 90       	pop	r10
     434:	9f 90       	pop	r9
     436:	8f 90       	pop	r8
     438:	08 95       	ret

0000043a <work>:

void work(){
	if(Joystick.LatchSwitch){ //Manual mode
     43a:	80 91 d1 65 	lds	r24, 0x65D1	; 0x8065d1 <Joystick+0x6>
     43e:	88 23       	and	r24, r24
     440:	b9 f1       	breq	.+110    	; 0x4b0 <work+0x76>
		if( (Target.azimuth + Joystick.X_Axis) >= MIN_AZIMUTH && (Target.azimuth + Joystick.X_Axis) <= MAX_AZIMUTH ) {
     442:	80 91 4f 60 	lds	r24, 0x604F	; 0x80604f <Target+0x5>
     446:	90 91 50 60 	lds	r25, 0x6050	; 0x806050 <Target+0x6>
     44a:	20 91 cb 65 	lds	r18, 0x65CB	; 0x8065cb <Joystick>
     44e:	30 91 cc 65 	lds	r19, 0x65CC	; 0x8065cc <Joystick+0x1>
     452:	82 0f       	add	r24, r18
     454:	93 1f       	adc	r25, r19
     456:	9c 01       	movw	r18, r24
     458:	2e 51       	subi	r18, 0x1E	; 30
     45a:	31 09       	sbc	r19, r1
     45c:	2d 32       	cpi	r18, 0x2D	; 45
     45e:	31 40       	sbci	r19, 0x01	; 1
     460:	20 f4       	brcc	.+8      	; 0x46a <work+0x30>
			Target.azimuth += Joystick.X_Axis;
     462:	80 93 4f 60 	sts	0x604F, r24	; 0x80604f <Target+0x5>
     466:	90 93 50 60 	sts	0x6050, r25	; 0x806050 <Target+0x6>
		}
		if( (Target.elevation - Joystick.Y_Axis) >= MIN_ELEVATION && (Target.elevation - Joystick.Y_Axis) <= MAX_ELEVATION ) {
     46a:	80 91 4a 60 	lds	r24, 0x604A	; 0x80604a <Target>
     46e:	90 91 4b 60 	lds	r25, 0x604B	; 0x80604b <Target+0x1>
     472:	20 91 cd 65 	lds	r18, 0x65CD	; 0x8065cd <Joystick+0x2>
     476:	30 91 ce 65 	lds	r19, 0x65CE	; 0x8065ce <Joystick+0x3>
     47a:	82 1b       	sub	r24, r18
     47c:	93 0b       	sbc	r25, r19
     47e:	8b 35       	cpi	r24, 0x5B	; 91
     480:	91 05       	cpc	r25, r1
     482:	20 f4       	brcc	.+8      	; 0x48c <work+0x52>
			Target.elevation -= Joystick.Y_Axis;
     484:	80 93 4a 60 	sts	0x604A, r24	; 0x80604a <Target>
     488:	90 93 4b 60 	sts	0x604B, r25	; 0x80604b <Target+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     48c:	8f ef       	ldi	r24, 0xFF	; 255
     48e:	95 ea       	ldi	r25, 0xA5	; 165
     490:	2e e0       	ldi	r18, 0x0E	; 14
     492:	81 50       	subi	r24, 0x01	; 1
     494:	90 40       	sbci	r25, 0x00	; 0
     496:	20 40       	sbci	r18, 0x00	; 0
     498:	e1 f7       	brne	.-8      	; 0x492 <work+0x58>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <work+0x62>
     49c:	00 00       	nop
		}
		_delay_ms(200);
		MotorControl(&LinearMotorCtrl);
     49e:	85 e2       	ldi	r24, 0x25	; 37
     4a0:	90 e6       	ldi	r25, 0x60	; 96
     4a2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MotorControl>
		MotorControl(&StepperMotorCtrl);
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e6       	ldi	r25, 0x60	; 96
     4aa:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MotorControl>
     4ae:	08 95       	ret
	}
	else{//Auto mode
		if(!WSData.WS_lost_connecton_fault){ // only receiving data from RS485 network (Weather Station)
     4b0:	80 91 e8 65 	lds	r24, 0x65E8	; 0x8065e8 <WSData+0xa>
     4b4:	81 11       	cpse	r24, r1
     4b6:	24 c0       	rjmp	.+72     	; 0x500 <work+0xc6>
			if(WSData.windspeed > MAX_WIND){
     4b8:	80 91 e4 65 	lds	r24, 0x65E4	; 0x8065e4 <WSData+0x6>
     4bc:	80 31       	cpi	r24, 0x10	; 16
     4be:	48 f0       	brcs	.+18     	; 0x4d2 <work+0x98>
				get_safe_azimuth();
     4c0:	0e 94 88 00 	call	0x110	; 0x110 <get_safe_azimuth>
			Target.elevation = SAFE_ELEVATION;
     4c4:	84 e1       	ldi	r24, 0x14	; 20
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	80 93 4a 60 	sts	0x604A, r24	; 0x80604a <Target>
     4cc:	90 93 4b 60 	sts	0x604B, r25	; 0x80604b <Target+0x1>
     4d0:	08 95       	ret
				}
				else{ // if not go to best day position (early morning, late at evening, or just dark day)
					Target.azimuth = 180; //South
					Target.elevation = WSData.topelevation; //day top elevation
				}		 
				Target.azimuth = WSData.azimuth;
     4d2:	ae ed       	ldi	r26, 0xDE	; 222
     4d4:	b5 e6       	ldi	r27, 0x65	; 101
     4d6:	8d 91       	ld	r24, X+
     4d8:	9c 91       	ld	r25, X
     4da:	11 97       	sbiw	r26, 0x01	; 1
     4dc:	ea e4       	ldi	r30, 0x4A	; 74
     4de:	f0 e6       	ldi	r31, 0x60	; 96
     4e0:	85 83       	std	Z+5, r24	; 0x05
     4e2:	96 83       	std	Z+6, r25	; 0x06
				Target.elevation = WSData.elevation;
     4e4:	12 96       	adiw	r26, 0x02	; 2
     4e6:	8d 91       	ld	r24, X+
     4e8:	9c 91       	ld	r25, X
     4ea:	13 97       	sbiw	r26, 0x03	; 3
     4ec:	80 83       	st	Z, r24
     4ee:	91 83       	std	Z+1, r25	; 0x01
				MotorControl(&LinearMotorCtrl);
     4f0:	85 e2       	ldi	r24, 0x25	; 37
     4f2:	90 e6       	ldi	r25, 0x60	; 96
     4f4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MotorControl>
				MotorControl(&StepperMotorCtrl);
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e6       	ldi	r25, 0x60	; 96
     4fc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <MotorControl>
     500:	08 95       	ret

00000502 <ADC0_init>:
 * - Prescaler: Division by 4
 * - Resolution: 12-bit
 * - Enables the ADC.
 */
void ADC0_init() {
    ADC0.CTRLB = ADC_SAMPNUM_ACC128_gc; // 1 measurements
     502:	e0 e0       	ldi	r30, 0x00	; 0
     504:	f6 e0       	ldi	r31, 0x06	; 6
     506:	87 e0       	ldi	r24, 0x07	; 7
     508:	81 83       	std	Z+1, r24	; 0x01
    ADC0.CTRLC = ADC_PRESC_DIV4_gc; // 24Mhz / 16 ADC speed
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	82 83       	std	Z+2, r24	; 0x02
    ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_12BIT_gc; // 12-bit resolution
     50e:	80 83       	st	Z, r24
     510:	08 95       	ret

00000512 <ADC0_SetupJoystick>:
}


void ADC0_SetupJoystick(uint8_t axis) {
    VREF.ADC0REF = VREF_REFSEL_VDD_gc;
     512:	95 e0       	ldi	r25, 0x05	; 5
     514:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
    ADC0.MUXPOS = axis;
     518:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     51c:	08 95       	ret

0000051e <ADC0_SetupLinearMotor>:

}

void ADC0_SetupLinearMotor(uint8_t parameter) {
	switch (parameter)
     51e:	81 30       	cpi	r24, 0x01	; 1
     520:	39 f4       	brne	.+14     	; 0x530 <ADC0_SetupLinearMotor+0x12>
	{
		case 1: //I
			VREF.ADC0REF = VREF_REFSEL_4V096_gc; // up to 9,21A (if MCU Vcc== 4.096V)| 0A= 0.4096V| 4.096- 0.4096 = 3,6864V/0,4 = 9.21A | max current at normal working conditions for linear motor is ~4A			
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
			ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc; //PD1
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
		break;
     52e:	08 95       	ret
		default://U
			VREF.ADC0REF = VREF_REFSEL_2V048_gc; //AMC1311 full range is 2.0V for linear motor 2.0V = 30.0V (300k)
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
			ADC0.MUXPOS = ADC_MUXPOS_AIN31_gc; //PC3
     536:	8f e1       	ldi	r24, 0x1F	; 31
     538:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     53c:	08 95       	ret

0000053e <ADC0_SetupStepper>:
	}

}

void ADC0_SetupStepper(uint8_t parameter) {
	switch (parameter)
     53e:	81 30       	cpi	r24, 0x01	; 1
     540:	39 f4       	brne	.+14     	; 0x550 <ADC0_SetupStepper+0x12>
	{
		case 1: //I
			VREF.ADC0REF = VREF_REFSEL_4V096_gc; // up to 9,21A (if MCU Vcc== 4.096V)| 0A= 0.4096V| 4.096- 0.4096 = 3,6864V/0,4 = 9.21A | max current at normal working conditions for stepper motor is ~6A
     542:	82 e0       	ldi	r24, 0x02	; 2
     544:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
			ADC0.MUXPOS = ADC_MUXPOS_AIN16_gc; //PF0
     548:	80 e1       	ldi	r24, 0x10	; 16
     54a:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
		break;
     54e:	08 95       	ret
		default://U
			VREF.ADC0REF = VREF_REFSEL_2V048_gc; //AMC1311 full range is 2.0V for stepper 2.0V = 71.0V (710k)
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
			ADC0.MUXPOS = ADC_MUXPOS_AIN6_gc; //PD6
     556:	86 e0       	ldi	r24, 0x06	; 6
     558:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     55c:	08 95       	ret

0000055e <ADC0_SetupSysVoltage>:
	}

}

void ADC0_SetupSysVoltage(){
	VREF.ADC0REF = VREF_REFSEL_1V024_gc; // 1.024V = 4096| 1.024 = 10.24V|
     55e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f00b0>
	ADC0.MUXPOS = ADC_MUXPOS_VDDDIV10_gc; //5V = 0.5V
     562:	84 e4       	ldi	r24, 0x44	; 68
     564:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f0608>
     568:	08 95       	ret

0000056a <ADC0_read>:
 * appropriately.
 *
 * @return The ADC conversion result as a 12-bit value.
 */
uint16_t ADC0_read() {
    ADC0.COMMAND = ADC_STCONV_bm; // Start conversion
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7f060a>
    while (!(ADC0.INTFLAGS & ADC_RESRDY_bm)); // Wait until result is ready
     570:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7f060d>
     574:	80 ff       	sbrs	r24, 0
     576:	fc cf       	rjmp	.-8      	; 0x570 <ADC0_read+0x6>
    ADC0.INTFLAGS = ADC_RESRDY_bm; // Clear result ready flag
     578:	e0 e0       	ldi	r30, 0x00	; 0
     57a:	f6 e0       	ldi	r31, 0x06	; 6
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	85 87       	std	Z+13, r24	; 0x0d
    return ADC0.RES >> 4; // Shift result if accumulation is over 16
     580:	80 89       	ldd	r24, Z+16	; 0x10
     582:	91 89       	ldd	r25, Z+17	; 0x11
}
     584:	92 95       	swap	r25
     586:	82 95       	swap	r24
     588:	8f 70       	andi	r24, 0x0F	; 15
     58a:	89 27       	eor	r24, r25
     58c:	9f 70       	andi	r25, 0x0F	; 15
     58e:	89 27       	eor	r24, r25
     590:	08 95       	ret

00000592 <Read_MCU_Voltge>:

uint16_t Read_MCU_Voltge(){
ADC0_SetupSysVoltage();
     592:	0e 94 af 02 	call	0x55e	; 0x55e <ADC0_SetupSysVoltage>
return ADC0_read()*0.25; //ADC value * 10.26V (full adc range) / 4096 (Full adc range steps) exp: 1856 * 0.25 = 464 (4.64V)
     596:	0e 94 b5 02 	call	0x56a	; 0x56a <ADC0_read>
     59a:	bc 01       	movw	r22, r24
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__floatunsisf>
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	40 e8       	ldi	r20, 0x80	; 128
     5aa:	5e e3       	ldi	r21, 0x3E	; 62
     5ac:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__mulsf3>
     5b0:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__fixunssfsi>
}
     5b4:	cb 01       	movw	r24, r22
     5b6:	08 95       	ret

000005b8 <CLOCK_XOSCHF_clock_init>:
#include "Settings.h"

void CLOCK_XOSCHF_clock_init()
{
	/* Enable external (32 MHz) clock input */
	ccp_write_io((uint8_t *) &CLKCTRL.XOSCHFCTRLA, CLKCTRL_SELHF_EXTCLOCK_gc | CLKCTRL_FRQRANGE_24M_gc | CLKCTRL_ENABLE_bm);
     5b8:	6b e0       	ldi	r22, 0x0B	; 11
     5ba:	80 e8       	ldi	r24, 0x80	; 128
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ccp_write_io>

	/* Set the main clock to use external clock as source */
	ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc);
     5c2:	63 e0       	ldi	r22, 0x03	; 3
     5c4:	80 e6       	ldi	r24, 0x60	; 96
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ccp_write_io>

	/* Wait for system oscillator change to complete */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm)
     5cc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
     5d0:	80 fd       	sbrc	r24, 0
     5d2:	fc cf       	rjmp	.-8      	; 0x5cc <CLOCK_XOSCHF_clock_init+0x14>
	{};
	/* Configuration complete;*/
}
     5d4:	08 95       	ret

000005d6 <crc8_cdma2000>:
 * of the input data. The result is returned as a single byte (CRC value).
 * 
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
     5d6:	2f 92       	push	r2
     5d8:	3f 92       	push	r3
     5da:	4f 92       	push	r4
     5dc:	5f 92       	push	r5
     5de:	6f 92       	push	r6
     5e0:	7f 92       	push	r7
     5e2:	8f 92       	push	r8
     5e4:	9f 92       	push	r9
     5e6:	af 92       	push	r10
     5e8:	bf 92       	push	r11
     5ea:	cf 92       	push	r12
     5ec:	df 92       	push	r13
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
     5fe:	2b 97       	sbiw	r28, 0x0b	; 11
     600:	cd bf       	out	0x3d, r28	; 61
     602:	de bf       	out	0x3e, r29	; 62
     604:	c2 2e       	mov	r12, r18
     606:	b3 2e       	mov	r11, r19
     608:	a4 2e       	mov	r10, r20
     60a:	95 2e       	mov	r9, r21
     60c:	86 2e       	mov	r8, r22
     60e:	77 2e       	mov	r7, r23
     610:	68 2e       	mov	r6, r24
     612:	59 2e       	mov	r5, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;
     614:	f2 2e       	mov	r15, r18
     616:	03 2f       	mov	r16, r19
     618:	14 2f       	mov	r17, r20
     61a:	5a 87       	std	Y+10, r21	; 0x0a
     61c:	69 83       	std	Y+1, r22	; 0x01
     61e:	b7 2f       	mov	r27, r23
     620:	d8 2e       	mov	r13, r24
     622:	e9 2e       	mov	r14, r25
 * @param data The input data to calculate the CRC for.
 * @return The CRC-8 checksum value for the data.
 */
uint8_t crc8_cdma2000(uint64_t data) {
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
     624:	e0 e0       	ldi	r30, 0x00	; 0
     626:	f0 e0       	ldi	r31, 0x00	; 0
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     628:	14 c0       	rjmp	.+40     	; 0x652 <crc8_cdma2000+0x7c>
        length++;
     62a:	31 96       	adiw	r30, 0x01	; 1
        temp >>= 8;
     62c:	2f 2d       	mov	r18, r15
     62e:	30 2f       	mov	r19, r16
     630:	41 2f       	mov	r20, r17
     632:	5a 85       	ldd	r21, Y+10	; 0x0a
     634:	69 81       	ldd	r22, Y+1	; 0x01
     636:	7b 2f       	mov	r23, r27
     638:	8d 2d       	mov	r24, r13
     63a:	9e 2d       	mov	r25, r14
     63c:	08 e0       	ldi	r16, 0x08	; 8
     63e:	0e 94 4a 11 	call	0x2294	; 0x2294 <__lshrdi3>
     642:	f2 2e       	mov	r15, r18
     644:	03 2f       	mov	r16, r19
     646:	14 2f       	mov	r17, r20
     648:	5a 87       	std	Y+10, r21	; 0x0a
     64a:	69 83       	std	Y+1, r22	; 0x01
     64c:	b7 2f       	mov	r27, r23
     64e:	d8 2e       	mov	r13, r24
     650:	e9 2e       	mov	r14, r25
    uint8_t crc = 0xFF;    ///< Initial CRC value.
    size_t length = 0;     ///< Length of the data in bytes.
    uint64_t temp = data;

    // Calculate the number of bytes in the data.
    while (temp) {
     652:	2f 2d       	mov	r18, r15
     654:	30 2f       	mov	r19, r16
     656:	41 2f       	mov	r20, r17
     658:	5a 85       	ldd	r21, Y+10	; 0x0a
     65a:	69 81       	ldd	r22, Y+1	; 0x01
     65c:	7b 2f       	mov	r23, r27
     65e:	8d 2d       	mov	r24, r13
     660:	9e 2d       	mov	r25, r14
     662:	a0 e0       	ldi	r26, 0x00	; 0
     664:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__cmpdi2_s8>
     668:	01 f7       	brne	.-64     	; 0x62a <crc8_cdma2000+0x54>
     66a:	8f ef       	ldi	r24, 0xFF	; 255
     66c:	8a 87       	std	Y+10, r24	; 0x0a
     66e:	cb 86       	std	Y+11, r12	; 0x0b
     670:	b9 82       	std	Y+1, r11	; 0x01
     672:	4a 2c       	mov	r4, r10
     674:	39 2c       	mov	r3, r9
     676:	28 2c       	mov	r2, r8
     678:	1a c0       	rjmp	.+52     	; 0x6ae <crc8_cdma2000+0xd8>
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
     67a:	8d 01       	movw	r16, r26
     67c:	00 0f       	add	r16, r16
     67e:	11 1f       	adc	r17, r17
     680:	00 0f       	add	r16, r16
     682:	11 1f       	adc	r17, r17
     684:	00 0f       	add	r16, r16
     686:	11 1f       	adc	r17, r17
     688:	2b 85       	ldd	r18, Y+11	; 0x0b
     68a:	39 81       	ldd	r19, Y+1	; 0x01
     68c:	44 2d       	mov	r20, r4
     68e:	53 2d       	mov	r21, r3
     690:	62 2d       	mov	r22, r2
     692:	77 2d       	mov	r23, r7
     694:	86 2d       	mov	r24, r6
     696:	95 2d       	mov	r25, r5
     698:	0e 94 4a 11 	call	0x2294	; 0x2294 <__lshrdi3>
     69c:	8a 84       	ldd	r8, Y+10	; 0x0a
     69e:	82 26       	eor	r8, r18
     6a0:	91 2c       	mov	r9, r1
     6a2:	f4 01       	movw	r30, r8
     6a4:	ea 54       	subi	r30, 0x4A	; 74
     6a6:	fc 49       	sbci	r31, 0x9C	; 156
     6a8:	80 81       	ld	r24, Z
     6aa:	8a 87       	std	Y+10, r24	; 0x0a
        length++;
        temp >>= 8;
    }

    // Process each byte in the data.
    while (length--) {
     6ac:	fd 01       	movw	r30, r26
     6ae:	df 01       	movw	r26, r30
     6b0:	11 97       	sbiw	r26, 0x01	; 1
     6b2:	ef 2b       	or	r30, r31
     6b4:	11 f7       	brne	.-60     	; 0x67a <crc8_cdma2000+0xa4>
     6b6:	8a 85       	ldd	r24, Y+10	; 0x0a
        crc = crc8_table[crc ^ ((data >> (length * 8)) & 0xFF)];
    }
    return crc;  ///< Return the calculated CRC.
}
     6b8:	2b 96       	adiw	r28, 0x0b	; 11
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	df 90       	pop	r13
     6cc:	cf 90       	pop	r12
     6ce:	bf 90       	pop	r11
     6d0:	af 90       	pop	r10
     6d2:	9f 90       	pop	r9
     6d4:	8f 90       	pop	r8
     6d6:	7f 90       	pop	r7
     6d8:	6f 90       	pop	r6
     6da:	5f 90       	pop	r5
     6dc:	4f 90       	pop	r4
     6de:	3f 90       	pop	r3
     6e0:	2f 90       	pop	r2
     6e2:	08 95       	ret

000006e4 <verify_crc8_cdma2000>:
 * without the CRC byte. Otherwise, it returns 0 to indicate a mismatch.
 * 
 * @param data_with_crc The input data with the CRC byte appended.
 * @return The data without the CRC byte if the checksum is valid, or 0 if invalid.
 */
uint8_t verify_crc8_cdma2000(uint64_t data_without_crc, uint8_t crc) {
     6e4:	0f 93       	push	r16
     6e6:	cf 93       	push	r28
     6e8:	c2 2f       	mov	r28, r18

	return crc8_cdma2000(data_without_crc) == crc ?  data_without_crc : 0;
     6ea:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <crc8_cdma2000>
     6ee:	80 13       	cpse	r24, r16
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <verify_crc8_cdma2000+0x12>
     6f2:	8c 2f       	mov	r24, r28
     6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <verify_crc8_cdma2000+0x14>
     6f6:	80 e0       	ldi	r24, 0x00	; 0

}
     6f8:	cf 91       	pop	r28
     6fa:	0f 91       	pop	r16
     6fc:	08 95       	ret

000006fe <verify_crc8_cdma2000_v2>:


uint8_t verify_crc8_cdma2000_v2(uint8_t *data, uint8_t crc) {
     6fe:	ac 01       	movw	r20, r24
	uint16_t saveOneBit = ((data[4] & 0x07) << 12) | (data[5] & 0x0FFF); //wind direction (F)(values only 0- 7) + light level(FFF)(values only 0-4095) = (F+FFF)
	buf[7] = (uint8_t)(saveOneBit >> 8); //split wind direction and part of light level data
	buf[8] = (uint8_t)(saveOneBit & 0xFF); // left part of light level*/

	uint8_t calculatedcrc = 0xFF;
	for (size_t i = 0; i < 9; i++) { // length = 8 baitai
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
	buf[6] = (uint8_t)data[3]; // uint8_t wind speed (FF)
	uint16_t saveOneBit = ((data[4] & 0x07) << 12) | (data[5] & 0x0FFF); //wind direction (F)(values only 0- 7) + light level(FFF)(values only 0-4095) = (F+FFF)
	buf[7] = (uint8_t)(saveOneBit >> 8); //split wind direction and part of light level data
	buf[8] = (uint8_t)(saveOneBit & 0xFF); // left part of light level*/

	uint8_t calculatedcrc = 0xFF;
     704:	ef ef       	ldi	r30, 0xFF	; 255
	for (size_t i = 0; i < 9; i++) { // length = 8 baitai
     706:	0b c0       	rjmp	.+22     	; 0x71e <verify_crc8_cdma2000_v2+0x20>
		calculatedcrc = crc8_table[calculatedcrc ^ data[i]];
     708:	da 01       	movw	r26, r20
     70a:	a2 0f       	add	r26, r18
     70c:	b3 1f       	adc	r27, r19
     70e:	9c 91       	ld	r25, X
     710:	e9 27       	eor	r30, r25
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	ea 54       	subi	r30, 0x4A	; 74
     716:	fc 49       	sbci	r31, 0x9C	; 156
     718:	e0 81       	ld	r30, Z
	uint16_t saveOneBit = ((data[4] & 0x07) << 12) | (data[5] & 0x0FFF); //wind direction (F)(values only 0- 7) + light level(FFF)(values only 0-4095) = (F+FFF)
	buf[7] = (uint8_t)(saveOneBit >> 8); //split wind direction and part of light level data
	buf[8] = (uint8_t)(saveOneBit & 0xFF); // left part of light level*/

	uint8_t calculatedcrc = 0xFF;
	for (size_t i = 0; i < 9; i++) { // length = 8 baitai
     71a:	2f 5f       	subi	r18, 0xFF	; 255
     71c:	3f 4f       	sbci	r19, 0xFF	; 255
     71e:	29 30       	cpi	r18, 0x09	; 9
     720:	31 05       	cpc	r19, r1
     722:	90 f3       	brcs	.-28     	; 0x708 <verify_crc8_cdma2000_v2+0xa>
		calculatedcrc = crc8_table[calculatedcrc ^ data[i]];
	}
	return calculatedcrc == crc ? calculatedcrc : 0 ;
     724:	e6 17       	cp	r30, r22
     726:	11 f0       	breq	.+4      	; 0x72c <verify_crc8_cdma2000_v2+0x2e>
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	08 95       	ret
     72c:	8e 2f       	mov	r24, r30

     72e:	08 95       	ret

00000730 <hexToUint64>:
 *  Author: Saulius
 */ 
#include "Settings.h"
#include "FOUSARTVar.h"

uint64_t hexToUint64(const char *str) {
     730:	0f 93       	push	r16
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	fc 01       	movw	r30, r24
	uint64_t result = 0;
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e0       	ldi	r20, 0x00	; 0
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
	char c;

	while ((c = *str++)) {
     748:	3a c0       	rjmp	.+116    	; 0x7be <hexToUint64+0x8e>
		result <<= 4; // kiekvienas hex simbolis = 4 bitai
     74a:	04 e0       	ldi	r16, 0x04	; 4
     74c:	0e 94 2f 11 	call	0x225e	; 0x225e <__ashldi3>

		if (c >= '0' && c <= '9') {
     750:	e0 ed       	ldi	r30, 0xD0	; 208
     752:	ec 0f       	add	r30, r28
     754:	ea 30       	cpi	r30, 0x0A	; 10
     756:	70 f4       	brcc	.+28     	; 0x774 <hexToUint64+0x44>
			result |= (uint64_t)(c - '0');
     758:	d0 e0       	ldi	r29, 0x00	; 0
     75a:	e0 97       	sbiw	r28, 0x30	; 48
     75c:	ed 2f       	mov	r30, r29
     75e:	ee 0f       	add	r30, r30
     760:	ee 0b       	sbc	r30, r30
     762:	2c 2b       	or	r18, r28
     764:	3d 2b       	or	r19, r29
     766:	4e 2b       	or	r20, r30
     768:	5e 2b       	or	r21, r30
     76a:	6e 2b       	or	r22, r30
     76c:	7e 2b       	or	r23, r30
     76e:	8e 2b       	or	r24, r30
     770:	9e 2b       	or	r25, r30
     772:	24 c0       	rjmp	.+72     	; 0x7bc <hexToUint64+0x8c>
			} else if (c >= 'A' && c <= 'F') {
     774:	ef eb       	ldi	r30, 0xBF	; 191
     776:	ec 0f       	add	r30, r28
     778:	e6 30       	cpi	r30, 0x06	; 6
     77a:	70 f4       	brcc	.+28     	; 0x798 <hexToUint64+0x68>
			result |= (uint64_t)(c - 'A' + 10);
     77c:	d0 e0       	ldi	r29, 0x00	; 0
     77e:	e7 97       	sbiw	r28, 0x37	; 55
     780:	ed 2f       	mov	r30, r29
     782:	ee 0f       	add	r30, r30
     784:	ee 0b       	sbc	r30, r30
     786:	2c 2b       	or	r18, r28
     788:	3d 2b       	or	r19, r29
     78a:	4e 2b       	or	r20, r30
     78c:	5e 2b       	or	r21, r30
     78e:	6e 2b       	or	r22, r30
     790:	7e 2b       	or	r23, r30
     792:	8e 2b       	or	r24, r30
     794:	9e 2b       	or	r25, r30
     796:	12 c0       	rjmp	.+36     	; 0x7bc <hexToUint64+0x8c>
			} else if (c >= 'a' && c <= 'f') {
     798:	ef e9       	ldi	r30, 0x9F	; 159
     79a:	ec 0f       	add	r30, r28
     79c:	e6 30       	cpi	r30, 0x06	; 6
     79e:	a8 f4       	brcc	.+42     	; 0x7ca <hexToUint64+0x9a>
			result |= (uint64_t)(c - 'a' + 10);
     7a0:	d0 e0       	ldi	r29, 0x00	; 0
     7a2:	c7 55       	subi	r28, 0x57	; 87
     7a4:	d1 09       	sbc	r29, r1
     7a6:	ed 2f       	mov	r30, r29
     7a8:	ee 0f       	add	r30, r30
     7aa:	ee 0b       	sbc	r30, r30
     7ac:	2c 2b       	or	r18, r28
     7ae:	3d 2b       	or	r19, r29
     7b0:	4e 2b       	or	r20, r30
     7b2:	5e 2b       	or	r21, r30
     7b4:	6e 2b       	or	r22, r30
     7b6:	7e 2b       	or	r23, r30
     7b8:	8e 2b       	or	r24, r30
     7ba:	9e 2b       	or	r25, r30
     7bc:	fd 01       	movw	r30, r26

uint64_t hexToUint64(const char *str) {
	uint64_t result = 0;
	char c;

	while ((c = *str++)) {
     7be:	df 01       	movw	r26, r30
     7c0:	11 96       	adiw	r26, 0x01	; 1
     7c2:	c0 81       	ld	r28, Z
     7c4:	c1 11       	cpse	r28, r1
     7c6:	c1 cf       	rjmp	.-126    	; 0x74a <hexToUint64+0x1a>
     7c8:	08 c0       	rjmp	.+16     	; 0x7da <hexToUint64+0xaa>
			result |= (uint64_t)(c - 'A' + 10);
			} else if (c >= 'a' && c <= 'f') {
			result |= (uint64_t)(c - 'a' + 10);
			} else {
			// netinkamas simbolis
			return 0;
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return result;
}
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	0f 91       	pop	r16
     7e0:	08 95       	ret

000007e2 <FODataSplitter>:

void FODataSplitter(char *command) {
     7e2:	7f 92       	push	r7
     7e4:	8f 92       	push	r8
     7e6:	9f 92       	push	r9
     7e8:	af 92       	push	r10
     7ea:	bf 92       	push	r11
     7ec:	cf 92       	push	r12
     7ee:	df 92       	push	r13
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	69 97       	sbiw	r28, 0x19	; 25
     802:	cd bf       	out	0x3d, r28	; 61
     804:	de bf       	out	0x3e, r29	; 62
     806:	6c 01       	movw	r12, r24
	if (strncmp(command, "00000000000000", 14) == 0) { //if elevation angle, azimuth angle, solar cells voltage and current = 0 meaning it is FO optic fault: bad signal
     808:	4e e0       	ldi	r20, 0x0E	; 14
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	66 eb       	ldi	r22, 0xB6	; 182
     80e:	74 e6       	ldi	r23, 0x64	; 100
     810:	0e 94 ca 12 	call	0x2594	; 0x2594 <strncmp>
     814:	89 2b       	or	r24, r25
     816:	21 f4       	brne	.+8      	; 0x820 <FODataSplitter+0x3e>
		SensorData.FO_bad_signal_fault = true; //exp. hard bended fo
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	80 93 b2 65 	sts	0x65B2, r24	; 0x8065b2 <__data_end+0x10>
     81e:	dc c0       	rjmp	.+440    	; 0x9d8 <FODataSplitter+0x1f6>
	}
	else{
		const uint8_t lengths[] = {4, 4, 3, 3, 1};
     820:	85 e0       	ldi	r24, 0x05	; 5
     822:	e3 e9       	ldi	r30, 0x93	; 147
     824:	f3 e6       	ldi	r31, 0x63	; 99
     826:	de 01       	movw	r26, r28
     828:	55 96       	adiw	r26, 0x15	; 21
     82a:	01 90       	ld	r0, Z+
     82c:	0d 92       	st	X+, r0
     82e:	8a 95       	dec	r24
     830:	e1 f7       	brne	.-8      	; 0x82a <FODataSplitter+0x48>
		char temp[MESSAGE_LENGTH_FO-2];

		strncpy(temp, command, MESSAGE_LENGTH_FO-2);
     832:	4f e0       	ldi	r20, 0x0F	; 15
     834:	50 e0       	ldi	r21, 0x00	; 0
     836:	b6 01       	movw	r22, r12
     838:	ce 01       	movw	r24, r28
     83a:	01 96       	adiw	r24, 0x01	; 1
     83c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strncpy>
		temp[MESSAGE_LENGTH_FO-2] = '\0';
     840:	18 8a       	std	Y+16, r1	; 0x10
		uint64_t datatocheck = hexToUint64(temp);
     842:	ce 01       	movw	r24, r28
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	0e 94 98 03 	call	0x730	; 0x730 <hexToUint64>
     84a:	72 2e       	mov	r7, r18
     84c:	83 2e       	mov	r8, r19
     84e:	94 2e       	mov	r9, r20
     850:	a5 2e       	mov	r10, r21
     852:	b6 2e       	mov	r11, r22
     854:	e7 2e       	mov	r14, r23
     856:	f8 2e       	mov	r15, r24
     858:	19 2f       	mov	r17, r25
		strncpy(temp, command + MESSAGE_LENGTH_FO-2, 2);
     85a:	42 e0       	ldi	r20, 0x02	; 2
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	b6 01       	movw	r22, r12
     860:	61 5f       	subi	r22, 0xF1	; 241
     862:	7f 4f       	sbci	r23, 0xFF	; 255
     864:	ce 01       	movw	r24, r28
     866:	01 96       	adiw	r24, 0x01	; 1
     868:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strncpy>
		temp[2] = '\0';
     86c:	1b 82       	std	Y+3, r1	; 0x03
		uint8_t crctocheck = (uint8_t)strtol(temp, NULL, 16);
     86e:	40 e1       	ldi	r20, 0x10	; 16
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	ce 01       	movw	r24, r28
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	0e 94 92 11 	call	0x2324	; 0x2324 <strtol>

		if(verify_crc8_cdma2000(datatocheck, crctocheck)){ //if data valid update it
     87e:	06 2f       	mov	r16, r22
     880:	27 2d       	mov	r18, r7
     882:	38 2d       	mov	r19, r8
     884:	49 2d       	mov	r20, r9
     886:	5a 2d       	mov	r21, r10
     888:	6b 2d       	mov	r22, r11
     88a:	7e 2d       	mov	r23, r14
     88c:	8f 2d       	mov	r24, r15
     88e:	91 2f       	mov	r25, r17
     890:	0e 94 72 03 	call	0x6e4	; 0x6e4 <verify_crc8_cdma2000>
     894:	81 11       	cpse	r24, r1
     896:	69 c0       	rjmp	.+210    	; 0x96a <FODataSplitter+0x188>
     898:	9c c0       	rjmp	.+312    	; 0x9d2 <FODataSplitter+0x1f0>
			//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
			const char *p = command;
			uint8_t EndSwitchesValue = 0;

			for (uint8_t i = 0; i < 5; i++) {
				char token[5] = {0};
     89a:	5e 01       	movw	r10, r28
     89c:	80 e1       	ldi	r24, 0x10	; 16
     89e:	a8 0e       	add	r10, r24
     8a0:	b1 1c       	adc	r11, r1
     8a2:	85 e0       	ldi	r24, 0x05	; 5
     8a4:	f5 01       	movw	r30, r10
     8a6:	11 92       	st	Z+, r1
     8a8:	8a 95       	dec	r24
     8aa:	e9 f7       	brne	.-6      	; 0x8a6 <FODataSplitter+0xc4>

				memcpy(token, p, lengths[i]);
     8ac:	e5 e1       	ldi	r30, 0x15	; 21
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	ec 0f       	add	r30, r28
     8b2:	fd 1f       	adc	r31, r29
     8b4:	e1 0f       	add	r30, r17
     8b6:	f1 1d       	adc	r31, r1
     8b8:	e0 80       	ld	r14, Z
     8ba:	f1 2c       	mov	r15, r1
     8bc:	a7 01       	movw	r20, r14
     8be:	b6 01       	movw	r22, r12
     8c0:	c5 01       	movw	r24, r10
     8c2:	0e 94 b1 12 	call	0x2562	; 0x2562 <memcpy>
				token[lengths[i]] = '\0';
     8c6:	f5 01       	movw	r30, r10
     8c8:	ee 0d       	add	r30, r14
     8ca:	ff 1d       	adc	r31, r15
     8cc:	10 82       	st	Z, r1

				switch (i) {
     8ce:	12 30       	cpi	r17, 0x02	; 2
     8d0:	29 f1       	breq	.+74     	; 0x91c <FODataSplitter+0x13a>
     8d2:	28 f4       	brcc	.+10     	; 0x8de <FODataSplitter+0xfc>
     8d4:	11 23       	and	r17, r17
     8d6:	41 f0       	breq	.+16     	; 0x8e8 <FODataSplitter+0x106>
     8d8:	11 30       	cpi	r17, 0x01	; 1
     8da:	99 f0       	breq	.+38     	; 0x902 <FODataSplitter+0x120>
     8dc:	42 c0       	rjmp	.+132    	; 0x962 <FODataSplitter+0x180>
     8de:	13 30       	cpi	r17, 0x03	; 3
     8e0:	51 f1       	breq	.+84     	; 0x936 <FODataSplitter+0x154>
     8e2:	14 30       	cpi	r17, 0x04	; 4
     8e4:	a9 f1       	breq	.+106    	; 0x950 <FODataSplitter+0x16e>
     8e6:	3d c0       	rjmp	.+122    	; 0x962 <FODataSplitter+0x180>
					case 0: SensorData.HPElevation   = (uint16_t)strtol(token, NULL, 16); break;
     8e8:	40 e1       	ldi	r20, 0x10	; 16
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	ce 01       	movw	r24, r28
     8f2:	40 96       	adiw	r24, 0x10	; 16
     8f4:	0e 94 92 11 	call	0x2324	; 0x2324 <strtol>
     8f8:	60 93 a4 65 	sts	0x65A4, r22	; 0x8065a4 <__data_end+0x2>
     8fc:	70 93 a5 65 	sts	0x65A5, r23	; 0x8065a5 <__data_end+0x3>
     900:	30 c0       	rjmp	.+96     	; 0x962 <FODataSplitter+0x180>
					case 1: SensorData.HPAzimuth     = (uint16_t)strtol(token, NULL, 16); break;
     902:	40 e1       	ldi	r20, 0x10	; 16
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	ce 01       	movw	r24, r28
     90c:	40 96       	adiw	r24, 0x10	; 16
     90e:	0e 94 92 11 	call	0x2324	; 0x2324 <strtol>
     912:	60 93 a8 65 	sts	0x65A8, r22	; 0x8065a8 <__data_end+0x6>
     916:	70 93 a9 65 	sts	0x65A9, r23	; 0x8065a9 <__data_end+0x7>
     91a:	23 c0       	rjmp	.+70     	; 0x962 <FODataSplitter+0x180>
					case 2: SensorData.PVU         = (uint16_t)strtol(token, NULL, 16)/ U_I_Precizion; break;
     91c:	40 e1       	ldi	r20, 0x10	; 16
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	ce 01       	movw	r24, r28
     926:	40 96       	adiw	r24, 0x10	; 16
     928:	0e 94 92 11 	call	0x2324	; 0x2324 <strtol>
     92c:	60 93 aa 65 	sts	0x65AA, r22	; 0x8065aa <__data_end+0x8>
     930:	70 93 ab 65 	sts	0x65AB, r23	; 0x8065ab <__data_end+0x9>
     934:	16 c0       	rjmp	.+44     	; 0x962 <FODataSplitter+0x180>
					case 3: SensorData.PVI         = (uint16_t)strtol(token, NULL, 16)/ U_I_Precizion; break;
     936:	40 e1       	ldi	r20, 0x10	; 16
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	ce 01       	movw	r24, r28
     940:	40 96       	adiw	r24, 0x10	; 16
     942:	0e 94 92 11 	call	0x2324	; 0x2324 <strtol>
     946:	60 93 ac 65 	sts	0x65AC, r22	; 0x8065ac <__data_end+0xa>
     94a:	70 93 ad 65 	sts	0x65AD, r23	; 0x8065ad <__data_end+0xb>
     94e:	09 c0       	rjmp	.+18     	; 0x962 <FODataSplitter+0x180>
					case 4: EndSwitchesValue       = (uint8_t)strtol(token, NULL, 16); break; //common end switches value
     950:	40 e1       	ldi	r20, 0x10	; 16
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	ce 01       	movw	r24, r28
     95a:	40 96       	adiw	r24, 0x10	; 16
     95c:	0e 94 92 11 	call	0x2324	; 0x2324 <strtol>
     960:	06 2f       	mov	r16, r22
				}

				p += lengths[i];
     962:	ce 0c       	add	r12, r14
     964:	df 1c       	adc	r13, r15
		if(verify_crc8_cdma2000(datatocheck, crctocheck)){ //if data valid update it
			//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
			const char *p = command;
			uint8_t EndSwitchesValue = 0;

			for (uint8_t i = 0; i < 5; i++) {
     966:	1f 5f       	subi	r17, 0xFF	; 255
     968:	02 c0       	rjmp	.+4      	; 0x96e <FODataSplitter+0x18c>
     96a:	10 e0       	ldi	r17, 0x00	; 0
     96c:	00 e0       	ldi	r16, 0x00	; 0
     96e:	15 30       	cpi	r17, 0x05	; 5
     970:	08 f4       	brcc	.+2      	; 0x974 <FODataSplitter+0x192>
     972:	93 cf       	rjmp	.-218    	; 0x89a <FODataSplitter+0xb8>
					case 4: EndSwitchesValue       = (uint8_t)strtol(token, NULL, 16); break; //common end switches value
				}

				p += lengths[i];
			}
			SensorData.Elevation = SensorData.HPElevation / Angle_Precizion;
     974:	e2 ea       	ldi	r30, 0xA2	; 162
     976:	f5 e6       	ldi	r31, 0x65	; 101
     978:	22 81       	ldd	r18, Z+2	; 0x02
     97a:	33 81       	ldd	r19, Z+3	; 0x03
     97c:	36 95       	lsr	r19
     97e:	27 95       	ror	r18
     980:	36 95       	lsr	r19
     982:	27 95       	ror	r18
     984:	ab e7       	ldi	r26, 0x7B	; 123
     986:	b4 e1       	ldi	r27, 0x14	; 20
     988:	0e 94 20 11 	call	0x2240	; 0x2240 <__umulhisi3>
     98c:	96 95       	lsr	r25
     98e:	87 95       	ror	r24
     990:	80 83       	st	Z, r24
     992:	91 83       	std	Z+1, r25	; 0x01
			SensorData.Azimuth = SensorData.HPAzimuth / Angle_Precizion;
     994:	26 81       	ldd	r18, Z+6	; 0x06
     996:	37 81       	ldd	r19, Z+7	; 0x07
     998:	36 95       	lsr	r19
     99a:	27 95       	ror	r18
     99c:	36 95       	lsr	r19
     99e:	27 95       	ror	r18
     9a0:	0e 94 20 11 	call	0x2240	; 0x2240 <__umulhisi3>
     9a4:	96 95       	lsr	r25
     9a6:	87 95       	ror	r24
     9a8:	84 83       	std	Z+4, r24	; 0x04
     9aa:	95 83       	std	Z+5, r25	; 0x05
			//spliting end switch value to separate end switch value according to axis
			SensorData.ElMin = (EndSwitchesValue & 0x01) ? 1 : 0;
     9ac:	80 2f       	mov	r24, r16
     9ae:	81 70       	andi	r24, 0x01	; 1
     9b0:	84 87       	std	Z+12, r24	; 0x0c
			SensorData.ElMax = (EndSwitchesValue & 0x02) ? 1 : 0;
     9b2:	01 fb       	bst	r16, 1
     9b4:	88 27       	eor	r24, r24
     9b6:	80 f9       	bld	r24, 0
     9b8:	85 87       	std	Z+13, r24	; 0x0d
			SensorData.AzMin = (EndSwitchesValue & 0x04) ? 1 : 0;
     9ba:	02 fb       	bst	r16, 2
     9bc:	88 27       	eor	r24, r24
     9be:	80 f9       	bld	r24, 0
     9c0:	86 87       	std	Z+14, r24	; 0x0e
			SensorData.AzMax = (EndSwitchesValue & 0x08) ? 1 : 0;
     9c2:	03 fb       	bst	r16, 3
     9c4:	00 27       	eor	r16, r16
     9c6:	00 f9       	bld	r16, 0
     9c8:	07 87       	std	Z+15, r16	; 0x0f
			SensorData.FO_bad_signal_fault = false; //reset error
     9ca:	10 8a       	std	Z+16, r1	; 0x10
			SensorData.FO_data_fault = false; //reset error
     9cc:	12 8a       	std	Z+18, r1	; 0x12
			SensorData.FO_lost_signal_fault = false; //reset error
     9ce:	11 8a       	std	Z+17, r1	; 0x11
     9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <FODataSplitter+0x1f6>

		}
		else{
			//uncomment if nedded
			//screen_write_formatted_text("data is corupted!", 1, ALIGN_CENTER); // bad crc
			SensorData.FO_data_fault = true;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	80 93 b4 65 	sts	0x65B4, r24	; 0x8065b4 <__data_end+0x12>
		}	
	}
}
     9d8:	69 96       	adiw	r28, 0x19	; 25
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	df 90       	pop	r13
     9ec:	cf 90       	pop	r12
     9ee:	bf 90       	pop	r11
     9f0:	af 90       	pop	r10
     9f2:	9f 90       	pop	r9
     9f4:	8f 90       	pop	r8
     9f6:	7f 90       	pop	r7
     9f8:	08 95       	ret

000009fa <FOReceiver>:
 * This function continuously reads incoming data via USART, processes the data, 
 * and executes the appropriate command. If an error occurs or a warning is set, 
 * it handles the corresponding state. The function handles both normal command 
 * processing and error recovery.
 */
void FOReceiver() {
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
     a08:	61 97       	sbiw	r28, 0x11	; 17
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	de bf       	out	0x3e, r29	; 62
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
     a0e:	fe 01       	movw	r30, r28
     a10:	31 96       	adiw	r30, 0x01	; 1
     a12:	81 e1       	ldi	r24, 0x11	; 17
     a14:	df 01       	movw	r26, r30
     a16:	1d 92       	st	X+, r1
     a18:	8a 95       	dec	r24
     a1a:	e9 f7       	brne	.-6      	; 0xa16 <FOReceiver+0x1c>
    uint8_t start = 0;
	uint8_t timeout = 0;
	SensorData.FO_lost_signal_fault = false;// usart1 while loop exit
     a1c:	e2 ea       	ldi	r30, 0xA2	; 162
     a1e:	f5 e6       	ldi	r31, 0x65	; 101
     a20:	11 8a       	std	Z+17, r1	; 0x11
	SensorData.FO_lost_connecton_fault = false; // while lop exit below
     a22:	13 8a       	std	Z+19, r1	; 0x13
 */
void FOReceiver() {
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
    uint8_t start = 0;
	uint8_t timeout = 0;
     a24:	10 e0       	ldi	r17, 0x00	; 0
 * processing and error recovery.
 */
void FOReceiver() {
    uint8_t index = 0;
    char command[MESSAGE_LENGTH_FO] = {0}; // Empty command array
    uint8_t start = 0;
     a26:	f1 2c       	mov	r15, r1
 * and executes the appropriate command. If an error occurs or a warning is set, 
 * it handles the corresponding state. The function handles both normal command 
 * processing and error recovery.
 */
void FOReceiver() {
    uint8_t index = 0;
     a28:	00 e0       	ldi	r16, 0x00	; 0
     a2a:	03 c0       	rjmp	.+6      	; 0xa32 <FOReceiver+0x38>
            } else if (index < MESSAGE_LENGTH_FO) {
                command[index++] = c; // Store received character in command array
            }
        }
        if (c == '<') { // If received data start symbol
            start = 1;
     a2c:	ff 24       	eor	r15, r15
     a2e:	f3 94       	inc	r15
            index = 0;
     a30:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t timeout = 0;
	SensorData.FO_lost_signal_fault = false;// usart1 while loop exit
	SensorData.FO_lost_connecton_fault = false; // while lop exit below

    while (1) {
        char c = USART1_readChar(); // Reading a character from USART
     a32:	0e 94 a5 0b 	call	0x174a	; 0x174a <USART1_readChar>

		if(SensorData.FO_lost_signal_fault){
     a36:	90 91 b3 65 	lds	r25, 0x65B3	; 0x8065b3 <__data_end+0x11>
     a3a:	99 23       	and	r25, r25
     a3c:	39 f0       	breq	.+14     	; 0xa4c <FOReceiver+0x52>
			if (++timeout == CountForError_FO) { // Timeout condition if usart1 reading is halted
     a3e:	1f 5f       	subi	r17, 0xFF	; 255
     a40:	13 30       	cpi	r17, 0x03	; 3
     a42:	21 f4       	brne	.+8      	; 0xa4c <FOReceiver+0x52>
				SensorData.FO_lost_connecton_fault = true;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 b5 65 	sts	0x65B5, r24	; 0x8065b5 <__data_end+0x13>
				break;
     a4a:	2c c0       	rjmp	.+88     	; 0xaa4 <FOReceiver+0xaa>
			}
		}
        if (start) {
     a4c:	ff 20       	and	r15, r15
     a4e:	39 f1       	breq	.+78     	; 0xa9e <FOReceiver+0xa4>
			
            if (c == '>') { // If received data end symbol			
     a50:	8e 33       	cpi	r24, 0x3E	; 62
     a52:	d9 f4       	brne	.+54     	; 0xa8a <FOReceiver+0x90>
				start = 0;
				command[index] = '\0';
     a54:	e1 e0       	ldi	r30, 0x01	; 1
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	ec 0f       	add	r30, r28
     a5a:	fd 1f       	adc	r31, r29
     a5c:	e0 0f       	add	r30, r16
     a5e:	f1 1d       	adc	r31, r1
     a60:	10 82       	st	Z, r1
				index = 0;
				if (strcmp(command, SensorData.FreshDataPack) != 0){ //only if message is different
     a62:	69 eb       	ldi	r22, 0xB9	; 185
     a64:	75 e6       	ldi	r23, 0x65	; 101
     a66:	ce 01       	movw	r24, r28
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	0e 94 ba 12 	call	0x2574	; 0x2574 <strcmp>
     a6e:	89 2b       	or	r24, r25
     a70:	21 f0       	breq	.+8      	; 0xa7a <FOReceiver+0x80>
					FODataSplitter(command); // Execute the received command //comment when testing lines below
     a72:	ce 01       	movw	r24, r28
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <FODataSplitter>
				}
				strcpy(SensorData.FreshDataPack, command); // prevents from same message data splitting
     a7a:	be 01       	movw	r22, r28
     a7c:	6f 5f       	subi	r22, 0xFF	; 255
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	89 eb       	ldi	r24, 0xB9	; 185
     a82:	95 e6       	ldi	r25, 0x65	; 101
     a84:	0e 94 c3 12 	call	0x2586	; 0x2586 <strcpy>
				break;
     a88:	0d c0       	rjmp	.+26     	; 0xaa4 <FOReceiver+0xaa>
            } else if (index < MESSAGE_LENGTH_FO) {
     a8a:	01 31       	cpi	r16, 0x11	; 17
     a8c:	40 f4       	brcc	.+16     	; 0xa9e <FOReceiver+0xa4>
                command[index++] = c; // Store received character in command array
     a8e:	e1 e0       	ldi	r30, 0x01	; 1
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	ec 0f       	add	r30, r28
     a94:	fd 1f       	adc	r31, r29
     a96:	e0 0f       	add	r30, r16
     a98:	f1 1d       	adc	r31, r1
     a9a:	80 83       	st	Z, r24
     a9c:	0f 5f       	subi	r16, 0xFF	; 255
            }
        }
        if (c == '<') { // If received data start symbol
     a9e:	8c 33       	cpi	r24, 0x3C	; 60
     aa0:	41 f6       	brne	.-112    	; 0xa32 <FOReceiver+0x38>
     aa2:	c4 cf       	rjmp	.-120    	; 0xa2c <FOReceiver+0x32>
            start = 1;
            index = 0;
        }
    }
}
     aa4:	61 96       	adiw	r28, 0x11	; 17
     aa6:	cd bf       	out	0x3d, r28	; 61
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	08 95       	ret

00000ab6 <GPIO_init>:

#include "Settings.h"

void GPIO_init(){
    // Configure USART0 and USART1 pin routing
    PORTMUX.USARTROUTEA = PORTMUX_USART0_ALT1_gc | PORTMUX_USART1_ALT2_gc; // Set USART0 to alternative pins set 1, USART1 to alternative pins set 2
     ab6:	e0 ee       	ldi	r30, 0xE0	; 224
     ab8:	f5 e0       	ldi	r31, 0x05	; 5
     aba:	81 e1       	ldi	r24, 0x11	; 17
     abc:	82 83       	std	Z+2, r24	; 0x02
    PORTMUX.TWIROUTEA = PORTMUX_TWI0_DEFAULT_gc; // Set TWI0 to default pins
     abe:	16 82       	std	Z+6, r1	; 0x06
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;
     ac0:	83 e0       	ldi	r24, 0x03	; 3
     ac2:	87 83       	std	Z+7, r24	; 0x07
	PORTMUX.TCDROUTEA = PORTMUX_TCD0_ALT2_gc; ///< Select alternative WOC pin variant 2
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	81 87       	std	Z+9, r24	; 0x09


    // Configure Port A (PA) for RX LED, I2C SDA, SCL, USART0 TX, TX LED and XDIR
    PORTA.DIRSET = PIN2_bm | PIN3_bm | PIN4_bm | PIN6_bm | PIN7_bm; // Set PA2, PA3, PA4, PA7 as output (RX LED, I2C SDA, SCL, USART0 TX, TX LED, XDIR)
     ac8:	e0 e0       	ldi	r30, 0x00	; 0
     aca:	f4 e0       	ldi	r31, 0x04	; 4
     acc:	8c ed       	ldi	r24, 0xDC	; 220
     ace:	81 83       	std	Z+1, r24	; 0x01
    PORTA.DIRCLR = PIN1_bm | PIN5_bm; // Set  PA1 as Joystick button,  PA5 as input (USART0 RX)
     ad0:	82 e2       	ldi	r24, 0x22	; 34
     ad2:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA1 (Joystick button)
     ad4:	88 e0       	ldi	r24, 0x08	; 8
     ad6:	81 8b       	std	Z+17, r24	; 0x11
    PORTA.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA4 (I2C SCL)
     ad8:	84 8b       	std	Z+20, r24	; 0x14
    PORTA.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PA5 (USART0 RX)
     ada:	85 8b       	std	Z+21, r24	; 0x15

    // Configure ADC pins for Joystick x and y axis
    PORTC.PIN1CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC1 (X axis)
     adc:	e0 e4       	ldi	r30, 0x40	; 64
     ade:	f4 e0       	ldi	r31, 0x04	; 4
     ae0:	91 89       	ldd	r25, Z+17	; 0x11
     ae2:	98 7f       	andi	r25, 0xF8	; 248
     ae4:	91 8b       	std	Z+17, r25	; 0x11
    PORTC.PIN1CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC1
     ae6:	91 89       	ldd	r25, Z+17	; 0x11
     ae8:	94 60       	ori	r25, 0x04	; 4
     aea:	91 8b       	std	Z+17, r25	; 0x11
    PORTC.PIN1CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC1
     aec:	91 89       	ldd	r25, Z+17	; 0x11
     aee:	97 7f       	andi	r25, 0xF7	; 247
     af0:	91 8b       	std	Z+17, r25	; 0x11

    PORTC.PIN2CTRL &= ~PORT_ISC_gm; // Disable interrupt sense for PC2 (Y axis)
     af2:	92 89       	ldd	r25, Z+18	; 0x12
     af4:	98 7f       	andi	r25, 0xF8	; 248
     af6:	92 8b       	std	Z+18, r25	; 0x12
    PORTC.PIN2CTRL |= PORT_ISC_INPUT_DISABLE_gc; // Disable input sense for PC2
     af8:	92 89       	ldd	r25, Z+18	; 0x12
     afa:	94 60       	ori	r25, 0x04	; 4
     afc:	92 8b       	std	Z+18, r25	; 0x12
    PORTC.PIN2CTRL &= ~PORT_PULLUPEN_bm; // Disable pull-up for PC2
     afe:	92 89       	ldd	r25, Z+18	; 0x12
     b00:	97 7f       	andi	r25, 0xF7	; 247
     b02:	92 8b       	std	Z+18, r25	; 0x12

	PORTC.DIRSET = PIN0_bm; //Set PC0 as RX LED
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	91 83       	std	Z+1, r25	; 0x01

    // Configure Port D (PD) for USART1 TX and RX
    PORTD.DIRSET = PIN2_bm | PIN3_bm | PIN5_bm; //Set PD2 as linear motor disable pin, PD3 as PWM, PD5 as direction
     b08:	9c e2       	ldi	r25, 0x2C	; 44
     b0a:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f0461>
	//PORTD.DIRCLR = PIN4_bm; //Linear motor driver TLE9201SG error flag pin

	PORTF.DIRSET = PIN1_bm | PIN2_bm | PIN3_bm; //Set PF1 as enable, PF2 as pulse, PIN3 as direction signals output for HBS86 driver
     b0e:	e0 ea       	ldi	r30, 0xA0	; 160
     b10:	f4 e0       	ldi	r31, 0x04	; 4
     b12:	9e e0       	ldi	r25, 0x0E	; 14
     b14:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRCLR = PIN4_bm | PIN5_bm; //Set PF4 as alarm and PF5 as Pend signals inputs from HBS86 driver
     b16:	90 e3       	ldi	r25, 0x30	; 48
     b18:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PF4
     b1a:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm; // Enable pull-up for PF5
     b1c:	85 8b       	std	Z+21, r24	; 0x15
     b1e:	08 95       	ret

00000b20 <I2C_init>:
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal to release the bus
    return data;
}
     b20:	e0 e0       	ldi	r30, 0x00	; 0
     b22:	f9 e0       	ldi	r31, 0x09	; 9
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	80 83       	st	Z, r24
     b28:	85 e0       	ldi	r24, 0x05	; 5
     b2a:	86 83       	std	Z+6, r24	; 0x06
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	83 83       	std	Z+3, r24	; 0x03
     b30:	85 83       	std	Z+5, r24	; 0x05
     b32:	08 95       	ret

00000b34 <TransmitAdd>:
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	88 0f       	add	r24, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	86 2b       	or	r24, r22
     b3c:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7f0907>
     b40:	48 e8       	ldi	r20, 0x88	; 136
     b42:	53 e1       	ldi	r21, 0x13	; 19
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	09 c0       	rjmp	.+18     	; 0xb5c <TransmitAdd+0x28>
     b4a:	41 50       	subi	r20, 0x01	; 1
     b4c:	51 09       	sbc	r21, r1
     b4e:	61 09       	sbc	r22, r1
     b50:	71 09       	sbc	r23, r1
     b52:	21 f4       	brne	.+8      	; 0xb5c <TransmitAdd+0x28>
     b54:	83 e0       	ldi	r24, 0x03	; 3
     b56:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     b5a:	05 c0       	rjmp	.+10     	; 0xb66 <TransmitAdd+0x32>
     b5c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b60:	80 7c       	andi	r24, 0xC0	; 192
     b62:	99 f3       	breq	.-26     	; 0xb4a <TransmitAdd+0x16>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b6a:	94 fd       	sbrc	r25, 4
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b72:	9c 70       	andi	r25, 0x0C	; 12
     b74:	09 f0       	breq	.+2      	; 0xb78 <TransmitAdd+0x44>
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	88 23       	and	r24, r24
     b7a:	19 f0       	breq	.+6      	; 0xb82 <TransmitAdd+0x4e>
     b7c:	93 e0       	ldi	r25, 0x03	; 3
     b7e:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     b82:	80 93 ca 65 	sts	0x65CA, r24	; 0x8065ca <I2C>
     b86:	08 95       	ret

00000b88 <TransmitByte>:
     b88:	28 2f       	mov	r18, r24
     b8a:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b8e:	94 fd       	sbrc	r25, 4
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <TransmitByte+0xe>
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <TransmitByte+0x10>
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     b9c:	9c 70       	andi	r25, 0x0C	; 12
     b9e:	09 f0       	breq	.+2      	; 0xba2 <TransmitByte+0x1a>
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	88 23       	and	r24, r24
     ba4:	19 f0       	breq	.+6      	; 0xbac <TransmitByte+0x24>
     ba6:	93 e0       	ldi	r25, 0x03	; 3
     ba8:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     bac:	81 11       	cpse	r24, r1
     bae:	14 c0       	rjmp	.+40     	; 0xbd8 <TransmitByte+0x50>
     bb0:	20 93 08 09 	sts	0x0908, r18	; 0x800908 <__TEXT_REGION_LENGTH__+0x7f0908>
     bb4:	48 e8       	ldi	r20, 0x88	; 136
     bb6:	53 e1       	ldi	r21, 0x13	; 19
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	09 c0       	rjmp	.+18     	; 0xbd0 <TransmitByte+0x48>
     bbe:	41 50       	subi	r20, 0x01	; 1
     bc0:	51 09       	sbc	r21, r1
     bc2:	61 09       	sbc	r22, r1
     bc4:	71 09       	sbc	r23, r1
     bc6:	21 f4       	brne	.+8      	; 0xbd0 <TransmitByte+0x48>
     bc8:	83 e0       	ldi	r24, 0x03	; 3
     bca:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7f0904>
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <TransmitByte+0x50>
     bd0:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7f0905>
     bd4:	96 ff       	sbrs	r25, 6
     bd6:	f3 cf       	rjmp	.-26     	; 0xbbe <TransmitByte+0x36>
     bd8:	80 93 ca 65 	sts	0x65CA, r24	; 0x8065ca <I2C>
     bdc:	08 95       	ret

00000bde <WriteToReg>:
 * @param reg Register address to write to.
 * @param data Data to write to the register.
 * 
 * This function writes the data to a specific register of an I2C device.
 */
void WriteToReg(uint8_t addr, uint8_t reg, uint8_t data) {
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	c6 2f       	mov	r28, r22
     be4:	d4 2f       	mov	r29, r20
    if (!TransmitAdd(addr, WRITE)) { // Transmit address for write
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	0e 94 9a 05 	call	0xb34	; 0xb34 <TransmitAdd>
     bec:	81 11       	cpse	r24, r1
     bee:	08 c0       	rjmp	.+16     	; 0xc00 <WriteToReg+0x22>
        if (!TransmitByte(reg)) { // Write register address
     bf0:	8c 2f       	mov	r24, r28
     bf2:	0e 94 c4 05 	call	0xb88	; 0xb88 <TransmitByte>
     bf6:	81 11       	cpse	r24, r1
     bf8:	03 c0       	rjmp	.+6      	; 0xc00 <WriteToReg+0x22>
            TransmitByte(data); // Write the data with STOP
     bfa:	8d 2f       	mov	r24, r29
     bfc:	0e 94 c4 05 	call	0xb88	; 0xb88 <TransmitByte>
        }
    }

    TWI0.MCTRLB |= TWI_MCMD_STOP_gc; // Send STOP signal
     c00:	e0 e0       	ldi	r30, 0x00	; 0
     c02:	f9 e0       	ldi	r31, 0x09	; 9
     c04:	84 81       	ldd	r24, Z+4	; 0x04
     c06:	83 60       	ori	r24, 0x03	; 3
     c08:	84 83       	std	Z+4, r24	; 0x04
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	08 95       	ret

00000c10 <ReadButton>:
 */ 
#include "Settings.h"
#include "JoystickVar.h"

uint8_t ReadButton(){
	return !(PORTA.IN & PIN1_bm);
     c10:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f0408>
     c14:	86 95       	lsr	r24
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	89 27       	eor	r24, r25
}
     c1a:	81 70       	andi	r24, 0x01	; 1
     c1c:	08 95       	ret

00000c1e <LatchSwitcher>:

void LatchSwitcher(){
	if (ReadButton()){
     c1e:	0e 94 08 06 	call	0xc10	; 0xc10 <ReadButton>
     c22:	88 23       	and	r24, r24
     c24:	61 f0       	breq	.+24     	; 0xc3e <LatchSwitcher+0x20>
		if(!Joystick.LastState){
     c26:	80 91 d0 65 	lds	r24, 0x65D0	; 0x8065d0 <Joystick+0x5>
     c2a:	81 11       	cpse	r24, r1
     c2c:	0d c0       	rjmp	.+26     	; 0xc48 <LatchSwitcher+0x2a>
			Joystick.LatchSwitch ^= 1;
     c2e:	eb ec       	ldi	r30, 0xCB	; 203
     c30:	f5 e6       	ldi	r31, 0x65	; 101
     c32:	86 81       	ldd	r24, Z+6	; 0x06
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	89 27       	eor	r24, r25
     c38:	86 83       	std	Z+6, r24	; 0x06
			Joystick.LastState = true;
     c3a:	95 83       	std	Z+5, r25	; 0x05
     c3c:	08 95       	ret
		}
	}
	else{
		if(Joystick.LastState){
     c3e:	80 91 d0 65 	lds	r24, 0x65D0	; 0x8065d0 <Joystick+0x5>
     c42:	81 11       	cpse	r24, r1
			Joystick.LastState = false;
     c44:	10 92 d0 65 	sts	0x65D0, r1	; 0x8065d0 <Joystick+0x5>
     c48:	08 95       	ret

00000c4a <ReadJoystickValues>:
		}
	}
}

void ReadJoystickValues(){
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
	ADC0_SetupJoystick(Joystick_X_axis_CH);
     c52:	8e e1       	ldi	r24, 0x1E	; 30
     c54:	0e 94 89 02 	call	0x512	; 0x512 <ADC0_SetupJoystick>
	Joystick.X_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps; // 5 steps total: -2,-1,0,1,2 (4096/1000 = 4,096)
     c58:	0e 94 b5 02 	call	0x56a	; 0x56a <ADC0_read>
     c5c:	98 50       	subi	r25, 0x08	; 8
     c5e:	04 ef       	ldi	r16, 0xF4	; 244
     c60:	11 e0       	ldi	r17, 0x01	; 1
     c62:	b8 01       	movw	r22, r16
     c64:	0e 94 cb 10 	call	0x2196	; 0x2196 <__divmodhi4>
     c68:	cb ec       	ldi	r28, 0xCB	; 203
     c6a:	d5 e6       	ldi	r29, 0x65	; 101
     c6c:	68 83       	st	Y, r22
     c6e:	79 83       	std	Y+1, r23	; 0x01
	ADC0_SetupJoystick(Joystick_Y_axis_CH);
     c70:	8d e1       	ldi	r24, 0x1D	; 29
     c72:	0e 94 89 02 	call	0x512	; 0x512 <ADC0_SetupJoystick>
	Joystick.Y_Axis = ((int16_t)ADC0_read()-2048)/Joystick_steps;
     c76:	0e 94 b5 02 	call	0x56a	; 0x56a <ADC0_read>
     c7a:	98 50       	subi	r25, 0x08	; 8
     c7c:	b8 01       	movw	r22, r16
     c7e:	0e 94 cb 10 	call	0x2196	; 0x2196 <__divmodhi4>
     c82:	6a 83       	std	Y+2, r22	; 0x02
     c84:	7b 83       	std	Y+3, r23	; 0x03
	Joystick.Button = ReadButton();
     c86:	0e 94 08 06 	call	0xc10	; 0xc10 <ReadButton>
     c8a:	8c 83       	std	Y+4, r24	; 0x04
}
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	08 95       	ret

00000c96 <SelectWindow>:


void SelectWindow(){
	if(Joystick.Y_Axis >= 1)
     c96:	80 91 cd 65 	lds	r24, 0x65CD	; 0x8065cd <Joystick+0x2>
     c9a:	90 91 ce 65 	lds	r25, 0x65CE	; 0x8065ce <Joystick+0x3>
     c9e:	18 16       	cp	r1, r24
     ca0:	19 06       	cpc	r1, r25
     ca2:	1c f4       	brge	.+6      	; 0xcaa <SelectWindow+0x14>
		show.window = 1;
     ca4:	21 e0       	ldi	r18, 0x01	; 1
     ca6:	20 93 f6 65 	sts	0x65F6, r18	; 0x8065f6 <show>
	if(Joystick.Y_Axis <= -1)
     caa:	99 23       	and	r25, r25
     cac:	14 f4       	brge	.+4      	; 0xcb2 <SelectWindow+0x1c>
		show.window = 0;
     cae:	10 92 f6 65 	sts	0x65F6, r1	; 0x8065f6 <show>
     cb2:	08 95       	ret

00000cb4 <LinearMotor_enable>:
	PORTD.OUTSET = PIN2_bm; //set output disabled for TLE9201SG
};

bool Read_LinearMotor_EF(){ // false if driver has a error (overheat, linear motor stuck and so on)
	return PORTD.IN & PIN4_bm;
}
     cb4:	80 91 d6 65 	lds	r24, 0x65D6	; 0x8065d6 <LinearMotor+0x3>
     cb8:	81 11       	cpse	r24, r1
     cba:	0b c0       	rjmp	.+22     	; 0xcd2 <LinearMotor_enable+0x1e>
     cbc:	84 e0       	ldi	r24, 0x04	; 4
     cbe:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
     cc2:	88 e2       	ldi	r24, 0x28	; 40
     cc4:	8a 95       	dec	r24
     cc6:	f1 f7       	brne	.-4      	; 0xcc4 <LinearMotor_enable+0x10>
     cc8:	e3 ed       	ldi	r30, 0xD3	; 211
     cca:	f5 e6       	ldi	r31, 0x65	; 101
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	83 83       	std	Z+3, r24	; 0x03
     cd0:	14 82       	std	Z+4, r1	; 0x04
     cd2:	08 95       	ret

00000cd4 <LinearMotor_disable>:
     cd4:	80 91 d7 65 	lds	r24, 0x65D7	; 0x8065d7 <LinearMotor+0x4>
     cd8:	81 11       	cpse	r24, r1
     cda:	0b c0       	rjmp	.+22     	; 0xcf2 <LinearMotor_disable+0x1e>
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     ce2:	88 e2       	ldi	r24, 0x28	; 40
     ce4:	8a 95       	dec	r24
     ce6:	f1 f7       	brne	.-4      	; 0xce4 <LinearMotor_disable+0x10>
     ce8:	e3 ed       	ldi	r30, 0xD3	; 211
     cea:	f5 e6       	ldi	r31, 0x65	; 101
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	84 83       	std	Z+4, r24	; 0x04
     cf0:	13 82       	std	Z+3, r1	; 0x03
     cf2:	08 95       	ret

00000cf4 <LinearMotor_start>:
     cf4:	80 91 d4 65 	lds	r24, 0x65D4	; 0x8065d4 <LinearMotor+0x1>
     cf8:	81 11       	cpse	r24, r1
     cfa:	0d c0       	rjmp	.+26     	; 0xd16 <LinearMotor_start+0x22>
     cfc:	e0 e0       	ldi	r30, 0x00	; 0
     cfe:	fa e0       	ldi	r31, 0x0A	; 10
     d00:	81 81       	ldd	r24, Z+1	; 0x01
     d02:	80 61       	ori	r24, 0x10	; 16
     d04:	81 83       	std	Z+1, r24	; 0x01
     d06:	80 81       	ld	r24, Z
     d08:	81 60       	ori	r24, 0x01	; 1
     d0a:	80 83       	st	Z, r24
     d0c:	e3 ed       	ldi	r30, 0xD3	; 211
     d0e:	f5 e6       	ldi	r31, 0x65	; 101
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	81 83       	std	Z+1, r24	; 0x01
     d14:	12 82       	std	Z+2, r1	; 0x02
     d16:	08 95       	ret

00000d18 <LinearMotor_stop>:
     d18:	80 91 d5 65 	lds	r24, 0x65D5	; 0x8065d5 <LinearMotor+0x2>
     d1c:	81 11       	cpse	r24, r1
     d1e:	19 c0       	rjmp	.+50     	; 0xd52 <LinearMotor_stop+0x3a>
     d20:	e0 e0       	ldi	r30, 0x00	; 0
     d22:	fa e0       	ldi	r31, 0x0A	; 10
     d24:	81 81       	ldd	r24, Z+1	; 0x01
     d26:	8f 7e       	andi	r24, 0xEF	; 239
     d28:	81 83       	std	Z+1, r24	; 0x01
     d2a:	80 81       	ld	r24, Z
     d2c:	8e 7f       	andi	r24, 0xFE	; 254
     d2e:	80 83       	st	Z, r24
     d30:	88 e0       	ldi	r24, 0x08	; 8
     d32:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
     d36:	2f ef       	ldi	r18, 0xFF	; 255
     d38:	8e e9       	ldi	r24, 0x9E	; 158
     d3a:	94 e2       	ldi	r25, 0x24	; 36
     d3c:	21 50       	subi	r18, 0x01	; 1
     d3e:	80 40       	sbci	r24, 0x00	; 0
     d40:	90 40       	sbci	r25, 0x00	; 0
     d42:	e1 f7       	brne	.-8      	; 0xd3c <LinearMotor_stop+0x24>
     d44:	00 c0       	rjmp	.+0      	; 0xd46 <LinearMotor_stop+0x2e>
     d46:	00 00       	nop
     d48:	e3 ed       	ldi	r30, 0xD3	; 211
     d4a:	f5 e6       	ldi	r31, 0x65	; 101
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	82 83       	std	Z+2, r24	; 0x02
     d50:	11 82       	std	Z+1, r1	; 0x01
     d52:	08 95       	ret

00000d54 <LinearMotor_set_direction>:
     d54:	cf 93       	push	r28
     d56:	90 91 d3 65 	lds	r25, 0x65D3	; 0x8065d3 <LinearMotor>
     d5a:	98 17       	cp	r25, r24
     d5c:	99 f0       	breq	.+38     	; 0xd84 <LinearMotor_set_direction+0x30>
     d5e:	c8 2f       	mov	r28, r24
     d60:	0e 94 8c 06 	call	0xd18	; 0xd18 <LinearMotor_stop>
     d64:	cc 23       	and	r28, r28
     d66:	21 f0       	breq	.+8      	; 0xd70 <LinearMotor_set_direction+0x1c>
     d68:	80 e2       	ldi	r24, 0x20	; 32
     d6a:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     d6e:	03 c0       	rjmp	.+6      	; 0xd76 <LinearMotor_set_direction+0x22>
     d70:	80 e2       	ldi	r24, 0x20	; 32
     d72:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f0466>
     d76:	88 e2       	ldi	r24, 0x28	; 40
     d78:	8a 95       	dec	r24
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <LinearMotor_set_direction+0x24>
     d7c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LinearMotor_start>
     d80:	c0 93 d3 65 	sts	0x65D3, r28	; 0x8065d3 <LinearMotor>
     d84:	cf 91       	pop	r28
     d86:	08 95       	ret

00000d88 <LinearMotor_init>:
     d88:	62 e3       	ldi	r22, 0x32	; 50
     d8a:	80 e2       	ldi	r24, 0x20	; 32
     d8c:	9e e4       	ldi	r25, 0x4E	; 78
     d8e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <TCA0_init_linear_PWM>
     d92:	84 e0       	ldi	r24, 0x04	; 4
     d94:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f0465>
     d98:	08 95       	ret

00000d9a <Read_LinearMotor_Voltage>:

uint16_t Read_LinearMotor_Voltage(){
	ADC0_SetupLinearMotor(0);
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	0e 94 8f 02 	call	0x51e	; 0x51e <ADC0_SetupLinearMotor>
	return (ADC0_read() * 0.075) * LinearMotor_Voltage_Compensation_koef; // same as ADC read/2000 * 30V (300k) / 2V(AMC1131 full range) )
     da0:	0e 94 b5 02 	call	0x56a	; 0x56a <ADC0_read>
     da4:	bc 01       	movw	r22, r24
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__floatunsisf>
     dae:	2a e9       	ldi	r18, 0x9A	; 154
     db0:	39 e9       	ldi	r19, 0x99	; 153
     db2:	49 e9       	ldi	r20, 0x99	; 153
     db4:	5d e3       	ldi	r21, 0x3D	; 61
     db6:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__mulsf3>
     dba:	23 e8       	ldi	r18, 0x83	; 131
     dbc:	3d ed       	ldi	r19, 0xDD	; 221
     dbe:	4c e7       	ldi	r20, 0x7C	; 124
     dc0:	5f e3       	ldi	r21, 0x3F	; 63
     dc2:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__mulsf3>
     dc6:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__fixunssfsi>
}
     dca:	cb 01       	movw	r24, r22
     dcc:	08 95       	ret

00000dce <Read_LinearMotor_Current>:

int16_t Read_LinearMotor_Current(){
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
	ADC0_SetupLinearMotor(1);
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	0e 94 8f 02 	call	0x51e	; 0x51e <ADC0_SetupLinearMotor>
	return ((int16_t)ADC0_read() - (int16_t)Read_MCU_Voltge())/4;
     dd8:	0e 94 b5 02 	call	0x56a	; 0x56a <ADC0_read>
     ddc:	ec 01       	movw	r28, r24
     dde:	0e 94 c9 02 	call	0x592	; 0x592 <Read_MCU_Voltge>
     de2:	9e 01       	movw	r18, r28
     de4:	28 1b       	sub	r18, r24
     de6:	39 0b       	sbc	r19, r25
     de8:	c9 01       	movw	r24, r18
     dea:	99 23       	and	r25, r25
     dec:	0c f4       	brge	.+2      	; 0xdf0 <Read_LinearMotor_Current+0x22>
     dee:	03 96       	adiw	r24, 0x03	; 3
     df0:	95 95       	asr	r25
     df2:	87 95       	ror	r24
     df4:	95 95       	asr	r25
     df6:	87 95       	ror	r24
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <main>:

#include "Settings.h"

int main(void)
{
    CLOCK_XOSCHF_clock_init();
     dfe:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <CLOCK_XOSCHF_clock_init>
    GPIO_init();
     e02:	0e 94 5b 05 	call	0xab6	; 0xab6 <GPIO_init>
	LinearMotor_init();
     e06:	0e 94 c4 06 	call	0xd88	; 0xd88 <LinearMotor_init>
	Stepper_init();
     e0a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <Stepper_init>
    I2C_init();
     e0e:	0e 94 90 05 	call	0xb20	; 0xb20 <I2C_init>
    ADC0_init();
     e12:	0e 94 81 02 	call	0x502	; 0x502 <ADC0_init>
    USART0_init();
     e16:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <USART0_init>
    USART1_init();
     e1a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <USART1_init>
    screen_init();
     e1e:	0e 94 c1 08 	call	0x1182	; 0x1182 <screen_init>
    screen_clear();
     e22:	0e 94 08 09 	call	0x1210	; 0x1210 <screen_clear>
     e26:	2f ef       	ldi	r18, 0xFF	; 255
     e28:	88 ef       	ldi	r24, 0xF8	; 248
     e2a:	95 e1       	ldi	r25, 0x15	; 21
     e2c:	21 50       	subi	r18, 0x01	; 1
     e2e:	80 40       	sbci	r24, 0x00	; 0
     e30:	90 40       	sbci	r25, 0x00	; 0
     e32:	e1 f7       	brne	.-8      	; 0xe2c <main+0x2e>
     e34:	00 c0       	rjmp	.+0      	; 0xe36 <main+0x38>
     e36:	00 00       	nop
	_delay_ms(300); //Let to boot Top controller
	bool JustBoot = false;
     e38:	c0 e0       	ldi	r28, 0x00	; 0
    while (1) 
    {
		
		RS485Receiver(); //RS485 communication
     e3a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <RS485Receiver>
		FOReceiver(); // Received Fiber optic data
     e3e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <FOReceiver>
		if(JustBoot)
     e42:	c1 11       	cpse	r28, r1
			work();//Actions with motors
     e44:	0e 94 1d 02 	call	0x43a	; 0x43a <work>
		windows();
     e48:	0e 94 ad 0c 	call	0x195a	; 0x195a <windows>
		JustBoot = true;
     e4c:	c1 e0       	ldi	r28, 0x01	; 1
    }
     e4e:	f5 cf       	rjmp	.-22     	; 0xe3a <main+0x3c>

00000e50 <RS485_Led>:
 */ 
#include "Settings.h"

void RS485_Led(RS485_LED_t LED){

    switch (LED) {
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	51 f0       	breq	.+20     	; 0xe68 <RS485_Led+0x18>
     e54:	28 f0       	brcs	.+10     	; 0xe60 <RS485_Led+0x10>
     e56:	82 30       	cpi	r24, 0x02	; 2
     e58:	59 f0       	breq	.+22     	; 0xe70 <RS485_Led+0x20>
     e5a:	83 30       	cpi	r24, 0x03	; 3
     e5c:	69 f0       	breq	.+26     	; 0xe78 <RS485_Led+0x28>
     e5e:	08 95       	ret
	    case RX_LED_ON:
			PORTC.OUTSET = PIN0_bm;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x7f0445>
		break;
     e66:	08 95       	ret
	    case RX_LED_OFF:
			PORTC.OUTCLR = PIN0_bm;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x7f0446>
		break;
     e6e:	08 95       	ret
	    case TX_LED_ON:
			PORTA.OUTSET = PIN6_bm;
     e70:	80 e4       	ldi	r24, 0x40	; 64
     e72:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7f0405>
		break;
     e76:	08 95       	ret
	    case TX_LED_OFF:
			PORTA.OUTCLR = PIN6_bm;
     e78:	80 e4       	ldi	r24, 0x40	; 64
     e7a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7f0406>
     e7e:	08 95       	ret

00000e80 <RS485DataSplitter>:
 */ 
#include "Settings.h"
#include "RS485USARTVar.h"


void RS485DataSplitter(char *command) {
     e80:	af 92       	push	r10
     e82:	bf 92       	push	r11
     e84:	cf 92       	push	r12
     e86:	df 92       	push	r13
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	a6 97       	sbiw	r28, 0x26	; 38
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	7c 01       	movw	r14, r24
	const uint8_t lengths[] = {4, 4, 4, 2, 1, 3}; //tokens length without crc
     ea0:	86 e0       	ldi	r24, 0x06	; 6
     ea2:	e8 e9       	ldi	r30, 0x98	; 152
     ea4:	f3 e6       	ldi	r31, 0x63	; 99
     ea6:	de 01       	movw	r26, r28
     ea8:	11 96       	adiw	r26, 0x01	; 1
     eaa:	01 90       	ld	r0, Z+
     eac:	0d 92       	st	X+, r0
     eae:	8a 95       	dec	r24
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <RS485DataSplitter+0x2a>
	char temp[MESSAGE_LENGTH_RS485-2]; //data storage

	strncpy(temp, command, MESSAGE_LENGTH_RS485-2); //copy data without crc
     eb2:	42 e1       	ldi	r20, 0x12	; 18
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	b7 01       	movw	r22, r14
     eb8:	ce 01       	movw	r24, r28
     eba:	07 96       	adiw	r24, 0x07	; 7
     ebc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strncpy>
	temp[MESSAGE_LENGTH_RS485-2] = '\0';
     ec0:	19 8e       	std	Y+25, r1	; 0x19

	uint8_t datatocheck[(MESSAGE_LENGTH_RS485-2)/2]={0};
     ec2:	fe 01       	movw	r30, r28
     ec4:	79 96       	adiw	r30, 0x19	; 25
     ec6:	89 e0       	ldi	r24, 0x09	; 9
     ec8:	df 01       	movw	r26, r30
     eca:	1d 92       	st	X+, r1
     ecc:	8a 95       	dec	r24
     ece:	e9 f7       	brne	.-6      	; 0xeca <RS485DataSplitter+0x4a>

	for (uint8_t i = 0; i < (MESSAGE_LENGTH_RS485-2)/2; i++) {
     ed0:	d1 2c       	mov	r13, r1
     ed2:	27 c0       	rjmp	.+78     	; 0xf22 <RS485DataSplitter+0xa2>
		char buf[3] = { temp[i * 2], temp[i * 2 + 1], '\0' }; // du simboliai + '\0'
     ed4:	0d 2d       	mov	r16, r13
     ed6:	10 e0       	ldi	r17, 0x00	; 0
     ed8:	c8 01       	movw	r24, r16
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	e7 e0       	ldi	r30, 0x07	; 7
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	ec 0f       	add	r30, r28
     ee4:	fd 1f       	adc	r31, r29
     ee6:	e8 0f       	add	r30, r24
     ee8:	f9 1f       	adc	r31, r25
     eea:	20 81       	ld	r18, Z
     eec:	2a a3       	std	Y+34, r18	; 0x22
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	e7 e0       	ldi	r30, 0x07	; 7
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	ec 0f       	add	r30, r28
     ef6:	fd 1f       	adc	r31, r29
     ef8:	e8 0f       	add	r30, r24
     efa:	f9 1f       	adc	r31, r25
     efc:	80 81       	ld	r24, Z
     efe:	8b a3       	std	Y+35, r24	; 0x23
     f00:	1c a2       	std	Y+36, r1	; 0x24
		datatocheck[i] = (uint8_t)strtol(buf, NULL, 16);
     f02:	40 e1       	ldi	r20, 0x10	; 16
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	ce 01       	movw	r24, r28
     f0c:	82 96       	adiw	r24, 0x22	; 34
     f0e:	0e 94 92 11 	call	0x2324	; 0x2324 <strtol>
     f12:	e9 e1       	ldi	r30, 0x19	; 25
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	ec 0f       	add	r30, r28
     f18:	fd 1f       	adc	r31, r29
     f1a:	e0 0f       	add	r30, r16
     f1c:	f1 1f       	adc	r31, r17
     f1e:	60 83       	st	Z, r22
	strncpy(temp, command, MESSAGE_LENGTH_RS485-2); //copy data without crc
	temp[MESSAGE_LENGTH_RS485-2] = '\0';

	uint8_t datatocheck[(MESSAGE_LENGTH_RS485-2)/2]={0};

	for (uint8_t i = 0; i < (MESSAGE_LENGTH_RS485-2)/2; i++) {
     f20:	d3 94       	inc	r13
     f22:	b8 e0       	ldi	r27, 0x08	; 8
     f24:	bd 15       	cp	r27, r13
     f26:	b0 f6       	brcc	.-84     	; 0xed4 <RS485DataSplitter+0x54>
		char buf[3] = { temp[i * 2], temp[i * 2 + 1], '\0' }; // du simboliai + '\0'
		datatocheck[i] = (uint8_t)strtol(buf, NULL, 16);
	}
	strncpy(temp, command + (MESSAGE_LENGTH_RS485-2), 2); //copy only crc
     f28:	42 e0       	ldi	r20, 0x02	; 2
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	b7 01       	movw	r22, r14
     f2e:	6e 5e       	subi	r22, 0xEE	; 238
     f30:	7f 4f       	sbci	r23, 0xFF	; 255
     f32:	ce 01       	movw	r24, r28
     f34:	07 96       	adiw	r24, 0x07	; 7
     f36:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <strncpy>
	temp[2] = '\0';
     f3a:	19 86       	std	Y+9, r1	; 0x09

	uint8_t crctocheck = (uint8_t)strtol(temp, NULL, 16); //convert char to int
     f3c:	40 e1       	ldi	r20, 0x10	; 16
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	ce 01       	movw	r24, r28
     f46:	07 96       	adiw	r24, 0x07	; 7
     f48:	0e 94 92 11 	call	0x2324	; 0x2324 <strtol>

	if(verify_crc8_cdma2000_v2(datatocheck, crctocheck)){ //if data valid update it
     f4c:	ce 01       	movw	r24, r28
     f4e:	49 96       	adiw	r24, 0x19	; 25
     f50:	0e 94 7f 03 	call	0x6fe	; 0x6fe <verify_crc8_cdma2000_v2>
     f54:	81 11       	cpse	r24, r1
     f56:	9b c0       	rjmp	.+310    	; 0x108e <RS485DataSplitter+0x20e>
     f58:	a3 c0       	rjmp	.+326    	; 0x10a0 <RS485DataSplitter+0x220>
		//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
		const char *p = command;

		for (uint8_t i = 0; i < 6; i++) {
			char token[5] = {0}; //longest token length + 1
     f5a:	5e 01       	movw	r10, r28
     f5c:	e2 e2       	ldi	r30, 0x22	; 34
     f5e:	ae 0e       	add	r10, r30
     f60:	b1 1c       	adc	r11, r1
     f62:	85 e0       	ldi	r24, 0x05	; 5
     f64:	d5 01       	movw	r26, r10
     f66:	1d 92       	st	X+, r1
     f68:	8a 95       	dec	r24
     f6a:	e9 f7       	brne	.-6      	; 0xf66 <RS485DataSplitter+0xe6>

			memcpy(token, p, lengths[i]);
     f6c:	e1 e0       	ldi	r30, 0x01	; 1
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	ec 0f       	add	r30, r28
     f72:	fd 1f       	adc	r31, r29
     f74:	e1 0f       	add	r30, r17
     f76:	f1 1d       	adc	r31, r1
     f78:	c0 80       	ld	r12, Z
     f7a:	d1 2c       	mov	r13, r1
     f7c:	a6 01       	movw	r20, r12
     f7e:	b7 01       	movw	r22, r14
     f80:	c5 01       	movw	r24, r10
     f82:	0e 94 b1 12 	call	0x2562	; 0x2562 <memcpy>
			token[lengths[i]] = '\0';
     f86:	f5 01       	movw	r30, r10
     f88:	ec 0d       	add	r30, r12
     f8a:	fd 1d       	adc	r31, r13
     f8c:	10 82       	st	Z, r1

			switch (i) {
     f8e:	12 30       	cpi	r17, 0x02	; 2
     f90:	09 f4       	brne	.+2      	; 0xf94 <RS485DataSplitter+0x114>
     f92:	3f c0       	rjmp	.+126    	; 0x1012 <RS485DataSplitter+0x192>
     f94:	28 f4       	brcc	.+10     	; 0xfa0 <RS485DataSplitter+0x120>
     f96:	11 23       	and	r17, r17
     f98:	61 f0       	breq	.+24     	; 0xfb2 <RS485DataSplitter+0x132>
     f9a:	11 30       	cpi	r17, 0x01	; 1
     f9c:	11 f1       	breq	.+68     	; 0xfe2 <RS485DataSplitter+0x162>
     f9e:	73 c0       	rjmp	.+230    	; 0x1086 <RS485DataSplitter+0x206>
     fa0:	14 30       	cpi	r17, 0x04	; 4
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <RS485DataSplitter+0x126>
     fa4:	59 c0       	rjmp	.+178    	; 0x1058 <RS485DataSplitter+0x1d8>
     fa6:	08 f4       	brcc	.+2      	; 0xfaa <RS485DataSplitter+0x12a>
     fa8:	4c c0       	rjmp	.+152    	; 0x1042 <RS485DataSplitter+0x1c2>
     faa:	15 30       	cpi	r17, 0x05	; 5
     fac:	09 f4       	brne	.+2      	; 0xfb0 <RS485DataSplitter+0x130>
     fae:	5f c0       	rjmp	.+190    	; 0x106e <RS485DataSplitter+0x1ee>
     fb0:	6a c0       	rjmp	.+212    	; 0x1086 <RS485DataSplitter+0x206>
				case 0: WSData.azimuth   = (uint16_t)strtol(token, NULL, 16) / Angle_Precizion; break;
     fb2:	40 e1       	ldi	r20, 0x10	; 16
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	ce 01       	movw	r24, r28
     fbc:	82 96       	adiw	r24, 0x22	; 34
     fbe:	0e 94 92 11 	call	0x2324	; 0x2324 <strtol>
     fc2:	9b 01       	movw	r18, r22
     fc4:	36 95       	lsr	r19
     fc6:	27 95       	ror	r18
     fc8:	36 95       	lsr	r19
     fca:	27 95       	ror	r18
     fcc:	ab e7       	ldi	r26, 0x7B	; 123
     fce:	b4 e1       	ldi	r27, 0x14	; 20
     fd0:	0e 94 20 11 	call	0x2240	; 0x2240 <__umulhisi3>
     fd4:	96 95       	lsr	r25
     fd6:	87 95       	ror	r24
     fd8:	80 93 de 65 	sts	0x65DE, r24	; 0x8065de <WSData>
     fdc:	90 93 df 65 	sts	0x65DF, r25	; 0x8065df <WSData+0x1>
     fe0:	52 c0       	rjmp	.+164    	; 0x1086 <RS485DataSplitter+0x206>
				case 1: WSData.elevation     = (uint16_t)strtol(token, NULL, 16) / Angle_Precizion; break;
     fe2:	40 e1       	ldi	r20, 0x10	; 16
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	ce 01       	movw	r24, r28
     fec:	82 96       	adiw	r24, 0x22	; 34
     fee:	0e 94 92 11 	call	0x2324	; 0x2324 <strtol>
     ff2:	9b 01       	movw	r18, r22
     ff4:	36 95       	lsr	r19
     ff6:	27 95       	ror	r18
     ff8:	36 95       	lsr	r19
     ffa:	27 95       	ror	r18
     ffc:	ab e7       	ldi	r26, 0x7B	; 123
     ffe:	b4 e1       	ldi	r27, 0x14	; 20
    1000:	0e 94 20 11 	call	0x2240	; 0x2240 <__umulhisi3>
    1004:	96 95       	lsr	r25
    1006:	87 95       	ror	r24
    1008:	80 93 e0 65 	sts	0x65E0, r24	; 0x8065e0 <WSData+0x2>
    100c:	90 93 e1 65 	sts	0x65E1, r25	; 0x8065e1 <WSData+0x3>
    1010:	3a c0       	rjmp	.+116    	; 0x1086 <RS485DataSplitter+0x206>
				case 2: WSData.topelevation         = (uint16_t)strtol(token, NULL, 16) / Angle_Precizion; break;
    1012:	40 e1       	ldi	r20, 0x10	; 16
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	ce 01       	movw	r24, r28
    101c:	82 96       	adiw	r24, 0x22	; 34
    101e:	0e 94 92 11 	call	0x2324	; 0x2324 <strtol>
    1022:	9b 01       	movw	r18, r22
    1024:	36 95       	lsr	r19
    1026:	27 95       	ror	r18
    1028:	36 95       	lsr	r19
    102a:	27 95       	ror	r18
    102c:	ab e7       	ldi	r26, 0x7B	; 123
    102e:	b4 e1       	ldi	r27, 0x14	; 20
    1030:	0e 94 20 11 	call	0x2240	; 0x2240 <__umulhisi3>
    1034:	96 95       	lsr	r25
    1036:	87 95       	ror	r24
    1038:	80 93 e2 65 	sts	0x65E2, r24	; 0x8065e2 <WSData+0x4>
    103c:	90 93 e3 65 	sts	0x65E3, r25	; 0x8065e3 <WSData+0x5>
    1040:	22 c0       	rjmp	.+68     	; 0x1086 <RS485DataSplitter+0x206>
				case 3: WSData.windspeed         = (uint8_t)strtol(token, NULL, 16); break;
    1042:	40 e1       	ldi	r20, 0x10	; 16
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	ce 01       	movw	r24, r28
    104c:	82 96       	adiw	r24, 0x22	; 34
    104e:	0e 94 92 11 	call	0x2324	; 0x2324 <strtol>
    1052:	60 93 e4 65 	sts	0x65E4, r22	; 0x8065e4 <WSData+0x6>
    1056:	17 c0       	rjmp	.+46     	; 0x1086 <RS485DataSplitter+0x206>
				case 4: WSData.winddirection       = (uint8_t)strtol(token, NULL, 16); break;
    1058:	40 e1       	ldi	r20, 0x10	; 16
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	ce 01       	movw	r24, r28
    1062:	82 96       	adiw	r24, 0x22	; 34
    1064:	0e 94 92 11 	call	0x2324	; 0x2324 <strtol>
    1068:	60 93 e5 65 	sts	0x65E5, r22	; 0x8065e5 <WSData+0x7>
    106c:	0c c0       	rjmp	.+24     	; 0x1086 <RS485DataSplitter+0x206>
				case 5: WSData.lightlevel	= (uint16_t)strtol(token, NULL, 16); break;
    106e:	40 e1       	ldi	r20, 0x10	; 16
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	ce 01       	movw	r24, r28
    1078:	82 96       	adiw	r24, 0x22	; 34
    107a:	0e 94 92 11 	call	0x2324	; 0x2324 <strtol>
    107e:	60 93 e6 65 	sts	0x65E6, r22	; 0x8065e6 <WSData+0x8>
    1082:	70 93 e7 65 	sts	0x65E7, r23	; 0x8065e7 <WSData+0x9>
			}

			p += lengths[i];
    1086:	ec 0c       	add	r14, r12
    1088:	fd 1c       	adc	r15, r13

	if(verify_crc8_cdma2000_v2(datatocheck, crctocheck)){ //if data valid update it
		//screen_write_formatted_text("data is correct", 1, ALIGN_CENTER);//uncomment if nedded// crc ok
		const char *p = command;

		for (uint8_t i = 0; i < 6; i++) {
    108a:	1f 5f       	subi	r17, 0xFF	; 255
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <RS485DataSplitter+0x210>
    108e:	10 e0       	ldi	r17, 0x00	; 0
    1090:	16 30       	cpi	r17, 0x06	; 6
    1092:	08 f4       	brcc	.+2      	; 0x1096 <RS485DataSplitter+0x216>
    1094:	62 cf       	rjmp	.-316    	; 0xf5a <RS485DataSplitter+0xda>
				case 5: WSData.lightlevel	= (uint16_t)strtol(token, NULL, 16); break;
			}

			p += lengths[i];
		}
		WSData.WS_data_fault = false; //reset error
    1096:	ee ed       	ldi	r30, 0xDE	; 222
    1098:	f5 e6       	ldi	r31, 0x65	; 101
    109a:	14 86       	std	Z+12, r1	; 0x0c
		WSData.WS_lost_signal_fault = false; //reset error
    109c:	13 86       	std	Z+11, r1	; 0x0b
    109e:	03 c0       	rjmp	.+6      	; 0x10a6 <RS485DataSplitter+0x226>

	}
	else{
		//uncomment if nedded
		//screen_write_formatted_text("data is corupted!", 1, ALIGN_CENTER); // bad crc
		WSData.WS_data_fault = true;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 ea 65 	sts	0x65EA, r24	; 0x8065ea <WSData+0xc>
	}

}
    10a6:	a6 96       	adiw	r28, 0x26	; 38
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	bf 90       	pop	r11
    10be:	af 90       	pop	r10
    10c0:	08 95       	ret

000010c2 <RS485Receiver>:

void RS485Receiver() {
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	64 97       	sbiw	r28, 0x14	; 20
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	de bf       	out	0x3e, r29	; 62
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
    10d6:	fe 01       	movw	r30, r28
    10d8:	31 96       	adiw	r30, 0x01	; 1
    10da:	84 e1       	ldi	r24, 0x14	; 20
    10dc:	df 01       	movw	r26, r30
    10de:	1d 92       	st	X+, r1
    10e0:	8a 95       	dec	r24
    10e2:	e9 f7       	brne	.-6      	; 0x10de <RS485Receiver+0x1c>
	uint8_t start = 0;
	uint8_t timeout = 0;
	WSData.WS_lost_connecton_fault = false;
    10e4:	ee ed       	ldi	r30, 0xDE	; 222
    10e6:	f5 e6       	ldi	r31, 0x65	; 101
    10e8:	12 86       	std	Z+10, r1	; 0x0a
	WSData.WS_lost_signal_fault = false;
    10ea:	13 86       	std	Z+11, r1	; 0x0b

void RS485Receiver() {
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
	uint8_t start = 0;
	uint8_t timeout = 0;
    10ec:	10 e0       	ldi	r17, 0x00	; 0
}

void RS485Receiver() {
	uint8_t index = 0;
	char command[MESSAGE_LENGTH_RS485] = {0}; // Empty command array
	uint8_t start = 0;
    10ee:	f1 2c       	mov	r15, r1
	}

}

void RS485Receiver() {
	uint8_t index = 0;
    10f0:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t timeout = 0;
	WSData.WS_lost_connecton_fault = false;
	WSData.WS_lost_signal_fault = false;

	while (1) {
		char c = USART0_readChar(); // Reading a character from USART	
    10f2:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <USART0_readChar>

		if(WSData.WS_lost_signal_fault){
    10f6:	90 91 e9 65 	lds	r25, 0x65E9	; 0x8065e9 <WSData+0xb>
    10fa:	99 23       	and	r25, r25
    10fc:	39 f0       	breq	.+14     	; 0x110c <RS485Receiver+0x4a>
			if (++timeout == CountForError_RS485) { // Timeout condition if usart1 reading is halted
    10fe:	1f 5f       	subi	r17, 0xFF	; 255
    1100:	13 30       	cpi	r17, 0x03	; 3
    1102:	21 f4       	brne	.+8      	; 0x110c <RS485Receiver+0x4a>
				WSData.WS_lost_connecton_fault = true;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	80 93 e8 65 	sts	0x65E8, r24	; 0x8065e8 <WSData+0xa>
				break;
    110a:	26 c0       	rjmp	.+76     	; 0x1158 <RS485Receiver+0x96>
			}
		}		
		if (start) {
    110c:	ff 20       	and	r15, r15
    110e:	d9 f0       	breq	.+54     	; 0x1146 <RS485Receiver+0x84>
			if (c == '}') { // If received data end symbol
    1110:	8d 37       	cpi	r24, 0x7D	; 125
    1112:	79 f4       	brne	.+30     	; 0x1132 <RS485Receiver+0x70>
				RS485_Led(RX_LED_OFF);
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	0e 94 28 07 	call	0xe50	; 0xe50 <RS485_Led>
				start = 0;
				command[index] = '\0';
    111a:	e1 e0       	ldi	r30, 0x01	; 1
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	ec 0f       	add	r30, r28
    1120:	fd 1f       	adc	r31, r29
    1122:	e0 0f       	add	r30, r16
    1124:	f1 1d       	adc	r31, r1
    1126:	10 82       	st	Z, r1
				index = 0;
				RS485DataSplitter(command); // Execute the received command //comment when testing lines below
    1128:	ce 01       	movw	r24, r28
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	0e 94 40 07 	call	0xe80	; 0xe80 <RS485DataSplitter>
				break;
    1130:	13 c0       	rjmp	.+38     	; 0x1158 <RS485Receiver+0x96>
				} else if (index < MESSAGE_LENGTH_RS485) {
    1132:	04 31       	cpi	r16, 0x14	; 20
    1134:	40 f4       	brcc	.+16     	; 0x1146 <RS485Receiver+0x84>
				command[index++] = c; // Store received character in command array
    1136:	e1 e0       	ldi	r30, 0x01	; 1
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	ec 0f       	add	r30, r28
    113c:	fd 1f       	adc	r31, r29
    113e:	e0 0f       	add	r30, r16
    1140:	f1 1d       	adc	r31, r1
    1142:	80 83       	st	Z, r24
    1144:	0f 5f       	subi	r16, 0xFF	; 255
			}
		}
		if (c == '{') { // If received data start symbol
    1146:	8b 37       	cpi	r24, 0x7B	; 123
    1148:	a1 f6       	brne	.-88     	; 0x10f2 <RS485Receiver+0x30>
			start = 1;
			index = 0;
			RS485_Led(RX_LED_ON);
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	0e 94 28 07 	call	0xe50	; 0xe50 <RS485_Led>
				} else if (index < MESSAGE_LENGTH_RS485) {
				command[index++] = c; // Store received character in command array
			}
		}
		if (c == '{') { // If received data start symbol
			start = 1;
    1150:	ff 24       	eor	r15, r15
    1152:	f3 94       	inc	r15
			index = 0;
    1154:	00 e0       	ldi	r16, 0x00	; 0
    1156:	cd cf       	rjmp	.-102    	; 0x10f2 <RS485Receiver+0x30>
			RS485_Led(RX_LED_ON);
		}
	}
    1158:	64 96       	adiw	r28, 0x14	; 20
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	08 95       	ret

0000116a <screen_command>:
    if (contrast > 0x3f) {
        contrast = 0x3f;  ///< Ensure contrast does not exceed maximum
    }
    screen_command(0x81);  ///< Send command to set contrast
    screen_command(contrast);  ///< Set the contrast value
}
    116a:	48 2f       	mov	r20, r24
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	8c e3       	ldi	r24, 0x3C	; 60
    1170:	0e 94 ef 05 	call	0xbde	; 0xbde <WriteToReg>
    1174:	08 95       	ret

00001176 <screen_data>:
    1176:	48 2f       	mov	r20, r24
    1178:	60 e4       	ldi	r22, 0x40	; 64
    117a:	8c e3       	ldi	r24, 0x3C	; 60
    117c:	0e 94 ef 05 	call	0xbde	; 0xbde <WriteToReg>
    1180:	08 95       	ret

00001182 <screen_init>:
    1182:	cf 93       	push	r28
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	8c e3       	ldi	r24, 0x3C	; 60
    1188:	0e 94 9a 05 	call	0xb34	; 0xb34 <TransmitAdd>
    118c:	c0 e0       	ldi	r28, 0x00	; 0
    118e:	08 c0       	rjmp	.+16     	; 0x11a0 <screen_init+0x1e>
    1190:	ec 2f       	mov	r30, r28
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	e7 58       	subi	r30, 0x87	; 135
    1196:	fc 49       	sbci	r31, 0x9C	; 156
    1198:	80 81       	ld	r24, Z
    119a:	0e 94 c4 05 	call	0xb88	; 0xb88 <TransmitByte>
    119e:	cf 5f       	subi	r28, 0xFF	; 255
    11a0:	ca 31       	cpi	r28, 0x1A	; 26
    11a2:	b0 f3       	brcs	.-20     	; 0x1190 <screen_init+0xe>
    11a4:	cf 91       	pop	r28
    11a6:	08 95       	ret

000011a8 <screen_draw_char>:
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	d8 2f       	mov	r29, r24
    11b0:	80 ee       	ldi	r24, 0xE0	; 224
    11b2:	8d 0f       	add	r24, r29
    11b4:	80 36       	cpi	r24, 0x60	; 96
    11b6:	28 f0       	brcs	.+10     	; 0x11c2 <screen_draw_char+0x1a>
    11b8:	d0 3b       	cpi	r29, 0xB0	; 176
    11ba:	19 f0       	breq	.+6      	; 0x11c2 <screen_draw_char+0x1a>
    11bc:	d0 3c       	cpi	r29, 0xC0	; 192
    11be:	08 f4       	brcc	.+2      	; 0x11c2 <screen_draw_char+0x1a>
    11c0:	d0 e2       	ldi	r29, 0x20	; 32
    11c2:	d0 3b       	cpi	r29, 0xB0	; 176
    11c4:	21 f0       	breq	.+8      	; 0x11ce <screen_draw_char+0x26>
    11c6:	d0 3c       	cpi	r29, 0xC0	; 192
    11c8:	20 f4       	brcc	.+8      	; 0x11d2 <screen_draw_char+0x2a>
    11ca:	10 e2       	ldi	r17, 0x20	; 32
    11cc:	03 c0       	rjmp	.+6      	; 0x11d4 <screen_draw_char+0x2c>
    11ce:	10 e5       	ldi	r17, 0x50	; 80
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <screen_draw_char+0x2c>
    11d2:	1f e5       	ldi	r17, 0x5F	; 95
    11d4:	c0 e0       	ldi	r28, 0x00	; 0
    11d6:	13 c0       	rjmp	.+38     	; 0x11fe <screen_draw_char+0x56>
    11d8:	8d 2f       	mov	r24, r29
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	81 1b       	sub	r24, r17
    11de:	91 09       	sbc	r25, r1
    11e0:	fc 01       	movw	r30, r24
    11e2:	ee 0f       	add	r30, r30
    11e4:	ff 1f       	adc	r31, r31
    11e6:	ee 0f       	add	r30, r30
    11e8:	ff 1f       	adc	r31, r31
    11ea:	e8 0f       	add	r30, r24
    11ec:	f9 1f       	adc	r31, r25
    11ee:	ec 5a       	subi	r30, 0xAC	; 172
    11f0:	ff 49       	sbci	r31, 0x9F	; 159
    11f2:	ec 0f       	add	r30, r28
    11f4:	f1 1d       	adc	r31, r1
    11f6:	80 81       	ld	r24, Z
    11f8:	0e 94 bb 08 	call	0x1176	; 0x1176 <screen_data>
    11fc:	cf 5f       	subi	r28, 0xFF	; 255
    11fe:	c5 30       	cpi	r28, 0x05	; 5
    1200:	58 f3       	brcs	.-42     	; 0x11d8 <screen_draw_char+0x30>
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	0e 94 bb 08 	call	0x1176	; 0x1176 <screen_data>
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	08 95       	ret

00001210 <screen_clear>:
 * @brief Clears the ST7567S display.
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    for (int page = 0; page < 8; page++) {
    1218:	00 e0       	ldi	r16, 0x00	; 0
    121a:	10 e0       	ldi	r17, 0x00	; 0
    121c:	16 c0       	rjmp	.+44     	; 0x124a <screen_clear+0x3a>
        screen_command(0xB0 + page);  ///< Select page
    121e:	80 eb       	ldi	r24, 0xB0	; 176
    1220:	80 0f       	add	r24, r16
    1222:	0e 94 b5 08 	call	0x116a	; 0x116a <screen_command>
        screen_command(0x00);  ///< Set column address
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	0e 94 b5 08 	call	0x116a	; 0x116a <screen_command>
        screen_command(0x10);  ///< Set column address
    122c:	80 e1       	ldi	r24, 0x10	; 16
    122e:	0e 94 b5 08 	call	0x116a	; 0x116a <screen_command>

        for (int column = 0; column < 128; column++) {
    1232:	c0 e0       	ldi	r28, 0x00	; 0
    1234:	d0 e0       	ldi	r29, 0x00	; 0
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <screen_clear+0x30>
            screen_data(0x00);  ///< Clear each column
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	0e 94 bb 08 	call	0x1176	; 0x1176 <screen_data>
    for (int page = 0; page < 8; page++) {
        screen_command(0xB0 + page);  ///< Select page
        screen_command(0x00);  ///< Set column address
        screen_command(0x10);  ///< Set column address

        for (int column = 0; column < 128; column++) {
    123e:	21 96       	adiw	r28, 0x01	; 1
    1240:	c0 38       	cpi	r28, 0x80	; 128
    1242:	d1 05       	cpc	r29, r1
    1244:	cc f3       	brlt	.-14     	; 0x1238 <screen_clear+0x28>
 * 
 * This function clears the entire display by setting all pixels to 0 and restoring 
 * the default contrast.
 */
void screen_clear() {
    for (int page = 0; page < 8; page++) {
    1246:	0f 5f       	subi	r16, 0xFF	; 255
    1248:	1f 4f       	sbci	r17, 0xFF	; 255
    124a:	08 30       	cpi	r16, 0x08	; 8
    124c:	11 05       	cpc	r17, r1
    124e:	3c f3       	brlt	.-50     	; 0x121e <screen_clear+0xe>
        for (int column = 0; column < 128; column++) {
            screen_data(0x00);  ///< Clear each column
        }
    }
    //screen_contrast(SSD1306_CONTRAST);  ///< Restore contrast
}
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	08 95       	ret

0000125a <screen_draw_text>:
 * the maximum allowed characters are displayed.
 * 
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	8c 01       	movw	r16, r24
    1264:	d6 2f       	mov	r29, r22
    uint8_t length = 0;
    1266:	c0 e0       	ldi	r28, 0x00	; 0
    while (*text && length < max_length) {
    1268:	05 c0       	rjmp	.+10     	; 0x1274 <screen_draw_text+0x1a>
        screen_draw_char(*text);  ///< Draw each character in the string
    126a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <screen_draw_char>
        text++;
    126e:	0f 5f       	subi	r16, 0xFF	; 255
    1270:	1f 4f       	sbci	r17, 0xFF	; 255
        length++;
    1272:	cf 5f       	subi	r28, 0xFF	; 255
 * @param text A pointer to the text string to draw.
 * @param max_length The maximum number of characters to display.
 */
void screen_draw_text(char *text, uint8_t max_length) {
    uint8_t length = 0;
    while (*text && length < max_length) {
    1274:	f8 01       	movw	r30, r16
    1276:	80 81       	ld	r24, Z
    1278:	88 23       	and	r24, r24
    127a:	39 f0       	breq	.+14     	; 0x128a <screen_draw_text+0x30>
    127c:	cd 17       	cp	r28, r29
    127e:	a8 f3       	brcs	.-22     	; 0x126a <screen_draw_text+0x10>
    1280:	04 c0       	rjmp	.+8      	; 0x128a <screen_draw_text+0x30>
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
        screen_draw_char(' ');  ///< Fill remaining space with spaces
    1282:	80 e2       	ldi	r24, 0x20	; 32
    1284:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <screen_draw_char>
        length++;
    1288:	cf 5f       	subi	r28, 0xFF	; 255
    while (*text && length < max_length) {
        screen_draw_char(*text);  ///< Draw each character in the string
        text++;
        length++;
    }
    while (length < max_length) {
    128a:	cd 17       	cp	r28, r29
    128c:	d0 f3       	brcs	.-12     	; 0x1282 <screen_draw_text+0x28>
        screen_draw_char(' ');  ///< Fill remaining space with spaces
        length++;
    }
}
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	08 95       	ret

00001298 <screen_write_text>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param start_pixel The starting pixel column for the text.
 */
void screen_write_text(char *text, uint8_t line, uint8_t start_pixel) {
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	8c 01       	movw	r16, r24
    12a2:	26 2f       	mov	r18, r22
    12a4:	c4 2f       	mov	r28, r20
    uint8_t max_chars = (128 - start_pixel) / 6;  ///< Calculate max characters per line
    12a6:	80 e8       	ldi	r24, 0x80	; 128
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	84 1b       	sub	r24, r20
    12ac:	91 09       	sbc	r25, r1
    12ae:	66 e0       	ldi	r22, 0x06	; 6
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	0e 94 cb 10 	call	0x2196	; 0x2196 <__divmodhi4>
    12b6:	d6 2f       	mov	r29, r22
    screen_command(0xB0 | line);  ///< Set the page (line)
    12b8:	82 2f       	mov	r24, r18
    12ba:	80 6b       	ori	r24, 0xB0	; 176
    12bc:	0e 94 b5 08 	call	0x116a	; 0x116a <screen_command>
    screen_command(0x10 | (start_pixel >> 4));  ///< Set high byte of column address
    12c0:	8c 2f       	mov	r24, r28
    12c2:	82 95       	swap	r24
    12c4:	8f 70       	andi	r24, 0x0F	; 15
    12c6:	80 61       	ori	r24, 0x10	; 16
    12c8:	0e 94 b5 08 	call	0x116a	; 0x116a <screen_command>
    screen_command(0x00 | (start_pixel & 0x0F));  ///< Set low byte of column address
    12cc:	8c 2f       	mov	r24, r28
    12ce:	8f 70       	andi	r24, 0x0F	; 15
    12d0:	0e 94 b5 08 	call	0x116a	; 0x116a <screen_command>
    screen_draw_text(text, max_chars);  ///< Draw the text
    12d4:	6d 2f       	mov	r22, r29
    12d6:	c8 01       	movw	r24, r16
    12d8:	0e 94 2d 09 	call	0x125a	; 0x125a <screen_draw_text>
}
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	08 95       	ret

000012e6 <calculate_start_pixel>:
 * @param max_length The maximum number of characters.
 * @param alignment The desired text alignment (left, center, right).
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
    12e6:	ac 01       	movw	r20, r24
    uint8_t text_length = 0;
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <calculate_start_pixel+0x8>
        text_length++;
    12ec:	9f 5f       	subi	r25, 0xFF	; 255
 * 
 * @return The starting pixel for the text.
 */
uint8_t calculate_start_pixel(char *text, /*uint8_t max_length,*/ alignment_t alignment) {
    uint8_t text_length = 0;
    while (text[text_length] != '\0' /*&& text_length < max_length*/) {
    12ee:	fa 01       	movw	r30, r20
    12f0:	e9 0f       	add	r30, r25
    12f2:	f1 1d       	adc	r31, r1
    12f4:	20 81       	ld	r18, Z
    12f6:	21 11       	cpse	r18, r1
    12f8:	f9 cf       	rjmp	.-14     	; 0x12ec <calculate_start_pixel+0x6>
        text_length++;
    }

    uint8_t text_width = text_length * 6;  ///< Calculate the width of the text in pixels
    12fa:	89 2f       	mov	r24, r25
    12fc:	88 0f       	add	r24, r24
    12fe:	98 0f       	add	r25, r24
    1300:	29 2f       	mov	r18, r25
    1302:	22 0f       	add	r18, r18
    switch (alignment) {
    1304:	61 30       	cpi	r22, 0x01	; 1
    1306:	19 f0       	breq	.+6      	; 0x130e <calculate_start_pixel+0x28>
    1308:	62 30       	cpi	r22, 0x02	; 2
    130a:	69 f0       	breq	.+26     	; 0x1326 <calculate_start_pixel+0x40>
    130c:	0f c0       	rjmp	.+30     	; 0x132c <calculate_start_pixel+0x46>
        case ALIGN_CENTER:
            return (128 - text_width) / 2;  ///< Center the text
    130e:	80 e8       	ldi	r24, 0x80	; 128
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	ac 01       	movw	r20, r24
    1314:	42 1b       	sub	r20, r18
    1316:	51 09       	sbc	r21, r1
    1318:	ca 01       	movw	r24, r20
    131a:	99 23       	and	r25, r25
    131c:	0c f4       	brge	.+2      	; 0x1320 <calculate_start_pixel+0x3a>
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	95 95       	asr	r25
    1322:	87 95       	ror	r24
    1324:	08 95       	ret
        case ALIGN_RIGHT:
            return (128 - text_width);  ///< Right-align the text
    1326:	80 e8       	ldi	r24, 0x80	; 128
    1328:	82 1b       	sub	r24, r18
    132a:	08 95       	ret
        case ALIGN_LEFT:
        default:
            return 0;  ///< Left-align the text
    132c:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    132e:	08 95       	ret

00001330 <screen_write_text_aligned>:
 * 
 * @param text A pointer to the text string to write.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_text_aligned(char *text, uint8_t line, alignment_t alignment) {
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	ec 01       	movw	r28, r24
    1338:	16 2f       	mov	r17, r22
    uint8_t start_pixel = calculate_start_pixel(text, alignment);  ///< Calculate start pixel
    133a:	64 2f       	mov	r22, r20
    133c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <calculate_start_pixel>
   screen_write_text(text, line, start_pixel);
    1340:	48 2f       	mov	r20, r24
    1342:	61 2f       	mov	r22, r17
    1344:	ce 01       	movw	r24, r28
    1346:	0e 94 4c 09 	call	0x1298	; 0x1298 <screen_write_text>
}
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	08 95       	ret

00001352 <screen_write_formatted_text>:
 * 
 * @param format The format string for the text.
 * @param line The line (page) where the text will be written.
 * @param alignment The desired text alignment (left, center, right).
 */
void screen_write_formatted_text(const char *format, uint8_t line, alignment_t alignment, ...) {
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	e2 97       	sbiw	r28, 0x32	; 50
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	de bf       	out	0x3e, r29	; 62
    char textStorage[MAX_TEXT_LENGTH];  ///< Buffer for storing formatted text
    va_list args;  ///< Variable argument list

    va_start(args, alignment);  ///< Start reading variable arguments
    vsnprintf(textStorage, MAX_TEXT_LENGTH, format, args);  ///< Format the text
    1360:	9e 01       	movw	r18, r28
    1362:	25 5c       	subi	r18, 0xC5	; 197
    1364:	3f 4f       	sbci	r19, 0xFF	; 255
    1366:	4f a9       	ldd	r20, Y+55	; 0x37
    1368:	58 ad       	ldd	r21, Y+56	; 0x38
    136a:	62 e3       	ldi	r22, 0x32	; 50
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	ce 01       	movw	r24, r28
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vsnprintf>
    va_end(args);  ///< End reading variable arguments

    screen_write_text_aligned(textStorage, line, alignment);  ///< Write formatted text to display
    1376:	4a ad       	ldd	r20, Y+58	; 0x3a
    1378:	69 ad       	ldd	r22, Y+57	; 0x39
    137a:	ce 01       	movw	r24, r28
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	0e 94 98 09 	call	0x1330	; 0x1330 <screen_write_text_aligned>
}
    1382:	e2 96       	adiw	r28, 0x32	; 50
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	08 95       	ret

0000138e <Stepper_enable>:
	return !(PORTF.IN & PIN5_bm);
}

bool Read_Stepper_ALM(){ // true if driver has a error (overheat, stepepr stuck and so on)
	return !(PORTF.IN & PIN4_bm);
}
    138e:	80 91 ee 65 	lds	r24, 0x65EE	; 0x8065ee <StepperMotor+0x3>
    1392:	81 11       	cpse	r24, r1
    1394:	11 c0       	rjmp	.+34     	; 0x13b8 <Stepper_enable+0x2a>
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
    139c:	2f ef       	ldi	r18, 0xFF	; 255
    139e:	88 ef       	ldi	r24, 0xF8	; 248
    13a0:	95 e1       	ldi	r25, 0x15	; 21
    13a2:	21 50       	subi	r18, 0x01	; 1
    13a4:	80 40       	sbci	r24, 0x00	; 0
    13a6:	90 40       	sbci	r25, 0x00	; 0
    13a8:	e1 f7       	brne	.-8      	; 0x13a2 <Stepper_enable+0x14>
    13aa:	00 c0       	rjmp	.+0      	; 0x13ac <Stepper_enable+0x1e>
    13ac:	00 00       	nop
    13ae:	eb ee       	ldi	r30, 0xEB	; 235
    13b0:	f5 e6       	ldi	r31, 0x65	; 101
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	83 83       	std	Z+3, r24	; 0x03
    13b6:	14 82       	std	Z+4, r1	; 0x04
    13b8:	08 95       	ret

000013ba <Stepper_disable>:
    13ba:	80 91 ef 65 	lds	r24, 0x65EF	; 0x8065ef <StepperMotor+0x4>
    13be:	81 11       	cpse	r24, r1
    13c0:	08 c0       	rjmp	.+16     	; 0x13d2 <Stepper_disable+0x18>
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    13c4:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f04a5>
    13c8:	eb ee       	ldi	r30, 0xEB	; 235
    13ca:	f5 e6       	ldi	r31, 0x65	; 101
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	84 83       	std	Z+4, r24	; 0x04
    13d0:	13 82       	std	Z+3, r1	; 0x03
    13d2:	08 95       	ret

000013d4 <Stepper_start>:
    13d4:	80 91 ec 65 	lds	r24, 0x65EC	; 0x8065ec <StepperMotor+0x1>
    13d8:	81 11       	cpse	r24, r1
    13da:	0e c0       	rjmp	.+28     	; 0x13f8 <Stepper_start+0x24>
    13dc:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
    13e0:	80 ff       	sbrs	r24, 0
    13e2:	fc cf       	rjmp	.-8      	; 0x13dc <Stepper_start+0x8>
    13e4:	e0 e8       	ldi	r30, 0x80	; 128
    13e6:	fb e0       	ldi	r31, 0x0B	; 11
    13e8:	80 81       	ld	r24, Z
    13ea:	81 60       	ori	r24, 0x01	; 1
    13ec:	80 83       	st	Z, r24
    13ee:	eb ee       	ldi	r30, 0xEB	; 235
    13f0:	f5 e6       	ldi	r31, 0x65	; 101
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	81 83       	std	Z+1, r24	; 0x01
    13f6:	12 82       	std	Z+2, r1	; 0x02
    13f8:	08 95       	ret

000013fa <Stepper_stop>:
    13fa:	80 91 ed 65 	lds	r24, 0x65ED	; 0x8065ed <StepperMotor+0x2>
    13fe:	81 11       	cpse	r24, r1
    1400:	0e c0       	rjmp	.+28     	; 0x141e <Stepper_stop+0x24>
    1402:	80 91 8e 0b 	lds	r24, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7f0b8e>
    1406:	80 ff       	sbrs	r24, 0
    1408:	fc cf       	rjmp	.-8      	; 0x1402 <Stepper_stop+0x8>
    140a:	e0 e8       	ldi	r30, 0x80	; 128
    140c:	fb e0       	ldi	r31, 0x0B	; 11
    140e:	80 81       	ld	r24, Z
    1410:	8e 7f       	andi	r24, 0xFE	; 254
    1412:	80 83       	st	Z, r24
    1414:	eb ee       	ldi	r30, 0xEB	; 235
    1416:	f5 e6       	ldi	r31, 0x65	; 101
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	82 83       	std	Z+2, r24	; 0x02
    141c:	11 82       	std	Z+1, r1	; 0x01
    141e:	08 95       	ret

00001420 <Stepper_set_direction>:
    1420:	cf 93       	push	r28
    1422:	90 91 eb 65 	lds	r25, 0x65EB	; 0x8065eb <StepperMotor>
    1426:	98 17       	cp	r25, r24
    1428:	99 f0       	breq	.+38     	; 0x1450 <Stepper_set_direction+0x30>
    142a:	c8 2f       	mov	r28, r24
    142c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Stepper_stop>
    1430:	cc 23       	and	r28, r28
    1432:	21 f0       	breq	.+8      	; 0x143c <Stepper_set_direction+0x1c>
    1434:	88 e0       	ldi	r24, 0x08	; 8
    1436:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f04a5>
    143a:	03 c0       	rjmp	.+6      	; 0x1442 <Stepper_set_direction+0x22>
    143c:	88 e0       	ldi	r24, 0x08	; 8
    143e:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f04a6>
    1442:	88 e1       	ldi	r24, 0x18	; 24
    1444:	8a 95       	dec	r24
    1446:	f1 f7       	brne	.-4      	; 0x1444 <Stepper_set_direction+0x24>
    1448:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <Stepper_start>
    144c:	c0 93 eb 65 	sts	0x65EB, r28	; 0x8065eb <StepperMotor>
    1450:	cf 91       	pop	r28
    1452:	08 95       	ret

00001454 <Stepper_init>:
    1454:	42 e3       	ldi	r20, 0x32	; 50
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	78 ec       	ldi	r23, 0xC8	; 200
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <TCD0_init_stepper_PWM>
    1462:	08 95       	ret

00001464 <Read_Stepper_Voltage>:

uint16_t Read_Stepper_Voltage(){
	ADC0_SetupStepper(0);
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	0e 94 9f 02 	call	0x53e	; 0x53e <ADC0_SetupStepper>
	return (ADC0_read() * 0.1775) * Stepper_Voltage_Compensation_koef;
    146a:	0e 94 b5 02 	call	0x56a	; 0x56a <ADC0_read>
    146e:	bc 01       	movw	r22, r24
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__floatunsisf>
    1478:	2f e8       	ldi	r18, 0x8F	; 143
    147a:	32 ec       	ldi	r19, 0xC2	; 194
    147c:	45 e3       	ldi	r20, 0x35	; 53
    147e:	5e e3       	ldi	r21, 0x3E	; 62
    1480:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__mulsf3>
    1484:	26 e6       	ldi	r18, 0x66	; 102
    1486:	36 e6       	ldi	r19, 0x66	; 102
    1488:	46 e8       	ldi	r20, 0x86	; 134
    148a:	5f e3       	ldi	r21, 0x3F	; 63
    148c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__mulsf3>
    1490:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__fixunssfsi>
}
    1494:	cb 01       	movw	r24, r22
    1496:	08 95       	ret

00001498 <Read_Stepper_Current>:

int16_t Read_Stepper_Current(){
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
	ADC0_SetupStepper(1);
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	0e 94 9f 02 	call	0x53e	; 0x53e <ADC0_SetupStepper>
	return ((int16_t)ADC0_read() - (int16_t)Read_MCU_Voltge())/4;
    14a2:	0e 94 b5 02 	call	0x56a	; 0x56a <ADC0_read>
    14a6:	ec 01       	movw	r28, r24
    14a8:	0e 94 c9 02 	call	0x592	; 0x592 <Read_MCU_Voltge>
    14ac:	9e 01       	movw	r18, r28
    14ae:	28 1b       	sub	r18, r24
    14b0:	39 0b       	sbc	r19, r25
    14b2:	c9 01       	movw	r24, r18
    14b4:	99 23       	and	r25, r25
    14b6:	0c f4       	brge	.+2      	; 0x14ba <Read_Stepper_Current+0x22>
    14b8:	03 96       	adiw	r24, 0x03	; 3
    14ba:	95 95       	asr	r25
    14bc:	87 95       	ror	r24
    14be:	95 95       	asr	r25
    14c0:	87 95       	ror	r24
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	08 95       	ret

000014c8 <TCA0_init_linear_PWM>:
 *  Author: Saulius
 */ 
#include "Settings.h"

void TCA0_init_linear_PWM(uint16_t freq_hz, uint8_t duty_percent) //Auto TCA prescaler selection, that give us Frequency range: ~366Hz - ~93kHz. TLE9201SG max 20kHz
{
    14c8:	8f 92       	push	r8
    14ca:	9f 92       	push	r9
    14cc:	af 92       	push	r10
    14ce:	bf 92       	push	r11
    14d0:	cf 92       	push	r12
    14d2:	df 92       	push	r13
    14d4:	ef 92       	push	r14
    14d6:	ff 92       	push	r15
    14d8:	0f 93       	push	r16
    14da:	1f 93       	push	r17
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	68 97       	sbiw	r28, 0x18	; 24
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	7c 01       	movw	r14, r24
    14ec:	c6 2e       	mov	r12, r22
	const uint16_t prescalers[] = {1, 2, 4, 8, 16, 64, 256, 1024};
    14ee:	80 e1       	ldi	r24, 0x10	; 16
    14f0:	ee e9       	ldi	r30, 0x9E	; 158
    14f2:	f3 e6       	ldi	r31, 0x63	; 99
    14f4:	de 01       	movw	r26, r28
    14f6:	11 96       	adiw	r26, 0x01	; 1
    14f8:	01 90       	ld	r0, Z+
    14fa:	0d 92       	st	X+, r0
    14fc:	8a 95       	dec	r24
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <TCA0_init_linear_PWM+0x30>
	const uint8_t clk_select[] = {
    1500:	88 e0       	ldi	r24, 0x08	; 8
    1502:	ee ea       	ldi	r30, 0xAE	; 174
    1504:	f3 e6       	ldi	r31, 0x63	; 99
    1506:	de 01       	movw	r26, r28
    1508:	51 96       	adiw	r26, 0x11	; 17
    150a:	01 90       	ld	r0, Z+
    150c:	0d 92       	st	X+, r0
    150e:	8a 95       	dec	r24
    1510:	e1 f7       	brne	.-8      	; 0x150a <TCA0_init_linear_PWM+0x42>

	uint8_t chosen_clk = 0;
	uint8_t period = 0;

	// surandam tinkamà prescaler
	for (uint8_t i = 0; i < 8; i++) {
    1512:	d1 2c       	mov	r13, r1
    1514:	38 c0       	rjmp	.+112    	; 0x1586 <TCA0_init_linear_PWM+0xbe>
		uint32_t f_timer = F_CPU / prescalers[i];
    1516:	0d 2d       	mov	r16, r13
    1518:	10 e0       	ldi	r17, 0x00	; 0
    151a:	f8 01       	movw	r30, r16
    151c:	ee 0f       	add	r30, r30
    151e:	ff 1f       	adc	r31, r31
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	8c 0f       	add	r24, r28
    1526:	9d 1f       	adc	r25, r29
    1528:	e8 0f       	add	r30, r24
    152a:	f9 1f       	adc	r31, r25
    152c:	20 81       	ld	r18, Z
    152e:	31 81       	ldd	r19, Z+1	; 0x01
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	76 e3       	ldi	r23, 0x36	; 54
    1538:	8e e6       	ldi	r24, 0x6E	; 110
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	0e 94 01 11 	call	0x2202	; 0x2202 <__divmodsi4>
		uint32_t tmp_period = (f_timer / freq_hz) - 1;
    1540:	47 01       	movw	r8, r14
    1542:	a1 2c       	mov	r10, r1
    1544:	b1 2c       	mov	r11, r1
    1546:	ca 01       	movw	r24, r20
    1548:	b9 01       	movw	r22, r18
    154a:	a5 01       	movw	r20, r10
    154c:	94 01       	movw	r18, r8
    154e:	0e 94 df 10 	call	0x21be	; 0x21be <__udivmodsi4>
    1552:	da 01       	movw	r26, r20
    1554:	c9 01       	movw	r24, r18
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	a1 09       	sbc	r26, r1
    155a:	b1 09       	sbc	r27, r1

		if (tmp_period <= 255 && tmp_period >= 1) {
    155c:	ba 01       	movw	r22, r20
    155e:	a9 01       	movw	r20, r18
    1560:	42 50       	subi	r20, 0x02	; 2
    1562:	51 09       	sbc	r21, r1
    1564:	61 09       	sbc	r22, r1
    1566:	71 09       	sbc	r23, r1
    1568:	4f 3f       	cpi	r20, 0xFF	; 255
    156a:	51 05       	cpc	r21, r1
    156c:	61 05       	cpc	r22, r1
    156e:	71 05       	cpc	r23, r1
    1570:	48 f4       	brcc	.+18     	; 0x1584 <TCA0_init_linear_PWM+0xbc>
			period = (uint8_t)tmp_period;
    1572:	f8 2e       	mov	r15, r24
			chosen_clk = clk_select[i];
    1574:	e1 e1       	ldi	r30, 0x11	; 17
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	ec 0f       	add	r30, r28
    157a:	fd 1f       	adc	r31, r29
    157c:	e0 0f       	add	r30, r16
    157e:	f1 1f       	adc	r31, r17
    1580:	10 81       	ld	r17, Z
			break; // radom maþiausià tinkamà prescaler
    1582:	06 c0       	rjmp	.+12     	; 0x1590 <TCA0_init_linear_PWM+0xc8>

	uint8_t chosen_clk = 0;
	uint8_t period = 0;

	// surandam tinkamà prescaler
	for (uint8_t i = 0; i < 8; i++) {
    1584:	d3 94       	inc	r13
    1586:	97 e0       	ldi	r25, 0x07	; 7
    1588:	9d 15       	cp	r25, r13
    158a:	28 f6       	brcc	.-118    	; 0x1516 <TCA0_init_linear_PWM+0x4e>
		TCA_SINGLE_CLKSEL_DIV256_gc,
		TCA_SINGLE_CLKSEL_DIV1024_gc
	};

	uint8_t chosen_clk = 0;
	uint8_t period = 0;
    158c:	f1 2c       	mov	r15, r1
		TCA_SINGLE_CLKSEL_DIV64_gc,
		TCA_SINGLE_CLKSEL_DIV256_gc,
		TCA_SINGLE_CLKSEL_DIV1024_gc
	};

	uint8_t chosen_clk = 0;
    158e:	10 e0       	ldi	r17, 0x00	; 0
			break; // radom maþiausià tinkamà prescaler
		}
	}

	// duty skaièiavimas
	uint8_t duty = (uint32_t)period * duty_percent / 100;
    1590:	2f 2d       	mov	r18, r15
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	ac 2d       	mov	r26, r12
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	0e 94 20 11 	call	0x2240	; 0x2240 <__umulhisi3>
    159c:	24 e6       	ldi	r18, 0x64	; 100
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e0       	ldi	r20, 0x00	; 0
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	0e 94 df 10 	call	0x21be	; 0x21be <__udivmodsi4>
	if (duty > period) duty = period;
    15a8:	f2 16       	cp	r15, r18
    15aa:	08 f4       	brcc	.+2      	; 0x15ae <TCA0_init_linear_PWM+0xe6>
    15ac:	2f 2d       	mov	r18, r15

	// konfigûracija
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;  // WOx ant PORTD
    15ae:	83 e0       	ldi	r24, 0x03	; 3
    15b0:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <__TEXT_REGION_LENGTH__+0x7f05e7>

	TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;   // Split mode
    15b4:	e0 e0       	ldi	r30, 0x00	; 0
    15b6:	fa e0       	ldi	r31, 0x0A	; 10
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	83 83       	std	Z+3, r24	; 0x03
	TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm;    // enable WO3 (HCMP0 ? PD3)
    15bc:	80 e1       	ldi	r24, 0x10	; 16
    15be:	81 83       	std	Z+1, r24	; 0x01

	TCA0.SPLIT.HPER  = period;
    15c0:	f7 a2       	std	Z+39, r15	; 0x27
	TCA0.SPLIT.HCMP0 = duty;
    15c2:	21 a7       	std	Z+41, r18	; 0x29

	TCA0.SPLIT.CTRLA = chosen_clk | TCA_SPLIT_ENABLE_bm; // paleidþiam su pasirinktu prescaler
    15c4:	11 60       	ori	r17, 0x01	; 1
    15c6:	10 83       	st	Z, r17
}
    15c8:	68 96       	adiw	r28, 0x18	; 24
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	ff 90       	pop	r15
    15d8:	ef 90       	pop	r14
    15da:	df 90       	pop	r13
    15dc:	cf 90       	pop	r12
    15de:	bf 90       	pop	r11
    15e0:	af 90       	pop	r10
    15e2:	9f 90       	pop	r9
    15e4:	8f 90       	pop	r8
    15e6:	08 95       	ret

000015e8 <TCD0_init_stepper_PWM>:
 * @date 2025-01-09
 */

#include "Settings.h"

void TCD0_init_stepper_PWM(uint32_t freq_hz, uint8_t duty_percent) {
    15e8:	cf 92       	push	r12
    15ea:	df 92       	push	r13
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	14 2f       	mov	r17, r20

	// Calculate compare registers
	uint16_t cmpbclr = (F_CPU / (4 * freq_hz * 2)) - 1;
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	aa 1f       	adc	r26, r26
    1604:	bb 1f       	adc	r27, r27
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	aa 1f       	adc	r26, r26
    160c:	bb 1f       	adc	r27, r27
    160e:	9c 01       	movw	r18, r24
    1610:	ad 01       	movw	r20, r26
    1612:	22 0f       	add	r18, r18
    1614:	33 1f       	adc	r19, r19
    1616:	44 1f       	adc	r20, r20
    1618:	55 1f       	adc	r21, r21
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	76 e3       	ldi	r23, 0x36	; 54
    161e:	8e e6       	ldi	r24, 0x6E	; 110
    1620:	91 e0       	ldi	r25, 0x01	; 1
    1622:	0e 94 df 10 	call	0x21be	; 0x21be <__udivmodsi4>
    1626:	e9 01       	movw	r28, r18
    1628:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t cmpaset = (uint16_t)(cmpbclr * (duty_percent / 100.0)) + 1;
    162a:	61 2f       	mov	r22, r17
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__floatsisf>
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	48 ec       	ldi	r20, 0xC8	; 200
    163c:	52 e4       	ldi	r21, 0x42	; 66
    163e:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__divsf3>
    1642:	6b 01       	movw	r12, r22
    1644:	7c 01       	movw	r14, r24
    1646:	be 01       	movw	r22, r28
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__floatunsisf>
    1650:	a7 01       	movw	r20, r14
    1652:	96 01       	movw	r18, r12
    1654:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__mulsf3>
    1658:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__fixunssfsi>
    165c:	6f 5f       	subi	r22, 0xFF	; 255
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t cmpbset = cmpbclr - cmpaset - 1;
    1660:	ce 01       	movw	r24, r28
    1662:	86 1b       	sub	r24, r22
    1664:	97 0b       	sbc	r25, r23
    1666:	01 97       	sbiw	r24, 0x01	; 1

	// Set TCD compare registers
	TCD0.CMPBCLR = cmpbclr;
    1668:	00 e8       	ldi	r16, 0x80	; 128
    166a:	1b e0       	ldi	r17, 0x0B	; 11
    166c:	f8 01       	movw	r30, r16
    166e:	c6 a7       	std	Z+46, r28	; 0x2e
    1670:	d7 a7       	std	Z+47, r29	; 0x2f
	TCD0.CMPBSET = cmpbset;
    1672:	84 a7       	std	Z+44, r24	; 0x2c
    1674:	95 a7       	std	Z+45, r25	; 0x2d
	TCD0.CMPASET = cmpaset;
    1676:	60 a7       	std	Z+40, r22	; 0x28
    1678:	71 a7       	std	Z+41, r23	; 0x29

	ccp_write_io((uint8_t *) &TCD0.FAULTCTRL, TCD_CMPCEN_bm); ///< Enable WOC on PF2
    167a:	60 e4       	ldi	r22, 0x40	; 64
    167c:	82 e9       	ldi	r24, 0x92	; 146
    167e:	9b e0       	ldi	r25, 0x0B	; 11
    1680:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ccp_write_io>
	TCD0.CTRLB = TCD_WGMODE_DS_gc; ///< Set waveform mode to double slope
    1684:	83 e0       	ldi	r24, 0x03	; 3
    1686:	f8 01       	movw	r30, r16
    1688:	81 83       	std	Z+1, r24	; 0x01
	// Ájungiam WOC iðëjimà
	//TCD0.FAULTCTRL = TCD_CMPAEN_bm | TCD_CMPBEN_bm | TCD_CMPCEN_bm;

	// Paleidþiam su prescaler = 4
	//TCD0.CTRLA = TCD_CLKSEL_CLKPER_gc | TCD_CNTPRES_DIV4_gc;
	ccp_write_io((uint8_t *) &TCD0.CTRLA, TCD_CLKSEL_CLKPER_gc | TCD_CNTPRES_DIV4_gc);
    168a:	68 e6       	ldi	r22, 0x68	; 104
    168c:	80 e8       	ldi	r24, 0x80	; 128
    168e:	9b e0       	ldi	r25, 0x0B	; 11
    1690:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ccp_write_io>
	// Palaukti, kol sinchronizuosis
	//while (!(TCD0.STATUS & TCD_ENRDY_bm));
/*
			while (!(TCD0.STATUS & TCD_ENRDY_bm));
			TCD0.CTRLA |= TCD_ENABLE_bm;*/
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	1f 91       	pop	r17
    169a:	0f 91       	pop	r16
    169c:	ff 90       	pop	r15
    169e:	ef 90       	pop	r14
    16a0:	df 90       	pop	r13
    16a2:	cf 90       	pop	r12
    16a4:	08 95       	ret

000016a6 <USART0_init>:
 * @return 0 on success.
 */
int USART1_printChar(char c, FILE *stream) {
	USART1_sendChar(c); // Send character
	return 0;
}
    16a6:	e0 e0       	ldi	r30, 0x00	; 0
    16a8:	f8 e0       	ldi	r31, 0x08	; 8
    16aa:	83 e8       	ldi	r24, 0x83	; 131
    16ac:	96 e0       	ldi	r25, 0x06	; 6
    16ae:	80 87       	std	Z+8, r24	; 0x08
    16b0:	91 87       	std	Z+9, r25	; 0x09
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	85 83       	std	Z+5, r24	; 0x05
    16b6:	82 ec       	ldi	r24, 0xC2	; 194
    16b8:	86 83       	std	Z+6, r24	; 0x06
    16ba:	83 e0       	ldi	r24, 0x03	; 3
    16bc:	87 83       	std	Z+7, r24	; 0x07
    16be:	08 95       	ret

000016c0 <USART0_readChar>:
    16c0:	ff 92       	push	r15
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	80 e8       	ldi	r24, 0x80	; 128
    16cc:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    16d0:	68 94       	set
    16d2:	ff 24       	eor	r15, r15
    16d4:	f6 f8       	bld	r15, 6
    16d6:	0d e0       	ldi	r16, 0x0D	; 13
    16d8:	13 e0       	ldi	r17, 0x03	; 3
    16da:	d0 e0       	ldi	r29, 0x00	; 0
    16dc:	c0 e0       	ldi	r28, 0x00	; 0
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	e0 e0       	ldi	r30, 0x00	; 0
    16e4:	1b c0       	rjmp	.+54     	; 0x171c <USART0_readChar+0x5c>
    16e6:	2f 2d       	mov	r18, r15
    16e8:	30 2f       	mov	r19, r16
    16ea:	41 2f       	mov	r20, r17
    16ec:	5d 2f       	mov	r21, r29
    16ee:	6c 2f       	mov	r22, r28
    16f0:	7b 2f       	mov	r23, r27
    16f2:	8f 2f       	mov	r24, r31
    16f4:	9e 2f       	mov	r25, r30
    16f6:	af ef       	ldi	r26, 0xFF	; 255
    16f8:	0e 94 66 11 	call	0x22cc	; 0x22cc <__adddi3_s8>
    16fc:	f2 2e       	mov	r15, r18
    16fe:	03 2f       	mov	r16, r19
    1700:	14 2f       	mov	r17, r20
    1702:	d5 2f       	mov	r29, r21
    1704:	c6 2f       	mov	r28, r22
    1706:	b7 2f       	mov	r27, r23
    1708:	f8 2f       	mov	r31, r24
    170a:	e9 2f       	mov	r30, r25
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__cmpdi2_s8>
    1712:	21 f4       	brne	.+8      	; 0x171c <USART0_readChar+0x5c>
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	80 93 e9 65 	sts	0x65E9, r24	; 0x8065e9 <WSData+0xb>
    171a:	04 c0       	rjmp	.+8      	; 0x1724 <USART0_readChar+0x64>
    171c:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f0804>
    1720:	88 23       	and	r24, r24
    1722:	0c f7       	brge	.-62     	; 0x16e6 <USART0_readChar+0x26>
    1724:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f0800>
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	ff 90       	pop	r15
    1732:	08 95       	ret

00001734 <USART1_init>:
    1734:	e0 e2       	ldi	r30, 0x20	; 32
    1736:	f8 e0       	ldi	r31, 0x08	; 8
    1738:	81 ea       	ldi	r24, 0xA1	; 161
    173a:	91 e0       	ldi	r25, 0x01	; 1
    173c:	80 87       	std	Z+8, r24	; 0x08
    173e:	91 87       	std	Z+9, r25	; 0x09
    1740:	82 e8       	ldi	r24, 0x82	; 130
    1742:	86 83       	std	Z+6, r24	; 0x06
    1744:	83 e0       	ldi	r24, 0x03	; 3
    1746:	87 83       	std	Z+7, r24	; 0x07
    1748:	08 95       	ret

0000174a <USART1_readChar>:
 * If a timeout occurs, it returns a predefined warning.
 * 
 * @return The received character.
 */
char USART1_readChar() {
	USART1.STATUS = USART_RXCIF_bm; // Clear buffer before reading
    174a:	80 e8       	ldi	r24, 0x80	; 128
    174c:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f0824>
	uint32_t timeout_counter = FO_TIMEOUT_COUNTER; // Set a timeout counter
    1750:	80 eb       	ldi	r24, 0xB0	; 176
    1752:	9e e1       	ldi	r25, 0x1E	; 30
    1754:	a4 e0       	ldi	r26, 0x04	; 4
    1756:	b0 e0       	ldi	r27, 0x00	; 0
	while (!(USART1.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
    1758:	08 c0       	rjmp	.+16     	; 0x176a <USART1_readChar+0x20>
		if (--timeout_counter == 0) { // Timeout condition
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	a1 09       	sbc	r26, r1
    175e:	b1 09       	sbc	r27, r1
    1760:	21 f4       	brne	.+8      	; 0x176a <USART1_readChar+0x20>
			//screen_write_formatted_text("USART1 timeout", 0, ALIGN_LEFT);// uncomment for timeout number finding, when timeout number is set corectly this line should not to be visible at all. if timeout is to small you will see this line 
			//_delay_ms(100);
			//screen_write_formatted_text("              ", 0, ALIGN_LEFT);
			SensorData.FO_lost_signal_fault = true;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	80 93 b3 65 	sts	0x65B3, r24	; 0x8065b3 <__data_end+0x11>
			break; //just exit from this while cycle
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <USART1_readChar+0x28>
 * @return The received character.
 */
char USART1_readChar() {
	USART1.STATUS = USART_RXCIF_bm; // Clear buffer before reading
	uint32_t timeout_counter = FO_TIMEOUT_COUNTER; // Set a timeout counter
	while (!(USART1.STATUS & USART_RXCIF_bm)) { // Wait for data to be received
    176a:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x7f0824>
    176e:	22 23       	and	r18, r18
    1770:	a4 f7       	brge	.-24     	; 0x175a <USART1_readChar+0x10>
			SensorData.FO_lost_signal_fault = true;
			break; //just exit from this while cycle

		}
	}
	return USART1.RXDATAL; // Return received character
    1772:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f0820>
}
    1776:	08 95       	ret

00001778 <screenUpdater>:
 */

#include "Settings.h"
#include "windowsVar.h"

bool screenUpdater(uint8_t window){ //update window data if any changes only
    1778:	1f 93       	push	r17
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	68 97       	sbiw	r28, 0x18	; 24
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	18 2f       	mov	r17, r24
	uint16_t values[MAX_VARS]={0};
    178a:	fe 01       	movw	r30, r28
    178c:	31 96       	adiw	r30, 0x01	; 1
    178e:	88 e1       	ldi	r24, 0x18	; 24
    1790:	df 01       	movw	r26, r30
    1792:	1d 92       	st	X+, r1
    1794:	8a 95       	dec	r24
    1796:	e9 f7       	brne	.-6      	; 0x1792 <screenUpdater+0x1a>
	bool update = false;

	if(show.lastWindow != window)
    1798:	80 91 f7 65 	lds	r24, 0x65F7	; 0x8065f7 <show+0x1>
    179c:	81 13       	cpse	r24, r17
		screen_clear();
    179e:	0e 94 08 09 	call	0x1210	; 0x1210 <screen_clear>
	switch (window){
    17a2:	11 23       	and	r17, r17
    17a4:	21 f0       	breq	.+8      	; 0x17ae <screenUpdater+0x36>
    17a6:	11 30       	cpi	r17, 0x01	; 1
    17a8:	09 f4       	brne	.+2      	; 0x17ac <screenUpdater+0x34>
    17aa:	75 c0       	rjmp	.+234    	; 0x1896 <screenUpdater+0x11e>
    17ac:	cc c0       	rjmp	.+408    	; 0x1946 <screenUpdater+0x1ce>
		case 0:
			values[0] = Target.elevation;
    17ae:	aa e4       	ldi	r26, 0x4A	; 74
    17b0:	b0 e6       	ldi	r27, 0x60	; 96
    17b2:	8d 91       	ld	r24, X+
    17b4:	9c 91       	ld	r25, X
    17b6:	11 97       	sbiw	r26, 0x01	; 1
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	9a 83       	std	Y+2, r25	; 0x02
			values[1] = SensorData.Elevation;
    17bc:	e2 ea       	ldi	r30, 0xA2	; 162
    17be:	f5 e6       	ldi	r31, 0x65	; 101
    17c0:	80 81       	ld	r24, Z
    17c2:	91 81       	ldd	r25, Z+1	; 0x01
    17c4:	8b 83       	std	Y+3, r24	; 0x03
    17c6:	9c 83       	std	Y+4, r25	; 0x04
			values[2] = Target.azimuth;
    17c8:	15 96       	adiw	r26, 0x05	; 5
    17ca:	8d 91       	ld	r24, X+
    17cc:	9c 91       	ld	r25, X
    17ce:	16 97       	sbiw	r26, 0x06	; 6
    17d0:	8d 83       	std	Y+5, r24	; 0x05
    17d2:	9e 83       	std	Y+6, r25	; 0x06
			values[3] = SensorData.Azimuth;
    17d4:	84 81       	ldd	r24, Z+4	; 0x04
    17d6:	95 81       	ldd	r25, Z+5	; 0x05
    17d8:	8f 83       	std	Y+7, r24	; 0x07
    17da:	98 87       	std	Y+8, r25	; 0x08
			values[4] = Joystick.LatchSwitch;
    17dc:	80 91 d1 65 	lds	r24, 0x65D1	; 0x8065d1 <Joystick+0x6>
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	89 87       	std	Y+9, r24	; 0x09
    17e4:	9a 87       	std	Y+10, r25	; 0x0a
			values[5] = SensorData.FO_data_fault;
    17e6:	82 89       	ldd	r24, Z+18	; 0x12
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	8b 87       	std	Y+11, r24	; 0x0b
    17ec:	9c 87       	std	Y+12, r25	; 0x0c
			values[6] = SensorData.FO_bad_signal_fault;
    17ee:	80 89       	ldd	r24, Z+16	; 0x10
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	8d 87       	std	Y+13, r24	; 0x0d
    17f4:	9e 87       	std	Y+14, r25	; 0x0e
			values[7] = SensorData.FO_lost_connecton_fault;
    17f6:	83 89       	ldd	r24, Z+19	; 0x13
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	8f 87       	std	Y+15, r24	; 0x0f
    17fc:	98 8b       	std	Y+16, r25	; 0x10
			values[8] = SensorData.FO_elevation_sensor_fault;
    17fe:	84 89       	ldd	r24, Z+20	; 0x14
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	89 8b       	std	Y+17, r24	; 0x11
    1804:	9a 8b       	std	Y+18, r25	; 0x12
			values[9] = SensorData.FO_azimuth_sensor_fault;
    1806:	85 89       	ldd	r24, Z+21	; 0x15
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	8b 8b       	std	Y+19, r24	; 0x13
    180c:	9c 8b       	std	Y+20, r25	; 0x14
			values[10] = WSData.WS_lost_connecton_fault;
    180e:	ee ed       	ldi	r30, 0xDE	; 222
    1810:	f5 e6       	ldi	r31, 0x65	; 101
    1812:	82 85       	ldd	r24, Z+10	; 0x0a
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	8d 8b       	std	Y+21, r24	; 0x15
    1818:	9e 8b       	std	Y+22, r25	; 0x16
			values[11] = WSData.WS_data_fault;
    181a:	84 85       	ldd	r24, Z+12	; 0x0c
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	8f 8b       	std	Y+23, r24	; 0x17
    1820:	98 8f       	std	Y+24, r25	; 0x18
			for (uint8_t i=0; i<11; i++){
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	18 c0       	rjmp	.+48     	; 0x1856 <screenUpdater+0xde>
				if(show.lastValues[i] != values[i]){
    1826:	82 2f       	mov	r24, r18
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	fc 01       	movw	r30, r24
    182c:	31 96       	adiw	r30, 0x01	; 1
    182e:	ee 0f       	add	r30, r30
    1830:	ff 1f       	adc	r31, r31
    1832:	ea 50       	subi	r30, 0x0A	; 10
    1834:	fa 49       	sbci	r31, 0x9A	; 154
    1836:	40 81       	ld	r20, Z
    1838:	51 81       	ldd	r21, Z+1	; 0x01
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	e1 e0       	ldi	r30, 0x01	; 1
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	ec 0f       	add	r30, r28
    1844:	fd 1f       	adc	r31, r29
    1846:	e8 0f       	add	r30, r24
    1848:	f9 1f       	adc	r31, r25
    184a:	80 81       	ld	r24, Z
    184c:	91 81       	ldd	r25, Z+1	; 0x01
    184e:	48 17       	cp	r20, r24
    1850:	59 07       	cpc	r21, r25
    1852:	29 f4       	brne	.+10     	; 0x185e <screenUpdater+0xe6>
			values[7] = SensorData.FO_lost_connecton_fault;
			values[8] = SensorData.FO_elevation_sensor_fault;
			values[9] = SensorData.FO_azimuth_sensor_fault;
			values[10] = WSData.WS_lost_connecton_fault;
			values[11] = WSData.WS_data_fault;
			for (uint8_t i=0; i<11; i++){
    1854:	2f 5f       	subi	r18, 0xFF	; 255
    1856:	2b 30       	cpi	r18, 0x0B	; 11
    1858:	30 f3       	brcs	.-52     	; 0x1826 <screenUpdater+0xae>
#include "Settings.h"
#include "windowsVar.h"

bool screenUpdater(uint8_t window){ //update window data if any changes only
	uint16_t values[MAX_VARS]={0};
	bool update = false;
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	01 c0       	rjmp	.+2      	; 0x1860 <screenUpdater+0xe8>
			values[9] = SensorData.FO_azimuth_sensor_fault;
			values[10] = WSData.WS_lost_connecton_fault;
			values[11] = WSData.WS_data_fault;
			for (uint8_t i=0; i<11; i++){
				if(show.lastValues[i] != values[i]){
				update = true;
    185e:	81 e0       	ldi	r24, 0x01	; 1
				break;
				}
			}
			for (uint8_t i=0; i<11; i++){
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	16 c0       	rjmp	.+44     	; 0x1890 <screenUpdater+0x118>
				show.lastValues[i] = values[i];
    1864:	29 2f       	mov	r18, r25
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	f9 01       	movw	r30, r18
    186a:	ee 0f       	add	r30, r30
    186c:	ff 1f       	adc	r31, r31
    186e:	41 e0       	ldi	r20, 0x01	; 1
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	4c 0f       	add	r20, r28
    1874:	5d 1f       	adc	r21, r29
    1876:	e4 0f       	add	r30, r20
    1878:	f5 1f       	adc	r31, r21
    187a:	40 81       	ld	r20, Z
    187c:	51 81       	ldd	r21, Z+1	; 0x01
    187e:	f9 01       	movw	r30, r18
    1880:	31 96       	adiw	r30, 0x01	; 1
    1882:	ee 0f       	add	r30, r30
    1884:	ff 1f       	adc	r31, r31
    1886:	ea 50       	subi	r30, 0x0A	; 10
    1888:	fa 49       	sbci	r31, 0x9A	; 154
    188a:	40 83       	st	Z, r20
    188c:	51 83       	std	Z+1, r21	; 0x01
				if(show.lastValues[i] != values[i]){
				update = true;
				break;
				}
			}
			for (uint8_t i=0; i<11; i++){
    188e:	9f 5f       	subi	r25, 0xFF	; 255
    1890:	9b 30       	cpi	r25, 0x0B	; 11
    1892:	40 f3       	brcs	.-48     	; 0x1864 <screenUpdater+0xec>
    1894:	59 c0       	rjmp	.+178    	; 0x1948 <screenUpdater+0x1d0>
				show.lastValues[i] = values[i];
			}
		break;
		case 1:
			values[0] = SensorData.PVU;
    1896:	e2 ea       	ldi	r30, 0xA2	; 162
    1898:	f5 e6       	ldi	r31, 0x65	; 101
    189a:	80 85       	ldd	r24, Z+8	; 0x08
    189c:	91 85       	ldd	r25, Z+9	; 0x09
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	9a 83       	std	Y+2, r25	; 0x02
			values[1] = SensorData.PVI;
    18a2:	82 85       	ldd	r24, Z+10	; 0x0a
    18a4:	93 85       	ldd	r25, Z+11	; 0x0b
    18a6:	8b 83       	std	Y+3, r24	; 0x03
    18a8:	9c 83       	std	Y+4, r25	; 0x04
			values[2] = StepperMotor.measuredVoltage;
    18aa:	eb ee       	ldi	r30, 0xEB	; 235
    18ac:	f5 e6       	ldi	r31, 0x65	; 101
    18ae:	85 81       	ldd	r24, Z+5	; 0x05
    18b0:	96 81       	ldd	r25, Z+6	; 0x06
    18b2:	8d 83       	std	Y+5, r24	; 0x05
    18b4:	9e 83       	std	Y+6, r25	; 0x06
			values[3] = StepperMotor.measuredCurrent;
    18b6:	87 81       	ldd	r24, Z+7	; 0x07
    18b8:	90 85       	ldd	r25, Z+8	; 0x08
    18ba:	8f 83       	std	Y+7, r24	; 0x07
    18bc:	98 87       	std	Y+8, r25	; 0x08
			values[4] = LinearMotor.measuredVoltage;
    18be:	e3 ed       	ldi	r30, 0xD3	; 211
    18c0:	f5 e6       	ldi	r31, 0x65	; 101
    18c2:	85 81       	ldd	r24, Z+5	; 0x05
    18c4:	96 81       	ldd	r25, Z+6	; 0x06
    18c6:	89 87       	std	Y+9, r24	; 0x09
    18c8:	9a 87       	std	Y+10, r25	; 0x0a
			values[5] = LinearMotor.measuredCurrent;
    18ca:	87 81       	ldd	r24, Z+7	; 0x07
    18cc:	90 85       	ldd	r25, Z+8	; 0x08
    18ce:	8b 87       	std	Y+11, r24	; 0x0b
    18d0:	9c 87       	std	Y+12, r25	; 0x0c
			for (uint8_t i=0; i<6; i++){
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	18 c0       	rjmp	.+48     	; 0x1906 <screenUpdater+0x18e>
				if(show.lastValues[i] != values[i]){
    18d6:	82 2f       	mov	r24, r18
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	fc 01       	movw	r30, r24
    18dc:	31 96       	adiw	r30, 0x01	; 1
    18de:	ee 0f       	add	r30, r30
    18e0:	ff 1f       	adc	r31, r31
    18e2:	ea 50       	subi	r30, 0x0A	; 10
    18e4:	fa 49       	sbci	r31, 0x9A	; 154
    18e6:	40 81       	ld	r20, Z
    18e8:	51 81       	ldd	r21, Z+1	; 0x01
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	e1 e0       	ldi	r30, 0x01	; 1
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	ec 0f       	add	r30, r28
    18f4:	fd 1f       	adc	r31, r29
    18f6:	e8 0f       	add	r30, r24
    18f8:	f9 1f       	adc	r31, r25
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	48 17       	cp	r20, r24
    1900:	59 07       	cpc	r21, r25
    1902:	29 f4       	brne	.+10     	; 0x190e <screenUpdater+0x196>
			values[1] = SensorData.PVI;
			values[2] = StepperMotor.measuredVoltage;
			values[3] = StepperMotor.measuredCurrent;
			values[4] = LinearMotor.measuredVoltage;
			values[5] = LinearMotor.measuredCurrent;
			for (uint8_t i=0; i<6; i++){
    1904:	2f 5f       	subi	r18, 0xFF	; 255
    1906:	26 30       	cpi	r18, 0x06	; 6
    1908:	30 f3       	brcs	.-52     	; 0x18d6 <screenUpdater+0x15e>
#include "Settings.h"
#include "windowsVar.h"

bool screenUpdater(uint8_t window){ //update window data if any changes only
	uint16_t values[MAX_VARS]={0};
	bool update = false;
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <screenUpdater+0x198>
			values[3] = StepperMotor.measuredCurrent;
			values[4] = LinearMotor.measuredVoltage;
			values[5] = LinearMotor.measuredCurrent;
			for (uint8_t i=0; i<6; i++){
				if(show.lastValues[i] != values[i]){
				update = true;
    190e:	81 e0       	ldi	r24, 0x01	; 1
				break;
				}
			}
			for (uint8_t i=0; i<6; i++){
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	16 c0       	rjmp	.+44     	; 0x1940 <screenUpdater+0x1c8>
				show.lastValues[i] = values[i];
    1914:	29 2f       	mov	r18, r25
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	f9 01       	movw	r30, r18
    191a:	ee 0f       	add	r30, r30
    191c:	ff 1f       	adc	r31, r31
    191e:	a1 e0       	ldi	r26, 0x01	; 1
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	ac 0f       	add	r26, r28
    1924:	bd 1f       	adc	r27, r29
    1926:	ea 0f       	add	r30, r26
    1928:	fb 1f       	adc	r31, r27
    192a:	40 81       	ld	r20, Z
    192c:	51 81       	ldd	r21, Z+1	; 0x01
    192e:	f9 01       	movw	r30, r18
    1930:	31 96       	adiw	r30, 0x01	; 1
    1932:	ee 0f       	add	r30, r30
    1934:	ff 1f       	adc	r31, r31
    1936:	ea 50       	subi	r30, 0x0A	; 10
    1938:	fa 49       	sbci	r31, 0x9A	; 154
    193a:	40 83       	st	Z, r20
    193c:	51 83       	std	Z+1, r21	; 0x01
				if(show.lastValues[i] != values[i]){
				update = true;
				break;
				}
			}
			for (uint8_t i=0; i<6; i++){
    193e:	9f 5f       	subi	r25, 0xFF	; 255
    1940:	96 30       	cpi	r25, 0x06	; 6
    1942:	40 f3       	brcs	.-48     	; 0x1914 <screenUpdater+0x19c>
    1944:	01 c0       	rjmp	.+2      	; 0x1948 <screenUpdater+0x1d0>
#include "Settings.h"
#include "windowsVar.h"

bool screenUpdater(uint8_t window){ //update window data if any changes only
	uint16_t values[MAX_VARS]={0};
	bool update = false;
    1946:	80 e0       	ldi	r24, 0x00	; 0
			for (uint8_t i=0; i<6; i++){
				show.lastValues[i] = values[i];
			}
		break;
	}
	show.lastWindow = window;
    1948:	10 93 f7 65 	sts	0x65F7, r17	; 0x8065f7 <show+0x1>
	return update;
}
    194c:	68 96       	adiw	r28, 0x18	; 24
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	08 95       	ret

0000195a <windows>:

void windows() {
    195a:	ef 92       	push	r14
    195c:	ff 92       	push	r15
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29

	ReadJoystickValues(); //Joystick read
    1966:	0e 94 25 06 	call	0xc4a	; 0xc4a <ReadJoystickValues>

	if(!Joystick.LatchSwitch){//windows changing works if control is set as Auto.
    196a:	80 91 d1 65 	lds	r24, 0x65D1	; 0x8065d1 <Joystick+0x6>
    196e:	81 11       	cpse	r24, r1
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <windows+0x1c>
		SelectWindow();
    1972:	0e 94 4b 06 	call	0xc96	; 0xc96 <SelectWindow>
	}
	LatchSwitcher();
    1976:	0e 94 0f 06 	call	0xc1e	; 0xc1e <LatchSwitcher>
	switch (show.window){
    197a:	80 91 f6 65 	lds	r24, 0x65F6	; 0x8065f6 <show>
    197e:	88 23       	and	r24, r24
    1980:	21 f0       	breq	.+8      	; 0x198a <windows+0x30>
    1982:	81 30       	cpi	r24, 0x01	; 1
    1984:	09 f4       	brne	.+2      	; 0x1988 <windows+0x2e>
    1986:	e5 c0       	rjmp	.+458    	; 0x1b52 <windows+0x1f8>
    1988:	63 c2       	rjmp	.+1222   	; 0x1e50 <windows+0x4f6>
		case 0:
			if(screenUpdater(0)){
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <screenUpdater>
    1990:	88 23       	and	r24, r24
    1992:	09 f4       	brne	.+2      	; 0x1996 <windows+0x3c>
    1994:	5d c2       	rjmp	.+1210   	; 0x1e50 <windows+0x4f6>
				screen_write_formatted_text("%s", 0, ALIGN_CENTER, Joystick.LatchSwitch ? "Manual mode": " Auto mode ");			
    1996:	80 91 d1 65 	lds	r24, 0x65D1	; 0x8065d1 <Joystick+0x6>
    199a:	88 23       	and	r24, r24
    199c:	19 f0       	breq	.+6      	; 0x19a4 <windows+0x4a>
    199e:	85 ec       	ldi	r24, 0xC5	; 197
    19a0:	94 e6       	ldi	r25, 0x64	; 100
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <windows+0x4e>
    19a4:	81 ed       	ldi	r24, 0xD1	; 209
    19a6:	94 e6       	ldi	r25, 0x64	; 100
    19a8:	9f 93       	push	r25
    19aa:	8f 93       	push	r24
    19ac:	c1 e0       	ldi	r28, 0x01	; 1
    19ae:	cf 93       	push	r28
    19b0:	1f 92       	push	r1
    19b2:	8e e0       	ldi	r24, 0x0E	; 14
    19b4:	95 e6       	ldi	r25, 0x65	; 101
    19b6:	9f 93       	push	r25
    19b8:	8f 93       	push	r24
    19ba:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				screen_write_formatted_text("---------------------", 1, ALIGN_CENTER);
    19be:	cf 93       	push	r28
    19c0:	cf 93       	push	r28
    19c2:	80 ef       	ldi	r24, 0xF0	; 240
    19c4:	94 e6       	ldi	r25, 0x64	; 100
    19c6:	9f 93       	push	r25
    19c8:	8f 93       	push	r24
    19ca:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				//1. Lost connection error- No data from Weather station (broken line, corosion, hardware fail and so on)
				//2. Bad CRC
				screen_write_formatted_text("W.S: %s %s", 2, ALIGN_LEFT,  WSData.WS_lost_connecton_fault ? "LCE": "   ", WSData.WS_data_fault ? "CRC": "   ");
    19ce:	80 91 ea 65 	lds	r24, 0x65EA	; 0x8065ea <WSData+0xc>
    19d2:	2d b7       	in	r18, 0x3d	; 61
    19d4:	3e b7       	in	r19, 0x3e	; 62
    19d6:	26 5f       	subi	r18, 0xF6	; 246
    19d8:	3f 4f       	sbci	r19, 0xFF	; 255
    19da:	2d bf       	out	0x3d, r18	; 61
    19dc:	3e bf       	out	0x3e, r19	; 62
    19de:	88 23       	and	r24, r24
    19e0:	19 f0       	breq	.+6      	; 0x19e8 <windows+0x8e>
    19e2:	2d ed       	ldi	r18, 0xDD	; 221
    19e4:	34 e6       	ldi	r19, 0x64	; 100
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <windows+0x92>
    19e8:	21 ee       	ldi	r18, 0xE1	; 225
    19ea:	34 e6       	ldi	r19, 0x64	; 100
    19ec:	80 91 e8 65 	lds	r24, 0x65E8	; 0x8065e8 <WSData+0xa>
    19f0:	88 23       	and	r24, r24
    19f2:	19 f0       	breq	.+6      	; 0x19fa <windows+0xa0>
    19f4:	85 ee       	ldi	r24, 0xE5	; 229
    19f6:	94 e6       	ldi	r25, 0x64	; 100
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <windows+0xa4>
    19fa:	81 ee       	ldi	r24, 0xE1	; 225
    19fc:	94 e6       	ldi	r25, 0x64	; 100
    19fe:	3f 93       	push	r19
    1a00:	2f 93       	push	r18
    1a02:	9f 93       	push	r25
    1a04:	8f 93       	push	r24
    1a06:	1f 92       	push	r1
    1a08:	82 e0       	ldi	r24, 0x02	; 2
    1a0a:	8f 93       	push	r24
    1a0c:	86 e0       	ldi	r24, 0x06	; 6
    1a0e:	95 e6       	ldi	r25, 0x65	; 101
    1a10:	9f 93       	push	r25
    1a12:	8f 93       	push	r24
    1a14:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				//1. USATR1 not receiving messages FO_lost_signal_fault meaning FO optic cut or Top controller fault, or onboard Attiny212 fault
				//1a. FO_lost_signal_fault 3 times in row leads to lost connection fault FO_lost_connecton_fault
				//2. Weak signal from FO coses FO_bad_signal_fault (receiving 000.. with good crc). Onboard Attiny212 works good
				//3. Bad CRC returns FO_data_fault											
				screen_write_formatted_text("T.C: %s %s %s", 3, ALIGN_LEFT, SensorData.FO_lost_connecton_fault ? "LCE": "   ", SensorData.FO_bad_signal_fault ? "FOE": "   ", SensorData.FO_data_fault ? "CRC": "   "  );
    1a18:	80 91 b4 65 	lds	r24, 0x65B4	; 0x8065b4 <__data_end+0x12>
    1a1c:	ad b7       	in	r26, 0x3d	; 61
    1a1e:	be b7       	in	r27, 0x3e	; 62
    1a20:	18 96       	adiw	r26, 0x08	; 8
    1a22:	ad bf       	out	0x3d, r26	; 61
    1a24:	be bf       	out	0x3e, r27	; 62
    1a26:	88 23       	and	r24, r24
    1a28:	19 f0       	breq	.+6      	; 0x1a30 <windows+0xd6>
    1a2a:	4d ed       	ldi	r20, 0xDD	; 221
    1a2c:	54 e6       	ldi	r21, 0x64	; 100
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <windows+0xda>
    1a30:	41 ee       	ldi	r20, 0xE1	; 225
    1a32:	54 e6       	ldi	r21, 0x64	; 100
    1a34:	80 91 b2 65 	lds	r24, 0x65B2	; 0x8065b2 <__data_end+0x10>
    1a38:	88 23       	and	r24, r24
    1a3a:	19 f0       	breq	.+6      	; 0x1a42 <windows+0xe8>
    1a3c:	29 ee       	ldi	r18, 0xE9	; 233
    1a3e:	34 e6       	ldi	r19, 0x64	; 100
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <windows+0xec>
    1a42:	21 ee       	ldi	r18, 0xE1	; 225
    1a44:	34 e6       	ldi	r19, 0x64	; 100
    1a46:	80 91 b5 65 	lds	r24, 0x65B5	; 0x8065b5 <__data_end+0x13>
    1a4a:	88 23       	and	r24, r24
    1a4c:	19 f0       	breq	.+6      	; 0x1a54 <windows+0xfa>
    1a4e:	85 ee       	ldi	r24, 0xE5	; 229
    1a50:	94 e6       	ldi	r25, 0x64	; 100
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <windows+0xfe>
    1a54:	81 ee       	ldi	r24, 0xE1	; 225
    1a56:	94 e6       	ldi	r25, 0x64	; 100
    1a58:	5f 93       	push	r21
    1a5a:	4f 93       	push	r20
    1a5c:	3f 93       	push	r19
    1a5e:	2f 93       	push	r18
    1a60:	9f 93       	push	r25
    1a62:	8f 93       	push	r24
    1a64:	1f 92       	push	r1
    1a66:	83 e0       	ldi	r24, 0x03	; 3
    1a68:	8f 93       	push	r24
    1a6a:	81 e1       	ldi	r24, 0x11	; 17
    1a6c:	95 e6       	ldi	r25, 0x65	; 101
    1a6e:	9f 93       	push	r25
    1a70:	8f 93       	push	r24
    1a72:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				screen_write_formatted_text("---------------------", 4, ALIGN_CENTER);
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	8f 93       	push	r24
    1a7a:	84 e0       	ldi	r24, 0x04	; 4
    1a7c:	8f 93       	push	r24
    1a7e:	80 ef       	ldi	r24, 0xF0	; 240
    1a80:	94 e6       	ldi	r25, 0x64	; 100
    1a82:	9f 93       	push	r25
    1a84:	8f 93       	push	r24
    1a86:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				screen_write_formatted_text("Elevation:", 5, ALIGN_LEFT);
    1a8a:	1f 92       	push	r1
    1a8c:	85 e0       	ldi	r24, 0x05	; 5
    1a8e:	8f 93       	push	r24
    1a90:	8f e1       	ldi	r24, 0x1F	; 31
    1a92:	95 e6       	ldi	r25, 0x65	; 101
    1a94:	9f 93       	push	r25
    1a96:	8f 93       	push	r24
    1a98:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				//1. Elevation sensordata and fault FO_elevation_sensor_fault error
				screen_write_formatted_text("%3d/ %3d%s", 5, ALIGN_RIGHT, Target.elevation, SensorData.Elevation, SensorData.FO_elevation_sensor_fault ? "!E": "  ");
    1a9c:	80 91 b6 65 	lds	r24, 0x65B6	; 0x8065b6 <__data_end+0x14>
    1aa0:	ed b7       	in	r30, 0x3d	; 61
    1aa2:	fe b7       	in	r31, 0x3e	; 62
    1aa4:	72 96       	adiw	r30, 0x12	; 18
    1aa6:	ed bf       	out	0x3d, r30	; 61
    1aa8:	fe bf       	out	0x3e, r31	; 62
    1aaa:	88 23       	and	r24, r24
    1aac:	19 f0       	breq	.+6      	; 0x1ab4 <windows+0x15a>
    1aae:	8d ee       	ldi	r24, 0xED	; 237
    1ab0:	94 e6       	ldi	r25, 0x64	; 100
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <windows+0x15e>
    1ab4:	82 ee       	ldi	r24, 0xE2	; 226
    1ab6:	94 e6       	ldi	r25, 0x64	; 100
    1ab8:	9f 93       	push	r25
    1aba:	8f 93       	push	r24
    1abc:	c2 ea       	ldi	r28, 0xA2	; 162
    1abe:	d5 e6       	ldi	r29, 0x65	; 101
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	8f 93       	push	r24
    1ac4:	88 81       	ld	r24, Y
    1ac6:	8f 93       	push	r24
    1ac8:	ea e4       	ldi	r30, 0x4A	; 74
    1aca:	f0 e6       	ldi	r31, 0x60	; 96
    1acc:	81 81       	ldd	r24, Z+1	; 0x01
    1ace:	8f 93       	push	r24
    1ad0:	80 81       	ld	r24, Z
    1ad2:	8f 93       	push	r24
    1ad4:	82 e0       	ldi	r24, 0x02	; 2
    1ad6:	8f 93       	push	r24
    1ad8:	85 e0       	ldi	r24, 0x05	; 5
    1ada:	8f 93       	push	r24
    1adc:	8a e2       	ldi	r24, 0x2A	; 42
    1ade:	95 e6       	ldi	r25, 0x65	; 101
    1ae0:	9f 93       	push	r25
    1ae2:	8f 93       	push	r24
    1ae4:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				screen_write_formatted_text("Azimuth:", 6, ALIGN_LEFT);
    1ae8:	1f 92       	push	r1
    1aea:	86 e0       	ldi	r24, 0x06	; 6
    1aec:	8f 93       	push	r24
    1aee:	85 e3       	ldi	r24, 0x35	; 53
    1af0:	95 e6       	ldi	r25, 0x65	; 101
    1af2:	9f 93       	push	r25
    1af4:	8f 93       	push	r24
    1af6:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				//1. Azimuth sensor data and fault FO_azimuth_sensor_fault
				screen_write_formatted_text("%3d/ %3d%s", 6, ALIGN_RIGHT, Target.azimuth, SensorData.Azimuth, SensorData.FO_azimuth_sensor_fault ? "!E": "  ");
    1afa:	8d 89       	ldd	r24, Y+21	; 0x15
    1afc:	2d b7       	in	r18, 0x3d	; 61
    1afe:	3e b7       	in	r19, 0x3e	; 62
    1b00:	22 5f       	subi	r18, 0xF2	; 242
    1b02:	3f 4f       	sbci	r19, 0xFF	; 255
    1b04:	2d bf       	out	0x3d, r18	; 61
    1b06:	3e bf       	out	0x3e, r19	; 62
    1b08:	88 23       	and	r24, r24
    1b0a:	19 f0       	breq	.+6      	; 0x1b12 <windows+0x1b8>
    1b0c:	8d ee       	ldi	r24, 0xED	; 237
    1b0e:	94 e6       	ldi	r25, 0x64	; 100
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <windows+0x1bc>
    1b12:	82 ee       	ldi	r24, 0xE2	; 226
    1b14:	94 e6       	ldi	r25, 0x64	; 100
    1b16:	9f 93       	push	r25
    1b18:	8f 93       	push	r24
    1b1a:	e2 ea       	ldi	r30, 0xA2	; 162
    1b1c:	f5 e6       	ldi	r31, 0x65	; 101
    1b1e:	85 81       	ldd	r24, Z+5	; 0x05
    1b20:	8f 93       	push	r24
    1b22:	84 81       	ldd	r24, Z+4	; 0x04
    1b24:	8f 93       	push	r24
    1b26:	ea e4       	ldi	r30, 0x4A	; 74
    1b28:	f0 e6       	ldi	r31, 0x60	; 96
    1b2a:	86 81       	ldd	r24, Z+6	; 0x06
    1b2c:	8f 93       	push	r24
    1b2e:	85 81       	ldd	r24, Z+5	; 0x05
    1b30:	8f 93       	push	r24
    1b32:	82 e0       	ldi	r24, 0x02	; 2
    1b34:	8f 93       	push	r24
    1b36:	86 e0       	ldi	r24, 0x06	; 6
    1b38:	8f 93       	push	r24
    1b3a:	8a e2       	ldi	r24, 0x2A	; 42
    1b3c:	95 e6       	ldi	r25, 0x65	; 101
    1b3e:	9f 93       	push	r25
    1b40:	8f 93       	push	r24
    1b42:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
    1b46:	8d b7       	in	r24, 0x3d	; 61
    1b48:	9e b7       	in	r25, 0x3e	; 62
    1b4a:	0a 96       	adiw	r24, 0x0a	; 10
    1b4c:	8d bf       	out	0x3d, r24	; 61
    1b4e:	9e bf       	out	0x3e, r25	; 62
    1b50:	7f c1       	rjmp	.+766    	; 0x1e50 <windows+0x4f6>
			}
		break;
		case 1:
			if(screenUpdater(1)){
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	0e 94 bc 0b 	call	0x1778	; 0x1778 <screenUpdater>
    1b58:	88 23       	and	r24, r24
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <windows+0x204>
    1b5c:	79 c1       	rjmp	.+754    	; 0x1e50 <windows+0x4f6>
				//Solar panels electrical information
				screen_write_formatted_text("S.P. Voltage", 0, ALIGN_LEFT);
    1b5e:	1f 92       	push	r1
    1b60:	1f 92       	push	r1
    1b62:	8e e3       	ldi	r24, 0x3E	; 62
    1b64:	95 e6       	ldi	r25, 0x65	; 101
    1b66:	9f 93       	push	r25
    1b68:	8f 93       	push	r24
    1b6a:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%01d", 0, ALIGN_RIGHT, SensorData.PVU/10, SensorData.PVU%10);
    1b6e:	c2 ea       	ldi	r28, 0xA2	; 162
    1b70:	d5 e6       	ldi	r29, 0x65	; 101
    1b72:	48 85       	ldd	r20, Y+8	; 0x08
    1b74:	59 85       	ldd	r21, Y+9	; 0x09
    1b76:	9a 01       	movw	r18, r20
    1b78:	ad ec       	ldi	r26, 0xCD	; 205
    1b7a:	bc ec       	ldi	r27, 0xCC	; 204
    1b7c:	0e 94 20 11 	call	0x2240	; 0x2240 <__umulhisi3>
    1b80:	96 95       	lsr	r25
    1b82:	87 95       	ror	r24
    1b84:	96 95       	lsr	r25
    1b86:	87 95       	ror	r24
    1b88:	96 95       	lsr	r25
    1b8a:	87 95       	ror	r24
    1b8c:	9c 01       	movw	r18, r24
    1b8e:	22 0f       	add	r18, r18
    1b90:	33 1f       	adc	r19, r19
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	88 0f       	add	r24, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	82 0f       	add	r24, r18
    1ba0:	93 1f       	adc	r25, r19
    1ba2:	da 01       	movw	r26, r20
    1ba4:	a8 1b       	sub	r26, r24
    1ba6:	b9 0b       	sbc	r27, r25
    1ba8:	cd 01       	movw	r24, r26
    1baa:	9f 93       	push	r25
    1bac:	af 93       	push	r26
    1bae:	9a 01       	movw	r18, r20
    1bb0:	ad ec       	ldi	r26, 0xCD	; 205
    1bb2:	bc ec       	ldi	r27, 0xCC	; 204
    1bb4:	0e 94 20 11 	call	0x2240	; 0x2240 <__umulhisi3>
    1bb8:	96 95       	lsr	r25
    1bba:	87 95       	ror	r24
    1bbc:	96 95       	lsr	r25
    1bbe:	87 95       	ror	r24
    1bc0:	96 95       	lsr	r25
    1bc2:	87 95       	ror	r24
    1bc4:	9f 93       	push	r25
    1bc6:	8f 93       	push	r24
    1bc8:	82 e0       	ldi	r24, 0x02	; 2
    1bca:	8f 93       	push	r24
    1bcc:	1f 92       	push	r1
    1bce:	8b e4       	ldi	r24, 0x4B	; 75
    1bd0:	95 e6       	ldi	r25, 0x65	; 101
    1bd2:	9f 93       	push	r25
    1bd4:	8f 93       	push	r24
    1bd6:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				screen_write_formatted_text("S.P Current:", 1, ALIGN_LEFT);
    1bda:	1f 92       	push	r1
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	8f 93       	push	r24
    1be0:	84 e5       	ldi	r24, 0x54	; 84
    1be2:	95 e6       	ldi	r25, 0x65	; 101
    1be4:	9f 93       	push	r25
    1be6:	8f 93       	push	r24
    1be8:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%02d", 1, ALIGN_RIGHT, SensorData.PVI/100, abs(SensorData.PVI%100));
    1bec:	4a 85       	ldd	r20, Y+10	; 0x0a
    1bee:	5b 85       	ldd	r21, Y+11	; 0x0b
    1bf0:	9a 01       	movw	r18, r20
    1bf2:	36 95       	lsr	r19
    1bf4:	27 95       	ror	r18
    1bf6:	36 95       	lsr	r19
    1bf8:	27 95       	ror	r18
    1bfa:	ab e7       	ldi	r26, 0x7B	; 123
    1bfc:	b4 e1       	ldi	r27, 0x14	; 20
    1bfe:	0e 94 20 11 	call	0x2240	; 0x2240 <__umulhisi3>
    1c02:	96 95       	lsr	r25
    1c04:	87 95       	ror	r24
    1c06:	64 e6       	ldi	r22, 0x64	; 100
    1c08:	68 9f       	mul	r22, r24
    1c0a:	90 01       	movw	r18, r0
    1c0c:	69 9f       	mul	r22, r25
    1c0e:	30 0d       	add	r19, r0
    1c10:	11 24       	eor	r1, r1
    1c12:	ca 01       	movw	r24, r20
    1c14:	82 1b       	sub	r24, r18
    1c16:	93 0b       	sbc	r25, r19
    1c18:	9c 01       	movw	r18, r24
    1c1a:	22 f4       	brpl	.+8      	; 0x1c24 <windows+0x2ca>
    1c1c:	22 27       	eor	r18, r18
    1c1e:	33 27       	eor	r19, r19
    1c20:	28 1b       	sub	r18, r24
    1c22:	39 0b       	sbc	r19, r25
    1c24:	3f 93       	push	r19
    1c26:	2f 93       	push	r18
    1c28:	9a 01       	movw	r18, r20
    1c2a:	36 95       	lsr	r19
    1c2c:	27 95       	ror	r18
    1c2e:	36 95       	lsr	r19
    1c30:	27 95       	ror	r18
    1c32:	ab e7       	ldi	r26, 0x7B	; 123
    1c34:	b4 e1       	ldi	r27, 0x14	; 20
    1c36:	0e 94 20 11 	call	0x2240	; 0x2240 <__umulhisi3>
    1c3a:	96 95       	lsr	r25
    1c3c:	87 95       	ror	r24
    1c3e:	9f 93       	push	r25
    1c40:	8f 93       	push	r24
    1c42:	c2 e0       	ldi	r28, 0x02	; 2
    1c44:	cf 93       	push	r28
    1c46:	d1 e0       	ldi	r29, 0x01	; 1
    1c48:	df 93       	push	r29
    1c4a:	81 e6       	ldi	r24, 0x61	; 97
    1c4c:	95 e6       	ldi	r25, 0x65	; 101
    1c4e:	9f 93       	push	r25
    1c50:	8f 93       	push	r24
    1c52:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				screen_write_formatted_text("---------------------", 2, ALIGN_CENTER);
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	80 ef       	ldi	r24, 0xF0	; 240
    1c5c:	94 e6       	ldi	r25, 0x64	; 100
    1c5e:	9f 93       	push	r25
    1c60:	8f 93       	push	r24
    1c62:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				//Azimuth (Stepper) motor electrical information
				screen_write_formatted_text("St.M. Voltage", 3, ALIGN_LEFT);
    1c66:	1f 92       	push	r1
    1c68:	d3 e0       	ldi	r29, 0x03	; 3
    1c6a:	df 93       	push	r29
    1c6c:	8a e6       	ldi	r24, 0x6A	; 106
    1c6e:	95 e6       	ldi	r25, 0x65	; 101
    1c70:	9f 93       	push	r25
    1c72:	8f 93       	push	r24
    1c74:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%01d", 3, ALIGN_RIGHT, StepperMotor.measuredVoltage/10, StepperMotor.measuredVoltage%10);
    1c78:	0b ee       	ldi	r16, 0xEB	; 235
    1c7a:	15 e6       	ldi	r17, 0x65	; 101
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	45 81       	ldd	r20, Z+5	; 0x05
    1c80:	56 81       	ldd	r21, Z+6	; 0x06
    1c82:	2d b7       	in	r18, 0x3d	; 61
    1c84:	3e b7       	in	r19, 0x3e	; 62
    1c86:	20 5e       	subi	r18, 0xE0	; 224
    1c88:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8a:	2d bf       	out	0x3d, r18	; 61
    1c8c:	3e bf       	out	0x3e, r19	; 62
    1c8e:	9a 01       	movw	r18, r20
    1c90:	ad ec       	ldi	r26, 0xCD	; 205
    1c92:	bc ec       	ldi	r27, 0xCC	; 204
    1c94:	0e 94 20 11 	call	0x2240	; 0x2240 <__umulhisi3>
    1c98:	96 95       	lsr	r25
    1c9a:	87 95       	ror	r24
    1c9c:	96 95       	lsr	r25
    1c9e:	87 95       	ror	r24
    1ca0:	96 95       	lsr	r25
    1ca2:	87 95       	ror	r24
    1ca4:	9c 01       	movw	r18, r24
    1ca6:	22 0f       	add	r18, r18
    1ca8:	33 1f       	adc	r19, r19
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	82 0f       	add	r24, r18
    1cb8:	93 1f       	adc	r25, r19
    1cba:	da 01       	movw	r26, r20
    1cbc:	a8 1b       	sub	r26, r24
    1cbe:	b9 0b       	sbc	r27, r25
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	9f 93       	push	r25
    1cc4:	af 93       	push	r26
    1cc6:	9a 01       	movw	r18, r20
    1cc8:	ad ec       	ldi	r26, 0xCD	; 205
    1cca:	bc ec       	ldi	r27, 0xCC	; 204
    1ccc:	0e 94 20 11 	call	0x2240	; 0x2240 <__umulhisi3>
    1cd0:	96 95       	lsr	r25
    1cd2:	87 95       	ror	r24
    1cd4:	96 95       	lsr	r25
    1cd6:	87 95       	ror	r24
    1cd8:	96 95       	lsr	r25
    1cda:	87 95       	ror	r24
    1cdc:	9f 93       	push	r25
    1cde:	8f 93       	push	r24
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	8b e4       	ldi	r24, 0x4B	; 75
    1ce6:	95 e6       	ldi	r25, 0x65	; 101
    1ce8:	9f 93       	push	r25
    1cea:	8f 93       	push	r24
    1cec:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				screen_write_formatted_text("St.M. Current:", 4, ALIGN_LEFT);
    1cf0:	1f 92       	push	r1
    1cf2:	84 e0       	ldi	r24, 0x04	; 4
    1cf4:	8f 93       	push	r24
    1cf6:	88 e7       	ldi	r24, 0x78	; 120
    1cf8:	95 e6       	ldi	r25, 0x65	; 101
    1cfa:	9f 93       	push	r25
    1cfc:	8f 93       	push	r24
    1cfe:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%02d", 4, ALIGN_RIGHT, StepperMotor.measuredCurrent/100, abs(StepperMotor.measuredCurrent%100));
    1d02:	d8 01       	movw	r26, r16
    1d04:	17 96       	adiw	r26, 0x07	; 7
    1d06:	ed 91       	ld	r30, X+
    1d08:	fc 91       	ld	r31, X
    1d0a:	18 97       	sbiw	r26, 0x08	; 8
    1d0c:	cf 01       	movw	r24, r30
    1d0e:	64 e6       	ldi	r22, 0x64	; 100
    1d10:	70 e0       	ldi	r23, 0x00	; 0
    1d12:	0e 94 cb 10 	call	0x2196	; 0x2196 <__divmodhi4>
    1d16:	9c 01       	movw	r18, r24
    1d18:	99 23       	and	r25, r25
    1d1a:	24 f4       	brge	.+8      	; 0x1d24 <windows+0x3ca>
    1d1c:	22 27       	eor	r18, r18
    1d1e:	33 27       	eor	r19, r19
    1d20:	28 1b       	sub	r18, r24
    1d22:	39 0b       	sbc	r19, r25
    1d24:	3f 93       	push	r19
    1d26:	2f 93       	push	r18
    1d28:	c4 e6       	ldi	r28, 0x64	; 100
    1d2a:	d0 e0       	ldi	r29, 0x00	; 0
    1d2c:	cf 01       	movw	r24, r30
    1d2e:	be 01       	movw	r22, r28
    1d30:	0e 94 cb 10 	call	0x2196	; 0x2196 <__divmodhi4>
    1d34:	7f 93       	push	r23
    1d36:	6f 93       	push	r22
    1d38:	68 94       	set
    1d3a:	ee 24       	eor	r14, r14
    1d3c:	e1 f8       	bld	r14, 1
    1d3e:	ef 92       	push	r14
    1d40:	84 e0       	ldi	r24, 0x04	; 4
    1d42:	8f 93       	push	r24
    1d44:	81 e6       	ldi	r24, 0x61	; 97
    1d46:	95 e6       	ldi	r25, 0x65	; 101
    1d48:	9f 93       	push	r25
    1d4a:	8f 93       	push	r24
    1d4c:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				screen_write_formatted_text("---------------------", 5, ALIGN_CENTER);
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	8f 93       	push	r24
    1d54:	85 e0       	ldi	r24, 0x05	; 5
    1d56:	8f 93       	push	r24
    1d58:	80 ef       	ldi	r24, 0xF0	; 240
    1d5a:	94 e6       	ldi	r25, 0x64	; 100
    1d5c:	9f 93       	push	r25
    1d5e:	8f 93       	push	r24
    1d60:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				//Elevation (Linear) motor electical information
				screen_write_formatted_text("L.M. Voltage", 6, ALIGN_LEFT);
    1d64:	1f 92       	push	r1
    1d66:	0f 2e       	mov	r0, r31
    1d68:	f6 e0       	ldi	r31, 0x06	; 6
    1d6a:	ff 2e       	mov	r15, r31
    1d6c:	f0 2d       	mov	r31, r0
    1d6e:	ff 92       	push	r15
    1d70:	87 e8       	ldi	r24, 0x87	; 135
    1d72:	95 e6       	ldi	r25, 0x65	; 101
    1d74:	9f 93       	push	r25
    1d76:	8f 93       	push	r24
    1d78:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%01d", 6, ALIGN_RIGHT, LinearMotor.measuredVoltage/10, LinearMotor.measuredVoltage%10);
    1d7c:	03 ed       	ldi	r16, 0xD3	; 211
    1d7e:	15 e6       	ldi	r17, 0x65	; 101
    1d80:	f8 01       	movw	r30, r16
    1d82:	45 81       	ldd	r20, Z+5	; 0x05
    1d84:	56 81       	ldd	r21, Z+6	; 0x06
    1d86:	9a 01       	movw	r18, r20
    1d88:	ad ec       	ldi	r26, 0xCD	; 205
    1d8a:	bc ec       	ldi	r27, 0xCC	; 204
    1d8c:	0e 94 20 11 	call	0x2240	; 0x2240 <__umulhisi3>
    1d90:	96 95       	lsr	r25
    1d92:	87 95       	ror	r24
    1d94:	96 95       	lsr	r25
    1d96:	87 95       	ror	r24
    1d98:	96 95       	lsr	r25
    1d9a:	87 95       	ror	r24
    1d9c:	9c 01       	movw	r18, r24
    1d9e:	22 0f       	add	r18, r18
    1da0:	33 1f       	adc	r19, r19
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	82 0f       	add	r24, r18
    1db0:	93 1f       	adc	r25, r19
    1db2:	9a 01       	movw	r18, r20
    1db4:	28 1b       	sub	r18, r24
    1db6:	39 0b       	sbc	r19, r25
    1db8:	c9 01       	movw	r24, r18
    1dba:	9f 93       	push	r25
    1dbc:	2f 93       	push	r18
    1dbe:	9a 01       	movw	r18, r20
    1dc0:	0e 94 20 11 	call	0x2240	; 0x2240 <__umulhisi3>
    1dc4:	96 95       	lsr	r25
    1dc6:	87 95       	ror	r24
    1dc8:	96 95       	lsr	r25
    1dca:	87 95       	ror	r24
    1dcc:	96 95       	lsr	r25
    1dce:	87 95       	ror	r24
    1dd0:	9f 93       	push	r25
    1dd2:	8f 93       	push	r24
    1dd4:	ef 92       	push	r14
    1dd6:	ff 92       	push	r15
    1dd8:	8b e4       	ldi	r24, 0x4B	; 75
    1dda:	95 e6       	ldi	r25, 0x65	; 101
    1ddc:	9f 93       	push	r25
    1dde:	8f 93       	push	r24
    1de0:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				screen_write_formatted_text("L.M. Current:", 7, ALIGN_LEFT);
    1de4:	8d b7       	in	r24, 0x3d	; 61
    1de6:	9e b7       	in	r25, 0x3e	; 62
    1de8:	84 96       	adiw	r24, 0x24	; 36
    1dea:	8d bf       	out	0x3d, r24	; 61
    1dec:	9e bf       	out	0x3e, r25	; 62
    1dee:	1f 92       	push	r1
    1df0:	87 e0       	ldi	r24, 0x07	; 7
    1df2:	8f 93       	push	r24
    1df4:	84 e9       	ldi	r24, 0x94	; 148
    1df6:	95 e6       	ldi	r25, 0x65	; 101
    1df8:	9f 93       	push	r25
    1dfa:	8f 93       	push	r24
    1dfc:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
				screen_write_formatted_text("%3d.%02d", 7, ALIGN_RIGHT, LinearMotor.measuredCurrent/100, abs(LinearMotor.measuredCurrent%100));
    1e00:	d8 01       	movw	r26, r16
    1e02:	17 96       	adiw	r26, 0x07	; 7
    1e04:	ed 91       	ld	r30, X+
    1e06:	fc 91       	ld	r31, X
    1e08:	18 97       	sbiw	r26, 0x08	; 8
    1e0a:	cf 01       	movw	r24, r30
    1e0c:	be 01       	movw	r22, r28
    1e0e:	0e 94 cb 10 	call	0x2196	; 0x2196 <__divmodhi4>
    1e12:	9c 01       	movw	r18, r24
    1e14:	99 23       	and	r25, r25
    1e16:	24 f4       	brge	.+8      	; 0x1e20 <windows+0x4c6>
    1e18:	22 27       	eor	r18, r18
    1e1a:	33 27       	eor	r19, r19
    1e1c:	28 1b       	sub	r18, r24
    1e1e:	39 0b       	sbc	r19, r25
    1e20:	3f 93       	push	r19
    1e22:	2f 93       	push	r18
    1e24:	cf 01       	movw	r24, r30
    1e26:	64 e6       	ldi	r22, 0x64	; 100
    1e28:	70 e0       	ldi	r23, 0x00	; 0
    1e2a:	0e 94 cb 10 	call	0x2196	; 0x2196 <__divmodhi4>
    1e2e:	7f 93       	push	r23
    1e30:	6f 93       	push	r22
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	8f 93       	push	r24
    1e36:	87 e0       	ldi	r24, 0x07	; 7
    1e38:	8f 93       	push	r24
    1e3a:	81 e6       	ldi	r24, 0x61	; 97
    1e3c:	95 e6       	ldi	r25, 0x65	; 101
    1e3e:	9f 93       	push	r25
    1e40:	8f 93       	push	r24
    1e42:	0e 94 a9 09 	call	0x1352	; 0x1352 <screen_write_formatted_text>
    1e46:	ed b7       	in	r30, 0x3d	; 61
    1e48:	fe b7       	in	r31, 0x3e	; 62
    1e4a:	3c 96       	adiw	r30, 0x0c	; 12
    1e4c:	ed bf       	out	0x3d, r30	; 61
    1e4e:	fe bf       	out	0x3e, r31	; 62
			}
		break;
	}
	

    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	1f 91       	pop	r17
    1e56:	0f 91       	pop	r16
    1e58:	ff 90       	pop	r15
    1e5a:	ef 90       	pop	r14
    1e5c:	08 95       	ret

00001e5e <__divsf3>:
    1e5e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divsf3x>
    1e62:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__fp_round>
    1e66:	0e 94 1d 10 	call	0x203a	; 0x203a <__fp_pscB>
    1e6a:	58 f0       	brcs	.+22     	; 0x1e82 <__divsf3+0x24>
    1e6c:	0e 94 16 10 	call	0x202c	; 0x202c <__fp_pscA>
    1e70:	40 f0       	brcs	.+16     	; 0x1e82 <__divsf3+0x24>
    1e72:	29 f4       	brne	.+10     	; 0x1e7e <__divsf3+0x20>
    1e74:	5f 3f       	cpi	r21, 0xFF	; 255
    1e76:	29 f0       	breq	.+10     	; 0x1e82 <__divsf3+0x24>
    1e78:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__fp_inf>
    1e7c:	51 11       	cpse	r21, r1
    1e7e:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__fp_szero>
    1e82:	0c 94 13 10 	jmp	0x2026	; 0x2026 <__fp_nan>

00001e86 <__divsf3x>:
    1e86:	0e 94 35 10 	call	0x206a	; 0x206a <__fp_split3>
    1e8a:	68 f3       	brcs	.-38     	; 0x1e66 <__divsf3+0x8>

00001e8c <__divsf3_pse>:
    1e8c:	99 23       	and	r25, r25
    1e8e:	b1 f3       	breq	.-20     	; 0x1e7c <__divsf3+0x1e>
    1e90:	55 23       	and	r21, r21
    1e92:	91 f3       	breq	.-28     	; 0x1e78 <__divsf3+0x1a>
    1e94:	95 1b       	sub	r25, r21
    1e96:	55 0b       	sbc	r21, r21
    1e98:	bb 27       	eor	r27, r27
    1e9a:	aa 27       	eor	r26, r26
    1e9c:	62 17       	cp	r22, r18
    1e9e:	73 07       	cpc	r23, r19
    1ea0:	84 07       	cpc	r24, r20
    1ea2:	38 f0       	brcs	.+14     	; 0x1eb2 <__divsf3_pse+0x26>
    1ea4:	9f 5f       	subi	r25, 0xFF	; 255
    1ea6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea8:	22 0f       	add	r18, r18
    1eaa:	33 1f       	adc	r19, r19
    1eac:	44 1f       	adc	r20, r20
    1eae:	aa 1f       	adc	r26, r26
    1eb0:	a9 f3       	breq	.-22     	; 0x1e9c <__divsf3_pse+0x10>
    1eb2:	35 d0       	rcall	.+106    	; 0x1f1e <__divsf3_pse+0x92>
    1eb4:	0e 2e       	mov	r0, r30
    1eb6:	3a f0       	brmi	.+14     	; 0x1ec6 <__divsf3_pse+0x3a>
    1eb8:	e0 e8       	ldi	r30, 0x80	; 128
    1eba:	32 d0       	rcall	.+100    	; 0x1f20 <__divsf3_pse+0x94>
    1ebc:	91 50       	subi	r25, 0x01	; 1
    1ebe:	50 40       	sbci	r21, 0x00	; 0
    1ec0:	e6 95       	lsr	r30
    1ec2:	00 1c       	adc	r0, r0
    1ec4:	ca f7       	brpl	.-14     	; 0x1eb8 <__divsf3_pse+0x2c>
    1ec6:	2b d0       	rcall	.+86     	; 0x1f1e <__divsf3_pse+0x92>
    1ec8:	fe 2f       	mov	r31, r30
    1eca:	29 d0       	rcall	.+82     	; 0x1f1e <__divsf3_pse+0x92>
    1ecc:	66 0f       	add	r22, r22
    1ece:	77 1f       	adc	r23, r23
    1ed0:	88 1f       	adc	r24, r24
    1ed2:	bb 1f       	adc	r27, r27
    1ed4:	26 17       	cp	r18, r22
    1ed6:	37 07       	cpc	r19, r23
    1ed8:	48 07       	cpc	r20, r24
    1eda:	ab 07       	cpc	r26, r27
    1edc:	b0 e8       	ldi	r27, 0x80	; 128
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <__divsf3_pse+0x56>
    1ee0:	bb 0b       	sbc	r27, r27
    1ee2:	80 2d       	mov	r24, r0
    1ee4:	bf 01       	movw	r22, r30
    1ee6:	ff 27       	eor	r31, r31
    1ee8:	93 58       	subi	r25, 0x83	; 131
    1eea:	5f 4f       	sbci	r21, 0xFF	; 255
    1eec:	3a f0       	brmi	.+14     	; 0x1efc <__divsf3_pse+0x70>
    1eee:	9e 3f       	cpi	r25, 0xFE	; 254
    1ef0:	51 05       	cpc	r21, r1
    1ef2:	78 f0       	brcs	.+30     	; 0x1f12 <__divsf3_pse+0x86>
    1ef4:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__fp_inf>
    1ef8:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__fp_szero>
    1efc:	5f 3f       	cpi	r21, 0xFF	; 255
    1efe:	e4 f3       	brlt	.-8      	; 0x1ef8 <__divsf3_pse+0x6c>
    1f00:	98 3e       	cpi	r25, 0xE8	; 232
    1f02:	d4 f3       	brlt	.-12     	; 0x1ef8 <__divsf3_pse+0x6c>
    1f04:	86 95       	lsr	r24
    1f06:	77 95       	ror	r23
    1f08:	67 95       	ror	r22
    1f0a:	b7 95       	ror	r27
    1f0c:	f7 95       	ror	r31
    1f0e:	9f 5f       	subi	r25, 0xFF	; 255
    1f10:	c9 f7       	brne	.-14     	; 0x1f04 <__divsf3_pse+0x78>
    1f12:	88 0f       	add	r24, r24
    1f14:	91 1d       	adc	r25, r1
    1f16:	96 95       	lsr	r25
    1f18:	87 95       	ror	r24
    1f1a:	97 f9       	bld	r25, 7
    1f1c:	08 95       	ret
    1f1e:	e1 e0       	ldi	r30, 0x01	; 1
    1f20:	66 0f       	add	r22, r22
    1f22:	77 1f       	adc	r23, r23
    1f24:	88 1f       	adc	r24, r24
    1f26:	bb 1f       	adc	r27, r27
    1f28:	62 17       	cp	r22, r18
    1f2a:	73 07       	cpc	r23, r19
    1f2c:	84 07       	cpc	r24, r20
    1f2e:	ba 07       	cpc	r27, r26
    1f30:	20 f0       	brcs	.+8      	; 0x1f3a <__divsf3_pse+0xae>
    1f32:	62 1b       	sub	r22, r18
    1f34:	73 0b       	sbc	r23, r19
    1f36:	84 0b       	sbc	r24, r20
    1f38:	ba 0b       	sbc	r27, r26
    1f3a:	ee 1f       	adc	r30, r30
    1f3c:	88 f7       	brcc	.-30     	; 0x1f20 <__divsf3_pse+0x94>
    1f3e:	e0 95       	com	r30
    1f40:	08 95       	ret

00001f42 <__fixunssfsi>:
    1f42:	0e 94 3d 10 	call	0x207a	; 0x207a <__fp_splitA>
    1f46:	88 f0       	brcs	.+34     	; 0x1f6a <__fixunssfsi+0x28>
    1f48:	9f 57       	subi	r25, 0x7F	; 127
    1f4a:	98 f0       	brcs	.+38     	; 0x1f72 <__fixunssfsi+0x30>
    1f4c:	b9 2f       	mov	r27, r25
    1f4e:	99 27       	eor	r25, r25
    1f50:	b7 51       	subi	r27, 0x17	; 23
    1f52:	b0 f0       	brcs	.+44     	; 0x1f80 <__fixunssfsi+0x3e>
    1f54:	e1 f0       	breq	.+56     	; 0x1f8e <__fixunssfsi+0x4c>
    1f56:	66 0f       	add	r22, r22
    1f58:	77 1f       	adc	r23, r23
    1f5a:	88 1f       	adc	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	1a f0       	brmi	.+6      	; 0x1f66 <__fixunssfsi+0x24>
    1f60:	ba 95       	dec	r27
    1f62:	c9 f7       	brne	.-14     	; 0x1f56 <__fixunssfsi+0x14>
    1f64:	14 c0       	rjmp	.+40     	; 0x1f8e <__fixunssfsi+0x4c>
    1f66:	b1 30       	cpi	r27, 0x01	; 1
    1f68:	91 f0       	breq	.+36     	; 0x1f8e <__fixunssfsi+0x4c>
    1f6a:	0e 94 57 10 	call	0x20ae	; 0x20ae <__fp_zero>
    1f6e:	b1 e0       	ldi	r27, 0x01	; 1
    1f70:	08 95       	ret
    1f72:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__fp_zero>
    1f76:	67 2f       	mov	r22, r23
    1f78:	78 2f       	mov	r23, r24
    1f7a:	88 27       	eor	r24, r24
    1f7c:	b8 5f       	subi	r27, 0xF8	; 248
    1f7e:	39 f0       	breq	.+14     	; 0x1f8e <__fixunssfsi+0x4c>
    1f80:	b9 3f       	cpi	r27, 0xF9	; 249
    1f82:	cc f3       	brlt	.-14     	; 0x1f76 <__fixunssfsi+0x34>
    1f84:	86 95       	lsr	r24
    1f86:	77 95       	ror	r23
    1f88:	67 95       	ror	r22
    1f8a:	b3 95       	inc	r27
    1f8c:	d9 f7       	brne	.-10     	; 0x1f84 <__fixunssfsi+0x42>
    1f8e:	3e f4       	brtc	.+14     	; 0x1f9e <__fixunssfsi+0x5c>
    1f90:	90 95       	com	r25
    1f92:	80 95       	com	r24
    1f94:	70 95       	com	r23
    1f96:	61 95       	neg	r22
    1f98:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9e:	08 95       	ret

00001fa0 <__floatunsisf>:
    1fa0:	e8 94       	clt
    1fa2:	09 c0       	rjmp	.+18     	; 0x1fb6 <__floatsisf+0x12>

00001fa4 <__floatsisf>:
    1fa4:	97 fb       	bst	r25, 7
    1fa6:	3e f4       	brtc	.+14     	; 0x1fb6 <__floatsisf+0x12>
    1fa8:	90 95       	com	r25
    1faa:	80 95       	com	r24
    1fac:	70 95       	com	r23
    1fae:	61 95       	neg	r22
    1fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb6:	99 23       	and	r25, r25
    1fb8:	a9 f0       	breq	.+42     	; 0x1fe4 <__floatsisf+0x40>
    1fba:	f9 2f       	mov	r31, r25
    1fbc:	96 e9       	ldi	r25, 0x96	; 150
    1fbe:	bb 27       	eor	r27, r27
    1fc0:	93 95       	inc	r25
    1fc2:	f6 95       	lsr	r31
    1fc4:	87 95       	ror	r24
    1fc6:	77 95       	ror	r23
    1fc8:	67 95       	ror	r22
    1fca:	b7 95       	ror	r27
    1fcc:	f1 11       	cpse	r31, r1
    1fce:	f8 cf       	rjmp	.-16     	; 0x1fc0 <__floatsisf+0x1c>
    1fd0:	fa f4       	brpl	.+62     	; 0x2010 <__DATA_REGION_LENGTH__+0x10>
    1fd2:	bb 0f       	add	r27, r27
    1fd4:	11 f4       	brne	.+4      	; 0x1fda <__floatsisf+0x36>
    1fd6:	60 ff       	sbrs	r22, 0
    1fd8:	1b c0       	rjmp	.+54     	; 0x2010 <__DATA_REGION_LENGTH__+0x10>
    1fda:	6f 5f       	subi	r22, 0xFF	; 255
    1fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fde:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe2:	16 c0       	rjmp	.+44     	; 0x2010 <__DATA_REGION_LENGTH__+0x10>
    1fe4:	88 23       	and	r24, r24
    1fe6:	11 f0       	breq	.+4      	; 0x1fec <__floatsisf+0x48>
    1fe8:	96 e9       	ldi	r25, 0x96	; 150
    1fea:	11 c0       	rjmp	.+34     	; 0x200e <__DATA_REGION_LENGTH__+0xe>
    1fec:	77 23       	and	r23, r23
    1fee:	21 f0       	breq	.+8      	; 0x1ff8 <__floatsisf+0x54>
    1ff0:	9e e8       	ldi	r25, 0x8E	; 142
    1ff2:	87 2f       	mov	r24, r23
    1ff4:	76 2f       	mov	r23, r22
    1ff6:	05 c0       	rjmp	.+10     	; 0x2002 <__DATA_REGION_LENGTH__+0x2>
    1ff8:	66 23       	and	r22, r22
    1ffa:	71 f0       	breq	.+28     	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
    1ffc:	96 e8       	ldi	r25, 0x86	; 134
    1ffe:	86 2f       	mov	r24, r22
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	2a f0       	brmi	.+10     	; 0x2010 <__DATA_REGION_LENGTH__+0x10>
    2006:	9a 95       	dec	r25
    2008:	66 0f       	add	r22, r22
    200a:	77 1f       	adc	r23, r23
    200c:	88 1f       	adc	r24, r24
    200e:	da f7       	brpl	.-10     	; 0x2006 <__DATA_REGION_LENGTH__+0x6>
    2010:	88 0f       	add	r24, r24
    2012:	96 95       	lsr	r25
    2014:	87 95       	ror	r24
    2016:	97 f9       	bld	r25, 7
    2018:	08 95       	ret

0000201a <__fp_inf>:
    201a:	97 f9       	bld	r25, 7
    201c:	9f 67       	ori	r25, 0x7F	; 127
    201e:	80 e8       	ldi	r24, 0x80	; 128
    2020:	70 e0       	ldi	r23, 0x00	; 0
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	08 95       	ret

00002026 <__fp_nan>:
    2026:	9f ef       	ldi	r25, 0xFF	; 255
    2028:	80 ec       	ldi	r24, 0xC0	; 192
    202a:	08 95       	ret

0000202c <__fp_pscA>:
    202c:	00 24       	eor	r0, r0
    202e:	0a 94       	dec	r0
    2030:	16 16       	cp	r1, r22
    2032:	17 06       	cpc	r1, r23
    2034:	18 06       	cpc	r1, r24
    2036:	09 06       	cpc	r0, r25
    2038:	08 95       	ret

0000203a <__fp_pscB>:
    203a:	00 24       	eor	r0, r0
    203c:	0a 94       	dec	r0
    203e:	12 16       	cp	r1, r18
    2040:	13 06       	cpc	r1, r19
    2042:	14 06       	cpc	r1, r20
    2044:	05 06       	cpc	r0, r21
    2046:	08 95       	ret

00002048 <__fp_round>:
    2048:	09 2e       	mov	r0, r25
    204a:	03 94       	inc	r0
    204c:	00 0c       	add	r0, r0
    204e:	11 f4       	brne	.+4      	; 0x2054 <__fp_round+0xc>
    2050:	88 23       	and	r24, r24
    2052:	52 f0       	brmi	.+20     	; 0x2068 <__fp_round+0x20>
    2054:	bb 0f       	add	r27, r27
    2056:	40 f4       	brcc	.+16     	; 0x2068 <__fp_round+0x20>
    2058:	bf 2b       	or	r27, r31
    205a:	11 f4       	brne	.+4      	; 0x2060 <__fp_round+0x18>
    205c:	60 ff       	sbrs	r22, 0
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <__fp_round+0x20>
    2060:	6f 5f       	subi	r22, 0xFF	; 255
    2062:	7f 4f       	sbci	r23, 0xFF	; 255
    2064:	8f 4f       	sbci	r24, 0xFF	; 255
    2066:	9f 4f       	sbci	r25, 0xFF	; 255
    2068:	08 95       	ret

0000206a <__fp_split3>:
    206a:	57 fd       	sbrc	r21, 7
    206c:	90 58       	subi	r25, 0x80	; 128
    206e:	44 0f       	add	r20, r20
    2070:	55 1f       	adc	r21, r21
    2072:	59 f0       	breq	.+22     	; 0x208a <__fp_splitA+0x10>
    2074:	5f 3f       	cpi	r21, 0xFF	; 255
    2076:	71 f0       	breq	.+28     	; 0x2094 <__fp_splitA+0x1a>
    2078:	47 95       	ror	r20

0000207a <__fp_splitA>:
    207a:	88 0f       	add	r24, r24
    207c:	97 fb       	bst	r25, 7
    207e:	99 1f       	adc	r25, r25
    2080:	61 f0       	breq	.+24     	; 0x209a <__fp_splitA+0x20>
    2082:	9f 3f       	cpi	r25, 0xFF	; 255
    2084:	79 f0       	breq	.+30     	; 0x20a4 <__fp_splitA+0x2a>
    2086:	87 95       	ror	r24
    2088:	08 95       	ret
    208a:	12 16       	cp	r1, r18
    208c:	13 06       	cpc	r1, r19
    208e:	14 06       	cpc	r1, r20
    2090:	55 1f       	adc	r21, r21
    2092:	f2 cf       	rjmp	.-28     	; 0x2078 <__fp_split3+0xe>
    2094:	46 95       	lsr	r20
    2096:	f1 df       	rcall	.-30     	; 0x207a <__fp_splitA>
    2098:	08 c0       	rjmp	.+16     	; 0x20aa <__fp_splitA+0x30>
    209a:	16 16       	cp	r1, r22
    209c:	17 06       	cpc	r1, r23
    209e:	18 06       	cpc	r1, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	f1 cf       	rjmp	.-30     	; 0x2086 <__fp_splitA+0xc>
    20a4:	86 95       	lsr	r24
    20a6:	71 05       	cpc	r23, r1
    20a8:	61 05       	cpc	r22, r1
    20aa:	08 94       	sec
    20ac:	08 95       	ret

000020ae <__fp_zero>:
    20ae:	e8 94       	clt

000020b0 <__fp_szero>:
    20b0:	bb 27       	eor	r27, r27
    20b2:	66 27       	eor	r22, r22
    20b4:	77 27       	eor	r23, r23
    20b6:	cb 01       	movw	r24, r22
    20b8:	97 f9       	bld	r25, 7
    20ba:	08 95       	ret

000020bc <__mulsf3>:
    20bc:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__mulsf3x>
    20c0:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__fp_round>
    20c4:	0e 94 16 10 	call	0x202c	; 0x202c <__fp_pscA>
    20c8:	38 f0       	brcs	.+14     	; 0x20d8 <__mulsf3+0x1c>
    20ca:	0e 94 1d 10 	call	0x203a	; 0x203a <__fp_pscB>
    20ce:	20 f0       	brcs	.+8      	; 0x20d8 <__mulsf3+0x1c>
    20d0:	95 23       	and	r25, r21
    20d2:	11 f0       	breq	.+4      	; 0x20d8 <__mulsf3+0x1c>
    20d4:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__fp_inf>
    20d8:	0c 94 13 10 	jmp	0x2026	; 0x2026 <__fp_nan>
    20dc:	11 24       	eor	r1, r1
    20de:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__fp_szero>

000020e2 <__mulsf3x>:
    20e2:	0e 94 35 10 	call	0x206a	; 0x206a <__fp_split3>
    20e6:	70 f3       	brcs	.-36     	; 0x20c4 <__mulsf3+0x8>

000020e8 <__mulsf3_pse>:
    20e8:	95 9f       	mul	r25, r21
    20ea:	c1 f3       	breq	.-16     	; 0x20dc <__mulsf3+0x20>
    20ec:	95 0f       	add	r25, r21
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	55 1f       	adc	r21, r21
    20f2:	62 9f       	mul	r22, r18
    20f4:	f0 01       	movw	r30, r0
    20f6:	72 9f       	mul	r23, r18
    20f8:	bb 27       	eor	r27, r27
    20fa:	f0 0d       	add	r31, r0
    20fc:	b1 1d       	adc	r27, r1
    20fe:	63 9f       	mul	r22, r19
    2100:	aa 27       	eor	r26, r26
    2102:	f0 0d       	add	r31, r0
    2104:	b1 1d       	adc	r27, r1
    2106:	aa 1f       	adc	r26, r26
    2108:	64 9f       	mul	r22, r20
    210a:	66 27       	eor	r22, r22
    210c:	b0 0d       	add	r27, r0
    210e:	a1 1d       	adc	r26, r1
    2110:	66 1f       	adc	r22, r22
    2112:	82 9f       	mul	r24, r18
    2114:	22 27       	eor	r18, r18
    2116:	b0 0d       	add	r27, r0
    2118:	a1 1d       	adc	r26, r1
    211a:	62 1f       	adc	r22, r18
    211c:	73 9f       	mul	r23, r19
    211e:	b0 0d       	add	r27, r0
    2120:	a1 1d       	adc	r26, r1
    2122:	62 1f       	adc	r22, r18
    2124:	83 9f       	mul	r24, r19
    2126:	a0 0d       	add	r26, r0
    2128:	61 1d       	adc	r22, r1
    212a:	22 1f       	adc	r18, r18
    212c:	74 9f       	mul	r23, r20
    212e:	33 27       	eor	r19, r19
    2130:	a0 0d       	add	r26, r0
    2132:	61 1d       	adc	r22, r1
    2134:	23 1f       	adc	r18, r19
    2136:	84 9f       	mul	r24, r20
    2138:	60 0d       	add	r22, r0
    213a:	21 1d       	adc	r18, r1
    213c:	82 2f       	mov	r24, r18
    213e:	76 2f       	mov	r23, r22
    2140:	6a 2f       	mov	r22, r26
    2142:	11 24       	eor	r1, r1
    2144:	9f 57       	subi	r25, 0x7F	; 127
    2146:	50 40       	sbci	r21, 0x00	; 0
    2148:	9a f0       	brmi	.+38     	; 0x2170 <__mulsf3_pse+0x88>
    214a:	f1 f0       	breq	.+60     	; 0x2188 <__mulsf3_pse+0xa0>
    214c:	88 23       	and	r24, r24
    214e:	4a f0       	brmi	.+18     	; 0x2162 <__mulsf3_pse+0x7a>
    2150:	ee 0f       	add	r30, r30
    2152:	ff 1f       	adc	r31, r31
    2154:	bb 1f       	adc	r27, r27
    2156:	66 1f       	adc	r22, r22
    2158:	77 1f       	adc	r23, r23
    215a:	88 1f       	adc	r24, r24
    215c:	91 50       	subi	r25, 0x01	; 1
    215e:	50 40       	sbci	r21, 0x00	; 0
    2160:	a9 f7       	brne	.-22     	; 0x214c <__mulsf3_pse+0x64>
    2162:	9e 3f       	cpi	r25, 0xFE	; 254
    2164:	51 05       	cpc	r21, r1
    2166:	80 f0       	brcs	.+32     	; 0x2188 <__mulsf3_pse+0xa0>
    2168:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__fp_inf>
    216c:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__fp_szero>
    2170:	5f 3f       	cpi	r21, 0xFF	; 255
    2172:	e4 f3       	brlt	.-8      	; 0x216c <__mulsf3_pse+0x84>
    2174:	98 3e       	cpi	r25, 0xE8	; 232
    2176:	d4 f3       	brlt	.-12     	; 0x216c <__mulsf3_pse+0x84>
    2178:	86 95       	lsr	r24
    217a:	77 95       	ror	r23
    217c:	67 95       	ror	r22
    217e:	b7 95       	ror	r27
    2180:	f7 95       	ror	r31
    2182:	e7 95       	ror	r30
    2184:	9f 5f       	subi	r25, 0xFF	; 255
    2186:	c1 f7       	brne	.-16     	; 0x2178 <__mulsf3_pse+0x90>
    2188:	fe 2b       	or	r31, r30
    218a:	88 0f       	add	r24, r24
    218c:	91 1d       	adc	r25, r1
    218e:	96 95       	lsr	r25
    2190:	87 95       	ror	r24
    2192:	97 f9       	bld	r25, 7
    2194:	08 95       	ret

00002196 <__divmodhi4>:
    2196:	97 fb       	bst	r25, 7
    2198:	07 2e       	mov	r0, r23
    219a:	16 f4       	brtc	.+4      	; 0x21a0 <__divmodhi4+0xa>
    219c:	00 94       	com	r0
    219e:	07 d0       	rcall	.+14     	; 0x21ae <__divmodhi4_neg1>
    21a0:	77 fd       	sbrc	r23, 7
    21a2:	09 d0       	rcall	.+18     	; 0x21b6 <__divmodhi4_neg2>
    21a4:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__udivmodhi4>
    21a8:	07 fc       	sbrc	r0, 7
    21aa:	05 d0       	rcall	.+10     	; 0x21b6 <__divmodhi4_neg2>
    21ac:	3e f4       	brtc	.+14     	; 0x21bc <__divmodhi4_exit>

000021ae <__divmodhi4_neg1>:
    21ae:	90 95       	com	r25
    21b0:	81 95       	neg	r24
    21b2:	9f 4f       	sbci	r25, 0xFF	; 255
    21b4:	08 95       	ret

000021b6 <__divmodhi4_neg2>:
    21b6:	70 95       	com	r23
    21b8:	61 95       	neg	r22
    21ba:	7f 4f       	sbci	r23, 0xFF	; 255

000021bc <__divmodhi4_exit>:
    21bc:	08 95       	ret

000021be <__udivmodsi4>:
    21be:	a1 e2       	ldi	r26, 0x21	; 33
    21c0:	1a 2e       	mov	r1, r26
    21c2:	aa 1b       	sub	r26, r26
    21c4:	bb 1b       	sub	r27, r27
    21c6:	fd 01       	movw	r30, r26
    21c8:	0d c0       	rjmp	.+26     	; 0x21e4 <__udivmodsi4_ep>

000021ca <__udivmodsi4_loop>:
    21ca:	aa 1f       	adc	r26, r26
    21cc:	bb 1f       	adc	r27, r27
    21ce:	ee 1f       	adc	r30, r30
    21d0:	ff 1f       	adc	r31, r31
    21d2:	a2 17       	cp	r26, r18
    21d4:	b3 07       	cpc	r27, r19
    21d6:	e4 07       	cpc	r30, r20
    21d8:	f5 07       	cpc	r31, r21
    21da:	20 f0       	brcs	.+8      	; 0x21e4 <__udivmodsi4_ep>
    21dc:	a2 1b       	sub	r26, r18
    21de:	b3 0b       	sbc	r27, r19
    21e0:	e4 0b       	sbc	r30, r20
    21e2:	f5 0b       	sbc	r31, r21

000021e4 <__udivmodsi4_ep>:
    21e4:	66 1f       	adc	r22, r22
    21e6:	77 1f       	adc	r23, r23
    21e8:	88 1f       	adc	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	1a 94       	dec	r1
    21ee:	69 f7       	brne	.-38     	; 0x21ca <__udivmodsi4_loop>
    21f0:	60 95       	com	r22
    21f2:	70 95       	com	r23
    21f4:	80 95       	com	r24
    21f6:	90 95       	com	r25
    21f8:	9b 01       	movw	r18, r22
    21fa:	ac 01       	movw	r20, r24
    21fc:	bd 01       	movw	r22, r26
    21fe:	cf 01       	movw	r24, r30
    2200:	08 95       	ret

00002202 <__divmodsi4>:
    2202:	05 2e       	mov	r0, r21
    2204:	97 fb       	bst	r25, 7
    2206:	1e f4       	brtc	.+6      	; 0x220e <__divmodsi4+0xc>
    2208:	00 94       	com	r0
    220a:	0e 94 18 11 	call	0x2230	; 0x2230 <__negsi2>
    220e:	57 fd       	sbrc	r21, 7
    2210:	07 d0       	rcall	.+14     	; 0x2220 <__divmodsi4_neg2>
    2212:	0e 94 df 10 	call	0x21be	; 0x21be <__udivmodsi4>
    2216:	07 fc       	sbrc	r0, 7
    2218:	03 d0       	rcall	.+6      	; 0x2220 <__divmodsi4_neg2>
    221a:	4e f4       	brtc	.+18     	; 0x222e <__divmodsi4_exit>
    221c:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__negsi2>

00002220 <__divmodsi4_neg2>:
    2220:	50 95       	com	r21
    2222:	40 95       	com	r20
    2224:	30 95       	com	r19
    2226:	21 95       	neg	r18
    2228:	3f 4f       	sbci	r19, 0xFF	; 255
    222a:	4f 4f       	sbci	r20, 0xFF	; 255
    222c:	5f 4f       	sbci	r21, 0xFF	; 255

0000222e <__divmodsi4_exit>:
    222e:	08 95       	ret

00002230 <__negsi2>:
    2230:	90 95       	com	r25
    2232:	80 95       	com	r24
    2234:	70 95       	com	r23
    2236:	61 95       	neg	r22
    2238:	7f 4f       	sbci	r23, 0xFF	; 255
    223a:	8f 4f       	sbci	r24, 0xFF	; 255
    223c:	9f 4f       	sbci	r25, 0xFF	; 255
    223e:	08 95       	ret

00002240 <__umulhisi3>:
    2240:	a2 9f       	mul	r26, r18
    2242:	b0 01       	movw	r22, r0
    2244:	b3 9f       	mul	r27, r19
    2246:	c0 01       	movw	r24, r0
    2248:	a3 9f       	mul	r26, r19
    224a:	70 0d       	add	r23, r0
    224c:	81 1d       	adc	r24, r1
    224e:	11 24       	eor	r1, r1
    2250:	91 1d       	adc	r25, r1
    2252:	b2 9f       	mul	r27, r18
    2254:	70 0d       	add	r23, r0
    2256:	81 1d       	adc	r24, r1
    2258:	11 24       	eor	r1, r1
    225a:	91 1d       	adc	r25, r1
    225c:	08 95       	ret

0000225e <__ashldi3>:
    225e:	0f 93       	push	r16
    2260:	08 30       	cpi	r16, 0x08	; 8
    2262:	90 f0       	brcs	.+36     	; 0x2288 <__ashldi3+0x2a>
    2264:	98 2f       	mov	r25, r24
    2266:	87 2f       	mov	r24, r23
    2268:	76 2f       	mov	r23, r22
    226a:	65 2f       	mov	r22, r21
    226c:	54 2f       	mov	r21, r20
    226e:	43 2f       	mov	r20, r19
    2270:	32 2f       	mov	r19, r18
    2272:	22 27       	eor	r18, r18
    2274:	08 50       	subi	r16, 0x08	; 8
    2276:	f4 cf       	rjmp	.-24     	; 0x2260 <__ashldi3+0x2>
    2278:	22 0f       	add	r18, r18
    227a:	33 1f       	adc	r19, r19
    227c:	44 1f       	adc	r20, r20
    227e:	55 1f       	adc	r21, r21
    2280:	66 1f       	adc	r22, r22
    2282:	77 1f       	adc	r23, r23
    2284:	88 1f       	adc	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	0a 95       	dec	r16
    228a:	b2 f7       	brpl	.-20     	; 0x2278 <__ashldi3+0x1a>
    228c:	0f 91       	pop	r16
    228e:	08 95       	ret

00002290 <__ashrdi3>:
    2290:	97 fb       	bst	r25, 7
    2292:	10 f8       	bld	r1, 0

00002294 <__lshrdi3>:
    2294:	16 94       	lsr	r1
    2296:	00 08       	sbc	r0, r0
    2298:	0f 93       	push	r16
    229a:	08 30       	cpi	r16, 0x08	; 8
    229c:	98 f0       	brcs	.+38     	; 0x22c4 <__lshrdi3+0x30>
    229e:	08 50       	subi	r16, 0x08	; 8
    22a0:	23 2f       	mov	r18, r19
    22a2:	34 2f       	mov	r19, r20
    22a4:	45 2f       	mov	r20, r21
    22a6:	56 2f       	mov	r21, r22
    22a8:	67 2f       	mov	r22, r23
    22aa:	78 2f       	mov	r23, r24
    22ac:	89 2f       	mov	r24, r25
    22ae:	90 2d       	mov	r25, r0
    22b0:	f4 cf       	rjmp	.-24     	; 0x229a <__lshrdi3+0x6>
    22b2:	05 94       	asr	r0
    22b4:	97 95       	ror	r25
    22b6:	87 95       	ror	r24
    22b8:	77 95       	ror	r23
    22ba:	67 95       	ror	r22
    22bc:	57 95       	ror	r21
    22be:	47 95       	ror	r20
    22c0:	37 95       	ror	r19
    22c2:	27 95       	ror	r18
    22c4:	0a 95       	dec	r16
    22c6:	aa f7       	brpl	.-22     	; 0x22b2 <__lshrdi3+0x1e>
    22c8:	0f 91       	pop	r16
    22ca:	08 95       	ret

000022cc <__adddi3_s8>:
    22cc:	00 24       	eor	r0, r0
    22ce:	a7 fd       	sbrc	r26, 7
    22d0:	00 94       	com	r0
    22d2:	2a 0f       	add	r18, r26
    22d4:	30 1d       	adc	r19, r0
    22d6:	40 1d       	adc	r20, r0
    22d8:	50 1d       	adc	r21, r0
    22da:	60 1d       	adc	r22, r0
    22dc:	70 1d       	adc	r23, r0
    22de:	80 1d       	adc	r24, r0
    22e0:	90 1d       	adc	r25, r0
    22e2:	08 95       	ret

000022e4 <__cmpdi2_s8>:
    22e4:	00 24       	eor	r0, r0
    22e6:	a7 fd       	sbrc	r26, 7
    22e8:	00 94       	com	r0
    22ea:	2a 17       	cp	r18, r26
    22ec:	30 05       	cpc	r19, r0
    22ee:	40 05       	cpc	r20, r0
    22f0:	50 05       	cpc	r21, r0
    22f2:	60 05       	cpc	r22, r0
    22f4:	70 05       	cpc	r23, r0
    22f6:	80 05       	cpc	r24, r0
    22f8:	90 05       	cpc	r25, r0
    22fa:	08 95       	ret

000022fc <__udivmodhi4>:
    22fc:	aa 1b       	sub	r26, r26
    22fe:	bb 1b       	sub	r27, r27
    2300:	51 e1       	ldi	r21, 0x11	; 17
    2302:	07 c0       	rjmp	.+14     	; 0x2312 <__udivmodhi4_ep>

00002304 <__udivmodhi4_loop>:
    2304:	aa 1f       	adc	r26, r26
    2306:	bb 1f       	adc	r27, r27
    2308:	a6 17       	cp	r26, r22
    230a:	b7 07       	cpc	r27, r23
    230c:	10 f0       	brcs	.+4      	; 0x2312 <__udivmodhi4_ep>
    230e:	a6 1b       	sub	r26, r22
    2310:	b7 0b       	sbc	r27, r23

00002312 <__udivmodhi4_ep>:
    2312:	88 1f       	adc	r24, r24
    2314:	99 1f       	adc	r25, r25
    2316:	5a 95       	dec	r21
    2318:	a9 f7       	brne	.-22     	; 0x2304 <__udivmodhi4_loop>
    231a:	80 95       	com	r24
    231c:	90 95       	com	r25
    231e:	bc 01       	movw	r22, r24
    2320:	cd 01       	movw	r24, r26
    2322:	08 95       	ret

00002324 <strtol>:
    2324:	a0 e0       	ldi	r26, 0x00	; 0
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e8 e9       	ldi	r30, 0x98	; 152
    232a:	f1 e1       	ldi	r31, 0x11	; 17
    232c:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__prologue_saves__+0x2>
    2330:	5c 01       	movw	r10, r24
    2332:	6b 01       	movw	r12, r22
    2334:	7a 01       	movw	r14, r20
    2336:	61 15       	cp	r22, r1
    2338:	71 05       	cpc	r23, r1
    233a:	19 f0       	breq	.+6      	; 0x2342 <strtol+0x1e>
    233c:	fb 01       	movw	r30, r22
    233e:	80 83       	st	Z, r24
    2340:	91 83       	std	Z+1, r25	; 0x01
    2342:	e1 14       	cp	r14, r1
    2344:	f1 04       	cpc	r15, r1
    2346:	29 f0       	breq	.+10     	; 0x2352 <strtol+0x2e>
    2348:	c7 01       	movw	r24, r14
    234a:	02 97       	sbiw	r24, 0x02	; 2
    234c:	83 97       	sbiw	r24, 0x23	; 35
    234e:	08 f0       	brcs	.+2      	; 0x2352 <strtol+0x2e>
    2350:	e5 c0       	rjmp	.+458    	; 0x251c <strtol+0x1f8>
    2352:	e5 01       	movw	r28, r10
    2354:	21 96       	adiw	r28, 0x01	; 1
    2356:	f5 01       	movw	r30, r10
    2358:	10 81       	ld	r17, Z
    235a:	81 2f       	mov	r24, r17
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	0e 94 a8 12 	call	0x2550	; 0x2550 <isspace>
    2362:	89 2b       	or	r24, r25
    2364:	11 f0       	breq	.+4      	; 0x236a <strtol+0x46>
    2366:	5e 01       	movw	r10, r28
    2368:	f4 cf       	rjmp	.-24     	; 0x2352 <strtol+0x2e>
    236a:	1d 32       	cpi	r17, 0x2D	; 45
    236c:	29 f4       	brne	.+10     	; 0x2378 <strtol+0x54>
    236e:	21 96       	adiw	r28, 0x01	; 1
    2370:	f5 01       	movw	r30, r10
    2372:	11 81       	ldd	r17, Z+1	; 0x01
    2374:	01 e0       	ldi	r16, 0x01	; 1
    2376:	07 c0       	rjmp	.+14     	; 0x2386 <strtol+0x62>
    2378:	1b 32       	cpi	r17, 0x2B	; 43
    237a:	21 f4       	brne	.+8      	; 0x2384 <strtol+0x60>
    237c:	e5 01       	movw	r28, r10
    237e:	22 96       	adiw	r28, 0x02	; 2
    2380:	f5 01       	movw	r30, r10
    2382:	11 81       	ldd	r17, Z+1	; 0x01
    2384:	00 e0       	ldi	r16, 0x00	; 0
    2386:	e1 14       	cp	r14, r1
    2388:	f1 04       	cpc	r15, r1
    238a:	09 f1       	breq	.+66     	; 0x23ce <strtol+0xaa>
    238c:	f0 e1       	ldi	r31, 0x10	; 16
    238e:	ef 16       	cp	r14, r31
    2390:	f1 04       	cpc	r15, r1
    2392:	29 f4       	brne	.+10     	; 0x239e <strtol+0x7a>
    2394:	3f c0       	rjmp	.+126    	; 0x2414 <strtol+0xf0>
    2396:	10 e3       	ldi	r17, 0x30	; 48
    2398:	e1 14       	cp	r14, r1
    239a:	f1 04       	cpc	r15, r1
    239c:	21 f1       	breq	.+72     	; 0x23e6 <strtol+0xc2>
    239e:	28 e0       	ldi	r18, 0x08	; 8
    23a0:	e2 16       	cp	r14, r18
    23a2:	f1 04       	cpc	r15, r1
    23a4:	01 f1       	breq	.+64     	; 0x23e6 <strtol+0xc2>
    23a6:	54 f4       	brge	.+20     	; 0x23bc <strtol+0x98>
    23a8:	e2 e0       	ldi	r30, 0x02	; 2
    23aa:	ee 16       	cp	r14, r30
    23ac:	f1 04       	cpc	r15, r1
    23ae:	21 f5       	brne	.+72     	; 0x23f8 <strtol+0xd4>
    23b0:	81 2c       	mov	r8, r1
    23b2:	91 2c       	mov	r9, r1
    23b4:	a1 2c       	mov	r10, r1
    23b6:	b0 e4       	ldi	r27, 0x40	; 64
    23b8:	bb 2e       	mov	r11, r27
    23ba:	3e c0       	rjmp	.+124    	; 0x2438 <strtol+0x114>
    23bc:	fa e0       	ldi	r31, 0x0A	; 10
    23be:	ef 16       	cp	r14, r31
    23c0:	f1 04       	cpc	r15, r1
    23c2:	39 f0       	breq	.+14     	; 0x23d2 <strtol+0xae>
    23c4:	20 e1       	ldi	r18, 0x10	; 16
    23c6:	e2 16       	cp	r14, r18
    23c8:	f1 04       	cpc	r15, r1
    23ca:	b1 f4       	brne	.+44     	; 0x23f8 <strtol+0xd4>
    23cc:	30 c0       	rjmp	.+96     	; 0x242e <strtol+0x10a>
    23ce:	10 33       	cpi	r17, 0x30	; 48
    23d0:	19 f1       	breq	.+70     	; 0x2418 <strtol+0xf4>
    23d2:	fa e0       	ldi	r31, 0x0A	; 10
    23d4:	ef 2e       	mov	r14, r31
    23d6:	f1 2c       	mov	r15, r1
    23d8:	ac ec       	ldi	r26, 0xCC	; 204
    23da:	8a 2e       	mov	r8, r26
    23dc:	98 2c       	mov	r9, r8
    23de:	a8 2c       	mov	r10, r8
    23e0:	ac e0       	ldi	r26, 0x0C	; 12
    23e2:	ba 2e       	mov	r11, r26
    23e4:	29 c0       	rjmp	.+82     	; 0x2438 <strtol+0x114>
    23e6:	78 e0       	ldi	r23, 0x08	; 8
    23e8:	e7 2e       	mov	r14, r23
    23ea:	f1 2c       	mov	r15, r1
    23ec:	81 2c       	mov	r8, r1
    23ee:	91 2c       	mov	r9, r1
    23f0:	a1 2c       	mov	r10, r1
    23f2:	e0 e1       	ldi	r30, 0x10	; 16
    23f4:	be 2e       	mov	r11, r30
    23f6:	20 c0       	rjmp	.+64     	; 0x2438 <strtol+0x114>
    23f8:	60 e0       	ldi	r22, 0x00	; 0
    23fa:	70 e0       	ldi	r23, 0x00	; 0
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e8       	ldi	r25, 0x80	; 128
    2400:	97 01       	movw	r18, r14
    2402:	0f 2c       	mov	r0, r15
    2404:	00 0c       	add	r0, r0
    2406:	44 0b       	sbc	r20, r20
    2408:	55 0b       	sbc	r21, r21
    240a:	0e 94 df 10 	call	0x21be	; 0x21be <__udivmodsi4>
    240e:	49 01       	movw	r8, r18
    2410:	5a 01       	movw	r10, r20
    2412:	12 c0       	rjmp	.+36     	; 0x2438 <strtol+0x114>
    2414:	10 33       	cpi	r17, 0x30	; 48
    2416:	59 f4       	brne	.+22     	; 0x242e <strtol+0x10a>
    2418:	88 81       	ld	r24, Y
    241a:	8f 7d       	andi	r24, 0xDF	; 223
    241c:	88 35       	cpi	r24, 0x58	; 88
    241e:	09 f0       	breq	.+2      	; 0x2422 <strtol+0xfe>
    2420:	ba cf       	rjmp	.-140    	; 0x2396 <strtol+0x72>
    2422:	19 81       	ldd	r17, Y+1	; 0x01
    2424:	22 96       	adiw	r28, 0x02	; 2
    2426:	02 60       	ori	r16, 0x02	; 2
    2428:	80 e1       	ldi	r24, 0x10	; 16
    242a:	e8 2e       	mov	r14, r24
    242c:	f1 2c       	mov	r15, r1
    242e:	81 2c       	mov	r8, r1
    2430:	91 2c       	mov	r9, r1
    2432:	a1 2c       	mov	r10, r1
    2434:	68 e0       	ldi	r22, 0x08	; 8
    2436:	b6 2e       	mov	r11, r22
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	70 e0       	ldi	r23, 0x00	; 0
    243e:	cb 01       	movw	r24, r22
    2440:	27 01       	movw	r4, r14
    2442:	0f 2c       	mov	r0, r15
    2444:	00 0c       	add	r0, r0
    2446:	66 08       	sbc	r6, r6
    2448:	77 08       	sbc	r7, r7
    244a:	fe 01       	movw	r30, r28
    244c:	50 ed       	ldi	r21, 0xD0	; 208
    244e:	35 2e       	mov	r3, r21
    2450:	31 0e       	add	r3, r17
    2452:	29 e0       	ldi	r18, 0x09	; 9
    2454:	23 15       	cp	r18, r3
    2456:	70 f4       	brcc	.+28     	; 0x2474 <strtol+0x150>
    2458:	2f eb       	ldi	r18, 0xBF	; 191
    245a:	21 0f       	add	r18, r17
    245c:	2a 31       	cpi	r18, 0x1A	; 26
    245e:	18 f4       	brcc	.+6      	; 0x2466 <strtol+0x142>
    2460:	39 ec       	ldi	r19, 0xC9	; 201
    2462:	33 2e       	mov	r3, r19
    2464:	06 c0       	rjmp	.+12     	; 0x2472 <strtol+0x14e>
    2466:	2f e9       	ldi	r18, 0x9F	; 159
    2468:	21 0f       	add	r18, r17
    246a:	2a 31       	cpi	r18, 0x1A	; 26
    246c:	18 f5       	brcc	.+70     	; 0x24b4 <strtol+0x190>
    246e:	29 ea       	ldi	r18, 0xA9	; 169
    2470:	32 2e       	mov	r3, r18
    2472:	31 0e       	add	r3, r17
    2474:	23 2d       	mov	r18, r3
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	2e 15       	cp	r18, r14
    247a:	3f 05       	cpc	r19, r15
    247c:	dc f4       	brge	.+54     	; 0x24b4 <strtol+0x190>
    247e:	47 fd       	sbrc	r20, 7
    2480:	16 c0       	rjmp	.+44     	; 0x24ae <strtol+0x18a>
    2482:	86 16       	cp	r8, r22
    2484:	97 06       	cpc	r9, r23
    2486:	a8 06       	cpc	r10, r24
    2488:	b9 06       	cpc	r11, r25
    248a:	70 f0       	brcs	.+28     	; 0x24a8 <strtol+0x184>
    248c:	a3 01       	movw	r20, r6
    248e:	92 01       	movw	r18, r4
    2490:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <__mulsi3>
    2494:	63 0d       	add	r22, r3
    2496:	71 1d       	adc	r23, r1
    2498:	81 1d       	adc	r24, r1
    249a:	91 1d       	adc	r25, r1
    249c:	61 30       	cpi	r22, 0x01	; 1
    249e:	71 05       	cpc	r23, r1
    24a0:	81 05       	cpc	r24, r1
    24a2:	20 e8       	ldi	r18, 0x80	; 128
    24a4:	92 07       	cpc	r25, r18
    24a6:	10 f0       	brcs	.+4      	; 0x24ac <strtol+0x188>
    24a8:	4f ef       	ldi	r20, 0xFF	; 255
    24aa:	01 c0       	rjmp	.+2      	; 0x24ae <strtol+0x18a>
    24ac:	41 e0       	ldi	r20, 0x01	; 1
    24ae:	21 96       	adiw	r28, 0x01	; 1
    24b0:	10 81       	ld	r17, Z
    24b2:	cb cf       	rjmp	.-106    	; 0x244a <strtol+0x126>
    24b4:	20 2f       	mov	r18, r16
    24b6:	21 70       	andi	r18, 0x01	; 1
    24b8:	c1 14       	cp	r12, r1
    24ba:	d1 04       	cpc	r13, r1
    24bc:	71 f0       	breq	.+28     	; 0x24da <strtol+0x1b6>
    24be:	44 23       	and	r20, r20
    24c0:	29 f0       	breq	.+10     	; 0x24cc <strtol+0x1a8>
    24c2:	21 97       	sbiw	r28, 0x01	; 1
    24c4:	f6 01       	movw	r30, r12
    24c6:	c0 83       	st	Z, r28
    24c8:	d1 83       	std	Z+1, r29	; 0x01
    24ca:	07 c0       	rjmp	.+14     	; 0x24da <strtol+0x1b6>
    24cc:	01 ff       	sbrs	r16, 1
    24ce:	19 c0       	rjmp	.+50     	; 0x2502 <strtol+0x1de>
    24d0:	22 97       	sbiw	r28, 0x02	; 2
    24d2:	f6 01       	movw	r30, r12
    24d4:	c0 83       	st	Z, r28
    24d6:	d1 83       	std	Z+1, r29	; 0x01
    24d8:	14 c0       	rjmp	.+40     	; 0x2502 <strtol+0x1de>
    24da:	47 ff       	sbrs	r20, 7
    24dc:	12 c0       	rjmp	.+36     	; 0x2502 <strtol+0x1de>
    24de:	22 23       	and	r18, r18
    24e0:	29 f0       	breq	.+10     	; 0x24ec <strtol+0x1c8>
    24e2:	60 e0       	ldi	r22, 0x00	; 0
    24e4:	70 e0       	ldi	r23, 0x00	; 0
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	90 e8       	ldi	r25, 0x80	; 128
    24ea:	04 c0       	rjmp	.+8      	; 0x24f4 <strtol+0x1d0>
    24ec:	6f ef       	ldi	r22, 0xFF	; 255
    24ee:	7f ef       	ldi	r23, 0xFF	; 255
    24f0:	8f ef       	ldi	r24, 0xFF	; 255
    24f2:	9f e7       	ldi	r25, 0x7F	; 127
    24f4:	22 e2       	ldi	r18, 0x22	; 34
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	20 93 10 66 	sts	0x6610, r18	; 0x806610 <errno>
    24fc:	30 93 11 66 	sts	0x6611, r19	; 0x806611 <errno+0x1>
    2500:	09 c0       	rjmp	.+18     	; 0x2514 <strtol+0x1f0>
    2502:	22 23       	and	r18, r18
    2504:	81 f0       	breq	.+32     	; 0x2526 <strtol+0x202>
    2506:	90 95       	com	r25
    2508:	80 95       	com	r24
    250a:	70 95       	com	r23
    250c:	61 95       	neg	r22
    250e:	7f 4f       	sbci	r23, 0xFF	; 255
    2510:	8f 4f       	sbci	r24, 0xFF	; 255
    2512:	9f 4f       	sbci	r25, 0xFF	; 255
    2514:	46 2f       	mov	r20, r22
    2516:	37 2f       	mov	r19, r23
    2518:	28 2f       	mov	r18, r24
    251a:	12 c0       	rjmp	.+36     	; 0x2540 <strtol+0x21c>
    251c:	40 e0       	ldi	r20, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	0d c0       	rjmp	.+26     	; 0x2540 <strtol+0x21c>
    2526:	97 ff       	sbrs	r25, 7
    2528:	f5 cf       	rjmp	.-22     	; 0x2514 <strtol+0x1f0>
    252a:	82 e2       	ldi	r24, 0x22	; 34
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	80 93 10 66 	sts	0x6610, r24	; 0x806610 <errno>
    2532:	90 93 11 66 	sts	0x6611, r25	; 0x806611 <errno+0x1>
    2536:	6f ef       	ldi	r22, 0xFF	; 255
    2538:	7f ef       	ldi	r23, 0xFF	; 255
    253a:	8f ef       	ldi	r24, 0xFF	; 255
    253c:	9f e7       	ldi	r25, 0x7F	; 127
    253e:	ea cf       	rjmp	.-44     	; 0x2514 <strtol+0x1f0>
    2540:	64 2f       	mov	r22, r20
    2542:	73 2f       	mov	r23, r19
    2544:	82 2f       	mov	r24, r18
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	e1 e1       	ldi	r30, 0x11	; 17
    254c:	0c 94 e2 15 	jmp	0x2bc4	; 0x2bc4 <__epilogue_restores__+0x2>

00002550 <isspace>:
    2550:	91 11       	cpse	r25, r1
    2552:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <__ctype_isfalse>
    2556:	80 32       	cpi	r24, 0x20	; 32
    2558:	19 f0       	breq	.+6      	; 0x2560 <isspace+0x10>
    255a:	89 50       	subi	r24, 0x09	; 9
    255c:	85 50       	subi	r24, 0x05	; 5
    255e:	c8 f7       	brcc	.-14     	; 0x2552 <isspace+0x2>
    2560:	08 95       	ret

00002562 <memcpy>:
    2562:	fb 01       	movw	r30, r22
    2564:	dc 01       	movw	r26, r24
    2566:	02 c0       	rjmp	.+4      	; 0x256c <memcpy+0xa>
    2568:	01 90       	ld	r0, Z+
    256a:	0d 92       	st	X+, r0
    256c:	41 50       	subi	r20, 0x01	; 1
    256e:	50 40       	sbci	r21, 0x00	; 0
    2570:	d8 f7       	brcc	.-10     	; 0x2568 <memcpy+0x6>
    2572:	08 95       	ret

00002574 <strcmp>:
    2574:	fb 01       	movw	r30, r22
    2576:	dc 01       	movw	r26, r24
    2578:	8d 91       	ld	r24, X+
    257a:	01 90       	ld	r0, Z+
    257c:	80 19       	sub	r24, r0
    257e:	01 10       	cpse	r0, r1
    2580:	d9 f3       	breq	.-10     	; 0x2578 <strcmp+0x4>
    2582:	99 0b       	sbc	r25, r25
    2584:	08 95       	ret

00002586 <strcpy>:
    2586:	fb 01       	movw	r30, r22
    2588:	dc 01       	movw	r26, r24
    258a:	01 90       	ld	r0, Z+
    258c:	0d 92       	st	X+, r0
    258e:	00 20       	and	r0, r0
    2590:	e1 f7       	brne	.-8      	; 0x258a <strcpy+0x4>
    2592:	08 95       	ret

00002594 <strncmp>:
    2594:	fb 01       	movw	r30, r22
    2596:	dc 01       	movw	r26, r24
    2598:	41 50       	subi	r20, 0x01	; 1
    259a:	50 40       	sbci	r21, 0x00	; 0
    259c:	30 f0       	brcs	.+12     	; 0x25aa <strncmp+0x16>
    259e:	8d 91       	ld	r24, X+
    25a0:	01 90       	ld	r0, Z+
    25a2:	80 19       	sub	r24, r0
    25a4:	19 f4       	brne	.+6      	; 0x25ac <strncmp+0x18>
    25a6:	00 20       	and	r0, r0
    25a8:	b9 f7       	brne	.-18     	; 0x2598 <strncmp+0x4>
    25aa:	88 1b       	sub	r24, r24
    25ac:	99 0b       	sbc	r25, r25
    25ae:	08 95       	ret

000025b0 <strncpy>:
    25b0:	fb 01       	movw	r30, r22
    25b2:	dc 01       	movw	r26, r24
    25b4:	41 50       	subi	r20, 0x01	; 1
    25b6:	50 40       	sbci	r21, 0x00	; 0
    25b8:	48 f0       	brcs	.+18     	; 0x25cc <strncpy+0x1c>
    25ba:	01 90       	ld	r0, Z+
    25bc:	0d 92       	st	X+, r0
    25be:	00 20       	and	r0, r0
    25c0:	c9 f7       	brne	.-14     	; 0x25b4 <strncpy+0x4>
    25c2:	01 c0       	rjmp	.+2      	; 0x25c6 <strncpy+0x16>
    25c4:	1d 92       	st	X+, r1
    25c6:	41 50       	subi	r20, 0x01	; 1
    25c8:	50 40       	sbci	r21, 0x00	; 0
    25ca:	e0 f7       	brcc	.-8      	; 0x25c4 <strncpy+0x14>
    25cc:	08 95       	ret

000025ce <vsnprintf>:
    25ce:	ae e0       	ldi	r26, 0x0E	; 14
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	ed ee       	ldi	r30, 0xED	; 237
    25d4:	f2 e1       	ldi	r31, 0x12	; 18
    25d6:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__prologue_saves__+0x1c>
    25da:	8c 01       	movw	r16, r24
    25dc:	fa 01       	movw	r30, r20
    25de:	86 e0       	ldi	r24, 0x06	; 6
    25e0:	8c 83       	std	Y+4, r24	; 0x04
    25e2:	09 83       	std	Y+1, r16	; 0x01
    25e4:	1a 83       	std	Y+2, r17	; 0x02
    25e6:	77 ff       	sbrs	r23, 7
    25e8:	02 c0       	rjmp	.+4      	; 0x25ee <vsnprintf+0x20>
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	70 e8       	ldi	r23, 0x80	; 128
    25ee:	cb 01       	movw	r24, r22
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	8d 83       	std	Y+5, r24	; 0x05
    25f4:	9e 83       	std	Y+6, r25	; 0x06
    25f6:	a9 01       	movw	r20, r18
    25f8:	bf 01       	movw	r22, r30
    25fa:	ce 01       	movw	r24, r28
    25fc:	01 96       	adiw	r24, 0x01	; 1
    25fe:	0e 94 13 13 	call	0x2626	; 0x2626 <vfprintf>
    2602:	4d 81       	ldd	r20, Y+5	; 0x05
    2604:	5e 81       	ldd	r21, Y+6	; 0x06
    2606:	57 fd       	sbrc	r21, 7
    2608:	0a c0       	rjmp	.+20     	; 0x261e <vsnprintf+0x50>
    260a:	2f 81       	ldd	r18, Y+7	; 0x07
    260c:	38 85       	ldd	r19, Y+8	; 0x08
    260e:	42 17       	cp	r20, r18
    2610:	53 07       	cpc	r21, r19
    2612:	0c f4       	brge	.+2      	; 0x2616 <vsnprintf+0x48>
    2614:	9a 01       	movw	r18, r20
    2616:	f8 01       	movw	r30, r16
    2618:	e2 0f       	add	r30, r18
    261a:	f3 1f       	adc	r31, r19
    261c:	10 82       	st	Z, r1
    261e:	2e 96       	adiw	r28, 0x0e	; 14
    2620:	e4 e0       	ldi	r30, 0x04	; 4
    2622:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__epilogue_restores__+0x1c>

00002626 <vfprintf>:
    2626:	ab e0       	ldi	r26, 0x0B	; 11
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e9 e1       	ldi	r30, 0x19	; 25
    262c:	f3 e1       	ldi	r31, 0x13	; 19
    262e:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <__prologue_saves__>
    2632:	6c 01       	movw	r12, r24
    2634:	7b 01       	movw	r14, r22
    2636:	8a 01       	movw	r16, r20
    2638:	fc 01       	movw	r30, r24
    263a:	16 82       	std	Z+6, r1	; 0x06
    263c:	17 82       	std	Z+7, r1	; 0x07
    263e:	83 81       	ldd	r24, Z+3	; 0x03
    2640:	81 ff       	sbrs	r24, 1
    2642:	cc c1       	rjmp	.+920    	; 0x29dc <vfprintf+0x3b6>
    2644:	ce 01       	movw	r24, r28
    2646:	01 96       	adiw	r24, 0x01	; 1
    2648:	3c 01       	movw	r6, r24
    264a:	f6 01       	movw	r30, r12
    264c:	93 81       	ldd	r25, Z+3	; 0x03
    264e:	f7 01       	movw	r30, r14
    2650:	93 fd       	sbrc	r25, 3
    2652:	85 91       	lpm	r24, Z+
    2654:	93 ff       	sbrs	r25, 3
    2656:	81 91       	ld	r24, Z+
    2658:	7f 01       	movw	r14, r30
    265a:	88 23       	and	r24, r24
    265c:	09 f4       	brne	.+2      	; 0x2660 <vfprintf+0x3a>
    265e:	ba c1       	rjmp	.+884    	; 0x29d4 <vfprintf+0x3ae>
    2660:	85 32       	cpi	r24, 0x25	; 37
    2662:	39 f4       	brne	.+14     	; 0x2672 <vfprintf+0x4c>
    2664:	93 fd       	sbrc	r25, 3
    2666:	85 91       	lpm	r24, Z+
    2668:	93 ff       	sbrs	r25, 3
    266a:	81 91       	ld	r24, Z+
    266c:	7f 01       	movw	r14, r30
    266e:	85 32       	cpi	r24, 0x25	; 37
    2670:	29 f4       	brne	.+10     	; 0x267c <vfprintf+0x56>
    2672:	b6 01       	movw	r22, r12
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <fputc>
    267a:	e7 cf       	rjmp	.-50     	; 0x264a <vfprintf+0x24>
    267c:	91 2c       	mov	r9, r1
    267e:	21 2c       	mov	r2, r1
    2680:	31 2c       	mov	r3, r1
    2682:	ff e1       	ldi	r31, 0x1F	; 31
    2684:	f3 15       	cp	r31, r3
    2686:	d8 f0       	brcs	.+54     	; 0x26be <vfprintf+0x98>
    2688:	8b 32       	cpi	r24, 0x2B	; 43
    268a:	79 f0       	breq	.+30     	; 0x26aa <vfprintf+0x84>
    268c:	38 f4       	brcc	.+14     	; 0x269c <vfprintf+0x76>
    268e:	80 32       	cpi	r24, 0x20	; 32
    2690:	79 f0       	breq	.+30     	; 0x26b0 <vfprintf+0x8a>
    2692:	83 32       	cpi	r24, 0x23	; 35
    2694:	a1 f4       	brne	.+40     	; 0x26be <vfprintf+0x98>
    2696:	23 2d       	mov	r18, r3
    2698:	20 61       	ori	r18, 0x10	; 16
    269a:	1d c0       	rjmp	.+58     	; 0x26d6 <vfprintf+0xb0>
    269c:	8d 32       	cpi	r24, 0x2D	; 45
    269e:	61 f0       	breq	.+24     	; 0x26b8 <vfprintf+0x92>
    26a0:	80 33       	cpi	r24, 0x30	; 48
    26a2:	69 f4       	brne	.+26     	; 0x26be <vfprintf+0x98>
    26a4:	23 2d       	mov	r18, r3
    26a6:	21 60       	ori	r18, 0x01	; 1
    26a8:	16 c0       	rjmp	.+44     	; 0x26d6 <vfprintf+0xb0>
    26aa:	83 2d       	mov	r24, r3
    26ac:	82 60       	ori	r24, 0x02	; 2
    26ae:	38 2e       	mov	r3, r24
    26b0:	e3 2d       	mov	r30, r3
    26b2:	e4 60       	ori	r30, 0x04	; 4
    26b4:	3e 2e       	mov	r3, r30
    26b6:	2a c0       	rjmp	.+84     	; 0x270c <vfprintf+0xe6>
    26b8:	f3 2d       	mov	r31, r3
    26ba:	f8 60       	ori	r31, 0x08	; 8
    26bc:	1d c0       	rjmp	.+58     	; 0x26f8 <vfprintf+0xd2>
    26be:	37 fc       	sbrc	r3, 7
    26c0:	2d c0       	rjmp	.+90     	; 0x271c <vfprintf+0xf6>
    26c2:	20 ed       	ldi	r18, 0xD0	; 208
    26c4:	28 0f       	add	r18, r24
    26c6:	2a 30       	cpi	r18, 0x0A	; 10
    26c8:	40 f0       	brcs	.+16     	; 0x26da <vfprintf+0xb4>
    26ca:	8e 32       	cpi	r24, 0x2E	; 46
    26cc:	b9 f4       	brne	.+46     	; 0x26fc <vfprintf+0xd6>
    26ce:	36 fc       	sbrc	r3, 6
    26d0:	81 c1       	rjmp	.+770    	; 0x29d4 <vfprintf+0x3ae>
    26d2:	23 2d       	mov	r18, r3
    26d4:	20 64       	ori	r18, 0x40	; 64
    26d6:	32 2e       	mov	r3, r18
    26d8:	19 c0       	rjmp	.+50     	; 0x270c <vfprintf+0xe6>
    26da:	36 fe       	sbrs	r3, 6
    26dc:	06 c0       	rjmp	.+12     	; 0x26ea <vfprintf+0xc4>
    26de:	8a e0       	ldi	r24, 0x0A	; 10
    26e0:	98 9e       	mul	r9, r24
    26e2:	20 0d       	add	r18, r0
    26e4:	11 24       	eor	r1, r1
    26e6:	92 2e       	mov	r9, r18
    26e8:	11 c0       	rjmp	.+34     	; 0x270c <vfprintf+0xe6>
    26ea:	ea e0       	ldi	r30, 0x0A	; 10
    26ec:	2e 9e       	mul	r2, r30
    26ee:	20 0d       	add	r18, r0
    26f0:	11 24       	eor	r1, r1
    26f2:	22 2e       	mov	r2, r18
    26f4:	f3 2d       	mov	r31, r3
    26f6:	f0 62       	ori	r31, 0x20	; 32
    26f8:	3f 2e       	mov	r3, r31
    26fa:	08 c0       	rjmp	.+16     	; 0x270c <vfprintf+0xe6>
    26fc:	8c 36       	cpi	r24, 0x6C	; 108
    26fe:	21 f4       	brne	.+8      	; 0x2708 <vfprintf+0xe2>
    2700:	83 2d       	mov	r24, r3
    2702:	80 68       	ori	r24, 0x80	; 128
    2704:	38 2e       	mov	r3, r24
    2706:	02 c0       	rjmp	.+4      	; 0x270c <vfprintf+0xe6>
    2708:	88 36       	cpi	r24, 0x68	; 104
    270a:	41 f4       	brne	.+16     	; 0x271c <vfprintf+0xf6>
    270c:	f7 01       	movw	r30, r14
    270e:	93 fd       	sbrc	r25, 3
    2710:	85 91       	lpm	r24, Z+
    2712:	93 ff       	sbrs	r25, 3
    2714:	81 91       	ld	r24, Z+
    2716:	7f 01       	movw	r14, r30
    2718:	81 11       	cpse	r24, r1
    271a:	b3 cf       	rjmp	.-154    	; 0x2682 <vfprintf+0x5c>
    271c:	98 2f       	mov	r25, r24
    271e:	9f 7d       	andi	r25, 0xDF	; 223
    2720:	95 54       	subi	r25, 0x45	; 69
    2722:	93 30       	cpi	r25, 0x03	; 3
    2724:	28 f4       	brcc	.+10     	; 0x2730 <vfprintf+0x10a>
    2726:	0c 5f       	subi	r16, 0xFC	; 252
    2728:	1f 4f       	sbci	r17, 0xFF	; 255
    272a:	9f e3       	ldi	r25, 0x3F	; 63
    272c:	99 83       	std	Y+1, r25	; 0x01
    272e:	0d c0       	rjmp	.+26     	; 0x274a <vfprintf+0x124>
    2730:	83 36       	cpi	r24, 0x63	; 99
    2732:	31 f0       	breq	.+12     	; 0x2740 <vfprintf+0x11a>
    2734:	83 37       	cpi	r24, 0x73	; 115
    2736:	71 f0       	breq	.+28     	; 0x2754 <vfprintf+0x12e>
    2738:	83 35       	cpi	r24, 0x53	; 83
    273a:	09 f0       	breq	.+2      	; 0x273e <vfprintf+0x118>
    273c:	59 c0       	rjmp	.+178    	; 0x27f0 <vfprintf+0x1ca>
    273e:	21 c0       	rjmp	.+66     	; 0x2782 <vfprintf+0x15c>
    2740:	f8 01       	movw	r30, r16
    2742:	80 81       	ld	r24, Z
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	0e 5f       	subi	r16, 0xFE	; 254
    2748:	1f 4f       	sbci	r17, 0xFF	; 255
    274a:	88 24       	eor	r8, r8
    274c:	83 94       	inc	r8
    274e:	91 2c       	mov	r9, r1
    2750:	53 01       	movw	r10, r6
    2752:	13 c0       	rjmp	.+38     	; 0x277a <vfprintf+0x154>
    2754:	28 01       	movw	r4, r16
    2756:	f2 e0       	ldi	r31, 0x02	; 2
    2758:	4f 0e       	add	r4, r31
    275a:	51 1c       	adc	r5, r1
    275c:	f8 01       	movw	r30, r16
    275e:	a0 80       	ld	r10, Z
    2760:	b1 80       	ldd	r11, Z+1	; 0x01
    2762:	36 fe       	sbrs	r3, 6
    2764:	03 c0       	rjmp	.+6      	; 0x276c <vfprintf+0x146>
    2766:	69 2d       	mov	r22, r9
    2768:	70 e0       	ldi	r23, 0x00	; 0
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <vfprintf+0x14a>
    276c:	6f ef       	ldi	r22, 0xFF	; 255
    276e:	7f ef       	ldi	r23, 0xFF	; 255
    2770:	c5 01       	movw	r24, r10
    2772:	0e 94 02 15 	call	0x2a04	; 0x2a04 <strnlen>
    2776:	4c 01       	movw	r8, r24
    2778:	82 01       	movw	r16, r4
    277a:	f3 2d       	mov	r31, r3
    277c:	ff 77       	andi	r31, 0x7F	; 127
    277e:	3f 2e       	mov	r3, r31
    2780:	16 c0       	rjmp	.+44     	; 0x27ae <vfprintf+0x188>
    2782:	28 01       	movw	r4, r16
    2784:	22 e0       	ldi	r18, 0x02	; 2
    2786:	42 0e       	add	r4, r18
    2788:	51 1c       	adc	r5, r1
    278a:	f8 01       	movw	r30, r16
    278c:	a0 80       	ld	r10, Z
    278e:	b1 80       	ldd	r11, Z+1	; 0x01
    2790:	36 fe       	sbrs	r3, 6
    2792:	03 c0       	rjmp	.+6      	; 0x279a <vfprintf+0x174>
    2794:	69 2d       	mov	r22, r9
    2796:	70 e0       	ldi	r23, 0x00	; 0
    2798:	02 c0       	rjmp	.+4      	; 0x279e <vfprintf+0x178>
    279a:	6f ef       	ldi	r22, 0xFF	; 255
    279c:	7f ef       	ldi	r23, 0xFF	; 255
    279e:	c5 01       	movw	r24, r10
    27a0:	0e 94 f7 14 	call	0x29ee	; 0x29ee <strnlen_P>
    27a4:	4c 01       	movw	r8, r24
    27a6:	f3 2d       	mov	r31, r3
    27a8:	f0 68       	ori	r31, 0x80	; 128
    27aa:	3f 2e       	mov	r3, r31
    27ac:	82 01       	movw	r16, r4
    27ae:	33 fc       	sbrc	r3, 3
    27b0:	1b c0       	rjmp	.+54     	; 0x27e8 <vfprintf+0x1c2>
    27b2:	82 2d       	mov	r24, r2
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	88 16       	cp	r8, r24
    27b8:	99 06       	cpc	r9, r25
    27ba:	b0 f4       	brcc	.+44     	; 0x27e8 <vfprintf+0x1c2>
    27bc:	b6 01       	movw	r22, r12
    27be:	80 e2       	ldi	r24, 0x20	; 32
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <fputc>
    27c6:	2a 94       	dec	r2
    27c8:	f4 cf       	rjmp	.-24     	; 0x27b2 <vfprintf+0x18c>
    27ca:	f5 01       	movw	r30, r10
    27cc:	37 fc       	sbrc	r3, 7
    27ce:	85 91       	lpm	r24, Z+
    27d0:	37 fe       	sbrs	r3, 7
    27d2:	81 91       	ld	r24, Z+
    27d4:	5f 01       	movw	r10, r30
    27d6:	b6 01       	movw	r22, r12
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <fputc>
    27de:	21 10       	cpse	r2, r1
    27e0:	2a 94       	dec	r2
    27e2:	21 e0       	ldi	r18, 0x01	; 1
    27e4:	82 1a       	sub	r8, r18
    27e6:	91 08       	sbc	r9, r1
    27e8:	81 14       	cp	r8, r1
    27ea:	91 04       	cpc	r9, r1
    27ec:	71 f7       	brne	.-36     	; 0x27ca <vfprintf+0x1a4>
    27ee:	e8 c0       	rjmp	.+464    	; 0x29c0 <vfprintf+0x39a>
    27f0:	84 36       	cpi	r24, 0x64	; 100
    27f2:	11 f0       	breq	.+4      	; 0x27f8 <vfprintf+0x1d2>
    27f4:	89 36       	cpi	r24, 0x69	; 105
    27f6:	41 f5       	brne	.+80     	; 0x2848 <vfprintf+0x222>
    27f8:	f8 01       	movw	r30, r16
    27fa:	37 fe       	sbrs	r3, 7
    27fc:	07 c0       	rjmp	.+14     	; 0x280c <vfprintf+0x1e6>
    27fe:	60 81       	ld	r22, Z
    2800:	71 81       	ldd	r23, Z+1	; 0x01
    2802:	82 81       	ldd	r24, Z+2	; 0x02
    2804:	93 81       	ldd	r25, Z+3	; 0x03
    2806:	0c 5f       	subi	r16, 0xFC	; 252
    2808:	1f 4f       	sbci	r17, 0xFF	; 255
    280a:	08 c0       	rjmp	.+16     	; 0x281c <vfprintf+0x1f6>
    280c:	60 81       	ld	r22, Z
    280e:	71 81       	ldd	r23, Z+1	; 0x01
    2810:	07 2e       	mov	r0, r23
    2812:	00 0c       	add	r0, r0
    2814:	88 0b       	sbc	r24, r24
    2816:	99 0b       	sbc	r25, r25
    2818:	0e 5f       	subi	r16, 0xFE	; 254
    281a:	1f 4f       	sbci	r17, 0xFF	; 255
    281c:	f3 2d       	mov	r31, r3
    281e:	ff 76       	andi	r31, 0x6F	; 111
    2820:	3f 2e       	mov	r3, r31
    2822:	97 ff       	sbrs	r25, 7
    2824:	09 c0       	rjmp	.+18     	; 0x2838 <vfprintf+0x212>
    2826:	90 95       	com	r25
    2828:	80 95       	com	r24
    282a:	70 95       	com	r23
    282c:	61 95       	neg	r22
    282e:	7f 4f       	sbci	r23, 0xFF	; 255
    2830:	8f 4f       	sbci	r24, 0xFF	; 255
    2832:	9f 4f       	sbci	r25, 0xFF	; 255
    2834:	f0 68       	ori	r31, 0x80	; 128
    2836:	3f 2e       	mov	r3, r31
    2838:	2a e0       	ldi	r18, 0x0A	; 10
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	a3 01       	movw	r20, r6
    283e:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__ultoa_invert>
    2842:	88 2e       	mov	r8, r24
    2844:	86 18       	sub	r8, r6
    2846:	45 c0       	rjmp	.+138    	; 0x28d2 <vfprintf+0x2ac>
    2848:	85 37       	cpi	r24, 0x75	; 117
    284a:	31 f4       	brne	.+12     	; 0x2858 <vfprintf+0x232>
    284c:	23 2d       	mov	r18, r3
    284e:	2f 7e       	andi	r18, 0xEF	; 239
    2850:	b2 2e       	mov	r11, r18
    2852:	2a e0       	ldi	r18, 0x0A	; 10
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	25 c0       	rjmp	.+74     	; 0x28a2 <vfprintf+0x27c>
    2858:	93 2d       	mov	r25, r3
    285a:	99 7f       	andi	r25, 0xF9	; 249
    285c:	b9 2e       	mov	r11, r25
    285e:	8f 36       	cpi	r24, 0x6F	; 111
    2860:	c1 f0       	breq	.+48     	; 0x2892 <vfprintf+0x26c>
    2862:	18 f4       	brcc	.+6      	; 0x286a <vfprintf+0x244>
    2864:	88 35       	cpi	r24, 0x58	; 88
    2866:	79 f0       	breq	.+30     	; 0x2886 <vfprintf+0x260>
    2868:	b5 c0       	rjmp	.+362    	; 0x29d4 <vfprintf+0x3ae>
    286a:	80 37       	cpi	r24, 0x70	; 112
    286c:	19 f0       	breq	.+6      	; 0x2874 <vfprintf+0x24e>
    286e:	88 37       	cpi	r24, 0x78	; 120
    2870:	21 f0       	breq	.+8      	; 0x287a <vfprintf+0x254>
    2872:	b0 c0       	rjmp	.+352    	; 0x29d4 <vfprintf+0x3ae>
    2874:	e9 2f       	mov	r30, r25
    2876:	e0 61       	ori	r30, 0x10	; 16
    2878:	be 2e       	mov	r11, r30
    287a:	b4 fe       	sbrs	r11, 4
    287c:	0d c0       	rjmp	.+26     	; 0x2898 <vfprintf+0x272>
    287e:	fb 2d       	mov	r31, r11
    2880:	f4 60       	ori	r31, 0x04	; 4
    2882:	bf 2e       	mov	r11, r31
    2884:	09 c0       	rjmp	.+18     	; 0x2898 <vfprintf+0x272>
    2886:	34 fe       	sbrs	r3, 4
    2888:	0a c0       	rjmp	.+20     	; 0x289e <vfprintf+0x278>
    288a:	29 2f       	mov	r18, r25
    288c:	26 60       	ori	r18, 0x06	; 6
    288e:	b2 2e       	mov	r11, r18
    2890:	06 c0       	rjmp	.+12     	; 0x289e <vfprintf+0x278>
    2892:	28 e0       	ldi	r18, 0x08	; 8
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	05 c0       	rjmp	.+10     	; 0x28a2 <vfprintf+0x27c>
    2898:	20 e1       	ldi	r18, 0x10	; 16
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <vfprintf+0x27c>
    289e:	20 e1       	ldi	r18, 0x10	; 16
    28a0:	32 e0       	ldi	r19, 0x02	; 2
    28a2:	f8 01       	movw	r30, r16
    28a4:	b7 fe       	sbrs	r11, 7
    28a6:	07 c0       	rjmp	.+14     	; 0x28b6 <vfprintf+0x290>
    28a8:	60 81       	ld	r22, Z
    28aa:	71 81       	ldd	r23, Z+1	; 0x01
    28ac:	82 81       	ldd	r24, Z+2	; 0x02
    28ae:	93 81       	ldd	r25, Z+3	; 0x03
    28b0:	0c 5f       	subi	r16, 0xFC	; 252
    28b2:	1f 4f       	sbci	r17, 0xFF	; 255
    28b4:	06 c0       	rjmp	.+12     	; 0x28c2 <vfprintf+0x29c>
    28b6:	60 81       	ld	r22, Z
    28b8:	71 81       	ldd	r23, Z+1	; 0x01
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	0e 5f       	subi	r16, 0xFE	; 254
    28c0:	1f 4f       	sbci	r17, 0xFF	; 255
    28c2:	a3 01       	movw	r20, r6
    28c4:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__ultoa_invert>
    28c8:	88 2e       	mov	r8, r24
    28ca:	86 18       	sub	r8, r6
    28cc:	fb 2d       	mov	r31, r11
    28ce:	ff 77       	andi	r31, 0x7F	; 127
    28d0:	3f 2e       	mov	r3, r31
    28d2:	36 fe       	sbrs	r3, 6
    28d4:	0d c0       	rjmp	.+26     	; 0x28f0 <vfprintf+0x2ca>
    28d6:	23 2d       	mov	r18, r3
    28d8:	2e 7f       	andi	r18, 0xFE	; 254
    28da:	a2 2e       	mov	r10, r18
    28dc:	89 14       	cp	r8, r9
    28de:	58 f4       	brcc	.+22     	; 0x28f6 <vfprintf+0x2d0>
    28e0:	34 fe       	sbrs	r3, 4
    28e2:	0b c0       	rjmp	.+22     	; 0x28fa <vfprintf+0x2d4>
    28e4:	32 fc       	sbrc	r3, 2
    28e6:	09 c0       	rjmp	.+18     	; 0x28fa <vfprintf+0x2d4>
    28e8:	83 2d       	mov	r24, r3
    28ea:	8e 7e       	andi	r24, 0xEE	; 238
    28ec:	a8 2e       	mov	r10, r24
    28ee:	05 c0       	rjmp	.+10     	; 0x28fa <vfprintf+0x2d4>
    28f0:	b8 2c       	mov	r11, r8
    28f2:	a3 2c       	mov	r10, r3
    28f4:	03 c0       	rjmp	.+6      	; 0x28fc <vfprintf+0x2d6>
    28f6:	b8 2c       	mov	r11, r8
    28f8:	01 c0       	rjmp	.+2      	; 0x28fc <vfprintf+0x2d6>
    28fa:	b9 2c       	mov	r11, r9
    28fc:	a4 fe       	sbrs	r10, 4
    28fe:	0f c0       	rjmp	.+30     	; 0x291e <vfprintf+0x2f8>
    2900:	fe 01       	movw	r30, r28
    2902:	e8 0d       	add	r30, r8
    2904:	f1 1d       	adc	r31, r1
    2906:	80 81       	ld	r24, Z
    2908:	80 33       	cpi	r24, 0x30	; 48
    290a:	21 f4       	brne	.+8      	; 0x2914 <vfprintf+0x2ee>
    290c:	9a 2d       	mov	r25, r10
    290e:	99 7e       	andi	r25, 0xE9	; 233
    2910:	a9 2e       	mov	r10, r25
    2912:	09 c0       	rjmp	.+18     	; 0x2926 <vfprintf+0x300>
    2914:	a2 fe       	sbrs	r10, 2
    2916:	06 c0       	rjmp	.+12     	; 0x2924 <vfprintf+0x2fe>
    2918:	b3 94       	inc	r11
    291a:	b3 94       	inc	r11
    291c:	04 c0       	rjmp	.+8      	; 0x2926 <vfprintf+0x300>
    291e:	8a 2d       	mov	r24, r10
    2920:	86 78       	andi	r24, 0x86	; 134
    2922:	09 f0       	breq	.+2      	; 0x2926 <vfprintf+0x300>
    2924:	b3 94       	inc	r11
    2926:	a3 fc       	sbrc	r10, 3
    2928:	11 c0       	rjmp	.+34     	; 0x294c <vfprintf+0x326>
    292a:	a0 fe       	sbrs	r10, 0
    292c:	06 c0       	rjmp	.+12     	; 0x293a <vfprintf+0x314>
    292e:	b2 14       	cp	r11, r2
    2930:	88 f4       	brcc	.+34     	; 0x2954 <vfprintf+0x32e>
    2932:	28 0c       	add	r2, r8
    2934:	92 2c       	mov	r9, r2
    2936:	9b 18       	sub	r9, r11
    2938:	0e c0       	rjmp	.+28     	; 0x2956 <vfprintf+0x330>
    293a:	b2 14       	cp	r11, r2
    293c:	60 f4       	brcc	.+24     	; 0x2956 <vfprintf+0x330>
    293e:	b6 01       	movw	r22, r12
    2940:	80 e2       	ldi	r24, 0x20	; 32
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <fputc>
    2948:	b3 94       	inc	r11
    294a:	f7 cf       	rjmp	.-18     	; 0x293a <vfprintf+0x314>
    294c:	b2 14       	cp	r11, r2
    294e:	18 f4       	brcc	.+6      	; 0x2956 <vfprintf+0x330>
    2950:	2b 18       	sub	r2, r11
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <vfprintf+0x332>
    2954:	98 2c       	mov	r9, r8
    2956:	21 2c       	mov	r2, r1
    2958:	a4 fe       	sbrs	r10, 4
    295a:	10 c0       	rjmp	.+32     	; 0x297c <vfprintf+0x356>
    295c:	b6 01       	movw	r22, r12
    295e:	80 e3       	ldi	r24, 0x30	; 48
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <fputc>
    2966:	a2 fe       	sbrs	r10, 2
    2968:	17 c0       	rjmp	.+46     	; 0x2998 <vfprintf+0x372>
    296a:	a1 fc       	sbrc	r10, 1
    296c:	03 c0       	rjmp	.+6      	; 0x2974 <vfprintf+0x34e>
    296e:	88 e7       	ldi	r24, 0x78	; 120
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <vfprintf+0x352>
    2974:	88 e5       	ldi	r24, 0x58	; 88
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	b6 01       	movw	r22, r12
    297a:	0c c0       	rjmp	.+24     	; 0x2994 <vfprintf+0x36e>
    297c:	8a 2d       	mov	r24, r10
    297e:	86 78       	andi	r24, 0x86	; 134
    2980:	59 f0       	breq	.+22     	; 0x2998 <vfprintf+0x372>
    2982:	a1 fe       	sbrs	r10, 1
    2984:	02 c0       	rjmp	.+4      	; 0x298a <vfprintf+0x364>
    2986:	8b e2       	ldi	r24, 0x2B	; 43
    2988:	01 c0       	rjmp	.+2      	; 0x298c <vfprintf+0x366>
    298a:	80 e2       	ldi	r24, 0x20	; 32
    298c:	a7 fc       	sbrc	r10, 7
    298e:	8d e2       	ldi	r24, 0x2D	; 45
    2990:	b6 01       	movw	r22, r12
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <fputc>
    2998:	89 14       	cp	r8, r9
    299a:	38 f4       	brcc	.+14     	; 0x29aa <vfprintf+0x384>
    299c:	b6 01       	movw	r22, r12
    299e:	80 e3       	ldi	r24, 0x30	; 48
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <fputc>
    29a6:	9a 94       	dec	r9
    29a8:	f7 cf       	rjmp	.-18     	; 0x2998 <vfprintf+0x372>
    29aa:	8a 94       	dec	r8
    29ac:	f3 01       	movw	r30, r6
    29ae:	e8 0d       	add	r30, r8
    29b0:	f1 1d       	adc	r31, r1
    29b2:	80 81       	ld	r24, Z
    29b4:	b6 01       	movw	r22, r12
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <fputc>
    29bc:	81 10       	cpse	r8, r1
    29be:	f5 cf       	rjmp	.-22     	; 0x29aa <vfprintf+0x384>
    29c0:	22 20       	and	r2, r2
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <vfprintf+0x3a0>
    29c4:	42 ce       	rjmp	.-892    	; 0x264a <vfprintf+0x24>
    29c6:	b6 01       	movw	r22, r12
    29c8:	80 e2       	ldi	r24, 0x20	; 32
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <fputc>
    29d0:	2a 94       	dec	r2
    29d2:	f6 cf       	rjmp	.-20     	; 0x29c0 <vfprintf+0x39a>
    29d4:	f6 01       	movw	r30, r12
    29d6:	86 81       	ldd	r24, Z+6	; 0x06
    29d8:	97 81       	ldd	r25, Z+7	; 0x07
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <vfprintf+0x3ba>
    29dc:	8f ef       	ldi	r24, 0xFF	; 255
    29de:	9f ef       	ldi	r25, 0xFF	; 255
    29e0:	2b 96       	adiw	r28, 0x0b	; 11
    29e2:	e2 e1       	ldi	r30, 0x12	; 18
    29e4:	0c 94 e1 15 	jmp	0x2bc2	; 0x2bc2 <__epilogue_restores__>

000029e8 <__ctype_isfalse>:
    29e8:	99 27       	eor	r25, r25
    29ea:	88 27       	eor	r24, r24

000029ec <__ctype_istrue>:
    29ec:	08 95       	ret

000029ee <strnlen_P>:
    29ee:	fc 01       	movw	r30, r24
    29f0:	05 90       	lpm	r0, Z+
    29f2:	61 50       	subi	r22, 0x01	; 1
    29f4:	70 40       	sbci	r23, 0x00	; 0
    29f6:	01 10       	cpse	r0, r1
    29f8:	d8 f7       	brcc	.-10     	; 0x29f0 <strnlen_P+0x2>
    29fa:	80 95       	com	r24
    29fc:	90 95       	com	r25
    29fe:	8e 0f       	add	r24, r30
    2a00:	9f 1f       	adc	r25, r31
    2a02:	08 95       	ret

00002a04 <strnlen>:
    2a04:	fc 01       	movw	r30, r24
    2a06:	61 50       	subi	r22, 0x01	; 1
    2a08:	70 40       	sbci	r23, 0x00	; 0
    2a0a:	01 90       	ld	r0, Z+
    2a0c:	01 10       	cpse	r0, r1
    2a0e:	d8 f7       	brcc	.-10     	; 0x2a06 <strnlen+0x2>
    2a10:	80 95       	com	r24
    2a12:	90 95       	com	r25
    2a14:	8e 0f       	add	r24, r30
    2a16:	9f 1f       	adc	r25, r31
    2a18:	08 95       	ret

00002a1a <fputc>:
    2a1a:	0f 93       	push	r16
    2a1c:	1f 93       	push	r17
    2a1e:	cf 93       	push	r28
    2a20:	df 93       	push	r29
    2a22:	fb 01       	movw	r30, r22
    2a24:	23 81       	ldd	r18, Z+3	; 0x03
    2a26:	21 fd       	sbrc	r18, 1
    2a28:	03 c0       	rjmp	.+6      	; 0x2a30 <fputc+0x16>
    2a2a:	8f ef       	ldi	r24, 0xFF	; 255
    2a2c:	9f ef       	ldi	r25, 0xFF	; 255
    2a2e:	2c c0       	rjmp	.+88     	; 0x2a88 <fputc+0x6e>
    2a30:	22 ff       	sbrs	r18, 2
    2a32:	16 c0       	rjmp	.+44     	; 0x2a60 <fputc+0x46>
    2a34:	46 81       	ldd	r20, Z+6	; 0x06
    2a36:	57 81       	ldd	r21, Z+7	; 0x07
    2a38:	24 81       	ldd	r18, Z+4	; 0x04
    2a3a:	35 81       	ldd	r19, Z+5	; 0x05
    2a3c:	42 17       	cp	r20, r18
    2a3e:	53 07       	cpc	r21, r19
    2a40:	44 f4       	brge	.+16     	; 0x2a52 <fputc+0x38>
    2a42:	a0 81       	ld	r26, Z
    2a44:	b1 81       	ldd	r27, Z+1	; 0x01
    2a46:	9d 01       	movw	r18, r26
    2a48:	2f 5f       	subi	r18, 0xFF	; 255
    2a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a4c:	20 83       	st	Z, r18
    2a4e:	31 83       	std	Z+1, r19	; 0x01
    2a50:	8c 93       	st	X, r24
    2a52:	26 81       	ldd	r18, Z+6	; 0x06
    2a54:	37 81       	ldd	r19, Z+7	; 0x07
    2a56:	2f 5f       	subi	r18, 0xFF	; 255
    2a58:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5a:	26 83       	std	Z+6, r18	; 0x06
    2a5c:	37 83       	std	Z+7, r19	; 0x07
    2a5e:	14 c0       	rjmp	.+40     	; 0x2a88 <fputc+0x6e>
    2a60:	8b 01       	movw	r16, r22
    2a62:	ec 01       	movw	r28, r24
    2a64:	fb 01       	movw	r30, r22
    2a66:	00 84       	ldd	r0, Z+8	; 0x08
    2a68:	f1 85       	ldd	r31, Z+9	; 0x09
    2a6a:	e0 2d       	mov	r30, r0
    2a6c:	09 95       	icall
    2a6e:	89 2b       	or	r24, r25
    2a70:	e1 f6       	brne	.-72     	; 0x2a2a <fputc+0x10>
    2a72:	d8 01       	movw	r26, r16
    2a74:	16 96       	adiw	r26, 0x06	; 6
    2a76:	8d 91       	ld	r24, X+
    2a78:	9c 91       	ld	r25, X
    2a7a:	17 97       	sbiw	r26, 0x07	; 7
    2a7c:	01 96       	adiw	r24, 0x01	; 1
    2a7e:	16 96       	adiw	r26, 0x06	; 6
    2a80:	8d 93       	st	X+, r24
    2a82:	9c 93       	st	X, r25
    2a84:	17 97       	sbiw	r26, 0x07	; 7
    2a86:	ce 01       	movw	r24, r28
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	1f 91       	pop	r17
    2a8e:	0f 91       	pop	r16
    2a90:	08 95       	ret

00002a92 <__ultoa_invert>:
    2a92:	fa 01       	movw	r30, r20
    2a94:	aa 27       	eor	r26, r26
    2a96:	28 30       	cpi	r18, 0x08	; 8
    2a98:	51 f1       	breq	.+84     	; 0x2aee <__ultoa_invert+0x5c>
    2a9a:	20 31       	cpi	r18, 0x10	; 16
    2a9c:	81 f1       	breq	.+96     	; 0x2afe <__ultoa_invert+0x6c>
    2a9e:	e8 94       	clt
    2aa0:	6f 93       	push	r22
    2aa2:	6e 7f       	andi	r22, 0xFE	; 254
    2aa4:	6e 5f       	subi	r22, 0xFE	; 254
    2aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    2aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    2aac:	af 4f       	sbci	r26, 0xFF	; 255
    2aae:	b1 e0       	ldi	r27, 0x01	; 1
    2ab0:	3e d0       	rcall	.+124    	; 0x2b2e <__ultoa_invert+0x9c>
    2ab2:	b4 e0       	ldi	r27, 0x04	; 4
    2ab4:	3c d0       	rcall	.+120    	; 0x2b2e <__ultoa_invert+0x9c>
    2ab6:	67 0f       	add	r22, r23
    2ab8:	78 1f       	adc	r23, r24
    2aba:	89 1f       	adc	r24, r25
    2abc:	9a 1f       	adc	r25, r26
    2abe:	a1 1d       	adc	r26, r1
    2ac0:	68 0f       	add	r22, r24
    2ac2:	79 1f       	adc	r23, r25
    2ac4:	8a 1f       	adc	r24, r26
    2ac6:	91 1d       	adc	r25, r1
    2ac8:	a1 1d       	adc	r26, r1
    2aca:	6a 0f       	add	r22, r26
    2acc:	71 1d       	adc	r23, r1
    2ace:	81 1d       	adc	r24, r1
    2ad0:	91 1d       	adc	r25, r1
    2ad2:	a1 1d       	adc	r26, r1
    2ad4:	20 d0       	rcall	.+64     	; 0x2b16 <__ultoa_invert+0x84>
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <__ultoa_invert+0x48>
    2ad8:	68 94       	set
    2ada:	3f 91       	pop	r19
    2adc:	2a e0       	ldi	r18, 0x0A	; 10
    2ade:	26 9f       	mul	r18, r22
    2ae0:	11 24       	eor	r1, r1
    2ae2:	30 19       	sub	r19, r0
    2ae4:	30 5d       	subi	r19, 0xD0	; 208
    2ae6:	31 93       	st	Z+, r19
    2ae8:	de f6       	brtc	.-74     	; 0x2aa0 <__ultoa_invert+0xe>
    2aea:	cf 01       	movw	r24, r30
    2aec:	08 95       	ret
    2aee:	46 2f       	mov	r20, r22
    2af0:	47 70       	andi	r20, 0x07	; 7
    2af2:	40 5d       	subi	r20, 0xD0	; 208
    2af4:	41 93       	st	Z+, r20
    2af6:	b3 e0       	ldi	r27, 0x03	; 3
    2af8:	0f d0       	rcall	.+30     	; 0x2b18 <__ultoa_invert+0x86>
    2afa:	c9 f7       	brne	.-14     	; 0x2aee <__ultoa_invert+0x5c>
    2afc:	f6 cf       	rjmp	.-20     	; 0x2aea <__ultoa_invert+0x58>
    2afe:	46 2f       	mov	r20, r22
    2b00:	4f 70       	andi	r20, 0x0F	; 15
    2b02:	40 5d       	subi	r20, 0xD0	; 208
    2b04:	4a 33       	cpi	r20, 0x3A	; 58
    2b06:	18 f0       	brcs	.+6      	; 0x2b0e <__ultoa_invert+0x7c>
    2b08:	49 5d       	subi	r20, 0xD9	; 217
    2b0a:	31 fd       	sbrc	r19, 1
    2b0c:	40 52       	subi	r20, 0x20	; 32
    2b0e:	41 93       	st	Z+, r20
    2b10:	02 d0       	rcall	.+4      	; 0x2b16 <__ultoa_invert+0x84>
    2b12:	a9 f7       	brne	.-22     	; 0x2afe <__ultoa_invert+0x6c>
    2b14:	ea cf       	rjmp	.-44     	; 0x2aea <__ultoa_invert+0x58>
    2b16:	b4 e0       	ldi	r27, 0x04	; 4
    2b18:	a6 95       	lsr	r26
    2b1a:	97 95       	ror	r25
    2b1c:	87 95       	ror	r24
    2b1e:	77 95       	ror	r23
    2b20:	67 95       	ror	r22
    2b22:	ba 95       	dec	r27
    2b24:	c9 f7       	brne	.-14     	; 0x2b18 <__ultoa_invert+0x86>
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	61 05       	cpc	r22, r1
    2b2a:	71 05       	cpc	r23, r1
    2b2c:	08 95       	ret
    2b2e:	9b 01       	movw	r18, r22
    2b30:	ac 01       	movw	r20, r24
    2b32:	0a 2e       	mov	r0, r26
    2b34:	06 94       	lsr	r0
    2b36:	57 95       	ror	r21
    2b38:	47 95       	ror	r20
    2b3a:	37 95       	ror	r19
    2b3c:	27 95       	ror	r18
    2b3e:	ba 95       	dec	r27
    2b40:	c9 f7       	brne	.-14     	; 0x2b34 <__ultoa_invert+0xa2>
    2b42:	62 0f       	add	r22, r18
    2b44:	73 1f       	adc	r23, r19
    2b46:	84 1f       	adc	r24, r20
    2b48:	95 1f       	adc	r25, r21
    2b4a:	a0 1d       	adc	r26, r0
    2b4c:	08 95       	ret

00002b4e <ccp_write_io>:
    2b4e:	dc 01       	movw	r26, r24
    2b50:	28 ed       	ldi	r18, 0xD8	; 216
    2b52:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f0034>
    2b56:	6c 93       	st	X, r22
    2b58:	08 95       	ret

00002b5a <__mulsi3>:
    2b5a:	db 01       	movw	r26, r22
    2b5c:	8f 93       	push	r24
    2b5e:	9f 93       	push	r25
    2b60:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__muluhisi3>
    2b64:	bf 91       	pop	r27
    2b66:	af 91       	pop	r26
    2b68:	a2 9f       	mul	r26, r18
    2b6a:	80 0d       	add	r24, r0
    2b6c:	91 1d       	adc	r25, r1
    2b6e:	a3 9f       	mul	r26, r19
    2b70:	90 0d       	add	r25, r0
    2b72:	b2 9f       	mul	r27, r18
    2b74:	90 0d       	add	r25, r0
    2b76:	11 24       	eor	r1, r1
    2b78:	08 95       	ret

00002b7a <__muluhisi3>:
    2b7a:	0e 94 20 11 	call	0x2240	; 0x2240 <__umulhisi3>
    2b7e:	a5 9f       	mul	r26, r21
    2b80:	90 0d       	add	r25, r0
    2b82:	b4 9f       	mul	r27, r20
    2b84:	90 0d       	add	r25, r0
    2b86:	a4 9f       	mul	r26, r20
    2b88:	80 0d       	add	r24, r0
    2b8a:	91 1d       	adc	r25, r1
    2b8c:	11 24       	eor	r1, r1
    2b8e:	08 95       	ret

00002b90 <__prologue_saves__>:
    2b90:	2f 92       	push	r2
    2b92:	3f 92       	push	r3
    2b94:	4f 92       	push	r4
    2b96:	5f 92       	push	r5
    2b98:	6f 92       	push	r6
    2b9a:	7f 92       	push	r7
    2b9c:	8f 92       	push	r8
    2b9e:	9f 92       	push	r9
    2ba0:	af 92       	push	r10
    2ba2:	bf 92       	push	r11
    2ba4:	cf 92       	push	r12
    2ba6:	df 92       	push	r13
    2ba8:	ef 92       	push	r14
    2baa:	ff 92       	push	r15
    2bac:	0f 93       	push	r16
    2bae:	1f 93       	push	r17
    2bb0:	cf 93       	push	r28
    2bb2:	df 93       	push	r29
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62
    2bb8:	ca 1b       	sub	r28, r26
    2bba:	db 0b       	sbc	r29, r27
    2bbc:	cd bf       	out	0x3d, r28	; 61
    2bbe:	de bf       	out	0x3e, r29	; 62
    2bc0:	09 94       	ijmp

00002bc2 <__epilogue_restores__>:
    2bc2:	2a 88       	ldd	r2, Y+18	; 0x12
    2bc4:	39 88       	ldd	r3, Y+17	; 0x11
    2bc6:	48 88       	ldd	r4, Y+16	; 0x10
    2bc8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bca:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bcc:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bce:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bd0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bd2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bd4:	b9 84       	ldd	r11, Y+9	; 0x09
    2bd6:	c8 84       	ldd	r12, Y+8	; 0x08
    2bd8:	df 80       	ldd	r13, Y+7	; 0x07
    2bda:	ee 80       	ldd	r14, Y+6	; 0x06
    2bdc:	fd 80       	ldd	r15, Y+5	; 0x05
    2bde:	0c 81       	ldd	r16, Y+4	; 0x04
    2be0:	1b 81       	ldd	r17, Y+3	; 0x03
    2be2:	aa 81       	ldd	r26, Y+2	; 0x02
    2be4:	b9 81       	ldd	r27, Y+1	; 0x01
    2be6:	ce 0f       	add	r28, r30
    2be8:	d1 1d       	adc	r29, r1
    2bea:	cd bf       	out	0x3d, r28	; 61
    2bec:	de bf       	out	0x3e, r29	; 62
    2bee:	ed 01       	movw	r28, r26
    2bf0:	08 95       	ret

00002bf2 <_exit>:
    2bf2:	f8 94       	cli

00002bf4 <__stop_program>:
    2bf4:	ff cf       	rjmp	.-2      	; 0x2bf4 <__stop_program>
